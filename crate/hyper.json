{"root":"0:0:2408","crate_version":"1.3.1","includes_private":false,"index":{"2:13395:29500":{"id":"2:13395:29500","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:40283"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[525,0],"end":[529,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10382:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:145:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2710-0:487:3398":{"id":"b:2:2710-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2712:3554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13277:3063":{"id":"2:13277:3063","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[224,0],"end":[241,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:381:198","0:382:1325"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5711:27750":{"id":"5:5711:27750","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13393:27753"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13682:198":{"id":"2:13682:198","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"5:5946:1794":{"id":"5:5946:1794","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:2390":{"id":"0:294:2390","crate_id":0,"name":"Response","span":{"filename":"src/service/service.rs","begin":[22,4],"end":[22,18]},"visibility":"default","docs":"Responses given by the service.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"b:2:13680-0:487:3398":{"id":"b:2:13680-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"2:44837:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:13682:198","2:13683:163","2:13684:962"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"F"}}}},"0:236:3099":{"id":"0:236:3099","crate_id":0,"name":"Timer","span":{"filename":"src/rt/timer.rs","begin":[70,0],"end":[81,1]},"visibility":"public","docs":"A timer which provides timer-like functions.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:237:3267","0:238:3270","0:239:3273"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:132:2918":{"id":"0:132:2918","crate_id":0,"name":"is_timeout","span":{"filename":"src/error.rs","begin":[241,4],"end":[243,5]},"visibility":"public","docs":"Returns true if the error was caused by a timeout.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13375:28342":{"id":"2:13375:28342","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2998-0:183:3097":{"id":"b:2:2998-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2998-0:119:137":{"id":"b:2:2998-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3001:137":{"id":"2:3001:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32309:3613","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2989:838":{"id":"2:2989:838","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2640":{"id":"0:61:2640","crate_id":0,"name":"poll_frame","span":{"filename":"src/body/incoming.rs","begin":[192,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Frame","id":"24:89:2559","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"24:42:2558","args":null}}}}],"bindings":[]}}}}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"24:42:2558","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2987-0:183:3097":{"id":"b:2:2987-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42247:3931-0:469:2793":{"id":"a:2:42247:3931-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3931","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2987-0:469:2793":{"id":"b:2:2987-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2993-0:119:137":{"id":"b:2:2993-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/rt/io.rs","begin":[351,0],"end":[353,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Write","id":"0:175:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"Write","id":"0:175:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"items":["0:482:2810","0:483:2811","0:484:2816","0:485:2814","0:486:2815"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:2815":{"id":"0:374:2815","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/upgrade.rs","begin":[196,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:3134":{"id":"0:288:3134","crate_id":0,"name":"Sealed","span":{"filename":"src/service/http.rs","begin":[51,4],"end":[51,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:260:2401":{"id":"0:260:2401","crate_id":0,"name":"service","span":{"filename":"src/service/mod.rs","begin":[1,0],"end":[30,31]},"visibility":"public","docs":"Asynchronous Services\n\nA [`Service`] is a trait representing an asynchronous\nfunction of a request to a response. It's similar to\n`async fn(Request) -> Result<Response, Error>`.\n\nThe argument and return value isn't strictly required to be for HTTP.\nTherefore, hyper uses several \"trait aliases\" to reduce clutter around\nbounds. These are:\n\n- `HttpService`: This is blanketly implemented for all types that\n  implement `Service<http::Request<B1>, Response = http::Response<B2>>`.\n\n# HttpService\n\nIn hyper, especially in the server setting, a `Service` is usually bound\nto a single connection. It defines how to respond to **all** requests that\nconnection will receive.\n\nThe helper [`service_fn`] should be sufficient for most cases, but\nif you need to implement `Service` for a type manually, you can follow the example\nin `service_struct_impl.rs`.","links":{"`service_fn`":"0:308:3302","`Service`":"0:292:2886"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:338-0:269:3301","0:339-0:292:2886","0:340-0:308:3302"],"is_stripped":false}}},"0:38-0:50:2562":{"id":"0:38-0:50:2562","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[27,0],"end":[27,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::incoming::Incoming","name":"Incoming","id":"0:50:2562","glob":false}}},"a:2:42247:3931-0:487:3398":{"id":"a:2:42247:3931-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3931","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:790-0:487:3398":{"id":"b:5:790-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:786:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:792:4043","5:793:4044","5:794:4045"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32385:236-0:491:3402":{"id":"a:2:32385:236-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2987-0:50:2562":{"id":"b:2:2987-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42247:3931-0:491:3402":{"id":"a:2:42247:3931-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42247:3931","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3931","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:10-20:2731:2392":{"id":"0:10-20:2731:2392","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[96,69],"end":[96,72]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::http::Uri","name":"Uri","id":"20:2731:2392","glob":false}}},"2:13352:34965":{"id":"2:13352:34965","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12952:3892","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatch_indices":"2:13355:34966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44184:6941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:29496":{"id":"2:13390:29496","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40054:14960","Self::is_ascii":"2:13389:27747"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40054:14960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32385:236-0:469:2793":{"id":"a:2:32385:236-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3206:246-0:119:137":{"id":"a:2:3206:246-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5693:3640":{"id":"5:5693:3640","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:34959":{"id":"2:13283:34959","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12361:1734","str::slice_mut_unchecked":"2:13284:34960","crate::ops::Index":"2:39699:3681"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32444:2801-0:119:137":{"id":"a:2:32444:2801-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:279:3306":{"id":"0:279:3306","crate_id":0,"name":"ResBody","span":{"filename":"src/service/http.rs","begin":[33,4],"end":[33,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"B2"}}}},"0:179:2816":{"id":"0:179:2816","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/rt/io.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":"Returns whether this writer has an efficient `poll_write_vectored`\nimplementation.\n\nThe default implementation returns `false`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:487:3398":{"id":"0:487:3398","crate_id":0,"name":"OnUpgrade","span":{"filename":"src/upgrade.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"A future for a possible HTTP upgrade.\n\nIf no upgrade was available, or it doesn't succeed, yields an `Error`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3206:246-0:487:3398","a:2:3241:3709-0:487:3398","a:2:32385:236-0:487:3398","a:2:32444:2801-0:487:3398","a:2:42248:3930-0:487:3398","a:2:42247:3931-0:487:3398","b:2:2710-0:487:3398","b:2:2998-0:487:3398","b:2:2993-0:487:3398","b:2:13680-0:487:3398","b:2:2987-0:487:3398","b:2:2983-0:487:3398","b:2:2713-0:487:3398","b:2:3822-0:487:3398","b:5:790-0:487:3398","0:489","0:380","0:384"]}}},"0:145:808":{"id":"0:145:808","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[526,4],"end":[528,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:475:2802":{"id":"0:475:2802","crate_id":0,"name":"poll_read","span":{"filename":"src/rt/io.rs","begin":[291,4],"end":[291,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32385:236-0:183:3097":{"id":"a:2:32385:236-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32385:236-0:361:3395":{"id":"a:2:32385:236-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2713-0:361:3395":{"id":"b:2:2713-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:27413"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13274:3216":{"id":"2:13274:3216","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:2815":{"id":"0:178:2815","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/rt/io.rs","begin":[75,4],"end":[78,42]},"visibility":"default","docs":"Attempts to shut down this writer.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"std::io::Error","id":"1:3067:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:32444:2801-0:183:3097":{"id":"a:2:32444:2801-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13268:34957":{"id":"2:13268:34957","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13266:34956"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13305:28340":{"id":"2:13305:28340","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:28329":{"id":"2:13322:28329","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12767:6762","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494:3410":{"id":"0:494:3410","crate_id":0,"name":"read_buf","span":{"filename":"src/upgrade.rs","begin":[94,4],"end":[94,23]},"visibility":"public","docs":"A buffer of bytes that have been read but not processed as HTTP.\n\nFor instance, if the `Connection` is used for an HTTP upgrade request,\nit is possible the server sent back the first bytes of the new protocol\nalong with the response upgrade.\n\nYou will want to check for any existing bytes if you plan to continue\ncommunicating on the IO object.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"bytes::Bytes","id":"22:399:2557","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:256-0:236:3099":{"id":"0:256-0:236:3099","crate_id":0,"name":null,"span":{"filename":"src/rt/mod.rs","begin":[15,29],"end":[15,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::timer::Timer","name":"Timer","id":"0:236:3099","glob":false}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/rt/io.rs","begin":[298,0],"end":[310,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3427:3144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:3414:124","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"0:173:2792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Read","id":"0:173:2792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::pin::Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"generic":"P"}}],"bindings":[]}}}},"items":["0:213:2802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6-20:2488:2388":{"id":"0:6-20:2488:2388","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[96,30],"end":[96,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::http::Method","name":"Method","id":"20:2488:2388","glob":false}}},"2:2712:3554":{"id":"2:2712:3554","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:2811":{"id":"0:180:2811","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/rt/io.rs","begin":[89,4],"end":[99,5]},"visibility":"default","docs":"Like `poll_write`, except that it writes from a slice of buffers.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"std::io::IoSlice","id":"1:8480:2813","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"std::io::Error","id":"1:3067:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365":{"id":"0:365","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[133,0],"end":[163,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:366:3424"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2998-0:361:3395":{"id":"b:2:2998-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2993-0:491:3402":{"id":"b:2:2993-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:225:2815":{"id":"0:225:2815","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/rt/io.rs","begin":[384,4],"end":[386,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2993-0:183:3097":{"id":"b:2:2993-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3241:3709-0:469:2793":{"id":"a:2:3241:3709-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:3709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:341:2402":{"id":"0:341:2402","crate_id":0,"name":"upgrade","span":{"filename":"src/upgrade.rs","begin":[1,0],"end":[407,1]},"visibility":"public","docs":"HTTP Upgrades\n\nThis module deals with managing [HTTP Upgrades][mdn] in hyper. Since\nseveral concepts in HTTP allow for first talking HTTP, and then converting\nto a different protocol, this module conflates them into a single API.\nThose include:\n\n- HTTP/1.1 Upgrades\n- HTTP `CONNECT`\n\nYou are responsible for any other pre-requisites to establish an upgrade,\nsuch as sending the appropriate headers, methods, and status codes. You can\nthen use [`on`][] to grab a `Future` which will resolve to the upgraded\nconnection object, or an error if the upgrade fails.\n\n[mdn]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism\n\n# Client\n\nSending an HTTP upgrade from the [`client`](super::client) involves setting\neither the appropriate method, if wanting to `CONNECT`, or headers such as\n`Upgrade` and `Connection`, on the `http::Request`. Once receiving the\n`http::Response` back, you must check for the specific information that the\nupgrade is agreed upon by the server (such as a `101` status code), and then\nget the `Future` from the `Response`.\n\n# Server\n\nReceiving upgrade requests in a server requires you to check the relevant\nheaders in a `Request`, and if an upgrade should be done, you then send the\ncorresponding headers in a response. To then wait for hyper to finish the\nupgrade, you call `on()` with the `Request`, and then can spawn a task\nawaiting it.\n\n# Example\n\nSee [this example][example] showing how upgrades work with both\nClients and Servers.\n\n[example]: https://github.com/hyperium/hyper/blob/master/examples/upgrades.rs","links":{"`on`":"0:363:1245"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:361:3395","0:487:3398","0:491:3402","0:363:1245"],"is_stripped":false}}},"2:13264:2804":{"id":"2:13264:2804","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:137":{"id":"0:60:137","crate_id":0,"name":"Error","span":{"filename":"src/body/incoming.rs","begin":[190,4],"end":[190,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:495":{"id":"0:495","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[81,9],"end":[81,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:497:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13401:34979":{"id":"2:13401:34979","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5012:34979"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44351:6850","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:487:3398":{"id":"b:2:2713-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:27413"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:203:2809":{"id":"0:203:2809","crate_id":0,"name":"advance","span":{"filename":"src/rt/io.rs","begin":[242,4],"end":[245,5]},"visibility":"public","docs":"Advance the `filled` cursor by `n` bytes.\n\n# Safety\n\nThe caller must take care that `n` more bytes have been initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:3267":{"id":"0:237:3267","crate_id":0,"name":"sleep","span":{"filename":"src/rt/timer.rs","begin":[72,4],"end":[72,63]},"visibility":"default","docs":"Return a future that resolves in `duration` time.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["duration",{"resolved_path":{"name":"Duration","id":"2:44685:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"5:303:2835","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Sleep","id":"0:240:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:296:150":{"id":"0:296:150","crate_id":0,"name":"Future","span":{"filename":"src/service/service.rs","begin":[28,4],"end":[28,70]},"visibility":"default","docs":"The future response value.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Response","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:292:2886","args":null}}}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:292:2886","args":null}}}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"0:280:137":{"id":"0:280:137","crate_id":0,"name":"Error","span":{"filename":"src/service/http.rs","begin":[35,4],"end":[35,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Service","id":"0:292:2886","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Request","id":"20:2567:2389","args":{"angle_bracketed":{"args":[{"type":{"generic":"B1"}}],"bindings":[]}}}}}],"bindings":[]}}}}}}}},"b:2:2987-0:487:3398":{"id":"b:2:2987-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:490:479":{"id":"0:490:479","crate_id":0,"name":"clone","span":{"filename":"src/upgrade.rs","begin":[72,9],"end":[72,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:2409":{"id":"2:13292:2409","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44020:2557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:28323":{"id":"2:13286:28323","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13285:28322","str::split_at_mut_checked":"2:13288:28327"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:477:2810":{"id":"0:477:2810","crate_id":0,"name":"poll_write","span":{"filename":"src/rt/io.rs","begin":[348,4],"end":[348,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13683:163":{"id":"2:13683:163","crate_id":2,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"F"}}}},"5:5692:35673":{"id":"5:5692:35673","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:2835","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:303:2835","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:3189":{"id":"0:192:3189","crate_id":0,"name":"filled","span":{"filename":"src/rt/io.rs","begin":[160,4],"end":[163,5]},"visibility":"public","docs":"Get a slice of the buffer that has been filled in with bytes.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42248:3930-0:50:2562":{"id":"a:2:42248:3930-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3930","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:281:150":{"id":"0:281:150","crate_id":0,"name":"Future","span":{"filename":"src/service/http.rs","begin":[36,4],"end":[36,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Service","id":"0:292:2886","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Request","id":"20:2567:2389","args":{"angle_bracketed":{"args":[{"type":{"generic":"B1"}}],"bindings":[]}}}}}],"bindings":[]}}}}}}}},"0:176:2810":{"id":"0:176:2810","crate_id":0,"name":"poll_write","span":{"filename":"src/rt/io.rs","begin":[59,4],"end":[63,45]},"visibility":"default","docs":"Attempt to write bytes from `buf` into the destination.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written)))`. If\nsuccessful, it must be guaranteed that `n <= buf.len()`. A return value\nof `0` means that the underlying object is no longer able to accept\nbytes, or that the provided buffer is empty.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via `cx.waker()`) to\nreceive a notification when the object becomes writable or is closed.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"std::io::Error","id":"1:3067:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2993-0:487:3398":{"id":"b:2:2993-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:486:2815":{"id":"0:486:2815","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/rt/io.rs","begin":[352,4],"end":[352,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:34956":{"id":"2:13266:34956","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:438":{"id":"0:297:438","crate_id":0,"name":"call","span":{"filename":"src/service/service.rs","begin":[39,4],"end":[39,49]},"visibility":"default","docs":"Process the request and return the response asynchronously.\n`call` takes `&self` instead of `mut &self` because:\n- It prepares the way for async fn,\n  since then the future only borrows `&self`, and thus a Service can concurrently handle\n  multiple outstanding requests at once.\n- It's clearer that Services can likely be cloned\n- To share state across clones, you generally need `Arc<Mutex<_>>`\n  That means you're not really using the `&mut self` and could do with a `&self`.\nThe discussion on this is here: <https://github.com/hyperium/hyper/issues/3040>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["req",{"generic":"Request"}]],"output":{"qualified_path":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:292:2886","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:130:2915":{"id":"0:130:2915","crate_id":0,"name":"is_incomplete_message","span":{"filename":"src/error.rs","begin":[217,4],"end":[223,5]},"visibility":"public","docs":"Returns true if the connection closed before a message could complete.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:808":{"id":"0:143:808","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[515,4],"end":[522,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2998-0:487:3398":{"id":"b:2:2998-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3824:1834":{"id":"2:3824:1834","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39868:3264","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13378:34974":{"id":"2:13378:34974","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/service/http.rs","begin":[27,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Service","id":"0:292:2886","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Request","id":"20:2567:2389","args":{"angle_bracketed":{"args":[{"type":{"generic":"B1"}}],"bindings":[]}}}}}],"bindings":[{"name":"Response","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"crate::Response","id":"20:2587:2390","args":{"angle_bracketed":{"args":[{"type":{"generic":"B2"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B2"},"bounds":[{"trait_bound":{"trait":{"name":"Body","id":"24:42:2558","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"0:292:2886","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"5:303:2835","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:3046:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HttpService","id":"0:269:3301","args":{"angle_bracketed":{"args":[{"type":{"generic":"B1"}}],"bindings":[]}}},"for":{"generic":"T"},"items":["0:279:3306","0:280:137","0:281:150"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[170,0],"end":[512,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:2902","0:126:2908","0:127:2910","0:128:2912","0:129:2752","0:130:2915","0:131:2719","0:132:2918"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2713-0:50:2562":{"id":"b:2:2713-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:27413"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3241:3709-0:487:3398":{"id":"a:2:3241:3709-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:3709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:253-0:175:2794":{"id":"0:253-0:175:2794","crate_id":0,"name":null,"span":{"filename":"src/rt/mod.rs","begin":[14,49],"end":[14,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::io::Write","name":"Write","id":"0:175:2794","glob":false}}},"2:13279:28299":{"id":"2:13279:28299","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:3173":{"id":"2:13311:3173","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42248:3930-0:183:3097":{"id":"a:2:42248:3930-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3930","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2998-0:469:2793":{"id":"b:2:2998-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:491:3402":{"id":"0:491:3402","crate_id":0,"name":"Parts","span":{"filename":"src/upgrade.rs","begin":[83,0],"end":[95,1]},"visibility":"public","docs":"The deconstructed parts of an [`Upgraded`] type.\n\nIncludes the original IO type, and a read buffer of bytes that the\nHTTP state machine may have already read before completing an upgrade.","links":{"`Upgraded`":"0:361:3395"},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:493:2786","0:494:3410"],"fields_stripped":false}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:3206:246-0:491:3402","a:2:3241:3709-0:491:3402","a:2:32385:236-0:491:3402","a:2:32444:2801-0:491:3402","a:2:42248:3930-0:491:3402","a:2:42247:3931-0:491:3402","b:2:2710-0:491:3402","b:2:2998-0:491:3402","b:2:2993-0:491:3402","b:2:2987-0:491:3402","b:2:2983-0:491:3402","b:2:2713-0:491:3402","b:2:3822-0:491:3402","0:495"]}}},"0:400:3417":{"id":"0:400:3417","crate_id":0,"name":"CanUpgrade","span":{"filename":"src/upgrade.rs","begin":[320,4],"end":[322,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:401:3419"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:31:2397":{"id":"0:31:2397","crate_id":0,"name":"body","span":{"filename":"src/body/mod.rs","begin":[1,0],"end":[46,1]},"visibility":"public","docs":"Streaming bodies for Requests and Responses\n\nFor both [Clients](crate::client) and [Servers](crate::server), requests and\nresponses use streaming bodies, instead of complete buffering. This\nallows applications to not use memory they don't need, and allows exerting\nback-pressure on connections by only reading when asked.\n\nThere are two pieces to this in hyper:\n\n- **The [`Body`] trait** describes all possible bodies.\n  hyper allows any body type that implements `Body`, allowing\n  applications to have fine-grained control over their streaming.\n- **The [`Incoming`] concrete type**, which is an implementation\n  of `Body`, and returned by hyper as a \"receive stream\" (so, for server\n  requests and client responses).\n\nThere are additional implementations available in [`http-body-util`][],\nsuch as a `Full` or `Empty` body.\n\n[`http-body-util`]: https://docs.rs/http-body-util","links":{"`Body`":"24:42:2558","`Incoming`":"0:50:2562"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:33-22:24:2556","0:34-22:399:2557","0:35-24:42:2558","0:36-24:89:2559","0:37-24:106:2560","0:38-0:50:2562"],"is_stripped":false}}},"b:2:3822-0:50:2562":{"id":"b:2:3822-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42248:3930-0:119:137":{"id":"a:2:42248:3930-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3930","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:131:2719":{"id":"0:131:2719","crate_id":0,"name":"is_body_write_aborted","span":{"filename":"src/error.rs","begin":[226,4],"end":[238,5]},"visibility":"public","docs":"Returns true if the body write was aborted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:482:2810":{"id":"0:482:2810","crate_id":0,"name":"poll_write","span":{"filename":"src/rt/io.rs","begin":[352,4],"end":[352,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/rt/io.rs","begin":[135,0],"end":[212,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'data","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'data"}],"bindings":[]}}}},"items":["0:190:1187","0:191:3196","0:192:3189","0:193:3199"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13301:33329":{"id":"2:13301:33329","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44326:6782","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:483:2811":{"id":"0:483:2811","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/rt/io.rs","begin":[352,4],"end":[352,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"std::io::IoSlice","id":"1:8480:2813","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:3273":{"id":"0:239:3273","crate_id":0,"name":"reset","span":{"filename":"src/rt/timer.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":"Reset a future to resolve at `new_deadline` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sleep",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"5:303:2835","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Sleep","id":"0:240:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}}}],"bindings":[]}}}}}}],["new_deadline",{"resolved_path":{"name":"Instant","id":"1:9424:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:491:3402":{"id":"b:2:2983-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2986:2723"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32385:236-0:119:137":{"id":"a:2:32385:236-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:792:4043":{"id":"5:792:4043","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:312:3356":{"id":"0:312:3356","crate_id":0,"name":"ServiceFn","span":{"filename":"src/service/util.rs","begin":[42,0],"end":[45,1]},"visibility":"public","docs":"Service returned by [`service_fn`]","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/rt/io.rs","begin":[294,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Read","id":"0:173:2792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Read","id":"0:173:2792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"items":["0:476:2802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:493:2786":{"id":"0:493:2786","crate_id":0,"name":"io","span":{"filename":"src/upgrade.rs","begin":[85,4],"end":[85,13]},"visibility":"public","docs":"The original IO object used before the upgrade.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"T"}}},"2:13285:28322":{"id":"2:13285:28322","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13287:28326","str::split_at_mut":"2:13286:28323"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:33323":{"id":"2:13293:33323","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13295:33321"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44308:6946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2562":{"id":"0:50:2562","crate_id":0,"name":"Incoming","span":{"filename":"src/body/incoming.rs","begin":[52,0],"end":[54,1]},"visibility":"public","docs":"A stream of `Bytes`, used when receiving bodies from the network.\n\nNote that Users should not instantiate this struct directly. When working with the hyper client,\n`Incoming` is returned to you in responses. Similarly, when operating with the hyper server,\nit is provided within requests.\n\n# Examples\n\n```rust,ignore\nasync fn echo(\n   req: Request<hyper::body::Incoming>,\n) -> Result<Response<BoxBody<Bytes, hyper::Error>>, hyper::Error> {\n   //Here, you can process `Incoming`\n}\n```","links":{},"attrs":["#[must_use = \"streams do nothing unless polled\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3206:246-0:50:2562","a:2:3241:3709-0:50:2562","a:2:32385:236-0:50:2562","a:2:32444:2801-0:50:2562","a:2:42248:3930-0:50:2562","a:2:42247:3931-0:50:2562","b:2:2710-0:50:2562","b:2:2998-0:50:2562","b:2:2993-0:50:2562","b:2:2987-0:50:2562","b:2:2983-0:50:2562","b:2:2713-0:50:2562","b:2:3822-0:50:2562","0:58","0:64"]}}},"b:2:2983-0:50:2562":{"id":"b:2:2983-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2986:2723"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13300:34961":{"id":"2:13300:34961","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44298:6945","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:3134":{"id":"0:248:3134","crate_id":0,"name":"Sealed","span":{"filename":"src/rt/timer.rs","begin":[126,4],"end":[126,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"b:2:3822-0:183:3097":{"id":"b:2:3822-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13281:3226":{"id":"2:13281:3226","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2639":{"id":"0:59:2639","crate_id":0,"name":"Data","span":{"filename":"src/body/incoming.rs","begin":[189,4],"end":[189,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Bytes","id":"22:399:2557","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:252-0:469:2793":{"id":"0:252-0:469:2793","crate_id":0,"name":null,"span":{"filename":"src/rt/mod.rs","begin":[14,34],"end":[14,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::io::ReadBufCursor","name":"ReadBufCursor","id":"0:469:2793","glob":false}}},"2:3002:1819":{"id":"2:3002:1819","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:2802":{"id":"0:213:2802","crate_id":0,"name":"poll_read","span":{"filename":"src/rt/io.rs","begin":[303,4],"end":[309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:3306":{"id":"0:271:3306","crate_id":0,"name":"ResBody","span":{"filename":"src/service/http.rs","begin":[11,4],"end":[11,23]},"visibility":"default","docs":"The `Body` body of the `http::Response`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Body","id":"24:42:2558","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"0:295:137":{"id":"0:295:137","crate_id":0,"name":"Error","span":{"filename":"src/service/service.rs","begin":[25,4],"end":[25,15]},"visibility":"default","docs":"Errors produced by the service.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:308:3302":{"id":"0:308:3302","crate_id":0,"name":"service_fn","span":{"filename":"src/service/util.rs","begin":[30,0],"end":[39,1]},"visibility":"public","docs":"Create a `Service` from a function.\n\n# Example\n\n```\nuse bytes::Bytes;\nuse hyper::{body, Request, Response, Version};\nuse http_body_util::Full;\nuse hyper::service::service_fn;\n\nlet service = service_fn(|req: Request<body::Incoming>| async move {\n    if req.version() == Version::HTTP_11 {\n        Ok(Response::new(Full::<Bytes>::from(\"Hello World\")))\n    } else {\n        // Note: it's usually better to return a Response\n        // with an appropriate StatusCode instead of an Err.\n        Err(\"not HTTP/1.1, abort connection\")\n    }\n});\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"ServiceFn","id":"0:312:3356","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3449:140","args":{"parenthesized":{"inputs":[{"resolved_path":{"name":"crate::Request","id":"20:2567:2389","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:487:3398":{"id":"b:2:2983-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2986:2723"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[175,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"Write","id":"0:175:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:2810","0:372:2811","0:373:2814","0:374:2815","0:375:2816"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13355:34966":{"id":"2:13355:34966","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12952:3892","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::match_indices":"2:13352:34965"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44202:6942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:339-0:292:2886":{"id":"0:339-0:292:2886","crate_id":0,"name":null,"span":{"filename":"src/service/mod.rs","begin":[29,0],"end":[29,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::service::Service","name":"Service","id":"0:292:2886","glob":false}}},"2:13364:34970":{"id":"2:13364:34970","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13372:27428":{"id":"2:13372:27428","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:27751":{"id":"2:13391:27751","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:119:137":{"id":"b:2:2713-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:27413"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13392:27752":{"id":"2:13392:27752","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13360:34968":{"id":"2:13360:34968","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5696:35674":{"id":"5:5696:35674","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:469:2793":{"id":"b:2:2983-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2986:2723"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:15-0:116:225":{"id":"0:15-0:116:225","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,30],"end":[101,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::error::Result","name":"Result","id":"0:116:225","glob":false}}},"2:13358:34967":{"id":"2:13358:34967","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:469:2793":{"id":"b:2:2713-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2715:27413"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:476:2802":{"id":"0:476:2802","crate_id":0,"name":"poll_read","span":{"filename":"src/rt/io.rs","begin":[295,4],"end":[295,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:137":{"id":"0:119:137","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[31,0],"end":[33,1]},"visibility":"public","docs":"Represents errors that can occur handling HTTP streams.\n\n# Formatting\n\nThe `Display` implementation of this type will only print the details of\nthis level of error, even though it may have been caused by another error\nand contain that error in its source. To print all the relevant\ninformation, including the source chain, using something like\n`std::error::Report`, or equivalent 3rd party types.\n\nThe contents of the formatted error message of this specific `Error` type\nis unspecified. **You must not depend on it.** The wording and details may\nchange in any version, with the goal of improving error messages.\n\n# Source\n\nA `hyper::Error` may be caused by another error. To aid in debugging,\nthose are exposed in `Error::source()` as erased types. While it is\npossible to check the exact type of the sources, they **can not be depended\non**. They may come from private internal dependencies, and are subject to\nchange at any moment.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:124","a:2:3206:246-0:119:137","a:2:3241:3709-0:119:137","a:2:32385:236-0:119:137","a:2:32444:2801-0:119:137","a:2:42248:3930-0:119:137","a:2:42247:3931-0:119:137","b:2:2710-0:119:137","b:2:2998-0:119:137","b:2:2993-0:119:137","b:2:2987-0:119:137","b:2:2983-0:119:137","b:2:2713-0:119:137","b:2:3822-0:119:137","b:5:5944-0:119:137","0:142","0:144","0:146"]}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/rt/io.rs","begin":[214,0],"end":[222,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'data","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'data"}],"bindings":[]}}}},"items":["0:199:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:8-20:2587:2390":{"id":"0:8-20:2587:2390","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[96,47],"end":[96,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::http::Response","name":"Response","id":"20:2587:2390","glob":false}}},"0:190:1187":{"id":"0:190:1187","crate_id":0,"name":"new","span":{"filename":"src/rt/io.rs","begin":[138,4],"end":[146,5]},"visibility":"public","docs":"Create a new `ReadBuf` with a slice of initialized bytes.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw",{"borrowed_ref":{"lifetime":"'data","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5944-0:119:137":{"id":"b:5:5944-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10382:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5942:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5946:1794"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:250-0:173:2792":{"id":"0:250-0:173:2792","crate_id":0,"name":null,"span":{"filename":"src/rt/mod.rs","begin":[14,19],"end":[14,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::io::Read","name":"Read","id":"0:173:2792","glob":false}}},"2:13381:34975":{"id":"2:13381:34975","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:3270":{"id":"0:238:3270","crate_id":0,"name":"sleep_until","span":{"filename":"src/rt/timer.rs","begin":[75,4],"end":[75,68]},"visibility":"default","docs":"Return a future that resolves at `deadline`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["deadline",{"resolved_path":{"name":"Instant","id":"1:9424:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"5:303:2835","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Sleep","id":"0:240:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:14-0:119:137":{"id":"0:14-0:119:137","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,23],"end":[101,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::error::Error","name":"Error","id":"0:119:137","glob":false}}},"2:13346:2903":{"id":"2:13346:2903","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12952:3892","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatches":"2:13349:34964"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44238:6943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:27747":{"id":"2:13389:27747","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13343:28338":{"id":"2:13343:28338","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2710-0:491:3402":{"id":"b:2:2710-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2712:3554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2715:27413":{"id":"2:2715:27413","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:481:2815":{"id":"0:481:2815","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/rt/io.rs","begin":[348,4],"end":[348,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292:2886":{"id":"0:292:2886","crate_id":0,"name":"Service","span":{"filename":"src/service/service.rs","begin":[20,0],"end":[40,1]},"visibility":"public","docs":"An asynchronous function from a `Request` to a `Response`.\n\nThe `Service` trait is a simplified interface making it easy to write\nnetwork applications in a modular and reusable way, decoupled from the\nunderlying protocol.\n\n# Functional\n\nA `Service` is a function of a `Request`. It immediately returns a\n`Future` representing the eventual completion of processing the\nrequest. The actual request processing may happen at any time in the\nfuture, on any thread or executor. The processing may depend on calling\nother services. At some point in the future, the processing will complete,\nand the `Future` will resolve to a response or error.\n\nAt a high level, the `Service::call` function represents an RPC request. The\n`Service` value can be a server or a client.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:294:2390","0:295:137","0:296:150","0:297:438"],"generics":{"params":[{"name":"Request","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:191:3196":{"id":"0:191:3196","crate_id":0,"name":"uninit","span":{"filename":"src/rt/io.rs","begin":[150,4],"end":[156,5]},"visibility":"public","docs":"Create a new `ReadBuf` with a slice of uninitialized bytes.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["raw",{"borrowed_ref":{"lifetime":"'data","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30766:3142","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:808":{"id":"0:65:808","crate_id":0,"name":"fmt","span":{"filename":"src/body/incoming.rs","begin":[319,4],"end":[339,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2998-0:491:3402":{"id":"b:2:2998-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13337:28335":{"id":"2:13337:28335","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12355:475","str::splitn":"2:13334:28333","self::pattern":"2:12952:3892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44156:6768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:335":{"id":"2:13273:335","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13274:3216","`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:485:2814":{"id":"0:485:2814","crate_id":0,"name":"poll_flush","span":{"filename":"src/rt/io.rs","begin":[352,4],"end":[352,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13325:28331":{"id":"2:13325:28331","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12952:3892","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split":"2:13319:27832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44052:6765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33-22:24:2556":{"id":"0:33-22:24:2556","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[22,16],"end":[22,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"bytes::Buf","name":"Buf","id":"22:24:2556","glob":false}}},"2:13384:34976":{"id":"2:13384:34976","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373:2814":{"id":"0:373:2814","crate_id":0,"name":"poll_flush","span":{"filename":"src/upgrade.rs","begin":[192,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2636":{"id":"0:62:2636","crate_id":0,"name":"is_end_stream","span":{"filename":"src/body/incoming.rs","begin":[281,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:2816":{"id":"0:223:2816","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/rt/io.rs","begin":[376,4],"end":[378,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32444:2801-0:469:2793":{"id":"a:2:32444:2801-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3822-0:361:3395":{"id":"b:2:3822-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:381:198":{"id":"0:381:198","crate_id":0,"name":"Output","span":{"filename":"src/upgrade.rs","begin":[225,4],"end":[225,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:2:2710-0:361:3395":{"id":"b:2:2710-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2712:3554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:142":{"id":"0:142","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[514,0],"end":[523,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:143:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:371:2810":{"id":"0:371:2810","crate_id":0,"name":"poll_write","span":{"filename":"src/upgrade.rs","begin":[176,4],"end":[182,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265:34955":{"id":"2:13265:34955","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:28327":{"id":"2:13288:28327","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13287:28326"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13396:29501":{"id":"2:13396:29501","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:40283"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2710-0:50:2562":{"id":"b:2:2710-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2712:3554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2987-0:361:3395":{"id":"b:2:2987-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42248:3930-0:491:3402":{"id":"a:2:42248:3930-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42248:3930","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3930","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13684:962":{"id":"2:13684:962","crate_id":2,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"IntoFuture","id":"2:44837:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:27717":{"id":"2:13271:27717","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12499:14887"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:33321":{"id":"2:13295:33321","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13293:33323"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44317:6947","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:3199":{"id":"0:193:3199","crate_id":0,"name":"unfilled","span":{"filename":"src/rt/io.rs","begin":[167,4],"end":[177,5]},"visibility":"public","docs":"Get a cursor to the unfilled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'cursor","mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'cursor"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'cursor","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3241:3709-0:361:3395":{"id":"a:2:3241:3709-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:3709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13362:34969":{"id":"2:13362:34969","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/rt/io.rs","begin":[355,0],"end":[387,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3427:3144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"","id":"2:3414:124","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"0:175:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"Write","id":"0:175:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::pin::Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"generic":"P"}}],"bindings":[]}}}},"items":["0:221:2810","0:222:2811","0:223:2816","0:224:2814","0:225:2815"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13387:34977":{"id":"2:13387:34977","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12913:136","`FromStr`":"2:12912:4189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12912:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12912:4189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42247:3931-0:50:2562":{"id":"a:2:42247:3931-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3931","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:127:2910":{"id":"0:127:2910","crate_id":0,"name":"is_user","span":{"filename":"src/error.rs","begin":[192,4],"end":[194,5]},"visibility":"public","docs":"Returns true if this error was caused by user code.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:2816":{"id":"0:484:2816","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/rt/io.rs","begin":[352,4],"end":[352,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5708:35677":{"id":"5:5708:35677","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:303:2835","`String`":"5:7747:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:2835","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366:3424":{"id":"0:366:3424","crate_id":0,"name":"downcast","span":{"filename":"src/upgrade.rs","begin":[151,4],"end":[162,5]},"visibility":"public","docs":"Tries to downcast the internal trait object to the type passed.\n\nOn success, returns the downcasted parts. On error, returns the\n`Upgraded` back.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"0:173:2792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Write","id":"0:175:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:2908":{"id":"0:126:2908","crate_id":0,"name":"is_parse_status","span":{"filename":"src/error.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error caused by an invalid response status code or\nreason phrase.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:150":{"id":"0:273:150","crate_id":0,"name":"Future","span":{"filename":"src/service/http.rs","begin":[21,4],"end":[21,79]},"visibility":"default","docs":"The `Future` returned by this `Service`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Response","id":"20:2587:2390","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"ResBody","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:269:3301","args":null}}}}],"bindings":[]}}}}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:269:3301","args":null}}}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"2:13315:3985":{"id":"2:13315:3985","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42247:3931-0:361:3395":{"id":"a:2:42247:3931-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3931","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:369:2802":{"id":"0:369:2802","crate_id":0,"name":"poll_read","span":{"filename":"src/upgrade.rs","begin":[166,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13328:34962":{"id":"2:13328:34962","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12952:3892","str::split":"2:13319:27832","prim@char":"1:12355:475","`DoubleEndedIterator`":"2:8320:129","str::rsplit_terminator":"2:13331:34963"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44084:6939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2986:2723":{"id":"2:2986:2723","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2960:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:3097":{"id":"0:183:3097","crate_id":0,"name":"ReadBuf","span":{"filename":"src/rt/io.rs","begin":[121,0],"end":[125,1]},"visibility":"public","docs":"A wrapper around a byte buffer that is incrementally filled and initialized.\n\nThis type is a sort of \"double cursor\". It tracks three regions in the\nbuffer: a region at the beginning of the buffer that has been logically\nfilled with data, a region that has been initialized at some point but not\nyet logically filled, and a region at the end that may be uninitialized.\nThe filled region is guaranteed to be a subset of the initialized region.\n\nIn summary, the contents of the buffer can be visualized as:\n\n```not_rust\n[             capacity              ]\n[ filled |         unfilled         ]\n[    initialized    | uninitialized ]\n```\n\nIt is undefined behavior to de-initialize any bytes from the uninitialized\nregion, since it is merely unknown whether this region is uninitialized or\nnot, and if part of it turns out to be initialized, it must stay initialized.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:188","a:2:3206:246-0:183:3097","a:2:3241:3709-0:183:3097","a:2:32385:236-0:183:3097","a:2:32444:2801-0:183:3097","a:2:42248:3930-0:183:3097","a:2:42247:3931-0:183:3097","b:2:2710-0:183:3097","b:2:2998-0:183:3097","b:2:2993-0:183:3097","b:2:2987-0:183:3097","b:2:2983-0:183:3097","b:2:2713-0:183:3097","b:2:3822-0:183:3097","0:197"]}}},"a:2:32385:236-0:50:2562":{"id":"a:2:32385:236-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2983-0:119:137":{"id":"b:2:2983-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2986:2723"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13263:1005":{"id":"2:13263:1005","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12355:475"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:34958":{"id":"2:13272:34958","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3822-0:487:3398":{"id":"b:2:3822-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:199:808":{"id":"0:199:808","crate_id":0,"name":"fmt","span":{"filename":"src/rt/io.rs","begin":[215,4],"end":[221,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9-20:2606:2391":{"id":"0:9-20:2606:2391","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[96,57],"end":[96,67]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::http::StatusCode","name":"StatusCode","id":"20:2606:2391","glob":false}}},"0:272:137":{"id":"0:272:137","crate_id":0,"name":"Error","span":{"filename":"src/service/http.rs","begin":[18,4],"end":[18,54]},"visibility":"default","docs":"The error type that can occur within this `Service`.\n\nNote: Returning an `Error` to a hyper server will cause the connection\nto be abruptly aborted. In most cases, it is better to return a `Response`\nwith a 4xx or 5xx status code.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"5:303:2835","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:3046:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"2:13319:27832":{"id":"2:13319:27832","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12952:3892","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split_whitespace":"2:13293:33323","str::rsplit":"2:13325:28331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44034:4142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32444:2801-0:361:3395":{"id":"a:2:32444:2801-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13340:28337":{"id":"2:13340:28337","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13262":{"id":"2:13262","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13263:1005","2:13264:2804","2:13265:34955","2:13266:34956","2:13268:34957","2:13271:27717","2:13272:34958","2:13273:335","2:13274:3216","2:13275:28298","2:13277:3063","2:13279:28299","2:13281:3226","2:13283:34959","2:13284:34960","2:13285:28322","2:13286:28323","2:13287:28326","2:13288:28327","2:13290:6783","2:13291:6956","2:13292:2409","2:13293:33323","2:13295:33321","2:13298:27833","2:13300:34961","2:13301:33329","2:13302:28339","2:13305:28340","2:13308:28341","2:13311:3173","2:13315:3985","2:13319:27832","2:13322:28329","2:13325:28331","2:13328:34962","2:13331:34963","2:13334:28333","2:13337:28335","2:13340:28337","2:13343:28338","2:13346:2903","2:13349:34964","2:13352:34965","2:13355:34966","2:13358:34967","2:13360:34968","2:13362:34969","2:13364:34970","2:13365:34971","2:13366:34972","2:13369:34973","2:13372:27428","2:13375:28342","2:13378:34974","2:13381:34975","2:13384:34976","2:13387:34977","2:13389:27747","2:13390:29496","2:13391:27751","2:13392:27752","2:13393:27753","2:13394:29499","2:13395:29500","2:13396:29501","2:13397:34978","2:13400:9502","2:13401:34979"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:469:2793":{"id":"0:469:2793","crate_id":0,"name":"ReadBufCursor","span":{"filename":"src/rt/io.rs","begin":[131,0],"end":[133,1]},"visibility":"public","docs":"The cursor part of a [`ReadBuf`].\n\nThis is created by calling `ReadBuf::unfilled()`.","links":{"`ReadBuf`":"0:183:3097"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:200","a:2:3206:246-0:469:2793","a:2:3241:3709-0:469:2793","a:2:32385:236-0:469:2793","a:2:32444:2801-0:469:2793","a:2:42248:3930-0:469:2793","a:2:42247:3931-0:469:2793","b:2:2710-0:469:2793","b:2:2998-0:469:2793","b:2:2993-0:469:2793","b:2:2987-0:469:2793","b:2:2983-0:469:2793","b:2:2713-0:469:2793","b:2:3822-0:469:2793","0:472"]}}},"0:479:2816":{"id":"0:479:2816","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/rt/io.rs","begin":[348,4],"end":[348,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32444:2801-0:491:3402":{"id":"a:2:32444:2801-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2710-0:183:3097":{"id":"b:2:2710-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2712:3554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[165,0],"end":[173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Read","id":"0:173:2792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:369:2802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13302:28339":{"id":"2:13302:28339","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:1325":{"id":"0:382:1325","crate_id":0,"name":"poll","span":{"filename":"src/upgrade.rs","begin":[227,4],"end":[240,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:44834:150","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-24:106:2560":{"id":"0:37-24:106:2560","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[25,0],"end":[25,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"http_body::SizeHint","name":"SizeHint","id":"24:106:2560","glob":false}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[531,0],"end":[538,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","type_id","description","cause","source"],"trait":{"name":"Error","id":"2:3046:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:2923"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42248:3930-0:361:3395":{"id":"a:2:42248:3930-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3930","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2983-0:183:3097":{"id":"b:2:2983-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2986:2723"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13369:34973":{"id":"2:13369:34973","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5707:35676":{"id":"5:5707:35676","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:2811":{"id":"0:222:2811","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/rt/io.rs","begin":[368,4],"end":[374,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"std::io::IoSlice","id":"1:8480:2813","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:28298":{"id":"2:13275:28298","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:6956":{"id":"2:13291:6956","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44010:6937","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/body/incoming.rs","begin":[318,0],"end":[340,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13397:34978":{"id":"2:13397:34978","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5014:34978"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44333:6851","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32444:2801-0:487:3398":{"id":"a:2:32444:2801-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:11-20:2788:2393":{"id":"0:11-20:2788:2393","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[96,74],"end":[96,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::http::Version","name":"Version","id":"20:2788:2393","glob":false}}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/rt/io.rs","begin":[347,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Write","id":"0:175:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"Write","id":"0:175:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"5:303:2835","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:477:2810","0:478:2811","0:479:2816","0:480:2814","0:481:2815"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:269:3301":{"id":"0:269:3301","crate_id":0,"name":"HttpService","span":{"filename":"src/service/http.rs","begin":[9,0],"end":[25,1]},"visibility":"public","docs":"An asynchronous function from `Request` to `Response`.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:271:3306","0:272:137","0:273:150"],"generics":{"params":[{"name":"ReqBody","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"sealed::Sealed","id":"0:288:3134","args":{"angle_bracketed":{"args":[{"type":{"generic":"ReqBody"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:275"]}}},"0:363:1245":{"id":"0:363:1245","crate_id":0,"name":"on","span":{"filename":"src/upgrade.rs","begin":[105,0],"end":[107,1]},"visibility":"public","docs":"Gets a pending HTTP upgrade from this message.\n\nThis can be called on the following types:\n\n- `http::Request<B>`\n- `http::Response<B>`\n- `&mut http::Request<B>`\n- `&mut http::Response<B>`","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["msg",{"generic":"T"}]],"output":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"sealed::CanUpgrade","id":"0:400:3417","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-22:399:2557":{"id":"0:34-22:399:2557","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[22,21],"end":[22,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"bytes::Bytes","name":"Bytes","id":"22:399:2557","glob":false}}},"b:2:3822-0:491:3402":{"id":"b:2:3822-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7-20:2567:2389":{"id":"0:7-20:2567:2389","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[96,38],"end":[96,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::http::Request","name":"Request","id":"20:2567:2389","glob":false}}},"2:13334:28333":{"id":"2:13334:28333","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892","str::rsplitn":"2:13337:28335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44138:6767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:2902":{"id":"0:125:2902","crate_id":0,"name":"is_parse","span":{"filename":"src/error.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224:2814":{"id":"0:224:2814","crate_id":0,"name":"poll_flush","span":{"filename":"src/rt/io.rs","begin":[380,4],"end":[382,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257:3115":{"id":"0:257:3115","crate_id":0,"name":"Executor","span":{"filename":"src/rt/mod.rs","begin":[39,0],"end":[42,1]},"visibility":"public","docs":"An executor of futures.\n\nThis trait allows Hyper to abstract over async runtimes. Implement this trait for your own type.\n\n# Example\n\n```\n# use hyper::rt::Executor;\n# use std::future::Future;\n#[derive(Clone)]\nstruct TokioExecutor;\n\nimpl<F> Executor<F> for TokioExecutor\nwhere\n    F: Future + Send + 'static,\n    F::Output: Send + 'static,\n{\n    fn execute(&self, future: F) {\n        tokio::spawn(future);\n    }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:259:3118"],"generics":{"params":[{"name":"Fut","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"b:2:2993-0:361:3395":{"id":"b:2:2993-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:12-20:1794:2394":{"id":"0:12-20:1794:2394","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::http::HeaderMap","name":"HeaderMap","id":"20:1794:2394","glob":false}}},"a:2:3206:246-0:183:3097":{"id":"a:2:3206:246-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3241:3709-0:119:137":{"id":"a:2:3241:3709-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:3709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:174:2802":{"id":"0:174:2802","crate_id":0,"name":"poll_read","span":{"filename":"src/rt/io.rs","begin":[38,4],"end":[42,42]},"visibility":"default","docs":"Attempts to read bytes into the `buf`.\n\nOn success, returns `Poll::Ready(Ok(()))` and places data in the\nunfilled portion of `buf`. If no data was read (`buf.remaining()` is\nunchanged), it implies that EOF has been reached.\n\nIf no data is available for reading, the method returns `Poll::Pending`\nand arranges for the current task (via `cx.waker()`) to receive a\nnotification when the object becomes readable or is closed.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"std::io::Error","id":"1:3067:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:3822-0:469:2793":{"id":"b:2:3822-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:35-24:42:2558":{"id":"0:35-24:42:2558","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[23,0],"end":[23,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"http_body::Body","name":"Body","id":"24:42:2558","glob":false}}},"0:116:225":{"id":"0:116:225","crate_id":0,"name":"Result","span":{"filename":"src/error.rs","begin":[6,0],"end":[6,51]},"visibility":"public","docs":"Result type often returned from methods that can have hyper `Error`s.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::result::Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:42248:3930-0:487:3398":{"id":"a:2:42248:3930-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3930","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:794:4045":{"id":"5:794:4045","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2987-0:491:3402":{"id":"b:2:2987-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:480:2814":{"id":"0:480:2814","crate_id":0,"name":"poll_flush","span":{"filename":"src/rt/io.rs","begin":[348,4],"end":[348,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401:3419":{"id":"0:401:3419","crate_id":0,"name":"on_upgrade","span":{"filename":"src/upgrade.rs","begin":[321,8],"end":[321,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:259:3118":{"id":"0:259:3118","crate_id":0,"name":"execute","span":{"filename":"src/rt/mod.rs","begin":[41,4],"end":[41,32]},"visibility":"default","docs":"Place the future into the executor to be run.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fut",{"generic":"Fut"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2998-0:50:2562":{"id":"b:2:2998-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3206:246-0:50:2562":{"id":"a:2:3206:246-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:375:2816":{"id":"0:375:2816","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/upgrade.rs","begin":[200,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2710-0:469:2793":{"id":"b:2:2710-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2712:3554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:497:808":{"id":"0:497:808","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[81,9],"end":[81,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338-0:269:3301":{"id":"0:338-0:269:3301","crate_id":0,"name":null,"span":{"filename":"src/service/mod.rs","begin":[28,0],"end":[28,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::http::HttpService","name":"HttpService","id":"0:269:3301","glob":false}}},"0:221:2810":{"id":"0:221:2810","crate_id":0,"name":"poll_write","span":{"filename":"src/rt/io.rs","begin":[360,4],"end":[366,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2661":{"id":"0:63:2661","crate_id":0,"name":"size_hint","span":{"filename":"src/body/incoming.rs","begin":[293,4],"end":[315,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SizeHint","id":"24:106:2560","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:2794":{"id":"0:175:2794","crate_id":0,"name":"Write","span":{"filename":"src/rt/io.rs","begin":[48,0],"end":[100,1]},"visibility":"public","docs":"Write bytes asynchronously.\n\nThis trait is similar to `std::io::Write`, but for asynchronous writes.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:176:2810","0:177:2814","0:178:2815","0:179:2816","0:180:2811"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:215","0:217","0:370","0:219"]}}},"0:478:2811":{"id":"0:478:2811","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/rt/io.rs","begin":[348,4],"end":[348,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"std::io::IoSlice","id":"1:8480:2813","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251-0:183:3097":{"id":"0:251-0:183:3097","crate_id":0,"name":null,"span":{"filename":"src/rt/mod.rs","begin":[14,25],"end":[14,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::io::ReadBuf","name":"ReadBuf","id":"0:183:3097","glob":false}}},"b:2:2983-0:361:3395":{"id":"b:2:2983-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2986:2723"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13365:34971":{"id":"2:13365:34971","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240:3098":{"id":"0:240:3098","crate_id":0,"name":"Sleep","span":{"filename":"src/rt/timer.rs","begin":[84,0],"end":[93,1]},"visibility":"public","docs":"A future returned by a `Timer`.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[]}}}}]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/body/incoming.rs","begin":[188,0],"end":[316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_end_stream","size_hint"],"trait":{"name":"Body","id":"24:42:2558","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:2639","0:60:137","0:61:2640","0:62:2636","0:63:2661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3241:3709-0:50:2562":{"id":"a:2:3241:3709-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:3709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13308:28341":{"id":"2:13308:28341","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:27753":{"id":"2:13393:27753","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:27833":{"id":"2:13298:27833","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44288:4139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3206:246-0:361:3395":{"id":"a:2:3206:246-0:361:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"5:793:4044":{"id":"5:793:4044","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385:808":{"id":"0:385:808","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[244,4],"end":[246,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:2923":{"id":"0:147:2923","crate_id":0,"name":"source","span":{"filename":"src/error.rs","begin":[532,4],"end":[537,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:3046:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2408":{"id":"0:0:2408","crate_id":0,"name":"hyper","span":{"filename":"src/lib.rs","begin":[1,0],"end":[138,1]},"visibility":"public","docs":" # hyper\n\n hyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n\n ## Features\n\n - HTTP/1 and HTTP/2\n - Asynchronous design\n - Leading in performance\n - Tested and **correct**\n - Extensive production use\n - [Client](client/index.html) and [Server](server/index.html) APIs\n\n If just starting out, **check out the [Guides](https://hyper.rs/guides/1/)\n first.**\n\n ## \"Low-level\"\n\n hyper is a lower-level HTTP library, meant to be a building block\n for libraries and applications.\n\n If looking for just a convenient HTTP client, consider the\n [reqwest](https://crates.io/crates/reqwest) crate.\n\n # Optional Features\n\n hyper uses a set of [feature flags] to reduce the amount of compiled code.\n It is possible to just enable certain features over others. By default,\n hyper does not enable any features but allows one to enable a subset for\n their use case. Below is a list of the available feature flags. You may\n also notice above each function, struct and trait there is listed one or\n more feature flags that are required for that item to be used.\n\n If you are new to hyper it is possible to enable the `full` feature flag\n which will enable all public APIs. Beware though that this will pull in\n many extra dependencies that you may not need.\n\n The following optional features are available:\n\n - `http1`: Enables HTTP/1 support.\n - `http2`: Enables HTTP/2 support.\n - `client`: Enables the HTTP `client`.\n - `server`: Enables the HTTP `server`.\n\n [feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section\n\n # Unstable Features\n\n hyper includes a set of unstable optional features that can be enabled through the use of a\n feature flag and a [configuration flag].\n\n The following is a list of feature flags and their corresponding `RUSTFLAG`:\n - `ffi`: Enables C API for hyper `hyper_unstable_ffi`.\n - `tracing`: Enables debug logging with `hyper_unstable_tracing`.\n\n Enabling an unstable feature is possible with the following `cargo` command, as of version `1.64.0`:\n ```notrust\n RUSTFLAGS=\"--cfg hyper_unstable_tracing\" cargo rustc --features client,http1,http2,tracing --crate-type cdylib\n```\n [configuration flag]: https://doc.rust-lang.org/reference/conditional-compilation.html\n\n # Stability\n\n It's worth talking a bit about the stability of hyper. hyper's API follows\n [SemVer](https://semver.org). Breaking changes will only be introduced in\n major versions, if ever. New additions to the API, such as new types,\n methods, or traits will only be added in minor versions.\n\n Some parts of hyper are documented as NOT being part of the stable API. The\n following is a brief list, you can read more about each one in the relevant\n part of the documentation.\n\n - Downcasting error types from `Error::source()` is not considered stable.\n - Private dependencies use of global variables is not considered stable.\n   So, if a dependency uses `log` or `tracing`, hyper doesn't promise it\n   will continue to do so.\n - Behavior from default options is not stable. hyper reserves the right to\n   add new options that are enabled by default which might alter the\n   behavior, for the purposes of protection. It is also possible to _change_\n   what the default options are set to, also in efforts to protect the\n   most people possible.","links":{},"attrs":["#![deny(missing_docs)]","#![deny(missing_debug_implementations)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:31:2397","0:162:2399","0:163:1484","0:260:2401","0:341:2402","0:5-20:5:2387","0:6-20:2488:2388","0:7-20:2567:2389","0:8-20:2587:2390","0:9-20:2606:2391","0:10-20:2731:2392","0:11-20:2788:2393","0:12-20:1794:2394","0:14-0:119:137","0:15-0:116:225"],"is_stripped":false}}},"0:202:3210":{"id":"0:202:3210","crate_id":0,"name":"as_mut","span":{"filename":"src/rt/io.rs","begin":[232,4],"end":[234,5]},"visibility":"public","docs":"Access the unfilled part of the buffer.\n\n# Safety\n\nThe caller must not uninitialize any bytes that may have been\ninitialized before.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30766:3142","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:34972":{"id":"2:13366:34972","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:3892"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12978:14884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3241:3709-0:491:3402":{"id":"a:2:3241:3709-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:3709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:42247:3931-0:183:3097":{"id":"a:2:42247:3931-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3931","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"5:5699:35675":{"id":"5:5699:35675","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2710-0:119:137":{"id":"b:2:2710-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2712:3554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:489":{"id":"0:489","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[72,9],"end":[72,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:490:479"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:376":{"id":"0:376","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[205,0],"end":[209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Upgraded","id":"0:361:3395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:377:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2993-0:469:2793":{"id":"b:2:2993-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[243,0],"end":[247,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:385:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2713-0:491:3402":{"id":"b:2:2713-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2715:27413"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32444:2801-0:50:2562":{"id":"a:2:32444:2801-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:36-24:89:2559":{"id":"0:36-24:89:2559","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[24,0],"end":[24,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"http_body::Frame","name":"Frame","id":"24:89:2559","glob":false}}},"0:128:2912":{"id":"0:128:2912","crate_id":0,"name":"is_canceled","span":{"filename":"src/error.rs","begin":[197,4],"end":[199,5]},"visibility":"public","docs":"Returns true if this was about a `Request` that was canceled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255-0:240:3098":{"id":"0:255-0:240:3098","crate_id":0,"name":null,"span":{"filename":"src/rt/mod.rs","begin":[15,22],"end":[15,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::timer::Sleep","name":"Sleep","id":"0:240:3098","glob":false}}},"0:5-20:5:2387":{"id":"0:5-20:5:2387","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[96,22],"end":[96,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::http::header","name":"header","id":"20:5:2387","glob":false}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/rt/io.rs","begin":[130,9],"end":[130,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:474:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13287:28326":{"id":"2:13287:28326","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13288:28327"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:34960":{"id":"2:13284:34960","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12361:1734","crate::ops::IndexMut":"2:3484:3682","str::slice_unchecked":"2:13283:34959"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:340-0:308:3302":{"id":"0:340-0:308:3302","crate_id":0,"name":null,"span":{"filename":"src/service/mod.rs","begin":[30,0],"end":[30,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::util::service_fn","name":"service_fn","id":"0:308:3302","glob":false}}},"0:361:3395":{"id":"0:361:3395","crate_id":0,"name":"Upgraded","span":{"filename":"src/upgrade.rs","begin":[65,0],"end":[67,1]},"visibility":"public","docs":"An upgraded HTTP connection.\n\nThis type holds a trait object internally of the original IO that\nwas used to speak HTTP before the upgrade. It can be used directly\nas a `Read` or `Write` for convenience.\n\nAlternatively, if the exact type is known, this can be deconstructed\ninto its parts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:365","a:2:3206:246-0:361:3395","a:2:3241:3709-0:361:3395","a:2:32385:236-0:361:3395","a:2:32444:2801-0:361:3395","a:2:42248:3930-0:361:3395","a:2:42247:3931-0:361:3395","b:2:2710-0:361:3395","b:2:2998-0:361:3395","b:2:2993-0:361:3395","b:2:2987-0:361:3395","b:2:2983-0:361:3395","b:2:2713-0:361:3395","b:2:3822-0:361:3395","0:370","0:376","0:368"]}}},"2:13394:29499":{"id":"2:13394:29499","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:40283"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2399":{"id":"0:162:2399","crate_id":0,"name":"ext","span":{"filename":"src/ext/mod.rs","begin":[1,0],"end":[237,1]},"visibility":"public","docs":"HTTP extensions.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"a:2:3206:246-0:491:3402":{"id":"a:2:3206:246-0:491:3402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parts","id":"0:491:3402","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:173:2792":{"id":"0:173:2792","crate_id":0,"name":"Read","span":{"filename":"src/rt/io.rs","begin":[28,0],"end":[43,1]},"visibility":"public","docs":"Reads bytes from a source.\n\nThis trait is similar to `std::io::Read`, but supports asynchronous reads.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:174:2802"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:209","0:207","0:368","0:211"]}}},"a:2:3241:3709-0:183:3097":{"id":"a:2:3241:3709-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:3709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3206:246-0:469:2793":{"id":"a:2:3206:246-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:474:808":{"id":"0:474:808","crate_id":0,"name":"fmt","span":{"filename":"src/rt/io.rs","begin":[130,9],"end":[130,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13290:6783":{"id":"2:13290:6783","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44004:6775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42248:3930-0:469:2793":{"id":"a:2:42248:3930-0:469:2793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3930","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:377:808":{"id":"0:377:808","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[206,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2987-0:119:137":{"id":"b:2:2987-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13400:9502":{"id":"2:13400:9502","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5015:9502"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44342:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:2752":{"id":"0:129:2752","crate_id":0,"name":"is_closed","span":{"filename":"src/error.rs","begin":[202,4],"end":[214,5]},"visibility":"public","docs":"Returns true if a sender's channel is closed.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:1484":{"id":"0:163:1484","crate_id":0,"name":"rt","span":{"filename":"src/rt/mod.rs","begin":[1,0],"end":[42,1]},"visibility":"public","docs":"Runtime components\n\nThe traits and types within this module are used to allow plugging in\nruntime types. These include:\n\n- Executors\n- Timers\n- IO transports","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:164:3095","0:250-0:173:2792","0:251-0:183:3097","0:252-0:469:2793","0:253-0:175:2794","0:255-0:240:3098","0:256-0:236:3099","0:257:3115"],"is_stripped":false}}},"a:2:3206:246-0:487:3398":{"id":"a:2:3206:246-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13349:34964":{"id":"2:13349:34964","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12952:3892","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::matches":"2:13346:2903"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44256:6944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372:2811":{"id":"0:372:2811","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/upgrade.rs","begin":[184,4],"end":[190,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"io::IoSlice","id":"1:8480:2813","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"io::Result","id":"1:3065:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:4165":{"id":"5:5709:4165","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5710:27749":{"id":"5:5710:27749","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13392:27752"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13331:34963":{"id":"2:13331:34963","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12952:3892","str::split":"2:13319:27832","prim@char":"1:12355:475","str::split_terminator":"2:13328:34962"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44102:6940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:6754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42247:3931-0:119:137":{"id":"a:2:42247:3931-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3931","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:2996:137":{"id":"2:2996:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2993-0:50:2562":{"id":"b:2:2993-0:50:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Incoming","id":"0:50:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3822-0:119:137":{"id":"b:2:3822-0:119:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:119:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/rt/io.rs","begin":[290,0],"end":[292,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Read","id":"0:173:2792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:32444:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Read","id":"0:173:2792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"5:303:2835","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:475:2802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5691":{"id":"5:5691","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5692:35673","5:5693:3640","5:5696:35674","5:5699:35675","5:5707:35676","5:5708:35677","5:5709:4165","5:5710:27749","5:5711:27750"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:164:3095":{"id":"0:164:3095","crate_id":0,"name":"bounds","span":{"filename":"src/rt/bounds.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"Trait aliases\n\nTraits in this module ease setting bounds and usually automatically\nimplemented by implementing another trait.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"b:2:2713-0:183:3097":{"id":"b:2:2713-0:183:3097","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ReadBuf","id":"0:183:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2715:27413"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2997:1821":{"id":"2:2997:1821","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32385:236-0:487:3398":{"id":"a:2:32385:236-0:487:3398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnUpgrade","id":"0:487:3398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/rt/io.rs","begin":[224,0],"end":[276,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'data","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ReadBufCursor","id":"0:469:2793","args":{"angle_bracketed":{"args":[{"lifetime":"'data"}],"bindings":[]}}}},"items":["0:202:3210","0:203:2809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:177:2814":{"id":"0:177:2814","crate_id":0,"name":"poll_flush","span":{"filename":"src/rt/io.rs","begin":[72,4],"end":[72,98]},"visibility":"default","docs":"Attempts to flush the object.\n\nOn success, returns `Poll::Ready(Ok(()))`.\n\nIf flushing cannot immediately complete, this method returns\n`Poll::Pending` and arranges for the current task (via `cx.waker()`) to\nreceive a notification when the object can make progress.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:2569","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"std::io::Error","id":"1:3067:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}}},"paths":{"17:13594:5145":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:7551:3989":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:14298:5283":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:8234:15109":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:10754:15188":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:15281:5558":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:6493:8238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:95:2597":{"crate_id":24,"path":["http_body","frame","Kind"],"kind":"enum"},"20:1849:4480":{"crate_id":20,"path":["http","header","map","ValuesMut"],"kind":"struct"},"5:7060:14917":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:11080:32156":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12443:4984":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:4442:6710":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"25:2961:3758":{"crate_id":25,"path":["tokio","sync","mpsc","bounded","Semaphore"],"kind":"struct"},"5:3092:8604":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:32474:3712":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:4354:4120":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:4486:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:4786:8613":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:2704:5868":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:40883:6718":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:40845:6870":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:12370:899":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:513:4663":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:23099:9615":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:33612:3662":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:9320:2878":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:5198:5931":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:14529:5322":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:2467:5852":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6205:22400":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6748:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"25:1583:4411":{"crate_id":25,"path":["tokio","sync","mpsc","unbounded","UnboundedSender"],"kind":"struct"},"17:14516:5321":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:5217:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:8249:8578":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:1814:4181":{"crate_id":20,"path":["http","header","map","IterMut"],"kind":"struct"},"6:5428:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:16176:5812":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:6337:5980":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"15:0:3464":{"crate_id":15,"path":["addr2line"],"kind":"module"},"25:410:3726":{"crate_id":25,"path":["tokio","loom","std","barrier","Barrier"],"kind":"struct"},"2:7767:33594":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"25:1208:2563":{"crate_id":25,"path":["tokio","sync","mpsc","bounded","Sender"],"kind":"struct"},"1:12359:334":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:5648:8157":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2495:9588":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7938:6262":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"20:1664:137":{"crate_id":20,"path":["http","error","Error"],"kind":"struct"},"1:4927:9635":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:4986:4687":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:6738:36637":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:7724:6566":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6421:5837":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:40673:6856":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6111:5954":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:9133:7280":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4886:9646":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13581:5144":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"11:2121:4501":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:1521:7652":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12647:5000":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:46205:7015":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11215:27678":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"20:877:2993":{"crate_id":20,"path":["http","method","InvalidMethod"],"kind":"struct"},"17:14788:5391":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:12381:1429":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:2635:4151":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:1220:36026":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:47223:7107":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"9:53:21403":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:12031:6772":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:23267:6832":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:6449:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:9256:3729":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8186:7203":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"22:555:4425":{"crate_id":22,"path":["bytes","bytes","Shared"],"kind":"struct"},"2:32476:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:40794:6866":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:3032:7152":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6028:5883":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:854:6438":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:30766:3142":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:8028:6268":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:434:36603":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:42197:3989":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:12361:1734":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"25:2789:4425":{"crate_id":25,"path":["tokio","sync","watch","Shared"],"kind":"struct"},"10:44:6458":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"11:2400:4181":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:2931:14959":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:5305:3724":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5349:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"20:2806:4587":{"crate_id":20,"path":["http","version","Http"],"kind":"enum"},"1:7924:32146":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13437:5103":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:3199:3708":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:4333:9642":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:15368:5584":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:44333:6851":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:11725:8710":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"22:0:2409":{"crate_id":22,"path":["bytes"],"kind":"module"},"2:32386:3220":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:42879:4058":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:42872:4051":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:32916:3658":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7372:5893":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"25:705:37368":{"crate_id":25,"path":["tokio","runtime","coop","with_budget","ResetGuard"],"kind":"struct"},"2:44829:8695":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"11:430:36611":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"25:859:4386":{"crate_id":25,"path":["tokio","runtime","driver","Driver"],"kind":"struct"},"16:8105:6272":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:39040:3677":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:13633:6875":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:43173:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:884:4181":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6368:5831":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11583:4873":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:11258:8701":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:5709:22398":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:7747:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11621:4879":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5044:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:3575:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7305:6150":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:44851:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"25:3168:3758":{"crate_id":25,"path":["tokio","sync","semaphore","Semaphore"],"kind":"struct"},"1:8004:7194":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:8565:6333":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5265:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:830:4480":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:15822:5719":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12328:4966":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:11853:7155":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"20:2047:2988":{"crate_id":20,"path":["http","header","name","HeaderName"],"kind":"struct"},"2:12973:14885":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6652:8325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11813:7154":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:44595:6961":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:31172:3956":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:5638:7170":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:16105:5791":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:895:6523":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:2495:21462":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:46434:7042":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:8528:6328":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:485:7576":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10612:4802":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"9:445:21385":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:2272:6534":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:8612:5903":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:15456:5604":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10759:4805":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:47102:7093":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:765:26656":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:1597:7701":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:1900:6448":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:7736:6567":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11595:4877":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"20:1857:4481":{"crate_id":20,"path":["http","header","map","Drain"],"kind":"struct"},"2:40906:6875":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:1601:4480":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:3587:5908":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:12056:4946":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:9205:4240":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:5649:5940":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:4302:4120":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:4883:9668":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:373:7129":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"25:3031:186":{"crate_id":25,"path":["tokio","sync","mutex","MutexGuard"],"kind":"struct"},"16:6098:5949":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:11413:2556":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:1844:700":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:9807:22454":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:16165:5807":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:5507:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:21720:33139":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:10638:32113":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:12379:974":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:44913:34140":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:5972:4120":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:44004:6775":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:40757:6859":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:15342:5574":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12433:4982":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13959:5217":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"0:363:1245":{"crate_id":0,"path":["hyper","upgrade","on"],"kind":"function"},"17:13753:5184":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:1893:6529":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:22639:15120":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"5:1895:6529":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:4152:5912":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"0:257:3115":{"crate_id":0,"path":["hyper","rt","Executor"],"kind":"trait"},"17:11865:4907":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:15273:5557":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4354:9644":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13387:5096":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:14284:5282":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5586:8124":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14212:5274":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:3337:3670":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:15301:5565":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:10218:6893":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:8784:34075":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"25:2966:3758":{"crate_id":25,"path":["tokio","sync","mpsc","unbounded","Semaphore"],"kind":"struct"},"20:2107:4506":{"crate_id":20,"path":["http","header","name","MaybeLower"],"kind":"struct"},"6:5186:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:42237:3928":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:3610:4130":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:4060:3989":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:10137:22447":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:0:3461":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:10938:7203":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:6573:6023":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:2840:5874":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:2301:8603":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:16198:5814":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:12543:4997":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:6408:5993":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10399:2557":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1643:7738":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:23041:33186":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:8667:7161":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12388:4977":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"0:0:2408":{"crate_id":0,"path":["hyper"],"kind":"module"},"5:3804:36440":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:7454:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:740:6436":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6564:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11128:4780":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:8008:8565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:3342:4162":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:5708:7171":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:1963:7524":{"crate_id":20,"path":["http","header","map","Pos"],"kind":"struct"},"17:14587:5331":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:43961:6932":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13272:5079":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:798:4481":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11510:4861":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:7597:3996":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:7537:36493":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:6964:7523":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:5241:7977":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5494:8094":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:5295:8003":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:11471:6767":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13832:5197":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:6509:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"25:3179:3760":{"crate_id":25,"path":["tokio","sync","semaphore","OwnedSemaphorePermit"],"kind":"struct"},"2:46463:7043":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"9:328:7554":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:6012:4481":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:5341:8018":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:46613:7049":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:708:6435":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"0:163:1484":{"crate_id":0,"path":["hyper","rt"],"kind":"module"},"16:5742:4790":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:44950:6976":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:15376:5587":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:12373:892":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:3264:4676":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:32444:2801":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:1613:3989":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"25:0:2411":{"crate_id":25,"path":["tokio"],"kind":"module"},"2:15:2777":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:980:6440":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"20:466:3013":{"crate_id":20,"path":["http","header","map","into_header_name","IntoHeaderName"],"kind":"trait"},"2:41975:8684":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"25:3087:4443":{"crate_id":25,"path":["tokio","sync","notify","Notified"],"kind":"struct"},"6:5325:8014":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11503:32149":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:3693:3614":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:44052:6765":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8622:7258":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"20:1937:4492":{"crate_id":20,"path":["http","header","map","ValueDrain"],"kind":"struct"},"20:2857:3602":{"crate_id":20,"path":["http","extensions","Extensions"],"kind":"struct"},"2:46336:7022":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10877:4807":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:6691:8335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"20:1833:4478":{"crate_id":20,"path":["http","header","map","Keys"],"kind":"struct"},"13:229:7540":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8050:9506":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:43132:8693":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:1791:36440":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9938:22468":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"20:1870:4482":{"crate_id":20,"path":["http","header","map","GetAll"],"kind":"struct"},"2:44256:6944":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:0:308":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:9844:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:44667:8694":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:944:4480":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11214:4833":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12530:4996":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:3935:6529":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:11191:7279":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:1075:4501":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"20:2694:4213":{"crate_id":20,"path":["http","uri","path","PathAndQuery"],"kind":"struct"},"20:2737:3402":{"crate_id":20,"path":["http","uri","Parts"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:6731:6065":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:3987:4703":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:42286:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:8233:22411":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13325:5086":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15434:5599":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"22:404:4312":{"crate_id":22,"path":["bytes","bytes","Vtable"],"kind":"struct"},"2:4905:4068":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11256:4838":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:42342:3989":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:21928:9725":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:10818:4806":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12485:22596":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:2149:6574":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:15635:5673":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"20:721:4474":{"crate_id":20,"path":["http","header","value","InvalidHeaderValue"],"kind":"struct"},"17:2203:4672":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:10595:7278":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:0:567":{"crate_id":2,"path":["core"],"kind":"module"},"17:0:3466":{"crate_id":17,"path":["object"],"kind":"module"},"2:12978:14884":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:5098:9666":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:7368:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:39771:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6502:21511":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8859:7276":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:40977:6730":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:5335:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"25:2902:4431":{"crate_id":25,"path":["tokio","sync","barrier","BarrierState"],"kind":"struct"},"5:4167:36440":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:11280:6762":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:15266:5556":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2957:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:5282:7998":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:396:36609":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:2967:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7508:6179":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:8169:4734":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12724:22472":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:4430:6709":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:963:9519":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6837:6073":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:7653:9518":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15836:5722":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:4561:7160":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:1589:7696":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:42531:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"25:2922:4239":{"crate_id":25,"path":["tokio","sync","broadcast","error","RecvError"],"kind":"enum"},"17:10524:4801":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:9220:9697":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12371:5020":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:3035:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"25:1218:4396":{"crate_id":25,"path":["tokio","sync","mpsc","bounded","PermitIterator"],"kind":"struct"},"1:12141:30131":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:8209:5889":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:16223:5820":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"11:1005:4501":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:2349:4485":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:3452:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:32369:4066":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:1569:7682":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:1920:6451":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:1207:4667":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6822:22403":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:9518:6754":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:7517:6557":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:12338:27543":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:7234:36487":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"20:1825:3989":{"crate_id":20,"path":["http","header","map","IntoIter"],"kind":"struct"},"1:12360:1700":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:4501:36460":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:15410:5595":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:22717:9805":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:8255:8579":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:2788:2393":{"crate_id":20,"path":["http","version","Version"],"kind":"struct"},"17:10720:36647":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:7818:15103":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:15814:5716":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:10929:7294":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:2796:5872":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:1129:36440":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:21732:33148":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:12353:419":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:44483:6958":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:22968:33437":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:10419:4659":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:1421:6445":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:974:6438":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:9176:4414":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:40054:14960":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:5449:5939":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:22990:6805":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:12952:3892":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6666:8327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:47238:7108":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:5727:4789":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7542:6184":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:7949:5896":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:7044:5890":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:44342:6708":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6770:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:38296:3673":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:6521:8250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:7668:6553":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"25:2971:4414":{"crate_id":25,"path":["tokio","sync","mpsc","error","SendError"],"kind":"struct"},"17:13877:5207":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"25:287:9601":{"crate_id":25,"path":["tokio","net","addr","ToSocketAddrs"],"kind":"trait"},"1:12362:1824":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:22227:6793":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:47200:7101":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:13881:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:8085:7200":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"10:36:7553":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:3597:4679":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:2724:5869":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:39831:3684":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:21918:3134":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11661:4883":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:8282:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46144:7012":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:3282:3679":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:379:7131":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:21802:3134":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:32387:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:2591:8608":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:1407:4488":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"25:3255:4066":{"crate_id":25,"path":["tokio","sync","watch","Ref"],"kind":"struct"},"17:15176:5535":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11493:4859":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:2485:9583":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6638:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:23068:8618":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:22797:6795":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8509:4140":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"20:2567:2389":{"crate_id":20,"path":["http","request","Request"],"kind":"struct"},"17:13738:5179":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:8302:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:3241:3709":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11715:4887":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:14436:5313":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:14994:5495":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:8645:8454":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11405:4853":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:14545:5324":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:22684:9806":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:2966:5880":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12683:5003":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"11:1140:6444":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8853:4180":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:3460:6529":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:11657:4238":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"1:4153:9619":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:44466:6957":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"20:2699:4215":{"crate_id":20,"path":["http","uri","scheme","Scheme"],"kind":"struct"},"16:7807:36638":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:8267:8581":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:8223:6276":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:6731:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:15678:5689":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"25:1214:4395":{"crate_id":25,"path":["tokio","sync","mpsc","bounded","Permit"],"kind":"struct"},"2:41390:6883":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:14402:5300":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12464:22595":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"20:2606:2391":{"crate_id":20,"path":["http","status","StatusCode"],"kind":"struct"},"25:562:4551":{"crate_id":25,"path":["tokio","util","linked_list","Link"],"kind":"trait"},"17:2175:22528":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:155:5829":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:10984:27680":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:578:7631":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10170:4790":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5107:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:11973:32109":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"20:2002:4498":{"crate_id":20,"path":["http","header","map","RawLinks"],"kind":"struct"},"2:39619:3692":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11930:7321":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:3678:34084":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:15151:5527":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12454:4985":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"20:2703:4211":{"crate_id":20,"path":["http","uri","scheme","Scheme2"],"kind":"enum"},"1:1922:7145":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:10755:4914":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:15701:5690":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:938:6529":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:15582:5655":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"3:233:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:7469:8485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10439:4791":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:42492:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:3342:6448":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11668:7183":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:3211:3340":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:6813:8374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7192:22406":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12107:4805":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:842:9519":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:12499:14887":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12189:4957":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:44034:4142":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:40968:6878":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:2590:5863":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:2704:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:3889:4695":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11241:3699":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"22:1129:4463":{"crate_id":22,"path":["bytes","buf","reader","Reader"],"kind":"struct"},"2:2604:15120":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:3414:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:3436:4159":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"24:89:2559":{"crate_id":24,"path":["http_body","frame","Frame"],"kind":"struct"},"16:3048:21540":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:40:9534":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:3653:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13375:5095":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:8000:5898":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43181:4047":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:2374:8607":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"25:832:4382":{"crate_id":25,"path":["tokio","runtime","park","ParkThread"],"kind":"struct"},"25:350:93":{"crate_id":25,"path":["tokio","loom","std","atomic_u16","AtomicU16"],"kind":"struct"},"2:2337:6578":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4984:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5450:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:908:4658":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"20:2381:2989":{"crate_id":20,"path":["http","header","value","HeaderValue"],"kind":"struct"},"16:6970:5885":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"11:1914:6450":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:32309:3613":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:13750:3695":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:3841:9601":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:22934:6798":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:3927:4481":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11812:4901":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:718:4642":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:13593:6789":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:22903:6797":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:45931:6988":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:2415:21512":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10284:4654":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:38461:3676":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:13904:3623":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12318:4680":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:15289:5559":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15655:5676":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:2037:675":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:6255:4120":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:8788:7271":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10661:4803":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:42269:4222":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:11003:7171":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:11956:2559":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:7416:6161":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10534:36644":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:9839:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4805:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:1794:2394":{"crate_id":20,"path":["http","header","map","HeaderMap"],"kind":"struct"},"6:8319:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:9328:7292":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:4925:9634":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"11:1158:6445":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:40767:6865":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:15390:5589":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6544:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:7341:8444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:14372:5294":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:351:36612":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:8471:4168":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:23026:33175":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12030:4943":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:0:3457":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3486:4146":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:40717:6858":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:10344:7302":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:7869:4664":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12824:22473":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10185:4651":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:7337:6154":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:6792:3989":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11242:4836":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:11223:8694":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:10715:4159":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:10573:36649":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:4807:9621":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:46290:7020":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:4970:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:40729:2557":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"20:2719:3021":{"crate_id":20,"path":["http","uri","scheme","Protocol"],"kind":"enum"},"1:10709:4161":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:7401:36632":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"14:0:3463":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:4672:9646":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:11485:6768":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4964:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7980:5897":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:5224:5932":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"25:3009:4240":{"crate_id":25,"path":["tokio","sync","mpsc","error","TryRecvError"],"kind":"enum"},"25:1931:37367":{"crate_id":25,"path":["tokio","sync","notify","NotifyWaitersList"],"kind":"struct"},"17:11115:4827":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8532:4142":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"0:487:3398":{"crate_id":0,"path":["hyper","upgrade","OnUpgrade"],"kind":"struct"},"20:32:4470":{"crate_id":20,"path":["http","header","map","MaxSizeReached"],"kind":"struct"},"6:545:7613":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:3090:34906":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11018:27532":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4981:7163":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11102:4825":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:11098:32148":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:6680:6051":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"6:7391:8472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"15:306:21493":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:23201:6826":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:11719:8709":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:44934:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:953:6436":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:7350:8445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44202:6942":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:5165:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:4167:9621":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:1696:7766":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:4843:14937":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:40502:6844":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:9109:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:8343:8599":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1625:7726":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:7161:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"25:3203:233":{"crate_id":25,"path":["tokio","sync","rwlock","read_guard","RwLockReadGuard"],"kind":"struct"},"17:3473:4678":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5622:8145":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:4332:4120":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:42334:4181":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:5757:5942":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14311:5284":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:4161:9620":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:43144:6303":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:5942:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:16121:5796":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:3484:3682":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:10326:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:5844:2563":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:47139:7096":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:7478:4244":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:6143:6719":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12808:5013":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"0:491:3402":{"crate_id":0,"path":["hyper","upgrade","Parts"],"kind":"struct"},"17:14386:5296":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:8096:6271":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13538:5128":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13509:5117":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3677:4134":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:3368:6451":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:9274:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"20:2501:4186":{"crate_id":20,"path":["http","method","Inner"],"kind":"enum"},"17:11497:4860":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:16212:5818":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:44452:6954":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:10948:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:532:7607":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5205:7963":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:43993:6936":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:44298:6945":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:12376:1852":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:12912:4189":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:38406:3675":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:46258:7018":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14475:5316":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13473:5112":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"25:3184:3761":{"crate_id":25,"path":["tokio","sync","rwlock","owned_read_guard","OwnedRwLockReadGuard"],"kind":"struct"},"2:23730:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:2551:36616":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:1711:7773":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13412:5101":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:11357:6764":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:1008:4180":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:3698:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8765:4238":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:2748:5870":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:11306:8702":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"22:857:4459":{"crate_id":22,"path":["bytes","fmt","BytesRef"],"kind":"struct"},"6:523:7601":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:1884:3989":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:1609:4180":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:7563:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"25:1586:4413":{"crate_id":25,"path":["tokio","sync","mpsc","unbounded","WeakUnboundedSender"],"kind":"struct"},"6:4896:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:15222:5544":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11467:4858":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11537:4863":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:45852:6981":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:6037:3740":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10044:22470":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:42206:3927":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:15138:5522":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:6764:6722":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:573:4602":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:14723:5340":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:3395:4164":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13497:5116":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12584:4806":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"11:2323:4488":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:10905:4808":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:6640:6031":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"25:2908:3727":{"crate_id":25,"path":["tokio","sync","barrier","BarrierWaitResult"],"kind":"struct"},"25:3161:3756":{"crate_id":25,"path":["tokio","sync","batch_semaphore","AcquireError"],"kind":"struct"},"13:110:36618":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"7:0:1914":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:5146:4120":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:15058:5505":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:22558:3134":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:2780:4154":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:44924:3619":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:23256:6831":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:15078:5513":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:2545:7549":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:15760:5706":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"20:5:2387":{"crate_id":20,"path":["http","header"],"kind":"module"},"6:5230:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:47081:7092":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:3252:3656":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:8320:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:0:1726":{"crate_id":1,"path":["std"],"kind":"module"},"16:7554:22408":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:11694:7188":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6876:8388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:488:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"25:366:94":{"crate_id":25,"path":["tokio","loom","std","atomic_u32","AtomicU32"],"kind":"struct"},"2:12653:6776":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:34198:3668":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:23168:6823":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:44973:6977":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:43379:6906":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:43426:6916":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:12306:7324":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"20:2602:2824":{"crate_id":20,"path":["http","response","Builder"],"kind":"struct"},"1:9162:7282":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:9170:3989":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:5541:14871":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:14599:5338":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5057:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:12372:911":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:3046:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:10712:4163":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:10396:4057":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:15769:5710":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"25:943:2563":{"crate_id":25,"path":["tokio","sync","broadcast","Sender"],"kind":"struct"},"2:40578:6851":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:42886:4059":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:43160:33171":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:42081:6896":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6462:22402":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:12365:741":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:15356:5581":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:43105:8685":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:32376:6836":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:8228:7150":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:44010:6937":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:5004:9631":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"25:946:219":{"crate_id":25,"path":["tokio","sync","broadcast","Receiver"],"kind":"struct"},"9:500:6507":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:12690:6779":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:1500:7644":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:2486:5858":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:1539:7663":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"14:220:6431":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15720:5695":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:42728:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11853:4906":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:40472:6843":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15197:5539":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:11035:7281":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:1236:34905":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46708:7052":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:13924:3620":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:13785:5191":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:46501:7045":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10710:4804":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:15445:5603":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:7984:7133":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:8043:36634":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:7495:6556":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"25:1526:4398":{"crate_id":25,"path":["tokio","sync","mpsc","list","Tx"],"kind":"struct"},"1:6183:2563":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:328:7545":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:21667:3956":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:43434:6917":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:6532:3625":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:497:7581":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:8740:4182":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"20:1904:4488":{"crate_id":20,"path":["http","header","map","OccupiedEntry"],"kind":"struct"},"2:12767:6762":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44020:2557":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:4810:5919":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8064:9507":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4990:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:43849:6923":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:9235:9698":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:7036:14916":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:7539:8533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:11319:6763":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:2037:4668":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:5117:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:7448:8479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3529:4167":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7883:5997":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:4983:5925":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:14341:5289":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:7209:36444":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:2234:4675":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:672:7135":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2860:5875":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"0:164:3095":{"crate_id":0,"path":["hyper","rt","bounds"],"kind":"module"},"2:3427:3144":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"25:3281:4239":{"crate_id":25,"path":["tokio","sync","watch","error","RecvError"],"kind":"struct"},"1:6358:3623":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:10382:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:15624:5668":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"25:417:3727":{"crate_id":25,"path":["tokio","loom","std","barrier","BarrierWaitResult"],"kind":"struct"},"2:41142:4141":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2541:2786":{"crate_id":1,"path":["std","io"],"kind":"module"},"11:2137:4488":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6123:5887":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12597:4998":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:12368:739":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1:9460:3700":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11647:4882":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:21703:33151":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:7559:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:5379:5937":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:1256:36021":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:42189:4181":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:3724:4181":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:835:6437":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:5851:7172":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:8626:6340":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8257:3450":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:4873:5921":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:1611:6435":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13173:5050":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:3432:3615":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"7:32:21372":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:8308:8590":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:23245:6830":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:13766:5186":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:1974:3626":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5676:8167":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"20:2756:4155":{"crate_id":20,"path":["http","uri","ErrorKind"],"kind":"enum"},"17:11915:22570":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:6708:8344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"25:3190:3762":{"crate_id":25,"path":["tokio","sync","rwlock","owned_write_guard","OwnedRwLockWriteGuard"],"kind":"struct"},"2:10643:6757":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6672:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:7487:3989":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:44238:6943":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"24:0:2410":{"crate_id":24,"path":["http_body"],"kind":"module"},"2:22358:3134":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:8331:7209":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:22584:33776":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:6411:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:23157:6822":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:42181:4180":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:12342:4971":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:41152:6734":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:14575:4982":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6749:5842":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:23006:33173":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:6853:3742":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:22918:8615":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:586:7635":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:22:823":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:2506:5859":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6781:6068":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7016:6094":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:3730:3616":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"23:14:7523":{"crate_id":23,"path":["itoa","Buffer"],"kind":"struct"},"17:14503:5320":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:3257:3661":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:5:1940":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"6:5366:8024":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:9269:7283":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:10486:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:4937:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8179:7202":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:7983:3134":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"18:689:4635":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:592:7134":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:15383:5588":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:26130:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:43780:6919":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:47174:7099":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:1642:6451":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:0:3465":{"crate_id":16,"path":["gimli"],"kind":"module"},"25:3096:4238":{"crate_id":25,"path":["tokio","sync","notify","State"],"kind":"enum"},"2:34371:3669":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8526:2557":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11189:4831":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:7642:6560":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:9545:7144":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"11:1064:21466":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:40915:6721":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"25:135:26771":{"crate_id":25,"path":["tokio","io","async_read","AsyncRead"],"kind":"trait"},"17:15473:5611":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:7684:6561":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11877:4908":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14189:5265":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:47253:7109":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:40854:6871":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:4406:7158":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:15092:5516":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:42865:4050":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:44837:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:706:4638":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:22982:6804":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7765:6215":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"25:2896:3726":{"crate_id":25,"path":["tokio","sync","barrier","Barrier"],"kind":"struct"},"11:1580:6446":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:1545:4181":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11730:4889":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:7332:8438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10251:4653":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4947:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:8179:6274":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:1098:4485":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:9886:22466":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"25:3143:4238":{"crate_id":25,"path":["tokio","sync","oneshot","State"],"kind":"struct"},"2:44317:6947":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13424:5102":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:22712:9807":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:14977:5493":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11166:4830":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:3855:3450":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:10837:32141":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:6480:8229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:47002:7089":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"20:523:3134":{"crate_id":20,"path":["http","header","map","as_header_name","Sealed"],"kind":"trait"},"5:7829:6529":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:30787:4047":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:46729:7053":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:4372:4180":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:44416:14898":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:3014:21539":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5301:8006":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:6389:5986":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:3297:28211":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2802:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:9858:22465":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:41400:6740":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10769:36643":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"9:0:3459":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:40658:6854":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11276:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:12478:4987":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:2154:3450":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:15569:5649":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11392:4852":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:14025:5226":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:14489:5317":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:8483:6325":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:15596:5661":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:1675:7756":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:41408:6742":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:3334:6450":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:6917:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11042:4818":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:45952:6993":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:44685:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"25:160:26772":{"crate_id":25,"path":["tokio","io","async_seek","AsyncSeek"],"kind":"trait"},"1:5958:3726":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:3667:4131":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:1625:6448":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"22:1172:4464":{"crate_id":22,"path":["bytes","buf","writer","Writer"],"kind":"struct"},"2:42247:3931":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:6097:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"25:568:4380":{"crate_id":25,"path":["tokio","util","linked_list","Pointers"],"kind":"struct"},"18:608:4619":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13855:5200":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:46123:7011":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:42767:3725":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:43880:6926":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:41375:6739":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:14079:5234":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:47128:7095":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:8273:8582":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6882:8389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"25:2021:4186":{"crate_id":25,"path":["tokio","sync","oneshot","Inner"],"kind":"struct"},"6:8290:8587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6269:5970":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5311:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:14325:5287":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40993:4623":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:732:6521":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:40702:15166":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12380:1924":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12399:4978":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:42570:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2751:486":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"25:3105:2563":{"crate_id":25,"path":["tokio","sync","oneshot","Sender"],"kind":"struct"},"2:40787:4170":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"11:881:6441":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"22:399:2557":{"crate_id":22,"path":["bytes","bytes","Bytes"],"kind":"struct"},"1:894:3989":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"25:3038:3730":{"crate_id":25,"path":["tokio","sync","mutex","MappedMutexGuard"],"kind":"struct"},"22:1135:4141":{"crate_id":22,"path":["bytes","buf","take","Take"],"kind":"struct"},"2:23179:6824":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"25:615:37370":{"crate_id":25,"path":["tokio","util","markers","SyncNotSend"],"kind":"struct"},"20:1892:4485":{"crate_id":20,"path":["http","header","map","VacantEntry"],"kind":"struct"},"6:5441:8065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"20:1947:3450":{"crate_id":20,"path":["http","header","map","Cursor"],"kind":"enum"},"2:23223:6828":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:43906:6866":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:40624:6853":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:3141:4690":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:10026:34076":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5471:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:44630:6966":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:40945:6728":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"25:1699:185":{"crate_id":25,"path":["tokio","sync","mutex","Mutex"],"kind":"struct"},"1:7999:2824":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:2216:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:4404:5916":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:481:4600":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:10995:7200":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:6953:6729":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"23:30:3134":{"crate_id":23,"path":["itoa","private","Sealed"],"kind":"trait"},"2:40686:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3903:7154":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5224:7971":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:30508:9602":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:1690:7765":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:2852:36743":{"crate_id":20,"path":["http","extensions","IdHasher"],"kind":"struct"},"9:355:21400":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:1551:7672":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:10852:33157":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:15102:5517":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"25:1223:4397":{"crate_id":25,"path":["tokio","sync","mpsc","bounded","OwnedPermit"],"kind":"struct"},"2:43219:4049":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:8336:4505":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:3248:3711":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"25:83:3695":{"crate_id":25,"path":["tokio","future","poll_fn","PollFn"],"kind":"struct"},"2:46065:7000":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12768:22451":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:39703:3683":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:9103:7278":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:6150:15426":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:6799:3736":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6658:6045":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"25:3117:4239":{"crate_id":25,"path":["tokio","sync","oneshot","error","RecvError"],"kind":"struct"},"1:10889:7311":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:7159:6122":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:42278:2569":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:1098:4665":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:1584:7694":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14147:5244":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:8151:5901":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:2354:36538":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11227:4834":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:9384:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44841:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:30798:33182":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:6129:3724":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:3100:34899":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:735:26655":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14986:5494":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:44084:6939":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:4722:6713":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"25:3249:2563":{"crate_id":25,"path":["tokio","sync","watch","Sender"],"kind":"struct"},"1:4341:9643":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"14:40:5066":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"20:2834:4210":{"crate_id":20,"path":["http","byte_str","ByteStr"],"kind":"struct"},"16:6440:22401":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11089:4824":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:12671:5002":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:11874:7156":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:4796:4066":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:3340:4161":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:3638:3685":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"0:260:2401":{"crate_id":0,"path":["hyper","service"],"kind":"module"},"17:15313:5566":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"11:685:4181":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"25:1386:4399":{"crate_id":25,"path":["tokio","sync","mpsc","chan","Rx"],"kind":"struct"},"5:7760:6568":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11605:2393":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7716:36635":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:6611:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12300:22594":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"25:107:26770":{"crate_id":25,"path":["tokio","io","async_buf_read","AsyncBufRead"],"kind":"trait"},"1:3906:7155":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7919:6254":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:3201:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:4956:5924":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:47031:7090":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:10638:9594":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:16138:5798":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:11825:4903":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"13:0:3456":{"crate_id":13,"path":["std_detect"],"kind":"module"},"25:2130:3758":{"crate_id":25,"path":["tokio","sync","batch_semaphore","Semaphore"],"kind":"struct"},"16:7731:3927":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:3711:4180":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:8137:5900":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:8066:22410":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:7697:15166":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:2587:2390":{"crate_id":20,"path":["http","response","Response"],"kind":"struct"},"2:33813:3663":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"25:3035:3753":{"crate_id":25,"path":["tokio","sync","mutex","OwnedMutexGuard"],"kind":"struct"},"1:2741:4143":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:12238:4961":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:6623:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:15116:5518":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12089:4948":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:15324:5570":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12362:4976":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:8353:8601":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13211:5065":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:5545:14872":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:40892:6872":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:12713:6780":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:46679:7051":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"5:1622:6436":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:7361:8450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:2315:7149":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11688:4885":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:22586:15120":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:12929:5020":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:772:4478":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:39753:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:22850:6796":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10954:22481":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11026:22483":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:10622:36646":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:46019:6997":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:3592:2792":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"20:2690:2824":{"crate_id":20,"path":["http","uri","builder","Builder"],"kind":"struct"},"2:11031:3134":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"25:994:9440":{"crate_id":25,"path":["tokio","sync","broadcast","Recv"],"kind":"struct"},"6:5036:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:4821:4685":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"20:2552:4187":{"crate_id":20,"path":["http","method","extension","AllocatedExtension"],"kind":"struct"},"16:6302:5977":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5533:8100":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:39868:3264":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:10915:36642":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:15944:5065":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"25:877:4390":{"crate_id":25,"path":["tokio","runtime","driver","IoStack"],"kind":"struct"},"2:41931:6748":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12175:4953":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6696:6054":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:2530:5860":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6716:8346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"11:1907:6449":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:40466:6708":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"25:2937:4240":{"crate_id":25,"path":["tokio","sync","broadcast","error","TryRecvError"],"kind":"enum"},"17:10887:36650":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:12729:6781":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6659:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:7838:22409":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:45899:6986":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15010:5496":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:15931:5051":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:2765:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:8121:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:5069:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:13610:3697":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"5:1633:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"25:3288:2393":{"crate_id":25,"path":["tokio","sync","watch","state","Version"],"kind":"struct"},"25:2697:3766":{"crate_id":25,"path":["tokio","sync","once_cell","OnceCell"],"kind":"struct"},"16:8320:22412":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4914:7866":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:40665:6855":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"20:2386:4584":{"crate_id":20,"path":["http","header","value","ToStrError"],"kind":"struct"},"20:586:4472":{"crate_id":20,"path":["http","header","name","InvalidHeaderName"],"kind":"struct"},"1:10918:7202":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:6765:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:8014:5899":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:9389:3730":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:21822:6794":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:7604:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"25:806:4381":{"crate_id":25,"path":["tokio","runtime","coop","Budget"],"kind":"struct"},"1:9193:4239":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:9308:7289":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:6631:8313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:5602:7168":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:32445:3618":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:39716:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2074:1367":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:4766:5918":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11702:4886":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:41007:6732":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:23190:6825":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"20:2731:2392":{"crate_id":20,"path":["http","uri","Uri"],"kind":"struct"},"17:12225:4960":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:40528:6847":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:9407:3929":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:10595:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"20:2686:4212":{"crate_id":20,"path":["http","uri","authority","Authority"],"kind":"struct"},"1:9280:4186":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:4139:9618":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13116:5038":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"25:3216:3764":{"crate_id":25,"path":["tokio","sync","rwlock","write_guard_mapped","RwLockMappedWriteGuard"],"kind":"struct"},"25:3264:4414":{"crate_id":25,"path":["tokio","sync","watch","error","SendError"],"kind":"struct"},"17:13986:5222":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:758:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:44184:6941":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:5255:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:2420:3989":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5139:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:46374:7024":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:1494:7641":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11898:4910":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:11016:4817":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"25:3301:4455":{"crate_id":25,"path":["tokio","sync","watch","state","StateSnapshot"],"kind":"struct"},"6:5420:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:1530:7657":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:3313:36497":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12949:4680":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:30772:3647":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10068:22453":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2951:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:12792:4754":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:15463:5606":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:3396:3690":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:40739:9562":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:12621:4999":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:656:3628":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:8641:7260":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:11942:32721":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:45998:6996":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:6239:5964":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:14271:5280":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:23120:3134":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:46080:7001":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5007:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:33746:3664":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:5127:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:11237:4142":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:15206:5540":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:4303:31751":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:8261:8580":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:2930:3134":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:13026:14892":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6042:5886":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11743:4890":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:13797:5193":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:39699:3681":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:45916:6987":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:8241:7207":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:46973:7088":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:5112:9667":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:14246:5277":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:42172:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"11:2228:4870":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:8341:4155":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:8174:7201":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"24:42:2558":{"crate_id":24,"path":["http_body","Body"],"kind":"trait"},"2:42133:6751":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"22:620:3610":{"crate_id":22,"path":["bytes","bytes_mut","BytesMut"],"kind":"struct"},"2:46596:7048":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9916:22467":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:43869:6925":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2318:2825":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"18:754:4650":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:42414:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6443:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:123:7541":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:7472:31756":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"15:327:21497":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:44961:6456":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:43416:4238":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:34544:3671":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:4184:5913":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:12557:4823":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:7070:14918":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"20:1841:4479":{"crate_id":20,"path":["http","header","map","Values"],"kind":"struct"},"16:2450:5850":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:41352:6737":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:12695:5004":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:6794:6069":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:13292:5080":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:42375:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:5348:5936":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:5837:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:1376:4501":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4890:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8208:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8196:7204":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:15039:5504":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:11998:6771":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:553:7618":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:3110:5904":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14560:5328":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"25:3196:3763":{"crate_id":25,"path":["tokio","sync","rwlock","owned_write_guard_mapped","OwnedRwLockMappedWriteGuard"],"kind":"struct"},"25:1595:4412":{"crate_id":25,"path":["tokio","sync","mpsc","unbounded","UnboundedReceiver"],"kind":"struct"},"5:7770:6569":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11557:4865":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"25:1400:2599":{"crate_id":25,"path":["tokio","sync","mpsc","chan","Chan"],"kind":"struct"},"6:5249:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:8014:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"11:2539:7548":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:3649:2794":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:2010:791":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:2467:9577":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:5412:1252":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:5113:5928":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:4201:9622":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:43198:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:559:7621":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4881:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"9:236:4238":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:8546:6330":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:2660:5866":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:6064:5888":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:2570:5862":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:44834:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:4109:9616":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:1049:4485":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:7152:9722":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13774:5188":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"20:2583:2824":{"crate_id":20,"path":["http","request","Builder"],"kind":"struct"},"1:2483:9582":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:46161:7013":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"19:0:1300":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:44326:6782":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"20:1879:4501":{"crate_id":20,"path":["http","header","map","Entry"],"kind":"enum"},"11:1105:6443":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:6881:36440":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5682:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:891:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:7350:6156":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6526:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"0:162:2399":{"crate_id":0,"path":["hyper","ext"],"kind":"module"},"1:2719:32141":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:303:2835":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2076:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5051:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:8597:8696":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6890:5884":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:39655:3691":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:12969:5022":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9732:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"11:2301:4501":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:12707:5005":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:21701:33141":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:2796:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:39881:6842":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"22:1107:4140":{"crate_id":22,"path":["bytes","buf","chain","Chain"],"kind":"struct"},"16:7030:6096":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:598:36656":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:6282:32154":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:8585:6335":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:10317:4655":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:4772:9664":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:9341:27538":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:5776:8375":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:9401:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:21687:33145":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13455:5111":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"22:111:3609":{"crate_id":22,"path":["bytes","buf","buf_mut","BufMut"],"kind":"trait"},"17:14111:5238":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:2469:9578":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:21676:33145":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:11841:4905":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:680:9503":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6713:6055":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:8050:3719":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"25:3149:3757":{"crate_id":25,"path":["tokio","sync","batch_semaphore","TryAcquireError"],"kind":"enum"},"2:41359:6738":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"12:0:3462":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:21718:33143":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:7577:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:6473:8227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:4:1265":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:6678:3731":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12127:4950":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6588:6026":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:12516:4994":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:39731:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"25:2988:9698":{"crate_id":25,"path":["tokio","sync","mpsc","error","TrySendError"],"kind":"enum"},"2:47276:7110":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:40874:6716":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"25:842:4186":{"crate_id":25,"path":["tokio","runtime","park","Inner"],"kind":"struct"},"16:8165:5891":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:4929:5923":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2772:5871":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:16032:5069":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"20:2488:2388":{"crate_id":20,"path":["http","method","Method"],"kind":"struct"},"2:21930:6794":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"14:187:21480":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:11499:6769":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6843:6074":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4223:9626":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"25:888:4387":{"crate_id":25,"path":["tokio","runtime","scheduler","Handle"],"kind":"enum"},"16:2820:5873":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:15778:5712":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"0:341:2402":{"crate_id":0,"path":["hyper","upgrade"],"kind":"module"},"1:8590:7157":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:15126:5519":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:10346:7301":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:4211:9623":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:40691:6857":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6462:8219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12993:22474":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13606:5148":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:13698:34334":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:4212:4181":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"8:0:3458":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:8519:4141":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:10327:2794":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12150:4951":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:10503:27634":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"25:672:3617":{"crate_id":25,"path":["tokio","loom","std","unsafe_cell","UnsafeCell"],"kind":"struct"},"25:240:3097":{"crate_id":25,"path":["tokio","io","read_buf","ReadBuf"],"kind":"struct"},"2:42153:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:5089:9665":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:9710:7201":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:44288:4139":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:44558:6785":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11674:4884":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5319:8013":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"11:809:6529":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:14177:5263":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:47315:7124":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5019:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:6507:8249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7325:32111":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:5271:7990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:8238:15108":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6700:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:11949:2559":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"25:990:26776":{"crate_id":25,"path":["tokio","sync","broadcast","RecvGuard"],"kind":"struct"},"2:12967:4638":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:43619:6918":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:40936:6727":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:44351:6850":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:659:4626":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13064:5033":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13814:5196":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:2095:4505":{"crate_id":20,"path":["http","header","name","Custom"],"kind":"struct"},"18:491:4601":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:7990:2598":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4921:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:500:32139":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:39861:3686":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:256:4657":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:16093:5789":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:10018:22450":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:31145:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:2954:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:6867:3743":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"18:507:4602":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"20:511:26665":{"crate_id":20,"path":["http","header","map","as_header_name","AsHeaderName"],"kind":"trait"},"6:7316:8426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:4643:4065":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11755:4892":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:21804:9724":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:7527:6558":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:13089:2875":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:16079:5785":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"11:1880:4180":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11293:22501":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:43951:6931":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:9984:22469":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:44709:3703":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"20:2746:2997":{"crate_id":20,"path":["http","uri","InvalidUri"],"kind":"struct"},"2:42689:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:23278:6833":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:11063:4822":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:14876:5454":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:5144:5929":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:4874:3617":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:515:4599":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:1507:7647":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8222:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:5779:9694":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:465:7565":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:6256:6720":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:8291:3591":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:3449:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:42609:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:2707:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:5316:4169":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:473:7570":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:44720:15230":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:10820:34751":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:8031:8576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:5085:14947":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"25:3049:3736":{"crate_id":25,"path":["tokio","sync","mutex","TryLockError"],"kind":"struct"},"25:1148:4479":{"crate_id":25,"path":["tokio","sync","mpsc","block","Values"],"kind":"struct"},"2:7703:14957":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:33340:3660":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:21751:9728":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"20:512:36711":{"crate_id":20,"path":["http","header","map","as_header_name","TryEntryError"],"kind":"enum"},"2:32355:6234":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:13146:5042":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"25:3129:4240":{"crate_id":25,"path":["tokio","sync","oneshot","error","TryRecvError"],"kind":"enum"},"6:5670:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2963:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:7212:6135":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:46806:7085":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4902:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46634:7050":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:22205:9730":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:43627:6759":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:4477:14855":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:10325:7143":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:46928:7087":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:1920:7144":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13899:5208":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:3301:4180":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13999:5223":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:2821:4387":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"25:517:4196":{"crate_id":25,"path":["tokio","trace","async_trace_leaf","Trace"],"kind":"struct"},"17:13024:22475":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:41381:4167":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:675:7136":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:44620:6962":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:902:4478":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:680:4633":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6723:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:437:4662":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:491:7578":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:43115:4047":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:11051:4819":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15400:5592":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:12322:31935":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10671:36645":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:2380:4180":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:46484:7044":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6790:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12371:905":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"25:836:4383":{"crate_id":25,"path":["tokio","runtime","park","UnparkThread"],"kind":"struct"},"2:34025:3667":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:2920:5878":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"25:3068:4440":{"crate_id":25,"path":["tokio","sync","notify","AtomicNotification"],"kind":"struct"},"2:12467:15177":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:47148:7097":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:45867:6982":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:3206:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:21810:9727":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:14356:5293":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:5992:3728":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:521:26657":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:1914:3014":{"crate_id":20,"path":["http","header","map","ValueIter"],"kind":"struct"},"6:479:7573":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:2620:5864":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:46094:7002":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"9:422:21387":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:1727:7778":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:8545:2562":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:957:6437":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:261:4658":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:3096:34902":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:3089:4043":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6084:5944":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:12374:1864":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6904:6081":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"20:2574:3402":{"crate_id":20,"path":["http","request","Parts"],"kind":"struct"},"16:2900:5877":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5357:8020":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:7282:6149":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:46883:7086":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:8233:7206":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:10955:7300":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:8870:7277":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:8746:15107":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:38351:3674":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:6682:3732":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:4531:4120":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:2322:4129":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:15992:5770":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:2950:5879":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:44437:6949":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:7354:8993":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:8296:8588":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:23212:6827":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:41366:3731":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12213:4959":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13844:5199":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:46307:7021":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:11790:27490":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:7386:6158":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:6959:8614":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:2140:15130":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:42648:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:5168:9672":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"18:651:4602":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:613:36655":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8616:2562":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:7789:36636":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"23:28:26754":{"crate_id":23,"path":["itoa","Integer"],"kind":"trait"},"17:12043:4944":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:6718:3741":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:2705:4152":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11788:4898":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:8249:4153":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:33880:3665":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:531:4606":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:7431:8474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6608:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"20:1994:4497":{"crate_id":20,"path":["http","header","map","Links"],"kind":"struct"},"2:40570:6708":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:46357:7023":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13485:5115":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6953:6085":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:3087:2389":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"20:0:2386":{"crate_id":20,"path":["http"],"kind":"module"},"1:8556:2870":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:10390:4059":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:517:7598":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3287:3680":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"5:6711:36440":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11092:32144":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:818:9603":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:10031:33862":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40513:33191":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:623:36654":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:44892:3621":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12264:4963":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11567:4867":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:47119:7094":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:10603:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:9315:7290":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:16269:5101":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:8022:4914":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7521:6182":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"15:288:21492":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:9671:22449":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:10982:22482":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:32385:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:15214:5542":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:546:5835":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"25:386:97":{"crate_id":25,"path":["tokio","loom","std","atomic_usize","AtomicUsize"],"kind":"struct"},"2:4717:6712":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"20:2059:4503":{"crate_id":20,"path":["http","header","name","HdrName"],"kind":"struct"},"6:5179:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:12382:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12375:1846":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"18:589:4612":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:3659:3687":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:821:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:7518:2937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11324:4846":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:0:1010":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13344:5091":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:10386:4050":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:22200:3134":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"20:2594:3402":{"crate_id":20,"path":["http","response","Parts"],"kind":"struct"},"17:597:4664":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:42351:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"20:2020:4551":{"crate_id":20,"path":["http","header","map","Link"],"kind":"enum"},"2:4852:4067":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:16151:5804":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:1583:4478":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13946:5214":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11574:4870":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12659:5001":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"9:480:21384":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12251:4962":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"22:1116:3989":{"crate_id":22,"path":["bytes","buf","iter","IntoIter"],"kind":"struct"},"2:4595:3766":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8602:9645":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:8717:7269":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:15521:5648":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1657:7749":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:3443:3589":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:7578:7292":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:22239:33137":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:32351:2877":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:9406:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12851:5015":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:403:4660":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:2990:5881":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11799:4899":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"25:186:26773":{"crate_id":25,"path":["tokio","io","async_write","AsyncWrite"],"kind":"trait"},"1:1089:4488":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:15249:5548":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:11212:4181":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:3665:3689":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:2726:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:11708:7190":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"15:394:21503":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:15799:5715":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10350:4656":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:903:4657":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:13674:5150":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:41166:6735":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:8271:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"22:24:2556":{"crate_id":22,"path":["bytes","buf","buf_impl","Buf"],"kind":"trait"},"2:3820:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:45969:6994":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:8803:9689":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:1592:4479":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"25:3024:4239":{"crate_id":25,"path":["tokio","sync","mpsc","error","RecvError"],"kind":"struct"},"2:10394:4056":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:14038:5228":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:9442:3699":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:11075:4823":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6823:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"11:299:7542":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"14:160:6424":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7075:22405":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:9416:3739":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:9154:4180":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:1620:6529":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:3126:21541":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:32362:6835":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:45884:6985":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:2684:5867":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:949:6435":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:1897:7143":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:40864:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"20:2536:4188":{"crate_id":20,"path":["http","method","extension","InlineExtension"],"kind":"struct"},"5:7845:6571":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13922:5213":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:12356:1886":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:564:7623":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:15646:5674":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6808:5882":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10218:4652":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:43840:6921":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:538:7610":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:4454:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:10171:4048":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"25:2915:4414":{"crate_id":25,"path":["tokio","sync","broadcast","error","SendError"],"kind":"struct"},"17:14414:5302":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:6461:2563":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:15426:5598":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:6067:4120":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:96:26646":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:2366:6454":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"20:1804:4180":{"crate_id":20,"path":["http","header","map","Iter"],"kind":"struct"},"25:665:185":{"crate_id":25,"path":["tokio","loom","std","mutex","Mutex"],"kind":"struct"},"1:6199:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"25:863:4387":{"crate_id":25,"path":["tokio","runtime","driver","Handle"],"kind":"struct"},"18:581:3956":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:14855:5446":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:15333:5573":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:5447:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:12378:1840":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:9361:7522":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:43980:6933":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:43919:6928":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:10997:4815":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"25:552:181":{"crate_id":25,"path":["tokio","util","linked_list","LinkedList"],"kind":"struct"},"17:16050:5079":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:11188:4180":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:9120:7279":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:3438:4160":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:8539:4139":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"18:635:4625":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:41915:6746":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:670:4632":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"25:2639:3765":{"crate_id":25,"path":["tokio","sync","task","atomic_waker","AtomicWaker"],"kind":"struct"},"17:14847:5443":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:44643:6970":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:3455:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6866:22404":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"25:1414:4405":{"crate_id":25,"path":["tokio","sync","mpsc","chan","RxFields"],"kind":"struct"},"6:4957:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:2559:7551":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11142:4805":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:986:6441":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:1859:7141":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:13568:5140":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6914:6082":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:4821:8469":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:5497:36440":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4842:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11443:4857":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"9:176:21452":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:4103:9617":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11773:4894":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5603:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:9424:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:5257:437":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10155:4789":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5060:5926":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:1563:7680":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:873:6440":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2760:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"11:698:3989":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7168:6123":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"24:106:2560":{"crate_id":24,"path":["http_body","size_hint","SizeHint"],"kind":"struct"},"6:5562:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:44531:6960":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13235:5066":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:8428:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"25:1378:4398":{"crate_id":25,"path":["tokio","sync","mpsc","chan","Tx"],"kind":"struct"},"2:11430:6766":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8700:9676":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:1642:6528":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:4120:5911":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:22534:9812":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:23088:6818":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:46036:6998":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:42115:6749":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:40924:6876":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"25:528:26782":{"crate_id":25,"path":["tokio","util","wake_list","WakeList"],"kind":"struct"},"17:14012:5225":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8843:7164":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13553:5134":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:6437:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:14752:5360":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:42248:3930":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"25:1530:4399":{"crate_id":25,"path":["tokio","sync","mpsc","list","Rx"],"kind":"struct"},"5:7595:3989":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:21749:3134":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:7586:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"25:1030:26779":{"crate_id":25,"path":["tokio","sync","broadcast","WaitersList"],"kind":"struct"},"2:46275:7019":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:42326:4180":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:8669:6234":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6998:6086":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:2550:5861":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"25:2136:69":{"crate_id":25,"path":["tokio","sync","batch_semaphore","Acquire"],"kind":"struct"},"2:40541:6848":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:8711:6347":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"14:202:14900":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9781:22464":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:9397:4120":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:6419:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:4241:5914":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:13188:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"14:31:6424":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11524:4862":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:3347:36496":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:10388:4058":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:22360:9726":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10092:22471":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:219:6520":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7462:6172":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:15748:5704":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:7397:29622":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:9755:22446":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6942:6084":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:45837:6978":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11341:4849":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12900:5019":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:8284:8586":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"25:1211:4394":{"crate_id":25,"path":["tokio","sync","mpsc","bounded","WeakSender"],"kind":"struct"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"25:1226:219":{"crate_id":25,"path":["tokio","sync","mpsc","bounded","Receiver"],"kind":"struct"},"17:15734:5697":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:11513:6770":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:7986:8564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12366:744":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:8199:8577":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:6144:22399":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:44156:6768":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:41947:9600":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4816:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:12369:917":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"11:1564:21467":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"11:1601:6447":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:6876:6078":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:16259:5096":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:5462:8080":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:23075:6817":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:3559:4120":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:9715:27632":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:14968:5489":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6188:5960":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:12072:14880":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"20:1925:4491":{"crate_id":20,"path":["http","header","map","ValueIterMut"],"kind":"struct"},"5:288:36440":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5520:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"11:2466:6529":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:9146:7281":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12863:5016":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5151:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7990:6267":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5417:5938":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:3658:31876":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:16249:5824":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"25:855:4384":{"crate_id":25,"path":["tokio","runtime","park","CachedParkThread"],"kind":"struct"},"2:46176:7014":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:2440:4481":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"11:364:36614":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6256:5969":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:12377:1858":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2590:676":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:11674:7320":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:4325:9641":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13015:4982":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:14260:5279":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:2003:3627":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:10392:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:8489:4138":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:8330:8595":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:4875:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:46546:7046":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:8267:6284":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"25:3209:234":{"crate_id":25,"path":["tokio","sync","rwlock","write_guard","RwLockWriteGuard"],"kind":"struct"},"1:6374:32145":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:3279:3678":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"14:165:21473":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:11392:6765":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:4008:7156":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"10:0:3460":{"crate_id":10,"path":["adler"],"kind":"module"},"16:5255:5933":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11367:4823":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:7717:31927":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:7308:8421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:1632:7730":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11153:4806":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:3267:3659":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:40958:6877":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"20:2201:36662":{"crate_id":20,"path":["http","header","name","StandardHeader"],"kind":"enum"},"6:5381:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13363:5092":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:6777:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:43404:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"20:2037:36713":{"crate_id":20,"path":["http","header","map","Danger"],"kind":"enum"},"17:11419:4805":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"20:1133:2995":{"crate_id":20,"path":["http","status","InvalidStatusCode"],"kind":"struct"},"16:8503:6326":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13308:5084":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:43831:6920":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:1861:7142":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"25:3054:3755":{"crate_id":25,"path":["tokio","sync","notify","Notify"],"kind":"struct"},"25:337:37335":{"crate_id":25,"path":["tokio","net","addr","sealed","ToSocketAddrsPriv"],"kind":"trait"},"2:1961:4120":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:12355:475":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:9703:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:3065:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:42093:7157":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4869:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:7702:14956":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"14:7:6424":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11547:4733":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:44859:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7907:6253":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"14:214:6430":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:5172:5930":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"20:2009:4499":{"crate_id":20,"path":["http","header","map","ExtraValue"],"kind":"struct"},"11:2148:4485":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"0:361:3395":{"crate_id":0,"path":["hyper","upgrade","Upgraded"],"kind":"struct"},"20:1767:36714":{"crate_id":20,"path":["http","extensions","AnyClone"],"kind":"trait"},"17:14235:5275":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12422:4980":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:16187:5813":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:935:9520":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:23234:6829":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"21:10:26747":{"crate_id":21,"path":["fnv","FnvHasher"],"kind":"struct"},"1:5289:7166":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:39791:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:43941:6930":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5375:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:4564:4120":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:6406:7174":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:5334:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:5588:7167":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:0:3467":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:991:9521":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:4577:36460":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7471:6175":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:4819:8467":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:12572:4805":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:3308:6449":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2142:15131":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"25:3172:3759":{"crate_id":25,"path":["tokio","sync","semaphore","SemaphorePermit"],"kind":"struct"},"1:8480:2813":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4997:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:7879:7191":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:432:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"25:3328:7522":{"crate_id":25,"path":["tokio","util","cacheline","CachePadded"],"kind":"struct"},"16:8636:22413":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:2566:6560":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:5085:5927":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:3834:5910":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:795:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44308:6946":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:42059:33438":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:9737:22448":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:568:9491":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:44609:14899":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:6381:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11269:22500":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:44900:3622":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5088:7943":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:4817:8465":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:4844:5920":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44102:6940":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5658:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"25:3242:219":{"crate_id":25,"path":["tokio","sync","watch","Receiver"],"kind":"struct"},"2:39811:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"20:1433:4214":{"crate_id":20,"path":["http","uri","port","Port"],"kind":"struct"},"16:7424:22407":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"20:2069:7152":{"crate_id":20,"path":["http","header","name","Repr"],"kind":"enum"},"1:5965:3727":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:7507:4481":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:4912:808":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"22:1122:4461":{"crate_id":22,"path":["bytes","buf","limit","Limit"],"kind":"struct"},"25:2540:232":{"crate_id":25,"path":["tokio","sync","rwlock","RwLock"],"kind":"struct"},"18:113:26647":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:40585:14953":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"11:1674:36600":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:6796:3735":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:6665:4481":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:7567:6559":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:5629:8148":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:4713:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4976:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:2262:9486":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11764:4893":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"25:3309:4456":{"crate_id":25,"path":["tokio","sync","watch","state","AtomicState"],"kind":"struct"},"2:22572:9815":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:22625:9816":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:4929:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:9287:27440":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"25:1993:2573":{"crate_id":25,"path":["tokio","sync","oneshot"],"kind":"module"},"1:1107:6445":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:46051:6999":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"25:3111:219":{"crate_id":25,"path":["tokio","sync","oneshot","Receiver"],"kind":"struct"},"6:5482:8091":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:14016:9522":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:623:9501":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5318:5935":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:1392:4485":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:5593:8126":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"25:3044:3754":{"crate_id":25,"path":["tokio","sync","mutex","OwnedMappedMutexGuard"],"kind":"struct"},"2:40551:6849":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:1085:36602":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:8373:3590":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:11041:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:36420:3672":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14449:5314":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5395:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"11:102:4495":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10828:36648":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:1703:7769":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:7259:6148":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:80:26645":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5689:5941":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12887:5017":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:4923:9632":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6758:8358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:41017:6879":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:8737:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:33128:3657":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:1969:4494":{"crate_id":20,"path":["http","header","map","HashValue"],"kind":"struct"},"6:5288:8001":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"0:31:2397":{"crate_id":0,"path":["hyper","body"],"kind":"module"},"2:10384:4051":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:2073:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"25:818:37364":{"crate_id":25,"path":["tokio","runtime","coop","RestoreOnPending"],"kind":"struct"},"1:4694:9647":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13723:5175":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:15418:5596":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4487:7159":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47185:7100":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7495:6176":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:6513:3624":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:8058:6270":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:698:4636":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6902:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13187:5051":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"25:3059:4437":{"crate_id":25,"path":["tokio","sync","notify","Waiter"],"kind":"struct"},"6:5641:8154":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:3272:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:915:4479":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14051:5230":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"23:0:3588":{"crate_id":23,"path":["itoa"],"kind":"module"},"6:4792:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5282:5934":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:4564:6711":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:10913:8700":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:12354:1183":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13972:4916":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:30734:3646":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13399:5099":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:538:4609":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:45984:6995":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:3308:5849":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:6159:5955":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:15957:5740":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:3695:5909":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:33679:3666":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46226:7016":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:13961:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:12367:760":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:7414:8473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2435:21538":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:40562:6850":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"3:0:509":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:8723:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7959:6265":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:6680:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:5278:33131":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:43387:6908":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:10377:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:5196:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:11680:7187":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6852:6075":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:6924:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"22:311:4458":{"crate_id":22,"path":["bytes","buf","uninit_slice","UninitSlice"],"kind":"struct"},"1:5622:7169":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:47060:7091":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6984:5902":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"18:726:4645":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:12358:1323":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"25:3073:37337":{"crate_id":25,"path":["tokio","sync","notify","Notification"],"kind":"enum"},"17:11634:4881":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:7223:6136":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:8598:6338":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:6625:6029":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:46575:7047":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:16069:5784":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:3393:4163":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:1561:3989":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:12327:9508":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:1489:7639":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:7463:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:1637:6450":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:1888:4481":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:7358:5892":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"7:79:21379":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:14091:5235":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:5258:7166":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:16235:5823":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:8298:6288":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:671:4180":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:141:3555":{"crate_id":5,"path":["alloc","boxed"],"kind":"module"},"5:5805:14916":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:1725:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:786:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:1530:4180":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:15608:5664":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:11204:7280":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5025:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:6572:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:9411:3738":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:6599:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"25:3223:3767":{"crate_id":25,"path":["tokio","sync","once_cell","SetError"],"kind":"enum"},"6:1667:7755":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12353:4975":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:4694:5917":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:1023:4488":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8462:2598":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:7587:3989":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:14912:5483":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5387:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13526:5125":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5405:8045":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12508:4992":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:1631:6449":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5551:8111":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:527:9486":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:5002:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:43395:6909":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:43932:6929":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:22496:9811":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:22670:3134":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:3648:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:871:4180":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10908:8698":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:1493:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:3303:32492":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:6173:5958":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:15023:5501":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:1684:7762":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:13725:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:12483:6773":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:40836:6869":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:15168:5532":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13252:5069":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:4267:5915":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4215:9624":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5635:8151":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:22957:6803":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:14933:5488":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5570:8119":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11354:4850":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14131:5239":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:3870:6532":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:1831:15065":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:1481:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:10345:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:1514:7649":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:570:7626":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:5488:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:2880:5876":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:7487:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:10967:2813":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:4902:5922":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:22452:9810":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:15190:5538":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:3441:5907":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:2179:6533":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"21:0:3587":{"crate_id":21,"path":["fnv"],"kind":"module"},"2:40814:6868":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12201:4958":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7969:6266":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12278:4964":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"11:785:4479":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:2640:5865":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12408:4979":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12494:4989":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:928:4481":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:46243:7017":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:6534:8256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:896:5844":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:10412:9135":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"5:2168:6532":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"20:467:3134":{"crate_id":20,"path":["http","header","map","into_header_name","Sealed"],"kind":"trait"},"2:5358:985":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:10976:27670":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:4829:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:14868:5453":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:643:4602":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:8070:9552":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:7548:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11350:7319":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:47159:7098":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7058:6098":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:40823:4140":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:4137:4481":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:8551:7252":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:42453:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:12958:6754":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:7712:6564":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14066:5233":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5541:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12076:4947":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:2044:3642":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11313:4844":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:4496:14929":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"11:2533:7547":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:14463:5315":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:2960:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:43859:6924":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:1616:4481":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"20:2751:2998":{"crate_id":20,"path":["http","uri","InvalidUriParts"],"kind":"struct"},"2:44138:6767":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:44661:6786":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:15616:5667":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6740:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:8608:7256":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13046:5030":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12289:4965":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:41893:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5477:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:2606:15121":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"9:390:21386":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"20:1982:4495":{"crate_id":20,"path":["http","header","map","Bucket"],"kind":"struct"},"1:3300:32500":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:563:4611":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46389:7025":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"}},"external_crates":{"23":{"name":"itoa","html_root_url":"https://docs.rs/itoa/1.0.11/"},"20":{"name":"http","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"tokio","html_root_url":null},"22":{"name":"bytes","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"http_body","html_root_url":null},"21":{"name":"fnv","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}