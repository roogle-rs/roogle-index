{"root":"0:0:1611","crate_version":"0.14.19","includes_private":false,"index":{"34:511":{"id":"34:511","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[223,0],"end":[254,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355:1575","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"items":["34:513:1870","34:514:123","34:515:2004","34:516:2012","34:517:1988","34:518:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2423:3083":{"id":"20:2423:3083","crate_id":20,"name":"Keys","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[116,0],"end":[118,1]},"visibility":"public","docs":"An iterator over `HeaderMap` keys.\n\nEach header name is yielded only once, even if it has more than one\nassociated value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13278:70101":{"id":"2:13278:70101","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:514:123":{"id":"34:514:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[225,4],"end":[225,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:13292:16938":{"id":"2:13292:16938","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,38],"end":[65,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Request","name":"Request","id":"20:1355:1575","glob":false}},"b:2:2782-0:771:2585":{"id":"b:2:2782-0:771:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2784:1887"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:113:2017":{"id":"34:113:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[58,4],"end":[58,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3118-0:771:2585":{"id":"b:2:3118-0:771:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3088:213","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3121:123","2:3122:1385"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6345:4337":{"id":"1:6345:4337","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6346:4616","1:6347:4617","1:6348:8500","1:6349:68244","1:6351:68247","1:6353:1713","1:6354:68245","1:6356:68246"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:1185:3497":{"id":"22:1185:3497","crate_id":22,"name":"get_u32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[503,0],"end":[511,1]},"visibility":{"restricted":{"parent":"0:411:1583","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10115:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:454:640"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:30:504-0:773:2588":{"id":"b:30:504-0:773:2588","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.21/src/future/try_future/mod.rs","begin":[134,0],"end":[134,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Fut","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Fut"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"31:44:2965","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["unwrap_or_else","inspect_ok","map_ok_or_else","try_flatten","try_poll_unpin","map_ok","inspect_err","err_into","and_then","map_err","or_else","ok_into","try_flatten_stream","into_future"],"trait":{"kind":"resolved_path","inner":{"name":"TryFutureExt","id":"30:506:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Fut"}}},"2:13248:70094":{"id":"2:13248:70094","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12826:3475","str::split":"1:15741:2678","prim@char":"1:15735:2673","`DoubleEndedIterator`":"2:8323:116","str::rsplit_terminator":"1:15741:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49189:5037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6073:70745":{"id":"5:6073:70745","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1162:3500":{"id":"22:1162:3500","crate_id":22,"name":"get_u64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12836:4799":{"id":"2:12836:4799","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12838:4801","2:12839:69518","2:12840:69519","2:12841:69520","2:12842:69522","2:12843:69521","2:12844:69523"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2776:94":{"id":"2:2776:94","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2778:1887"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:4899:4356":{"id":"1:4899:4356","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:3081","1:4901:66854"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3635:209":{"id":"2:3635:209","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3636:167","2:3637:4789","2:3638:666","2:3639:353"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3640:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3112-0:312:1837":{"id":"b:2:3112-0:312:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3114:661"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:436:2252":{"id":"0:436:2252","crate_id":0,"name":"is_timeout","span":{"filename":"src/error.rs","begin":[200,4],"end":[202,5]},"visibility":"public","docs":"Returns true if the error was caused by a timeout.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3220:1723-0:773:2588":{"id":"a:2:3220:1723-0:773:2588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:947":{"id":"0:947","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[80,9],"end":[80,14]},"visibility":{"restricted":{"parent":"0:723:1588","path":"::upgrade"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:10108:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10108:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:949:640"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:312:1837":{"id":"0:312:1837","crate_id":0,"name":"Sender","span":{"filename":"src/body/body.rs","begin":[109,0],"end":[113,1]},"visibility":"public","docs":"A sender half created through [`Body::channel()`].\n\nUseful when wanting to stream chunks from another thread.\n\n## Body Closing\n\nNote that the request body will always be closed normally when the sender is dropped (meaning\nthat the empty terminating chunk will be sent to the remote). If you desire to close the\nconnection with an incomplete response (e.g. in the case of an error during asynchronous\nprocessing), call the [`Sender::abort()`] method to abort the body in an abnormal fashion.\n\n[`Body::channel()`]: struct.Body.html#method.channel\n[`Sender::abort()`]: struct.Sender.html#method.abort","links":{},"attrs":["#[must_use = \"Sender does nothing unless sent on\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:353","a:2:3220:1723-0:312:1837","a:2:3191:205-0:312:1837","a:2:3179:196-0:312:1837","a:2:9129:3293-0:312:1837","a:2:9128:3294-0:312:1837","b:2:3108-0:312:1837","b:2:3123-0:312:1837","b:2:3908-0:312:1837","b:2:3118-0:312:1837","b:2:2782-0:312:1837","b:2:3112-0:312:1837","b:2:2785-0:312:1837","0:372"]}},"2:13562:745":{"id":"2:13562:745","crate_id":2,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"IntoFuture","id":"2:13554:146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:62:3502":{"id":"22:62:3502","crate_id":22,"name":"get_i64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[533,4],"end":[533,32]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2765:3138":{"id":"20:2765:3138","crate_id":20,"name":"MAX_FORWARDS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates the max number of intermediaries the request should be sent\nthrough.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::MaxForwards),}","value":null,"is_literal":false}},"2:10127:3638":{"id":"2:10127:3638","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10128:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12765:3966":{"id":"2:12765:3966","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12766:122","2:12767:63097"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:474:2012":{"id":"34:474:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[62,4],"end":[65,54]},"visibility":"default","docs":"Poll for an optional **single** `HeaderMap` of trailers.\n\nThis function should only be called once `poll_data` returns `None`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3122:1385":{"id":"2:3122:1385","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9128:3294":{"id":"2:9128:3294","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:628:2474":{"id":"0:628:2474","crate_id":0,"name":"make_service_fn","span":{"filename":"src/service/make.rs","begin":[138,0],"end":[144,1]},"visibility":"public","docs":"Create a `MakeService` from a function.\n\n# Example\n\n```\n# #[cfg(feature = \"runtime\")]\n# async fn run() {\nuse std::convert::Infallible;\nuse hyper::{Body, Request, Response, Server};\nuse hyper::server::conn::AddrStream;\nuse hyper::service::{make_service_fn, service_fn};\n\nlet addr = ([127, 0, 0, 1], 3000).into();\n\nlet make_svc = make_service_fn(|socket: &AddrStream| {\n    let remote_addr = socket.remote_addr();\n    async move {\n        Ok::<_, Infallible>(service_fn(move |_: Request<Body>| async move {\n            Ok::<_, Infallible>(\n                Response::new(Body::from(format!(\"Hello, {}!\", remote_addr)))\n            )\n        }))\n    }\n});\n\n// Then bind and serve...\nlet server = Server::bind(&addr)\n    .serve(make_svc);\n\n// Finally, spawn `server` onto an Executor...\nif let Err(e) = server.await {\n    eprintln!(\"server error: {}\", e);\n}\n# }\n# fn main() {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MakeServiceFn","id":"0:934:2528","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Target"}}}],"output":{"kind":"generic","inner":"Ret"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Ret"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"22:1150:1735":{"id":"22:1150:1735","crate_id":22,"name":"has_remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:90:1738":{"id":"22:90:1738","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1023,4],"end":[1023,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:229":{"id":"22:229","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[132,0],"end":[191,1]},"visibility":{"restricted":{"parent":"22:199:3516","path":"::buf::chain"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","has_remaining","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","reader","copy_to_bytes","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice","take","chunks_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Chain","id":"22:1233:2834","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"items":["22:232:1738","22:233:1740","22:234:1743","22:235:1746","22:237:1751"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10726:199":{"id":"2:10726:199","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10728:167","2:10729:58715","2:10730:2009","2:10731:65580","2:10732:65581","2:10733:731","2:10734:732"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10717:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2776:3149":{"id":"20:2776:3149","crate_id":20,"name":"RETRY_AFTER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"The Retry-After response HTTP header indicates how long the user agent\nshould wait before making a follow-up request. There are two main cases\nthis header is used:\n\n* When sent with a 503 (Service Unavailable) response, it indicates how\nlong the service is expected to be unavailable.\n\n* When sent with a redirect response, such as 301 (Moved Permanently),\nit indicates the minimum time that the user agent is asked to wait\nbefore issuing the redirected request.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::RetryAfter),}","value":null,"is_literal":false}},"0:456:2258":{"id":"0:456:2258","crate_id":0,"name":"source","span":{"filename":"src/error.rs","begin":[514,4],"end":[519,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StdError","id":"1:2565:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"outlives":"'static"}]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2738:3111":{"id":"20:2738:3111","crate_id":20,"name":"CONNECTION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Controls whether or not the network connection stays open after the\ncurrent transaction finishes.\n\nIf the value sent is keep-alive, the connection is persistent and not\nclosed, allowing for subsequent requests to the same server to be done.\n\nExcept for the standard hop-by-hop headers (Keep-Alive,\nTransfer-Encoding, TE, Connection, Trailer, Upgrade, Proxy-Authorization\nand Proxy-Authenticate), any hop-by-hop headers used by the message must\nbe listed in the Connection header, so that the first proxy knows he has\nto consume them and not to forward them further. Standard hop-by-hop\nheaders can be listed too (it is often the case of Keep-Alive, but this\nis not mandatory.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Connection),}","value":null,"is_literal":false}},"36:36:360":{"id":"36:36:360","crate_id":36,"name":"call","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[303,4],"end":[303,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["request",{"kind":"generic","inner":"Request"}]],"output":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:96:1740":{"id":"22:96:1740","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1051,4],"end":[1051,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:723:1588":{"id":"0:723:1588","crate_id":0,"name":"upgrade","span":{"filename":"src/upgrade.rs","begin":[1,0],"end":[382,1]},"visibility":"public","docs":"HTTP Upgrades\n\nThis module deals with managing [HTTP Upgrades][mdn] in hyper. Since\nseveral concepts in HTTP allow for first talking HTTP, and then converting\nto a different protocol, this module conflates them into a single API.\nThose include:\n\n- HTTP/1.1 Upgrades\n- HTTP `CONNECT`\n\nYou are responsible for any other pre-requisites to establish an upgrade,\nsuch as sending the appropriate headers, methods, and status codes. You can\nthen use [`on`][] to grab a `Future` which will resolve to the upgraded\nconnection object, or an error if the upgrade fails.\n\n[mdn]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism\n\n# Client\n\nSending an HTTP upgrade from the [`client`](super::client) involves setting\neither the appropriate method, if wanting to `CONNECT`, or headers such as\n`Upgrade` and `Connection`, on the `http::Request`. Once receiving the\n`http::Response` back, you must check for the specific information that the\nupgrade is agreed upon by the server (such as a `101` status code), and then\nget the `Future` from the `Response`.\n\n# Server\n\nReceiving upgrade requests in a server requires you to check the relevant\nheaders in a `Request`, and if an upgrade should be done, you then send the\ncorresponding headers in a response. To then wait for hyper to finish the\nupgrade, you call `on()` with the `Request`, and then can spawn a task\nawaiting it.\n\n# Example\n\nSee [this example][example] showing how upgrades work with both\nClients and Servers.\n\n[example]: https://github.com/hyperium/hyper/blob/master/examples/upgrades.rs","links":{"`on`":"0:775:938"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:771:2585","0:773:2588","0:942:2592","0:775:938"]}},"20:2743:3116":{"id":"20:2743:3116","crate_id":20,"name":"CONTENT_LOCATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates an alternate location for the returned data.\n\nThe principal use case is to indicate the URL of the resource\ntransmitted as the result of content negotiation.\n\nLocation and Content-Location are different: Location indicates the\ntarget of a redirection (or the URL of a newly created document), while\nContent-Location indicates the direct URL to use to access the resource,\nwithout the need of further content negotiation. Location is a header\nassociated with the response, while Content-Location is associated with\nthe entity returned.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentLocation),}","value":null,"is_literal":false}},"34:342:2012":{"id":"34:342:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[72,4],"end":[75,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3066","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3066","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13560:167":{"id":"2:13560:167","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:2:3108-0:771:2585":{"id":"b:2:3108-0:771:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3111:1764"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:181:2017":{"id":"34:181:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[82,4],"end":[82,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13228:65184":{"id":"2:13228:65184","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2515:3087":{"id":"20:2515:3087","crate_id":20,"name":"ValueIterMut","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[198,0],"end":[204,1]},"visibility":"public","docs":"A mutable iterator of all values associated with a single header name.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:2756:3129":{"id":"20:2756:3129","crate_id":20,"name":"HOST","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Specifies the domain name of the server and (optionally) the TCP port\nnumber on which the server is listening.\n\nIf no port is given, the default port for the service requested (e.g.,\n\"80\" for an HTTP URL) is implied.\n\nA Host header field must be sent in all HTTP/1.1 request messages. A 400\n(Bad Request) status code will be sent to any HTTP/1.1 request message\nthat lacks a Host header field or contains more than one.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Host),}","value":null,"is_literal":false}},"22:74:3514":{"id":"22:74:3514","crate_id":22,"name":"get_f64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[776,4],"end":[776,32]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\"[..];\nassert_eq!(1.2f64, buf.get_f64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13286:70106":{"id":"2:13286:70106","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12856:4798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:70746":{"id":"5:6085:70746","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:297:1582":{"id":"0:297:1582","crate_id":0,"name":"Body","span":{"filename":"src/body/body.rs","begin":[36,0],"end":[41,1]},"visibility":"public","docs":"A stream of `Bytes`, used when receiving bodies.\n\nA good default [`HttpBody`](crate::body::HttpBody) to use in many\napplications.\n\nNote: To read the full body, use [`body::to_bytes`](crate::body::to_bytes)\nor [`body::aggregate`](crate::body::aggregate).","links":{"crate::body::aggregate":"0:242:1863","crate::body::HttpBody":"34:470:1582","crate::body::to_bytes":"0:402:1866"},"attrs":["#[must_use = \"streams do nothing unless polled\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:318","a:2:3220:1723-0:297:1582","a:2:3191:205-0:297:1582","a:2:3179:196-0:297:1582","a:2:9129:3293-0:297:1582","a:2:9128:3294-0:297:1582","b:2:3108-0:297:1582","b:2:3123-0:297:1582","b:2:3908-0:297:1582","b:2:3118-0:297:1582","b:2:2782-0:297:1582","b:2:3112-0:297:1582","b:2:2785-0:297:1582","0:327","0:329","0:337","0:339","0:341","0:343","0:345","0:347","0:349","0:351"]}},"36:18:2034":{"id":"36:18:2034","crate_id":36,"name":"poll_ready","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[257,4],"end":[257,84]},"visibility":"default","docs":"Returns `Poll::Ready(Ok(()))` when the service is able to process requests.\n\nIf the service is at capacity, then `Poll::Pending` is returned and the task\nis notified when the service becomes ready again. This function is\nexpected to be called while on a task. Generally, this can be done with\na simple `futures::future::poll_fn` call.\n\nIf `Poll::Ready(Err(_))` is returned, the service is no longer able to service requests\nand the caller should discard the service instance.\n\nOnce `poll_ready` returns `Poll::Ready(Ok(()))`, a request may be dispatched to the\nservice using `call`. Until a request is dispatched, repeated calls to\n`poll_ready` must return either `Poll::Ready(Ok(()))` or `Poll::Ready(Err(_))`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3014:4668":{"id":"2:3014:4668","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3013:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:441:4356":{"id":"24:441:4356","crate_id":24,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrsPriv","id":"24:496:71468","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9128:3294-0:942:2592":{"id":"a:2:9128:3294-0:942:2592","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9128:3294","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9128:3294","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"24:187:2909":{"id":"24:187:2909","crate_id":24,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:188:71696","24:189:64050"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:229:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2789:3161":{"id":"20:2789:3161","crate_id":20,"name":"UPGRADE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Used as part of the exchange to upgrade the protocol.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Upgrade),}","value":null,"is_literal":false}},"0:340:661":{"id":"0:340:661","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[489,4],"end":[495,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["chunk",{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:533:2017":{"id":"34:533:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[316,4],"end":[316,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:794:992":{"id":"0:794:992","crate_id":0,"name":"poll","span":{"filename":"src/upgrade.rs","begin":[213,4],"end":[222,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:13539:134","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:32:1576":{"id":"36:32:1576","crate_id":36,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[295,4],"end":[295,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Response","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:13272:70099":{"id":"2:13272:70099","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8323:116","self::pattern":"2:12826:3475","str::rmatch_indices":"1:15741:2678","prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49289:5041","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9128:3294-0:312:1837":{"id":"a:2:9128:3294-0:312:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9128:3294","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"34:109:123":{"id":"34:109:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[38,4],"end":[38,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38494:2941","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"20:2482:3085":{"id":"20:2482:3085","crate_id":20,"name":"VacantEntry","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[169,0],"end":[175,1]},"visibility":"public","docs":"A view into a single empty location in a `HeaderMap`.\n\nThis struct is returned as part of the `Entry` enum.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:10332:142":{"id":"2:10332:142","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10333:632","2:10334:2129","2:10335:64297","2:10336:64298","2:10337:64299","2:10338:64300","2:10339:64301","2:10340:64302","2:10341:64303","2:10342:64304","2:10343:64305","2:10344:64306","2:10345:64307","2:10346:64308","2:10347:64309","2:10348:1498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3085:131":{"id":"2:3085:131","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3087:661"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:237:1751":{"id":"22:237:1751","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[174,4],"end":[174,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:485:1102":{"id":"0:485:1102","crate_id":0,"name":"rt","span":{"filename":"src/rt.rs","begin":[1,0],"end":[12,1]},"visibility":"public","docs":"Runtime components\n\nBy default, hyper includes the [tokio](https://tokio.rs) runtime.\n\nIf the `runtime` feature is disabled, the types in this module can be used\nto plug in other runtimes.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:486:2437"]}},"22:840:1740":{"id":"22:840:1740","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[949,4],"end":[949,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:176:1870":{"id":"34:176:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[38,4],"end":[38,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"20:2742:3115":{"id":"20:2742:3115","crate_id":20,"name":"CONTENT_LENGTH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates the size of the entity-body.\n\nThe header value must be a decimal indicating the number of octets sent\nto the recipient.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentLength),}","value":null,"is_literal":false}},"2:3191:205":{"id":"2:3191:205","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12851:4802":{"id":"2:12851:4802","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12853:3551","2:12854:69309","2:12855:69310"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12845:4801","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:945:2600":{"id":"0:945:2600","crate_id":0,"name":"read_buf","span":{"filename":"src/upgrade.rs","begin":[92,4],"end":[92,23]},"visibility":"public","docs":"A buffer of bytes that have been read but not processed as HTTP.\n\nFor instance, if the `Connection` is used for an HTTP upgrade request,\nit is possible the server sent back the first bytes of the new protocol\nalong with the response upgrade.\n\nYou will want to check for any existing bytes if you plan to continue\ncommunicating on the IO object.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"22:1154:3492":{"id":"22:1154:3492","crate_id":22,"name":"get_u16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5627:4372":{"id":"1:5627:4372","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:64191","1:5629:64193","1:5630:64192","1:5631:64194"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3114:661":{"id":"2:3114:661","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:526:1728":{"id":"22:526:1728","crate_id":22,"name":"Bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[94,0],"end":[100,1]},"visibility":"public","docs":"A cheaply cloneable and sliceable chunk of contiguous memory.\n\n`Bytes` is an efficient container for storing and operating on contiguous\nslices of memory. It is intended for use primarily in networking code, but\ncould have applications elsewhere as well.\n\n`Bytes` values facilitate zero-copy network programming by allowing multiple\n`Bytes` objects to point to the same underlying memory.\n\n`Bytes` does not have a single implementation. It is an interface, whose\nexact behavior is implemented through dynamic dispatch in several underlying\nimplementations of `Bytes`.\n\nAll `Bytes` implementations must fulfill the following requirements:\n- They are cheaply cloneable and thereby shareable between an unlimited amount\n  of components, for example by modifying a reference count.\n- Instances can be sliced to refer to a subset of the the original buffer.\n\n```\nuse bytes::Bytes;\n\nlet mut mem = Bytes::from(\"Hello world\");\nlet a = mem.slice(0..5);\n\nassert_eq!(a, \"Hello\");\n\nlet b = mem.split_to(6);\n\nassert_eq!(mem, \"world\");\nassert_eq!(b, \"Hello \");\n```\n\n# Memory layout\n\nThe `Bytes` struct itself is fairly small, limited to 4 `usize` fields used\nto track information about which segment of the underlying memory the\n`Bytes` handle has access to.\n\n`Bytes` keeps both a pointer to the shared state containing the full memory\nslice and a pointer to the start of the region visible by the handle.\n`Bytes` also tracks the length of its view into the memory.\n\n# Sharing\n\n`Bytes` contains a vtable, which allows implementations of `Bytes` to define\nhow sharing/cloneing is implemented in detail.\nWhen `Bytes::clone()` is called, `Bytes` will call the vtable function for\ncloning the backing storage in order to share it behind between multiple\n`Bytes` instances.\n\nFor `Bytes` implementations which refer to constant memory (e.g. created\nvia `Bytes::from_static()`) the cloning implementation will be a no-op.\n\nFor `Bytes` implementations which point to a reference counted shared storage\n(e.g. an `Arc<[u8]>`), sharing will be implemented by increasing the\nthe reference count.\n\nDue to this mechanism, multiple `Bytes` instances may point to the same\nshared memory region.\nEach `Bytes` instance can point to different sections within that\nmemory region, and `Bytes` instances may or may not have overlapping views\ninto the memory.\n\nThe following diagram visualizes a scenario where 2 `Bytes` instances make\nuse of an `Arc`-based backing storage, and provide access to different views:\n\n```text\n\n   Arc ptrs                   +---------+\n   ________________________ / | Bytes 2 |\n  /                           +---------+\n /          +-----------+     |         |\n|_________/ |  Bytes 1  |     |         |\n|           +-----------+     |         |\n|           |           | ___/ data     | tail\n|      data |      tail |/              |\nv           v           v               v\n+-----+---------------------------------+-----+\n| Arc |     |           |               |     |\n+-----+---------------------------------+-----+\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:339"]}},"b:2:2782-0:942:2592":{"id":"b:2:2782-0:942:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2784:1887"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13202:58715":{"id":"2:13202:58715","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47181:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3252:4429":{"id":"2:3252:4429","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3254:167","2:3255:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[487,0],"end":[496,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:340:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:24:2495-0:771:2585":{"id":"b:24:2495-0:771:2585","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.18.2/src/io/util/async_read_ext.rs","begin":[1294,0],"end":[1294,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:229:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["read_u128","read_i32","read_u16","read_buf","read","read_f32_le","read_i64_le","read_i16_le","read_i128","read_u64","read_i16","read_u8","read_u32_le","read_to_end","read_u16_le","read_u128_le","read_i32_le","read_f32","read_i64","chain","read_i8","read_u32","read_f64_le","read_to_string","take","read_exact","read_i128_le","read_u64_le","read_f64"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncReadExt","id":"24:4106:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"R"}}},"1:5697:4377":{"id":"1:5697:4377","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:66890"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:400:1743":{"id":"22:400:1743","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[19,4],"end":[19,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2787:3160":{"id":"20:2787:3160","crate_id":20,"name":"TRANSFER_ENCODING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Specifies the form of encoding used to safely transfer the entity to the\nclient.\n\n`transfer-encoding` is a hop-by-hop header, that is applying to a\nmessage between two nodes, not to a resource itself. Each segment of a\nmulti-node connection can use different `transfer-encoding` values. If\nyou want to compress data over the whole connection, use the end-to-end\nheader `content-encoding` header instead.\n\nWhen present on a response to a `HEAD` request that has no body, it\nindicates the value that would have applied to the corresponding `GET`\nmessage.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::TransferEncoding),}","value":null,"is_literal":false}},"2:13313:70111":{"id":"2:13313:70111","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15735:2673"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49438:5050","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:95:1738":{"id":"22:95:1738","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1040,4],"end":[1040,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3108-0:312:1837":{"id":"b:2:3108-0:312:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3111:1764"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3487:4857":{"id":"2:3487:4857","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3489:732"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3483:4503","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[18,21],"end":[18,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"bytes::Bytes","name":"Bytes","id":"22:526:1728","glob":false}},"2:13191:1749":{"id":"2:13191:1749","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8238:4725":{"id":"2:8238:4725","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8240:1739"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1152:3490":{"id":"22:1152:3490","crate_id":22,"name":"get_u8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:286":{"id":"34:286","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[97,0],"end":[125,1]},"visibility":{"restricted":{"parent":"34:225:59504","path":"::combinators::box_body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3068","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["34:289:1870","34:290:123","34:291:2004","34:292:2012","34:293:1988","34:294:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:289:1870":{"id":"34:289:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[101,4],"end":[101,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"D"},"generics":{"params":[],"where_predicates":[]}}},"22:560":{"id":"22:560","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[526,0],"end":[560,1]},"visibility":{"restricted":{"parent":"22:458:1598","path":"::bytes"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","has_remaining","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","reader","copy_to_bytes","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice","take","chunks_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["22:561:1738","22:562:1740","22:563:1743","22:564:1751"],"negative":false,"synthetic":false,"blanket_impl":null}},"30:4786:1892":{"id":"30:4786:1892","crate_id":30,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:4787:72251","30:4789:1985","30:4792:1986","30:4795:277","30:4798:6479","30:4801:72253","30:4803:72254","30:4805:6478","30:4806:6480","30:4807:3587","30:4810:6486","30:4813:6487","30:4816:6490","30:4820:3581","30:4822:6484","30:4823:6481","30:4826:6482","30:4830:6407","30:4831:3586","30:4835:6483","30:4836:6488","30:4837:6489","30:4838:72370"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryStream","id":"31:127:2968","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:841:1743":{"id":"22:841:1743","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[954,4],"end":[954,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:472:123":{"id":"34:472:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[51,4],"end":[51,15]},"visibility":"default","docs":"The error type this `Body` might generate.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"34:111:2012":{"id":"34:111:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[47,4],"end":[50,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:534:2025","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:534:2025","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3092:212":{"id":"2:3092:212","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3094:123","2:3095:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:45:1746":{"id":"22:45:1746","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[163,4],"end":[163,70]},"visibility":"default","docs":"Fills `dst` with potentially multiple slices starting at `self`'s\ncurrent position.\n\nIf the `Buf` is backed by disjoint slices of bytes, `chunk_vectored` enables\nfetching more than one slice at once. `dst` is a slice of `IoSlice`\nreferences, enabling the slice to be directly used with [`writev`]\nwithout any further conversion. The sum of the lengths of all the\nbuffers in `dst` will be less than or equal to `Buf::remaining()`.\n\nThe entries in `dst` will be overwritten, but the data **contained** by\nthe slices **will not** be modified. If `chunk_vectored` does not fill every\nentry in `dst`, then `dst` is guaranteed to contain all remaining slices\nin `self.\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk_vectored` must return 0\nwithout mutating `dst`.\n\nImplementations should also take care to properly handle being called\nwith `dst` being a zero length slice.\n\n[`writev`]: http://man7.org/linux/man-pages/man2/readv.2.html","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10945:1725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5555:4391":{"id":"1:5555:4391","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:64446","1:5557:5298"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6465:4398":{"id":"1:6465:4398","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6466:66945","1:6467:66946"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2729:3102":{"id":"20:2729:3102","crate_id":20,"name":"ACCESS_CONTROL_EXPOSE_HEADERS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates which headers can be exposed as part of the response by\nlisting their names.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlExposeHeaders),}","value":null,"is_literal":false}},"2:2867:163":{"id":"2:2867:163","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:398","2:2869:3483","2:2870:1798","2:2871:3550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2836:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:47:2004":{"id":"34:47:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[29,4],"end":[32,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2024","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2024","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2024","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13301:70109":{"id":"2:13301:70109","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22788:18382":{"id":"2:22788:18382","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22789:9720","2:22790:68613","2:22791:68614"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22781:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2774:3147":{"id":"20:2774:3147","crate_id":20,"name":"REFERRER_POLICY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Governs which referrer information should be included with requests\nmade.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ReferrerPolicy),}","value":null,"is_literal":false}},"20:2769:3142":{"id":"20:2769:3142","crate_id":20,"name":"PROXY_AUTHORIZATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Contains the credentials to authenticate a user agent to a proxy server.\n\nThis header is usually included after the server has responded with a\n407 Proxy Authentication Required status and the Proxy-Authenticate\nheader.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ProxyAuthorization),}","value":null,"is_literal":false}},"20:2782:3155":{"id":"20:2782:3155","crate_id":20,"name":"SERVER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Contains information about the software used by the origin server to\nhandle the request.\n\nOverly long and detailed Server values should be avoided as they\npotentially reveal internal implementation details that might make it\n(slightly) easier for attackers to find and exploit known security\nholes.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Server),}","value":null,"is_literal":false}},"22:140:1727":{"id":"22:140:1727","crate_id":22,"name":"BufMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["22:141:3517","22:142:3518","22:143:3519","22:144:3520","22:145:1757","22:147:1799","22:148:3521","22:149:3522","22:150:3523","22:151:3524","22:152:3525","22:153:3526","22:154:3527","22:155:3528","22:156:3529","22:157:3530","22:158:3531","22:159:3532","22:160:3533","22:161:3534","22:162:3535","22:163:3536","22:164:3537","22:165:3538","22:166:3539","22:167:3540","22:168:3541","22:169:3542","22:170:3543","22:171:3544","22:172:3545","22:173:3546","22:174:3547","22:175:2865","22:176:3548","22:177:3549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2736:3109":{"id":"20:2736:3109","crate_id":20,"name":"AUTHORIZATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Contains the credentials to authenticate a user agent with a server.\n\nUsually this header is included after the server has responded with a\n401 Unauthorized status and the WWW-Authenticate header.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Authorization),}","value":null,"is_literal":false}},"a:2:9129:3293-0:421:123":{"id":"a:2:9129:3293-0:421:123","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9129:3293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"5:6397:3610":{"id":"5:6397:3610","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3220:1723-0:421:123":{"id":"a:2:3220:1723-0:421:123","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"20:2778:3151":{"id":"20:2778:3151","crate_id":20,"name":"SEC_WEBSOCKET_EXTENSIONS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"The |Sec-WebSocket-Extensions| header field is used in the WebSocket\nopening handshake. It is initially sent from the client to the\nserver, and then subsequently sent from the server to the client, to\nagree on a set of protocol-level extensions to use for the duration\nof the connection.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketExtensions),}","value":null,"is_literal":false}},"0:421:123":{"id":"0:421:123","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[11,0],"end":[13,1]},"visibility":"public","docs":"Represents errors that can occur handling HTTP streams.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:426","a:2:3220:1723-0:421:123","a:2:3191:205-0:421:123","a:2:3179:196-0:421:123","a:2:9129:3293-0:421:123","a:2:9128:3294-0:421:123","b:2:3108-0:421:123","b:2:3123-0:421:123","b:2:3908-0:421:123","b:2:3118-0:421:123","b:2:2782-0:421:123","b:2:3112-0:421:123","b:2:2785-0:421:123","b:5:6395-0:421:123","0:451","0:453","0:455"]}},"2:13208:65581":{"id":"2:13208:65581","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3908-0:773:2588":{"id":"b:2:3908-0:773:2588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3906:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3910:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13216:1598":{"id":"2:13216:1598","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49125:1728","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1153:3491":{"id":"22:1153:3491","crate_id":22,"name":"get_i8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:87":{"id":"22:87","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1017,0],"end":[1019,1]},"visibility":{"restricted":{"parent":"22:7:2875","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","has_remaining","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","reader","copy_to_bytes","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice","take","chunks_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["22:1171:1738","22:1172:1740","22:1173:1746","22:1175:1743","22:1176:1735","22:1177:3489","22:1178:3490","22:1179:3491","22:1180:3492","22:1181:3493","22:1182:3494","22:1183:3495","22:1184:3496","22:1185:3497","22:1186:3498","22:1187:3499","22:1188:3500","22:1189:3501","22:1190:3502","22:1191:3503","22:1192:3508","22:1193:3509","22:1194:3510","22:1195:3511","22:1196:1751"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:64:3504":{"id":"22:64:3504","crate_id":22,"name":"get_u128","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[573,4],"end":[573,34]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5693:4371":{"id":"1:5693:4371","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:63749"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3179:196-0:312:1837":{"id":"a:2:3179:196-0:312:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3189:103":{"id":"2:3189:103","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13316:70112":{"id":"2:13316:70112","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15735:2673"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49456:5051","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:348:661":{"id":"0:348:661","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[524,4],"end":[526,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:340:1743":{"id":"22:340:1743","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[142,4],"end":[142,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13217:34322":{"id":"2:13217:34322","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15741:2678"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49413:5047","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:71:3511":{"id":"22:71:3511","crate_id":22,"name":"get_int_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[713,4],"end":[713,50]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_int_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2785-0:312:1837":{"id":"b:2:2785-0:312:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2779:3071","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2787:63723"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3112-0:773:2588":{"id":"b:2:3112-0:773:2588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3114:661"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"30:3545:2967":{"id":"30:3545:2967","crate_id":30,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:3546:900","30:3547:745","30:3548:819","30:3551:3570","30:3552:3568","30:3555:3569","30:3559:6427","30:3562:2780","30:3564:3596","30:3569:415","30:3570:478","30:3571:3599","30:3572:3588","30:3576:278","30:3579:261","30:3582:3577","30:3583:6431","30:3585:3576","30:3588:71854","30:3592:3575","30:3597:3572","30:3600:3573","30:3603:6426","30:3605:3567","30:3608:6433","30:3612:1758","30:3613:1279","30:3614:3578","30:3615:3580","30:3616:2742","30:3618:71724","30:3620:2812","30:3621:6430","30:3622:3564","30:3624:3516","30:3626:3571","30:3627:6428","30:3628:6429","30:3629:3579","30:3631:71855","30:3633:71856","30:3635:71857","30:3636:6425"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"31:96:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2751:3124":{"id":"20:2751:3124","crate_id":20,"name":"ETAG","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Identifier for a specific version of a resource.\n\nThis header allows caches to be more efficient, and saves bandwidth, as\na web server does not need to send a full response if the content has\nnot changed. On the other side, if the content has changed, etags are\nuseful to help prevent simultaneous updates of a resource from\noverwriting each other (\"mid-air collisions\").\n\nIf the resource at a given URL changes, a new Etag value must be\ngenerated. Etags are therefore similar to fingerprints and might also be\nused for tracking purposes by some servers. A comparison of them allows\nto quickly determine whether two representations of a resource are the\nsame, but they might also be set to persist indefinitely by a tracking\nserver.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Etag),}","value":null,"is_literal":false}},"0:778:2615":{"id":"0:778:2615","crate_id":0,"name":"downcast","span":{"filename":"src/upgrade.rs","begin":[136,4],"end":[148,5]},"visibility":"public","docs":"Tries to downcast the internal trait object to the type passed.\n\nOn success, returns the downcasted parts. On error, returns the\n`Upgraded` back.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:229:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:308:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,69],"end":[65,72]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Uri","name":"Uri","id":"20:3221:1578","glob":false}},"34:180:1988":{"id":"34:180:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[78,4],"end":[78,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3111:1764":{"id":"2:3111:1764","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3085:131"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:532:1988":{"id":"34:532:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[312,4],"end":[312,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6771:4346":{"id":"1:6771:4346","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6772:68157"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3554:5113":{"id":"2:3554:5113","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3556:68682","2:3557:68683","2:3558:65617"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"22:1196:1751":{"id":"22:1196:1751","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3268:4712":{"id":"2:3268:4712","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3270:167","2:3271:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:369:2053":{"id":"0:369:2053","crate_id":0,"name":"try_send_data","span":{"filename":"src/body/body.rs","begin":[598,4],"end":[602,5]},"visibility":"public","docs":"Try to send data on this channel.\n\n# Errors\n\nReturns `Err(Bytes)` if the channel could not (currently) accept\nanother `Bytes`.\n\n# Note\n\nThis is mostly useful for when trying to send from some other thread\nthat doesn't have an async context. If in an async context, prefer\n`send_data()` instead.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["chunk",{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:797:640":{"id":"0:797:640","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[226,4],"end":[228,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10057:191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2784:1887":{"id":"2:2784:1887","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3262:4709":{"id":"2:3262:4709","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3264:167","2:3265:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:331:123":{"id":"0:331:123","crate_id":0,"name":"Error","span":{"filename":"src/body/body.rs","begin":[361,4],"end":[361,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"20:2791:3164":{"id":"20:2791:3164","crate_id":20,"name":"VARY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Determines how to match future requests with cached responses.\n\nThe `vary` HTTP response header determines how to match future request\nheaders to decide whether a cached response can be used rather than\nrequesting a fresh one from the origin server. It is used by the server\nto indicate which headers it used when selecting a representation of a\nresource in a content negotiation algorithm.\n\nThe `vary` header should be set on a 304 Not Modified response exactly\nlike it would have been set on an equivalent 200 OK response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Vary),}","value":null,"is_literal":false}},"22:1157:3495":{"id":"22:1157:3495","crate_id":22,"name":"get_i16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3191:205-0:773:2588":{"id":"a:2:3191:205-0:773:2588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"20:2752:3125":{"id":"20:2752:3125","crate_id":20,"name":"EXPECT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates expectations that need to be fulfilled by the server in order\nto properly handle the request.\n\nThe only expectation defined in the specification is Expect:\n100-continue, to which the server shall respond with:\n\n* 100 if the information contained in the header is sufficient to cause\nan immediate success,\n\n* 417 (Expectation Failed) if it cannot meet the expectation; or any\nother 4xx status otherwise.\n\nFor example, the server may reject a request if its Content-Length is\ntoo large.\n\nNo common browsers send the Expect header, but some other clients such\nas cURL do so by default.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Expect),}","value":null,"is_literal":false}},"2:3257:4707":{"id":"2:3257:4707","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3259:167","2:3260:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2772:3145":{"id":"20:2772:3145","crate_id":20,"name":"RANGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates the part of a document that the server should return.\n\nSeveral parts can be requested with one Range header at once, and the\nserver may send back these ranges in a multipart document. If the server\nsends back ranges, it uses the 206 Partial Content for the response. If\nthe ranges are invalid, the server returns the 416 Range Not Satisfiable\nerror. The server can also ignore the Range header and return the whole\ndocument with a 200 status code.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Range),}","value":null,"is_literal":false}},"2:13266:2235":{"id":"2:13266:2235","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15735:2673","str::matches":"1:15741:2678","`DoubleEndedIterator`":"2:8323:116","self::pattern":"2:12826:3475"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49343:5044","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:509:1988":{"id":"34:509:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[214,4],"end":[214,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3908-0:312:1837":{"id":"b:2:3908-0:312:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3906:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3910:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3908-0:421:123":{"id":"b:2:3908-0:421:123","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3906:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3910:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:292:2012":{"id":"34:292:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[111,4],"end":[114,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3068","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3068","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8275:132":{"id":"2:8275:132","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8277:664"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:642:1862":{"id":"34:642:1862","crate_id":34,"name":"SizeHint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/size_hint.rs","begin":[10,0],"end":[13,1]},"visibility":"public","docs":"A `Body` size hint\n\nThe default implementation returns:\n\n* 0 for `lower`\n* `None` for `upper`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:268:2004":{"id":"34:268:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[45,4],"end":[48,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3065","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3065","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3065","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1146:1740":{"id":"22:1146:1740","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2472:4053":{"id":"20:2472:4053","crate_id":20,"name":"Occupied","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[159,4],"end":[159,34]},"visibility":"default","docs":"An occupied entry","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"20:2494:3084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}]}},"34:386:2004":{"id":"34:386:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[57,4],"end":[60,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3067","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3067","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3067","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3079:74":{"id":"2:3079:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3081:1993"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"36:25:123":{"id":"36:25:123","crate_id":36,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[279,4],"end":[279,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"22:48:1735":{"id":"22:48:1735","crate_id":22,"name":"has_remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[225,4],"end":[225,35]},"visibility":"default","docs":"Returns true if there are any more bytes to consume\n\nThis is equivalent to `self.remaining() != 0`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"a\"[..];\n\nassert!(buf.has_remaining());\n\nbuf.get_u8();\n\nassert!(!buf.has_remaining());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:471:1870":{"id":"34:471:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[48,4],"end":[48,19]},"visibility":"default","docs":"Values yielded by the `Body`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"30:6251:2982":{"id":"30:6251:2982","crate_id":30,"name":"LocalSpawnExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:6252:6389"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LocalSpawn","id":"33:19:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:66:3506":{"id":"22:66:3506","crate_id":22,"name":"get_i128","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[613,4],"end":[613,34]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2785-0:421:123":{"id":"b:2:2785-0:421:123","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2779:3071","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2787:63723"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:516:2012":{"id":"34:516:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[237,4],"end":[240,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355:1575","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355:1575","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6089:64415":{"id":"5:6089:64415","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15741:2678"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2785-0:942:2592":{"id":"b:2:2785-0:942:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2779:3071","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2787:63723"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2762:3135":{"id":"20:2762:3135","crate_id":20,"name":"LAST_MODIFIED","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Content-Types that are acceptable for the response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::LastModified),}","value":null,"is_literal":false}},"2:13295:65618":{"id":"2:13295:65618","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:521:1870":{"id":"34:521:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[257,4],"end":[257,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:13257:65615":{"id":"2:13257:65615","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15735:2673","str::splitn":"1:15741:2678","self::pattern":"2:12826:3475"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49261:5011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5561:4389":{"id":"1:5561:4389","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:6006","1:5563:2032"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3112-0:421:123":{"id":"b:2:3112-0:421:123","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3114:661"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:178:2004":{"id":"34:178:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[41,4],"end":[44,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:332:2004":{"id":"0:332:2004","crate_id":0,"name":"poll_data","span":{"filename":"src/body/body.rs","begin":[363,4],"end":[368,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:470:1582","args":null,"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:470:1582","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1156:3494":{"id":"22:1156:3494","crate_id":22,"name":"get_i16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:561:1738":{"id":"22:561:1738","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[528,4],"end":[528,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2469:3078":{"id":"20:2469:3078","crate_id":20,"name":"Entry","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[157,0],"end":[163,1]},"visibility":"public","docs":"A view into a single location in a `HeaderMap`, which may be vacant or occupied.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"variants_stripped":false,"variants":["20:2472:4053","20:2475:4054"],"impls":[]}},"2:13198:2032":{"id":"2:13198:2032","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12297:5172"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[68,0],"end":[68,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::http::HeaderMap","name":"HeaderMap","id":"20:2386:1580","glob":false}},"20:2643:2338":{"id":"20:2643:2338","crate_id":20,"name":"HeaderName","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[32,0],"end":[34,1]},"visibility":"public","docs":"Represents an HTTP header field name\n\nHeader field names identify the header. Header sets may include multiple\nheaders with the same name. The HTTP specification defines a number of\nstandard headers, but HTTP messages may include non-standard header names as\nwell as long as they adhere to the specification.\n\n`HeaderName` is used as the [`HeaderMap`] key. Constants are available for\nall standard header names in the [`header`] module.\n\n# Representation\n\n`HeaderName` represents standard header names using an `enum`, as such they\nwill not require an allocation for storage. All custom header names are\nlower cased upon conversion to a `HeaderName` value. This avoids the\noverhead of dynamically doing lower case conversion during the hash code\ncomputation and the comparison operation.\n\n[`HeaderMap`]: struct.HeaderMap.html\n[`header`]: index.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13245:65611":{"id":"2:13245:65611","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15741:2678","`DoubleEndedIterator`":"2:8323:116","self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49157:5007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:361:2041":{"id":"0:361:2041","crate_id":0,"name":"send_data","span":{"filename":"src/body/body.rs","begin":[570,4],"end":[575,5]},"visibility":"public","docs":"Send data on data channel when it is ready.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["chunk",{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::Result","id":"0:418:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":true,"abi":"Rust"},"has_body":true}},"2:3188:202":{"id":"2:3188:202","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13193:70089":{"id":"2:13193:70089","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:72:3512":{"id":"22:72:3512","crate_id":22,"name":"get_f32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[734,4],"end":[734,32]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];\nassert_eq!(1.2f32, buf.get_f32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6066:70743":{"id":"5:6066:70743","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13222:65617":{"id":"2:13222:65617","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15735:2673","self::pattern":"2:12826:3475"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3681:3058":{"id":"2:3681:3058","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"24:268:2910":{"id":"24:268:2910","crate_id":24,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:269:71185","24:270:71186"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3465:3053":{"id":"2:3465:3053","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3467:222","2:3468:192","2:3469:57965"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2836:120":{"id":"2:2836:120","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:530:2004":{"id":"34:530:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[293,4],"end":[296,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:354:2034":{"id":"0:354:2034","crate_id":0,"name":"poll_ready","span":{"filename":"src/body/body.rs","begin":[548,4],"end":[554,5]},"visibility":"public","docs":"Check to see if this `Sender` can send more data.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"crate::Result","id":"0:418:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:788":{"id":"0:788","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[191,0],"end":[195,1]},"visibility":{"restricted":{"parent":"0:723:1588","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10108:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:789:640"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:397":{"id":"22:397","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[5,0],"end":[22,1]},"visibility":{"restricted":{"parent":"22:390:2805","path":"::buf::vec_deque"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","has_remaining","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","reader","copy_to_bytes","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice","take","chunks_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"5:4612:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["22:398:1738","22:399:1740","22:400:1743"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6067:2838":{"id":"5:6067:2838","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13211:70092":{"id":"2:13211:70092","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3487:4857","`str`":"1:15741:2678","str::slice_unchecked":"1:15741:2678"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"22:398:1738":{"id":"22:398:1738","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[6,4],"end":[6,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:787:3091":{"id":"20:787:3091","crate_id":20,"name":"InvalidHeaderValue","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/value.rs","begin":[28,0],"end":[30,1]},"visibility":"public","docs":"A possible error when converting a `HeaderValue` from a string or byte\nslice.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:543:3076":{"id":"20:543:3076","crate_id":20,"name":"AsHeaderName","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:544:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13938:137":{"id":"2:13938:137","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13939:262","2:13940:501","2:13941:265","2:13942:1058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:3277:1579":{"id":"20:3277:1579","crate_id":20,"name":"Version","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/version.rs","begin":[26,0],"end":[26,25]},"visibility":"public","docs":"Represents a version of the HTTP spec.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:528:1870":{"id":"34:528:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[290,4],"end":[290,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"20:2796:3169":{"id":"20:2796:3169","crate_id":20,"name":"X_DNS_PREFETCH_CONTROL","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Controls DNS prefetching.\n\nThe `x-dns-prefetch-control` HTTP response header controls DNS\nprefetching, a feature by which browsers proactively perform domain name\nresolution on both links that the user may choose to follow as well as\nURLs for items referenced by the document, including images, CSS,\nJavaScript, and so forth.\n\nThis prefetching is performed in the background, so that the DNS is\nlikely to have been resolved by the time the referenced items are\nneeded. This reduces latency when the user clicks a link.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XDnsPrefetchControl),}","value":null,"is_literal":false}},"34:478:2045":{"id":"34:478:2045","crate_id":34,"name":"trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[95,4],"end":[97,28]},"visibility":"default","docs":"Returns future that resolves to trailers, if any.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Trailers","id":"34:633:3064","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8752:3930":{"id":"2:8752:3930","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:515:2004":{"id":"34:515:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[227,4],"end":[230,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355:1575","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355:1575","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355:1575","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:785:1802":{"id":"0:785:1802","crate_id":0,"name":"poll_flush","span":{"filename":"src/upgrade.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:50:2017":{"id":"34:50:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[48,4],"end":[48,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13190:771":{"id":"2:13190:771","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9128:3294-0:297:1582":{"id":"a:2:9128:3294-0:297:1582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9128:3294","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"23:37:6162":{"id":"23:37:6162","crate_id":23,"name":"Integer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"23:39:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:942:2592":{"id":"0:942:2592","crate_id":0,"name":"Parts","span":{"filename":"src/upgrade.rs","begin":[81,0],"end":[94,1]},"visibility":"public","docs":"The deconstructed parts of an [`Upgraded`](Upgraded) type.\n\nIncludes the original IO type, and a read buffer of bytes that the\nHTTP state machine may have already read before completing an upgrade.","links":{"Upgraded":"0:771:2585"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":["0:944:1714","0:945:2600"],"impls":["a:2:3220:1723-0:942:2592","a:2:3191:205-0:942:2592","a:2:3179:196-0:942:2592","a:2:9129:3293-0:942:2592","a:2:9128:3294-0:942:2592","b:2:3108-0:942:2592","b:2:3123-0:942:2592","b:2:3908-0:942:2592","b:2:3118-0:942:2592","b:2:2782-0:942:2592","b:2:3112-0:942:2592","b:2:2785-0:942:2592","0:947"]}},"22:83:2936":{"id":"22:83:2936","crate_id":22,"name":"reader","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[900,4],"end":[902,20]},"visibility":"default","docs":"Creates an adaptor which implements the `Read` trait for `self`.\n\nThis function returns a new value which implements `Read` by adapting\nthe `Read` trait functions to the `Buf` trait functions. Given that\n`Buf` operations are infallible, none of the `Read` functions will\nreturn with `Err`.\n\n# Examples\n\n```\nuse bytes::{Bytes, Buf};\nuse std::io::Read;\n\nlet buf = Bytes::from(\"hello world\");\n\nlet mut reader = buf.reader();\nlet mut dst = [0; 1024];\n\nlet num = reader.read(&mut dst).unwrap();\n\nassert_eq!(11, num);\nassert_eq!(&dst[..11], &b\"hello world\"[..]);\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Reader","id":"22:1255:5619","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:385:123":{"id":"34:385:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[55,4],"end":[55,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"E"},"generics":{"params":[],"where_predicates":[]}}},"1:6593:4375":{"id":"1:6593:4375","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6594:64951","1:6595:9524","1:6596:9525","1:6597:9527","1:6598:9526","1:6599:9528","1:6600:9529","1:6601:9531","1:6602:7260","1:6603:9534","1:6604:9535","1:6605:9536","1:6606:9537","1:6607:9538","1:6608:9539","1:6609:9532","1:6610:9533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[20,0],"end":[20,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"http_body::SizeHint","name":"SizeHint","id":"34:642:1862","glob":false}},"2:10058:2829":{"id":"2:10058:2829","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10059:1498","2:10060:68363","2:10062:3432"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:564:1751":{"id":"22:564:1751","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[551,4],"end":[551,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:51:3491":{"id":"22:51:3491","crate_id":22,"name":"get_i8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[310,4],"end":[310,30]},"visibility":"default","docs":"Gets a signed 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_i8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13214:5068":{"id":"2:13214:5068","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49109:5032","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:334:1988":{"id":"0:334:1988","crate_id":0,"name":"is_end_stream","span":{"filename":"src/body/body.rs","begin":[400,4],"end":[411,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13212:65601":{"id":"2:13212:65601","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15741:2678"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3247:3069":{"id":"2:3247:3069","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3249:167","2:3250:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:339:1740":{"id":"22:339:1740","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[137,4],"end":[137,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9129:3293-0:297:1582":{"id":"a:2:9129:3293-0:297:1582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9129:3293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3327:4691":{"id":"2:3327:4691","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3329:167","2:3330:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1160:3498":{"id":"22:1160:3498","crate_id":22,"name":"get_i32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:233:1740":{"id":"22:233:1740","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[141,4],"end":[141,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:491:2004":{"id":"34:491:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[142,4],"end":[145,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:492:2012":{"id":"34:492:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[149,4],"end":[152,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:80:1758":{"id":"22:80:1758","crate_id":22,"name":"take","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[847,4],"end":[849,20]},"visibility":"default","docs":"Creates an adaptor which will read at most `limit` bytes from `self`.\n\nThis function returns a new instance of `Buf` which will read at most\n`limit` bytes.\n\n# Examples\n\n```\nuse bytes::{Buf, BufMut};\n\nlet mut buf = b\"hello world\"[..].take(5);\nlet mut dst = vec![];\n\ndst.put(&mut buf);\nassert_eq!(dst, b\"hello\");\n\nlet mut buf = buf.into_inner();\ndst.clear();\ndst.put(&mut buf);\nassert_eq!(dst, b\" world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["limit",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Take","id":"22:1261:2835","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1145:1738":{"id":"22:1145:1738","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:81:3516":{"id":"22:81:3516","crate_id":22,"name":"chain","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[869,4],"end":[871,20]},"visibility":"default","docs":"Creates an adaptor which will chain this buffer with another.\n\nThe returned `Buf` instance will first consume all bytes from `self`.\nAfterwards the output is equivalent to the output of next.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut chain = b\"hello \"[..].chain(&b\"world\"[..]);\n\nlet full = chain.copy_to_bytes(11);\nassert_eq!(full.chunk(), b\"hello world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["next",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"22:1233:2834","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:69:3509":{"id":"22:69:3509","crate_id":22,"name":"get_uint_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[673,4],"end":[673,51]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_uint_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9128:3294-0:421:123":{"id":"a:2:9128:3294-0:421:123","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9128:3294","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:342:661":{"id":"0:342:661","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[500,4],"end":[502,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["vec",{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7753:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:341:1751":{"id":"22:341:1751","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[148,4],"end":[148,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2782-0:773:2588":{"id":"b:2:2782-0:773:2588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2784:1887"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[522,0],"end":[527,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:348:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10119:3635":{"id":"2:10119:3635","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10120:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2730:3103":{"id":"20:2730:3103","crate_id":20,"name":"ACCESS_CONTROL_MAX_AGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates how long the results of a preflight request can be cached.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlMaxAge),}","value":null,"is_literal":false}},"34:341:2004":{"id":"34:341:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[59,4],"end":[62,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3066","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3066","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3066","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:430:2242":{"id":"0:430:2242","crate_id":0,"name":"is_user","span":{"filename":"src/error.rs","begin":[170,4],"end":[172,5]},"visibility":"public","docs":"Returns true if this error was caused by user code.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:365:2044":{"id":"0:365:2044","crate_id":0,"name":"send_trailers","span":{"filename":"src/body/body.rs","begin":[578,4],"end":[584,5]},"visibility":"public","docs":"Send trailers on trailers channel.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["trailers",{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::Result","id":"0:418:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":true,"abi":"Rust"},"has_body":true}},"0:486:2437":{"id":"0:486:2437","crate_id":0,"name":"Executor","span":{"filename":"src/rt.rs","begin":[9,0],"end":[12,1]},"visibility":"public","docs":"An executor of futures.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:488:2440"],"generics":{"params":[{"name":"Fut","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"31:54:63732":{"id":"31:54:63732","crate_id":31,"name":"try_poll","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.21/src/future.rs","begin":[81,4],"end":[81,81]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"F"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:108:1870":{"id":"34:108:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[37,4],"end":[37,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"D"},"generics":{"params":[],"where_predicates":[]}}},"20:2474:1507":{"id":"20:2474:1507","crate_id":20,"name":"0","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[159,13],"end":[159,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"20:2494:3084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},"2:13251:70095":{"id":"2:13251:70095","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15741:2678","str::split_terminator":"1:15741:2678","self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49207:5038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4539:2826":{"id":"1:4539:2826","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:1814","1:4541:65000","1:4543:65001","1:4544:6237","1:4545:2827","1:4546:1816","1:4547:2600","1:4549:65002","1:4550:3580","1:4551:1598","1:4552:3516","1:4554:1758"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3076:75":{"id":"2:3076:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3078:289"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"22:43:1738":{"id":"22:43:1738","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[102,4],"end":[102,33]},"visibility":"default","docs":"Returns the number of bytes between the current position and the end of\nthe buffer.\n\nThis value is greater than or equal to the length of the slice returned\nby `chunk()`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.remaining(), 11);\n\nbuf.get_u8();\n\nassert_eq!(buf.remaining(), 10);\n```\n\n# Implementer notes\n\nImplementations of `remaining` should ensure that the return value does\nnot change unless a call is made to `advance` or any other function that\nis documented to change the `Buf`'s current position.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"34:46:123":{"id":"34:46:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[26,4],"end":[26,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38494:2941","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"22:59:3499":{"id":"22:59:3499","crate_id":22,"name":"get_i32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[473,4],"end":[473,35]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:76:1751":{"id":"22:76:1751","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[816,4],"end":[816,59]},"visibility":"default","docs":"Consumes `len` bytes inside self and returns new instance of `Bytes`\nwith this data.\n\nThis function may be optimized by the underlying type to avoid actual\ncopies. For example, `Bytes` implementation will do a shallow copy\n(ref-count increment).\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet bytes = (&b\"hello world\"[..]).copy_to_bytes(5);\nassert_eq!(&bytes[..], &b\"hello\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:473:2004":{"id":"34:473:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[54,4],"end":[57,55]},"visibility":"default","docs":"Attempt to pull out the next data buffer of this stream.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:2779:3071":{"id":"2:2779:3071","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2781:63723"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2764:3137":{"id":"20:2764:3137","crate_id":20,"name":"LOCATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates the URL to redirect a page to.\n\nThe Location response header indicates the URL to redirect a page to. It\nonly provides a meaning when served with a 3xx status response.\n\nThe HTTP method used to make the new request to fetch the page pointed\nto by Location depends of the original method and of the kind of\nredirection:\n\n* If 303 (See Also) responses always lead to the use of a GET method,\n307 (Temporary Redirect) and 308 (Permanent Redirect) don't change the\nmethod used in the original request;\n\n* 301 (Permanent Redirect) and 302 (Found) doesn't change the method\nmost of the time, though older user-agents may (so you basically don't\nknow).\n\nAll responses with one of these status codes send a Location header.\n\nBeside redirect response, messages with 201 (Created) status also\ninclude the Location header. It indicates the URL to the newly created\nresource.\n\nLocation and Content-Location are different: Location indicates the\ntarget of a redirection (or the URL of a newly created resource), while\nContent-Location indicates the direct URL to use to access the resource\nwhen content negotiation happened, without the need of further content\nnegotiation. Location is a header associated with the response, while\nContent-Location is associated with the entity returned.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Location),}","value":null,"is_literal":false}},"2:3286:4719":{"id":"2:3286:4719","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3288:871"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:242:1863":{"id":"0:242:1863","crate_id":0,"name":"aggregate","span":{"filename":"src/body/aggregate.rs","begin":[16,0],"end":[31,1]},"visibility":"public","docs":"Aggregate the data buffers from a body asynchronously.\n\nThe returned `impl Buf` groups the `Buf`s from the `HttpBody` without\ncopying them. This is ideal if you don't require a contiguous buffer.\n\n# Note\n\nCare needs to be taken if the remote is untrusted. The function doesn't implement any length\nchecks and an malicious peer might make it consume arbitrary amounts of memory. Checking the\n`Content-Length` is a possibility, but it is not strictly mandated to be present.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["body",{"kind":"generic","inner":"T"}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:470:1582","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"HttpBody","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":true,"abi":"Rust"}}},"2:10115:115":{"id":"2:10115:115","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10116:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2746:3119":{"id":"20:2746:3119","crate_id":20,"name":"CONTENT_SECURITY_POLICY_REPORT_ONLY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Allows experimenting with policies by monitoring their effects.\n\nThe HTTP Content-Security-Policy-Report-Only response header allows web\ndevelopers to experiment with policies by monitoring (but not enforcing)\ntheir effects. These violation reports consist of JSON documents sent\nvia an HTTP POST request to the specified URI.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner:\n        Repr::Standard(StandardHeader::ContentSecurityPolicyReportOnly),}","value":null,"is_literal":false}},"2:2877:170":{"id":"2:2877:170","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2879:976","2:2880:804","2:2881:770","2:2882:693","2:2883:676"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:42:1726":{"id":"22:42:1726","crate_id":22,"name":"Buf","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:43:1738","22:44:1740","22:45:1746","22:47:1743","22:48:1735","22:49:3489","22:50:3490","22:51:3491","22:52:3492","22:53:3493","22:54:3494","22:55:3495","22:56:3496","22:57:3497","22:58:3498","22:59:3499","22:60:3500","22:61:3501","22:62:3502","22:63:3503","22:64:3504","22:65:3505","22:66:3506","22:67:3507","22:68:3508","22:69:3509","22:70:3510","22:71:3511","22:72:3512","22:73:3513","22:74:3514","22:75:3515","22:76:1751","22:80:1758","22:81:3516","22:83:2936"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9129:3293":{"id":"2:9129:3293","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2504:2363":{"id":"20:2504:2363","crate_id":20,"name":"ValueIter","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[189,0],"end":[194,1]},"visibility":"public","docs":"An iterator of all values associated with a single header name.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:380":{"id":"34:380","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[49,0],"end":[85,1]},"visibility":{"restricted":{"parent":"34:348:1986","path":"::combinators::map_err"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"E"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3067","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["34:384:1870","34:385:123","34:386:2004","34:387:2012","34:388:1988","34:389:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:1186:3498":{"id":"22:1186:3498","crate_id":22,"name":"get_i32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3311:4427":{"id":"2:3311:4427","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3313:167","2:3314:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[536,0],"end":[544,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:781:105","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:352:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:499:2004":{"id":"34:499:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[173,4],"end":[176,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:65:3505":{"id":"22:65:3505","crate_id":22,"name":"get_u128_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[593,4],"end":[593,37]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1151:3489":{"id":"22:1151:3489","crate_id":22,"name":"copy_to_slice","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:556":{"id":"20:556","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[3407,4],"end":[3407,39]},"visibility":{"restricted":{"parent":"20:526:3172","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543:3076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"34:110:2004":{"id":"34:110:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[40,4],"end":[43,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:534:2025","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:534:2025","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2565:123":{"id":"1:2565:123","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:2258","1:2568:2659","1:2569:1822","1:2570:2169"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10108:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10115:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5821:3885":{"id":"5:5821:3885","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5823:167","5:5824:2892"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:350:661":{"id":"0:350:661","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[531,4],"end":[533,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2785:3158":{"id":"20:2785:3158","crate_id":20,"name":"TE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Informs the server of transfer encodings willing to be accepted as part\nof the response.\n\nSee also the Transfer-Encoding response header for more details on\ntransfer encodings. Note that chunked is always acceptable for HTTP/1.1\nrecipients and you that don't have to specify \"chunked\" using the TE\nheader. However, it is useful for setting if the client is accepting\ntrailer fields in a chunked transfer coding using the \"trailers\" value.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Te),}","value":null,"is_literal":false}},"2:10125:175":{"id":"2:10125:175","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10126:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:482:1986":{"id":"34:482:1986","crate_id":34,"name":"map_err","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[113,4],"end":[116,35]},"visibility":"default","docs":"Maps this body's error value to a different value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3067","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"E"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:291:2004":{"id":"34:291:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[104,4],"end":[107,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3068","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3068","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3068","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2739:3112":{"id":"20:2739:3112","crate_id":20,"name":"CONTENT_DISPOSITION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates if the content is expected to be displayed inline.\n\nIn a regular HTTP response, the Content-Disposition response header is a\nheader indicating if the content is expected to be displayed inline in\nthe browser, that is, as a Web page or as part of a Web page, or as an\nattachment, that is downloaded and saved locally.\n\nIn a multipart/form-data body, the HTTP Content-Disposition general\nheader is a header that can be used on the subpart of a multipart body\nto give information about the field it applies to. The subpart is\ndelimited by the boundary defined in the Content-Type header. Used on\nthe body itself, Content-Disposition has no effect.\n\nThe Content-Disposition header is defined in the larger context of MIME\nmessages for e-mail, but only a subset of the possible parameters apply\nto HTTP forms and POST requests. Only the value form-data, as well as\nthe optional directive name and filename, can be used in the HTTP\ncontext.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentDisposition),}","value":null,"is_literal":false}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,74],"end":[65,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Version","name":"Version","id":"20:3277:1579","glob":false}},"b:2:3123-0:942:2592":{"id":"b:2:3123-0:942:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3126:123","2:3127:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2753:3126":{"id":"20:2753:3126","crate_id":20,"name":"EXPIRES","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Contains the date/time after which the response is considered stale.\n\nInvalid dates, like the value 0, represent a date in the past and mean\nthat the resource is already expired.\n\nIf there is a Cache-Control header with the \"max-age\" or \"s-max-age\"\ndirective in the response, the Expires header is ignored.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Expires),}","value":null,"is_literal":false}},"0:434:2249":{"id":"0:434:2249","crate_id":0,"name":"is_incomplete_message","span":{"filename":"src/error.rs","begin":[190,4],"end":[192,5]},"visibility":"public","docs":"Returns true if the connection closed before a message could complete.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3398:112":{"id":"2:3398:112","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3399:206","2:3400:524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2775:3148":{"id":"20:2775:3148","crate_id":20,"name":"REFRESH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Informs the web browser that the current page or frame should be\nrefreshed.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Refresh),}","value":null,"is_literal":false}},"36:29":{"id":"36:29","crate_id":36,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[291,0],"end":[306,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Request","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["36:32:1576","36:33:123","36:34:134","36:35:2034","36:36:360"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3191:205-0:297:1582":{"id":"a:2:3191:205-0:297:1582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3910:1398":{"id":"2:3910:1398","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45717:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3157:111":{"id":"2:3157:111","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[149,0],"end":[490,1]},"visibility":{"restricted":{"parent":"0:411:1583","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:427:2234","0:428:2237","0:429:2240","0:430:2242","0:431:2244","0:432:2106","0:433:2247","0:434:2249","0:435:2077","0:436:2252","0:437:2256","0:448:845"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13254:65613":{"id":"2:13254:65613","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15735:2673","self::pattern":"2:12826:3475","str::rsplitn":"1:15741:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49243:5010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2396:3081":{"id":"20:2396:3081","crate_id":20,"name":"Iter","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"`HeaderMap` entry iterator.\n\nYields `(&HeaderName, &value)` tuples. The same header name may be yielded\nmore than once if it has more than one associated value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:89":{"id":"22:89","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1021,0],"end":[1036,1]},"visibility":{"restricted":{"parent":"22:7:2875","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'_","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","has_remaining","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","reader","copy_to_bytes","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice","take","chunks_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["22:90:1738","22:91:1740","22:92:1743"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:13558-0:773:2588":{"id":"b:2:13558-0:773:2588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoFuture","id":"2:13554:146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:13560:167","2:13561:146","2:13562:745"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"F"}}},"34:498:123":{"id":"34:498:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[171,4],"end":[171,60]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3398:112","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:13311:64416":{"id":"2:13311:64416","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:591":{"id":"20:591","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[3491,4],"end":[3491,43]},"visibility":{"restricted":{"parent":"20:526:3172","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543:3076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3908-0:771:2585":{"id":"b:2:3908-0:771:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3906:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3910:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2527:3086":{"id":"20:2527:3086","crate_id":20,"name":"ValueDrain","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[208,0],"end":[212,1]},"visibility":"public","docs":"An drain iterator of all values associated with a single header name.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:1167:3509":{"id":"22:1167:3509","crate_id":22,"name":"get_uint_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:502:2017":{"id":"34:502:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[191,4],"end":[191,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:371:248":{"id":"0:371:248","crate_id":0,"name":"abort","span":{"filename":"src/body/body.rs","begin":[605,4],"end":[611,5]},"visibility":"public","docs":"Aborts the body in an abnormal fashion.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:17:134":{"id":"36:17:134","crate_id":36,"name":"Future","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[242,4],"end":[242,70]},"visibility":"default","docs":"The future response value.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"rhs":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Response","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:793:167":{"id":"0:793:167","crate_id":0,"name":"Output","span":{"filename":"src/upgrade.rs","begin":[211,4],"end":[211,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"b:2:3112-0:297:1582":{"id":"b:2:3112-0:297:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3114:661"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2983:3092":{"id":"20:2983:3092","crate_id":20,"name":"ToStrError","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/value.rs","begin":[37,0],"end":[39,1]},"visibility":"public","docs":"A possible error when converting a `HeaderValue` to a string representation.\n\nHeader field values may contain opaque bytes, in which case it is not\npossible to represent the value as a string.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[529,0],"end":[534,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:350:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9129:3293-0:312:1837":{"id":"a:2:9129:3293-0:312:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9129:3293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:3123-0:312:1837":{"id":"b:2:3123-0:312:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3126:123","2:3127:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:22833:4740":{"id":"2:22833:4740","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23482:4735","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22824:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3316:4428":{"id":"2:3316:4428","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3318:167","2:3319:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"36:34:134":{"id":"36:34:134","crate_id":36,"name":"Future","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[297,4],"end":[297,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:3718:3059":{"id":"2:3718:3059","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3623:5114":{"id":"2:3623:5114","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3554:5113","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:63:3503":{"id":"22:63:3503","crate_id":22,"name":"get_i64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[553,4],"end":[553,35]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:1835":{"id":"0:320:1835","crate_id":0,"name":"channel","span":{"filename":"src/body/body.rs","begin":[138,4],"end":[140,5]},"visibility":"public","docs":"Create a `Body` stream with an associated sender half.\n\nUseful when wanting to stream chunks from another thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[492,0],"end":[501,1]},"visibility":{"restricted":{"parent":"0:411:1583","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10108:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:452:640"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:7686:4451":{"id":"1:7686:4451","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7687:68326"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3123-0:297:1582":{"id":"b:2:3123-0:297:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3126:123","2:3127:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2494:3084":{"id":"20:2494:3084","crate_id":20,"name":"OccupiedEntry","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[181,0],"end":[185,1]},"visibility":"public","docs":"A view into a single occupied location in a `HeaderMap`.\n\nThis struct is returned as part of the `Entry` enum.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:508:2012":{"id":"34:508:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[207,4],"end":[210,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3908-0:297:1582":{"id":"b:2:3908-0:297:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3906:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3910:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:1169:3511":{"id":"22:1169:3511","crate_id":22,"name":"get_int_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:448:845":{"id":"0:448:845","crate_id":0,"name":"message","span":{"filename":"src/error.rs","begin":[400,4],"end":[402,5]},"visibility":"public","docs":"The error's standalone message, without the message from the source.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"fmt::Display","id":"2:10115:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:49:3489":{"id":"22:49:3489","crate_id":22,"name":"copy_to_slice","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[250,4],"end":[250,47]},"visibility":"default","docs":"Copies bytes from `self` into `dst`.\n\nThe cursor is advanced by the number of bytes copied. `self` must have\nenough remaining bytes to fill `dst`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\nlet mut dst = [0; 5];\n\nbuf.copy_to_slice(&mut dst);\nassert_eq!(&b\"hello\"[..], &dst);\nassert_eq!(6, buf.remaining());\n```\n\n# Panics\n\nThis function panics if `self.remaining() < dst.len()`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:490":{"id":"0:490","crate_id":0,"name":null,"span":{"filename":"src/service/mod.rs","begin":[38,0],"end":[38,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"tower_service::Service","name":"Service","id":"36:13:2212","glob":false}},"2:8288:2775":{"id":"2:8288:2775","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8290:3557","2:8292:3558","2:8293:3559"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22639:4335":{"id":"2:22639:4335","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22629:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:842:1751":{"id":"22:842:1751","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[966,4],"end":[966,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1190:3502":{"id":"22:1190:3502","crate_id":22,"name":"get_i64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2782-0:421:123":{"id":"b:2:2782-0:421:123","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2784:1887"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3425:126":{"id":"2:3425:126","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3427:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:3096:1577":{"id":"20:3096:1577","crate_id":20,"name":"StatusCode","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/status.rs","begin":[45,0],"end":[45,34]},"visibility":"public","docs":"An HTTP status code (`status-code` in RFC 7230 et al.).\n\nConstants are provided for known status codes, including those in the IANA\n[HTTP Status Code Registry](\nhttps://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml).\n\nStatus code values in the range 100-999 (inclusive) are supported by this\ntype. Values in the range 100-599 are semantically classified by the most\nsignificant digit. See [`StatusCode::is_success`], etc. Values above 599\nare unclassified but allowed for legacy compatibility, though their use is\ndiscouraged. Applications may interpret such values as protocol errors.\n\n# Examples\n\n```\nuse http::StatusCode;\n\nassert_eq!(StatusCode::from_u16(200).unwrap(), StatusCode::OK);\nassert_eq!(StatusCode::NOT_FOUND.as_u16(), 404);\nassert!(StatusCode::OK.is_success());\n```","links":{"`StatusCode::is_success`":"20:3096:1577"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[513,0],"end":[520,1]},"visibility":{"restricted":{"parent":"0:411:1583","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","cause","type_id","backtrace"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2565:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:456:2258"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13285:70105":{"id":"2:13285:70105","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:531:2012":{"id":"34:531:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[305,4],"end":[308,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:232:1738":{"id":"22:232:1738","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[137,4],"end":[137,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1183:3495":{"id":"22:1183:3495","crate_id":22,"name":"get_i16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"31:53:123":{"id":"31:53:123","crate_id":31,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.21/src/future.rs","begin":[78,4],"end":[78,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"E"},"generics":{"params":[],"where_predicates":[]}}},"24:4096:2916":{"id":"24:4096:2916","crate_id":24,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4097:2832","24:4099:6245","24:4101:2907","24:4102:6243","24:4103:64050","24:4104:5552"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"24:187:2909","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:91:1740":{"id":"22:91:1740","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1028,4],"end":[1028,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2793:3166":{"id":"20:2793:3166","crate_id":20,"name":"WARNING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"General HTTP header contains information about possible problems with\nthe status of the message.\n\nMore than one `warning` header may appear in a response. Warning header\nfields can in general be applied to any message, however some warn-codes\nare specific to caches and can only be applied to response messages.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Warning),}","value":null,"is_literal":false}},"34:290:123":{"id":"34:290:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[102,4],"end":[102,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"E"},"generics":{"params":[],"where_predicates":[]}}},"a:2:3220:1723-0:312:1837":{"id":"a:2:3220:1723-0:312:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"34:513:1870":{"id":"34:513:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[224,4],"end":[224,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"34:179:2012":{"id":"34:179:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[64,4],"end":[67,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2720:3093":{"id":"20:2720:3093","crate_id":20,"name":"ACCEPT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Advertises which content types the client is able to understand.\n\nThe Accept request HTTP header advertises which content types, expressed\nas MIME types, the client is able to understand. Using content\nnegotiation, the server then selects one of the proposals, uses it and\ninforms the client of its choice with the Content-Type response header.\nBrowsers set adequate values for this header depending of the context\nwhere the request is done: when fetching a CSS stylesheet a different\nvalue is set for the request than when fetching an image, video or a\nscript.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Accept),}","value":null,"is_literal":false}},"b:2:2782-0:297:1582":{"id":"b:2:2782-0:297:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2784:1887"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:61:3501":{"id":"22:61:3501","crate_id":22,"name":"get_u64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[513,4],"end":[513,35]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:522:123":{"id":"34:522:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[258,4],"end":[258,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:13210:4411":{"id":"2:13210:4411","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15741:2678","str::slice_mut_unchecked":"1:15741:2678","crate::ops::Index":"2:3483:4503"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"34:503":{"id":"34:503","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[196,0],"end":[221,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["34:505:1870","34:506:123","34:507:2004","34:508:2012","34:509:1988","34:510:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4684:4858":{"id":"2:4684:4858","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4685:1923","2:4686:2002","2:4687:2017"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13219:5552":{"id":"2:13219:5552","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49393:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3121:123":{"id":"2:3121:123","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[498,0],"end":[503,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7753:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:342:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9128:3294-0:773:2588":{"id":"a:2:9128:3294-0:773:2588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9128:3294","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"34:343:1988":{"id":"34:343:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[79,4],"end":[79,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3422:1845":{"id":"2:3422:1845","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3423:559"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"36:28:360":{"id":"36:28:360","crate_id":36,"name":"call","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[286,4],"end":[286,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["request",{"kind":"generic","inner":"Request"}]],"output":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:489:1870":{"id":"34:489:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[139,4],"end":[139,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:13309:5215":{"id":"2:13309:5215","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:388:1988":{"id":"34:388:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[78,4],"end":[78,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:524:2012":{"id":"34:524:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[270,4],"end":[273,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488:1576","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488:1576","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2801:101":{"id":"2:2801:101","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2802:392","2:2803:394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:525:1988":{"id":"34:525:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[280,4],"end":[280,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:525":{"id":"20:525","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[3357,4],"end":[3357,43]},"visibility":{"restricted":{"parent":"20:475:3173","path":"::header::map::into_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoHeaderName","id":"20:489:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2760:3133":{"id":"20:2760:3133","crate_id":20,"name":"IF_RANGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Makes a request conditional based on range.\n\nThe If-Range HTTP request header makes a range request conditional: if\nthe condition is fulfilled, the range request will be issued and the\nserver sends back a 206 Partial Content answer with the appropriate\nbody. If the condition is not fulfilled, the full resource is sent back,\nwith a 200 OK status.\n\nThis header can be used either with a Last-Modified validator, or with\nan ETag, but not with both.\n\nThe most common use case is to resume a download, to guarantee that the\nstored resource has not been modified since the last fragment has been\nreceived.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfRange),}","value":null,"is_literal":false}},"2:23482:4735":{"id":"2:23482:4735","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23483:4739"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23478:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3189:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3906:68":{"id":"2:3906:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3907:1398"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"20:2795:3168":{"id":"20:2795:3168","crate_id":20,"name":"X_CONTENT_TYPE_OPTIONS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Marker used by the server to indicate that the MIME types advertised in\nthe `content-type` headers should not be changed and be followed.\n\nThis allows to opt-out of MIME type sniffing, or, in other words, it is\na way to say that the webmasters knew what they were doing.\n\nThis header was introduced by Microsoft in IE 8 as a way for webmasters\nto block content sniffing that was happening and could transform\nnon-executable MIME types into executable MIME types. Since then, other\nbrowsers have introduced it, even if their MIME sniffing algorithms were\nless aggressive.\n\nSite security testers usually expect this header to be set.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XContentTypeOptions),}","value":null,"is_literal":false}},"0:452:640":{"id":"0:452:640","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[493,4],"end":[500,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10057:191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3179:196-0:771:2585":{"id":"a:2:3179:196-0:771:2585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3333:4694":{"id":"2:3333:4694","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3335:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2749:3122":{"id":"20:2749:3122","crate_id":20,"name":"DNT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates the client's tracking preference.\n\nThis header lets users indicate whether they would prefer privacy rather\nthan personalized content.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Dnt),}","value":null,"is_literal":false}},"b:2:3118-0:421:123":{"id":"b:2:3118-0:421:123","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3088:213","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3121:123","2:3122:1385"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5683:4376":{"id":"1:5683:4376","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:64396","1:5685:64397","1:5686:64398","1:5687:64399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2790:3162":{"id":"20:2790:3162","crate_id":20,"name":"UPGRADE_INSECURE_REQUESTS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Sends a signal to the server expressing the client’s preference for an\nencrypted and authenticated response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::UpgradeInsecureRequests),}","value":null,"is_literal":false}},"2:8756:4796":{"id":"2:8756:4796","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7803:4797","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:784:1801":{"id":"0:784:1801","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/upgrade.rs","begin":[170,4],"end":[176,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"io::IoSlice","id":"1:10945:1725","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:58:3498":{"id":"22:58:3498","crate_id":22,"name":"get_i32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[453,4],"end":[453,32]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2792:3165":{"id":"20:2792:3165","crate_id":20,"name":"VIA","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Added by proxies to track routing.\n\nThe `via` general header is added by proxies, both forward and reverse\nproxies, and can appear in the request headers and the response headers.\nIt is used for tracking message forwards, avoiding request loops, and\nidentifying the protocol capabilities of senders along the\nrequest/response chain.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Via),}","value":null,"is_literal":false}},"0:435:2077":{"id":"0:435:2077","crate_id":0,"name":"is_body_write_aborted","span":{"filename":"src/error.rs","begin":[195,4],"end":[197,5]},"visibility":"public","docs":"Returns true if the body write was aborted.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:771:2585":{"id":"0:771:2585","crate_id":0,"name":"Upgraded","span":{"filename":"src/upgrade.rs","begin":[65,0],"end":[67,1]},"visibility":"public","docs":"An upgraded HTTP connection.\n\nThis type holds a trait object internally of the original IO that\nwas used to speak HTTP before the upgrade. It can be used directly\nas a `Read` or `Write` for convenience.\n\nAlternatively, if the exact type is known, this can be deconstructed\ninto its parts.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:777","a:2:3220:1723-0:771:2585","a:2:3191:205-0:771:2585","a:2:3179:196-0:771:2585","a:2:9129:3293-0:771:2585","a:2:9128:3294-0:771:2585","b:2:3108-0:771:2585","b:2:3123-0:771:2585","b:2:3908-0:771:2585","b:2:3118-0:771:2585","b:2:2782-0:771:2585","b:2:3112-0:771:2585","b:2:2785-0:771:2585","b:24:2647-0:771:2585","b:24:2495-0:771:2585","0:780","0:782","0:788"]}},"b:2:2785-0:773:2588":{"id":"b:2:2785-0:773:2588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2779:3071","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2787:63723"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6087:2858":{"id":"5:6087:2858","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:68:3508":{"id":"22:68:3508","crate_id":22,"name":"get_uint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[653,4],"end":[653,48]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_uint(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2722:3095":{"id":"20:2722:3095","crate_id":20,"name":"ACCEPT_ENCODING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Advertises which content encoding the client is able to understand.\n\nThe Accept-Encoding request HTTP header advertises which content\nencoding, usually a compression algorithm, the client is able to\nunderstand. Using content negotiation, the server selects one of the\nproposals, uses it and informs the client of its choice with the\nContent-Encoding response header.\n\nEven if both the client and the server supports the same compression\nalgorithms, the server may choose not to compress the body of a\nresponse, if the identity value is also acceptable. Two common cases\nlead to this:\n\n* The data to be sent is already compressed and a second compression\nwon't lead to smaller data to be transmitted. This may the case with\nsome image formats;\n\n* The server is overloaded and cannot afford the computational overhead\ninduced by the compression requirement. Typically, Microsoft recommends\nnot to compress if a server use more than 80 % of its computational\npower.\n\nAs long as the identity value, meaning no encryption, is not explicitly\nforbidden, by an identity;q=0 or a *;q=0 without another explicitly set\nvalue for identity, the server must never send back a 406 Not Acceptable\nerror.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptEncoding),}","value":null,"is_literal":false}},"34:271:2017":{"id":"34:271:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3428:127":{"id":"2:3428:127","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3430:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3431:128","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:53:3493":{"id":"22:53:3493","crate_id":22,"name":"get_u16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[353,4],"end":[353,35]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_u16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10129:3639":{"id":"2:10129:3639","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10130:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:839:1738":{"id":"22:839:1738","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[944,4],"end":[944,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10367:4425":{"id":"2:10367:4425","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10368:142","2:10369:35590","2:10370:68201"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2750:3123":{"id":"20:2750:3123","crate_id":20,"name":"DATE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Contains the date and time at which the message was originated.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Date),}","value":null,"is_literal":false}},"2:7803:4797":{"id":"2:7803:4797","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7804:68987","2:7805:68988","2:7806:68985","2:7807:68983","2:7808:68989","2:7809:68986","2:7810:68984"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:338:640":{"id":"0:338:640","crate_id":0,"name":"fmt","span":{"filename":"src/body/body.rs","begin":[441,4],"end":[457,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10057:191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2761:3134":{"id":"20:2761:3134","crate_id":20,"name":"IF_UNMODIFIED_SINCE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Makes the request conditional based on the last modification date.\n\nThe If-Unmodified-Since request HTTP header makes the request\nconditional: the server will send back the requested resource, or accept\nit in the case of a POST or another non-safe method, only if it has not\nbeen last modified after the given date. If the request has been\nmodified after the given date, the response will be a 412 (Precondition\nFailed) error.\n\nThere are two common use cases:\n\n* In conjunction non-safe methods, like POST, it can be used to\nimplement an optimistic concurrency control, like done by some wikis:\neditions are rejected if the stored document has been modified since the\noriginal has been retrieved.\n\n* In conjunction with a range request with a If-Range header, it can be\nused to ensure that the new fragment requested comes from an unmodified\ndocument.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfUnmodifiedSince),}","value":null,"is_literal":false}},"20:2732:3105":{"id":"20:2732:3105","crate_id":20,"name":"ACCESS_CONTROL_REQUEST_METHOD","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Informs the server know which HTTP method will be used when the actual\nrequest is made.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlRequestMethod),}","value":null,"is_literal":false}},"24:4165:2917":{"id":"24:4165:2917","crate_id":24,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4166:2908","24:4167:1780","24:4168:63759"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"24:268:2910","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2757:3130":{"id":"20:2757:3130","crate_id":20,"name":"IF_MATCH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Makes a request conditional based on the E-Tag.\n\nFor GET and HEAD methods, the server will send back the requested\nresource only if it matches one of the listed ETags. For PUT and other\nnon-safe methods, it will only upload the resource in this case.\n\nThe comparison with the stored ETag uses the strong comparison\nalgorithm, meaning two files are considered identical byte to byte only.\nThis is weakened when the  W/ prefix is used in front of the ETag.\n\nThere are two common use cases:\n\n* For GET and HEAD methods, used in combination with an Range header, it\ncan guarantee that the new ranges requested comes from the same resource\nthan the previous one. If it doesn't match, then a 416 (Range Not\nSatisfiable) response is returned.\n\n* For other methods, and in particular for PUT, If-Match can be used to\nprevent the lost update problem. It can check if the modification of a\nresource that the user wants to upload will not override another change\nthat has been done since the original resource was fetched. If the\nrequest cannot be fulfilled, the 412 (Precondition Failed) response is\nreturned.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfMatch),}","value":null,"is_literal":false}},"22:1181:3493":{"id":"22:1181:3493","crate_id":22,"name":"get_u16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10322:138":{"id":"2:10322:138","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10323:695","2:10325:65146"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2780:3153":{"id":"20:2780:3153","crate_id":20,"name":"SEC_WEBSOCKET_PROTOCOL","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"The |Sec-WebSocket-Protocol| header field is used in the WebSocket\nopening handshake. It is sent from the client to the server and back\nfrom the server to the client to confirm the subprotocol of the\nconnection.  This enables scripts to both select a subprotocol and be\nsure that the server agreed to serve that subprotocol.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketProtocol),}","value":null,"is_literal":false}},"2:13235:3556":{"id":"2:13235:3556","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47181:162","self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:486:3768":{"id":"34:486:3768","crate_id":34,"name":"boxed_unsync","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[130,4],"end":[132,37]},"visibility":"default","docs":"Turn this body into a boxed trait object that is !Sync.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3068","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6695:4387":{"id":"1:6695:4387","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6696:64048","1:6697:64770"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5649:4375":{"id":"1:5649:4375","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:9183","1:5651:63749","1:5652:6277","1:5653:66898","1:5654:4616","1:5655:4617","1:5656:66899","1:5657:1275","1:5658:66900","1:5659:66901","1:5660:66902","1:5661:66903","1:5662:66904","1:5663:66905","1:5664:66906","1:5665:66907"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:775:938":{"id":"0:775:938","crate_id":0,"name":"on","span":{"filename":"src/upgrade.rs","begin":[104,0],"end":[106,1]},"visibility":"public","docs":"Gets a pending HTTP upgrade from this message.\n\nThis can be called on the following types:\n\n- `http::Request<B>`\n- `http::Response<B>`\n- `&mut http::Request<B>`\n- `&mut http::Response<B>`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["msg",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::CanUpgrade","id":"0:814:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13284:70104":{"id":"2:13284:70104","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:1488:1576":{"id":"20:1488:1576","crate_id":20,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/response.rs","begin":[179,0],"end":[182,1]},"visibility":"public","docs":"Represents an HTTP response\n\nAn HTTP response consists of a head and a potentially optional body. The body\ncomponent is generic, enabling arbitrary types to represent the HTTP body.\nFor example, the body could be `Vec<u8>`, a `Stream` of byte chunks, or a\nvalue that has been deserialized.\n\nTypically you'll work with responses on the client side as the result of\nsending a `Request` and on the server you'll be generating a `Response` to\nsend back to the client.\n\n# Examples\n\nCreating a `Response` to return\n\n```\nuse http::{Request, Response, StatusCode};\n\nfn respond_to(req: Request<()>) -> http::Result<Response<()>> {\n    let mut builder = Response::builder()\n        .header(\"Foo\", \"Bar\")\n        .status(StatusCode::OK);\n\n    if req.headers().contains_key(\"Another-Header\") {\n        builder = builder.header(\"Another-Header\", \"Ack\");\n    }\n\n    builder.body(())\n}\n```\n\nA simple 404 handler\n\n```\nuse http::{Request, Response, StatusCode};\n\nfn not_found(_req: Request<()>) -> http::Result<Response<()>> {\n    Response::builder()\n        .status(StatusCode::NOT_FOUND)\n        .body(())\n}\n```\n\nOr otherwise inspecting the result of a request:\n\n```no_run\nuse http::{Request, Response};\n\nfn get(url: &str) -> http::Result<Response<()>> {\n    // ...\n# panic!()\n}\n\nlet response = get(\"https://www.rust-lang.org/\").unwrap();\n\nif !response.status().is_success() {\n    panic!(\"failed to get a successful response status!\");\n}\n\nif let Some(date) = response.headers().get(\"Date\") {\n    // we've got a `Date` header!\n}\n\nlet body = response.body();\n// ...\n```\n\nDeserialize a response of bytes via json:\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Response;\nuse serde::de;\n\nfn deserialize<T>(res: Response<Vec<u8>>) -> serde_json::Result<Response<T>>\n    where for<'de> T: de::Deserialize<'de>,\n{\n    let (parts, body) = res.into_parts();\n    let body = serde_json::from_slice(&body)?;\n    Ok(Response::from_parts(parts, body))\n}\n#\n# fn main() {}\n```\n\nOr alternatively, serialize the body of a response to json\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Response;\nuse serde::ser;\n\nfn serialize<T>(res: Response<T>) -> serde_json::Result<Response<Vec<u8>>>\n    where T: ser::Serialize,\n{\n    let (parts, body) = res.into_parts();\n    let body = serde_json::to_vec(&body)?;\n    Ok(Response::from_parts(parts, body))\n}\n#\n# fn main() {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13199:70091":{"id":"2:13199:70091","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"22:1168:3510":{"id":"22:1168:3510","crate_id":22,"name":"get_int","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:526:2017":{"id":"34:526:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[284,4],"end":[284,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:15:1576":{"id":"36:15:1576","crate_id":36,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[236,4],"end":[236,18]},"visibility":"default","docs":"Responses given by the service.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"30:506:2966":{"id":"30:506:2966","crate_id":30,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:507:1985","30:510:72250","30:514:1986","30:517:72251","30:519:72252","30:521:277","30:524:6479","30:527:72253","30:529:72254","30:531:6407","30:532:72255","30:533:1792","30:535:745","30:536:72256"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"31:44:2965","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:497:1870":{"id":"34:497:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[170,4],"end":[170,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3398:112","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:30:237-0:773:2588":{"id":"b:30:237-0:773:2588","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.21/src/future/future/mod.rs","begin":[119,0],"end":[119,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["fuse","into_stream","flatten_stream","map_into","never_error","flatten","boxed","map","now_or_never","unit_error","right_future","then","inspect","poll_unpin","boxed_local","left_future"],"trait":{"kind":"resolved_path","inner":{"name":"FutureExt","id":"30:239:2964","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:352:661":{"id":"0:352:661","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[538,4],"end":[543,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"5:781:105","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2785-0:771:2585":{"id":"b:2:2785-0:771:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2779:3071","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2787:63723"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13289:70107":{"id":"2:13289:70107","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2727:3100":{"id":"20:2727:3100","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_METHODS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Preflight header response indicating permitted access methods.\n\nThe Access-Control-Allow-Methods response header specifies the method or\nmethods allowed when accessing the resource in response to a preflight\nrequest.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlAllowMethods),}","value":null,"is_literal":false}},"2:13221:34307":{"id":"2:13221:34307","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49431:5049","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"33:16:2974":{"id":"33:16:2974","crate_id":33,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["33:17:71709","33:18:2344"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3108-0:773:2588":{"id":"b:2:3108-0:773:2588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3111:1764"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:1188:3500":{"id":"22:1188:3500","crate_id":22,"name":"get_u64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1195:3511":{"id":"22:1195:3511","crate_id":22,"name":"get_int_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:773:2588":{"id":"0:773:2588","crate_id":0,"name":"OnUpgrade","span":{"filename":"src/upgrade.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"A future for a possible HTTP upgrade.\n\nIf no upgrade was available, or it doesn't succeed, yields an `Error`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:3220:1723-0:773:2588","a:2:3191:205-0:773:2588","a:2:3179:196-0:773:2588","a:2:9129:3293-0:773:2588","a:2:9128:3294-0:773:2588","b:2:3108-0:773:2588","b:2:3123-0:773:2588","b:2:3908-0:773:2588","b:2:3118-0:773:2588","b:2:2782-0:773:2588","b:2:13558-0:773:2588","b:2:3112-0:773:2588","b:2:2785-0:773:2588","b:30:504-0:773:2588","b:30:237-0:773:2588","b:31:48-0:773:2588","0:792","0:796"]}},"22:1191:3503":{"id":"22:1191:3503","crate_id":22,"name":"get_i64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3321:4688":{"id":"2:3321:4688","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323:167","2:3324:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13269:70098":{"id":"2:13269:70098","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:15735:2673","self::pattern":"2:12826:3475","`DoubleEndedIterator`":"2:8323:116","str::matches":"1:15741:2678"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49361:5045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1158:3496":{"id":"22:1158:3496","crate_id":22,"name":"get_u32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[118,0],"end":[349,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:319:1961","0:320:1835"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3108-0:297:1582":{"id":"b:2:3108-0:297:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3111:1764"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2788:3163":{"id":"20:2788:3163","crate_id":20,"name":"USER_AGENT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Contains a string that allows identifying the requesting client's\nsoftware.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::UserAgent),}","value":null,"is_literal":false}},"34:266:1870":{"id":"34:266:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[42,4],"end":[42,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"D"},"generics":{"params":[],"where_predicates":[]}}},"34:477:1886":{"id":"34:477:1886","crate_id":34,"name":"data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[87,4],"end":[89,28]},"visibility":"default","docs":"Returns future that resolves to next data chunk, if any.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Data","id":"34:624:1870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3123-0:421:123":{"id":"b:2:3123-0:421:123","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3126:123","2:3127:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,57],"end":[65,67]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::StatusCode","name":"StatusCode","id":"20:3096:1577","glob":false}},"1:6698:4337":{"id":"1:6698:4337","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6699:8501"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5643:4374":{"id":"1:5643:4374","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:6277","1:5645:8506"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13310:6106":{"id":"2:13310:6106","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"33:19:2973":{"id":"33:19:2973","crate_id":33,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["33:20:72602","33:21:72603"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3118-0:773:2588":{"id":"b:2:3118-0:773:2588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3088:213","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3121:123","2:3122:1385"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:399:1740":{"id":"22:399:1740","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[10,4],"end":[10,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:24:1576":{"id":"36:24:1576","crate_id":36,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[278,4],"end":[278,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Response","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:3220:1723":{"id":"2:3220:1723","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:476:2017":{"id":"34:476:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[82,4],"end":[82,35]},"visibility":"default","docs":"Returns the bounds on the remaining length of the stream.\n\nWhen the **exact** remaining length of the stream is known, the upper bound will be set and\nwill equal the lower bound.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[619,0],"end":[634,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10108:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:373:640"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:67:3507":{"id":"22:67:3507","crate_id":22,"name":"get_i128_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[633,4],"end":[633,37]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1184:3496":{"id":"22:1184:3496","crate_id":22,"name":"get_u32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3282:4509":{"id":"2:3282:4509","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3284:1327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:47:1743":{"id":"22:47:1743","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[206,4],"end":[206,38]},"visibility":"default","docs":"Advance the internal cursor of the Buf\n\nThe next call to `chunk()` will return a slice starting `cnt` bytes\nfurther into the underlying buffer.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Panics\n\nThis function **may** panic if `cnt > self.remaining()`.\n\n# Implementer notes\n\nIt is recommended for implementations of `advance` to panic if `cnt >\nself.remaining()`. If the implementation does not panic, the call must\nbehave as if `cnt == self.remaining()`.\n\nA call with `cnt == 0` should never panic and be a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"34:523:2004":{"id":"34:523:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[260,4],"end":[263,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488:1576","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488:1576","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488:1576","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13554:146":{"id":"2:13554:146","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13555:167","2:13556:146","2:13557:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:838":{"id":"22:838","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[942,0],"end":[969,1]},"visibility":{"restricted":{"parent":"22:685:2873","path":"::bytes_mut"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","has_remaining","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","reader","copy_to_bytes","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice","take","chunks_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BytesMut","id":"22:786:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["22:839:1738","22:840:1740","22:841:1743","22:842:1751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:787:1804":{"id":"0:787:1804","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/upgrade.rs","begin":[186,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:949:640":{"id":"0:949:640","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10057:191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:432:2106":{"id":"0:432:2106","crate_id":0,"name":"is_closed","span":{"filename":"src/error.rs","begin":[180,4],"end":[182,5]},"visibility":"public","docs":"Returns true if a sender's channel is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:19:360":{"id":"36:19:360","crate_id":36,"name":"call","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[271,4],"end":[271,53]},"visibility":"default","docs":"Process the request and return the response asynchronously.\n\nThis function is expected to be callable off task. As such,\nimplementations should take care to not call `poll_ready`.\n\nBefore dispatching a request, `poll_ready` must be called and return\n`Poll::Ready(Ok(()))`.\n\n# Panics\n\nImplementations are permitted to panic if `call` is invoked without\nobtaining `Poll::Ready(Ok(()))` from `poll_ready`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["req",{"kind":"generic","inner":"Request"}]],"output":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3350:4682":{"id":"2:3350:4682","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3352:1208"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:475:1988":{"id":"34:475:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[74,4],"end":[74,35]},"visibility":"default","docs":"Returns `true` when the end of stream has been reached.\n\nAn end of stream means that both `poll_data` and `poll_trailers` will\nreturn `None`.\n\nA return value of `false` **does not** guarantee that a value will be\nreturned from `poll_stream` or `poll_trailers`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8348:2774":{"id":"2:8348:2774","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8349:771","2:8350:1749"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:454:640":{"id":"0:454:640","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[504,4],"end":[510,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10057:191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12856:4798":{"id":"2:12856:4798","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8749:3929":{"id":"2:8749:3929","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:487":{"id":"34:487","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[138,0],"end":[163,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'_","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["34:489:1870","34:490:123","34:491:2004","34:492:2012","34:493:1988","34:494:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"31:52:161":{"id":"31:52:161","crate_id":31,"name":"Ok","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.21/src/future.rs","begin":[77,4],"end":[77,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"20:2777:3150":{"id":"20:2777:3150","crate_id":20,"name":"SEC_WEBSOCKET_ACCEPT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"The |Sec-WebSocket-Accept| header field is used in the WebSocket\nopening handshake. It is sent from the server to the client to\nconfirm that the server is willing to initiate the WebSocket\nconnection.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketAccept),}","value":null,"is_literal":false}},"22:1180:3492":{"id":"22:1180:3492","crate_id":22,"name":"get_u16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2725:3098":{"id":"20:2725:3098","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_CREDENTIALS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Preflight response indicating if the response to the request can be\nexposed to the page.\n\nThe Access-Control-Allow-Credentials response header indicates whether\nor not the response to the request can be exposed to the page. It can be\nexposed when the true value is returned; it can't in other cases.\n\nCredentials are cookies, authorization headers or TLS client\ncertificates.\n\nWhen used as part of a response to a preflight request, this indicates\nwhether or not the actual request can be made using credentials. Note\nthat simple GET requests are not preflighted, and so if a request is\nmade for a resource with credentials, if this header is not returned\nwith the resource, the response is ignored by the browser and not\nreturned to web content.\n\nThe Access-Control-Allow-Credentials header works in conjunction with\nthe XMLHttpRequest.withCredentials property or with the credentials\noption in the Request() constructor of the Fetch API. Credentials must\nbe set on both sides (the Access-Control-Allow-Credentials header and in\nthe XHR or Fetch request) in order for the CORS request with credentials\nto succeed.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner:\n        Repr::Standard(StandardHeader::AccessControlAllowCredentials),}","value":null,"is_literal":false}},"20:2740:3113":{"id":"20:2740:3113","crate_id":20,"name":"CONTENT_ENCODING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Used to compress the media-type.\n\nWhen present, its value indicates what additional content encoding has\nbeen applied to the entity-body. It lets the client know, how to decode\nin order to obtain the media-type referenced by the Content-Type header.\n\nIt is recommended to compress data as much as possible and therefore to\nuse this field, but some types of resources, like jpeg images, are\nalready compressed.  Sometimes using additional compression doesn't\nreduce payload size and can even make the payload longer.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentEncoding),}","value":null,"is_literal":false}},"22:54:3494":{"id":"22:54:3494","crate_id":22,"name":"get_i16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[373,4],"end":[373,32]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_i16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5635:4373":{"id":"1:5635:4373","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:6277","1:5637:64821","1:5638:64822"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6767:4343":{"id":"1:6767:4343","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:64242"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10108:106":{"id":"2:10108:106","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10109:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:506:123":{"id":"34:506:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[198,4],"end":[198,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"22:1164:3502":{"id":"22:1164:3502","crate_id":22,"name":"get_i64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:479:3767":{"id":"34:479:3767","crate_id":34,"name":"map_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[103,4],"end":[107,15]},"visibility":"default","docs":"Maps this body's data value to a different value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3066","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"B"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:470:1582":{"id":"34:470:1582","crate_id":34,"name":"HttpBody","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["34:471:1870","34:472:123","34:473:2004","34:474:2012","34:475:1988","34:476:2017","34:477:1886","34:478:2045","34:479:3767","34:482:1986","34:485:2742","34:486:3768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:493:1988":{"id":"34:493:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[156,4],"end":[156,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3345:4700":{"id":"2:3345:4700","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3347:1205"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2475:4054":{"id":"20:2475:4054","crate_id":20,"name":"Vacant","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[162,4],"end":[162,30]},"visibility":"default","docs":"A vacant entry","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"20:2482:3085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}]}},"34:490:123":{"id":"34:490:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[140,4],"end":[140,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"20:2975:2339":{"id":"20:2975:2339","crate_id":20,"name":"HeaderValue","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/value.rs","begin":[21,0],"end":[24,1]},"visibility":"public","docs":"Represents an HTTP header field value.\n\nIn practice, HTTP header field values are usually valid ASCII. However, the\nHTTP spec allows for a header value to contain opaque bytes as well. In this\ncase, the header field value is not able to be represented as a string.\n\nTo handle this, the `HeaderValue` is useable as a type and can be compared\nwith strings and implements `Debug`. A `to_str` fn is provided that returns\nan `Err` if the header value contains non visible ascii characters.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"a:2:3179:196-0:773:2588":{"id":"a:2:3179:196-0:773:2588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:344:661":{"id":"0:344:661","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[507,4],"end":[509,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13275:70100":{"id":"2:13275:70100","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15735:2673","str::match_indices":"1:15741:2678","self::pattern":"2:12826:3475","`DoubleEndedIterator`":"2:8323:116"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49307:5042","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3220:1723-0:297:1582":{"id":"a:2:3220:1723-0:297:1582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"22:234:1743":{"id":"22:234:1743","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[149,4],"end":[149,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:24:2647-0:771:2585":{"id":"b:24:2647-0:771:2585","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.18.2/src/io/util/async_write_ext.rs","begin":[1293,0],"end":[1293,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:308:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["write_f64_le","write_u128_le","write_i32","write_u16_le","write_u32","write_i32_le","write_all","write_vectored","write_i128_le","write_u64_le","write_i16_le","write_i64","write_i8","write_u64","flush","write_u8","write_buf","write_f32","write","write_f32_le","write_i128","write_i16","write_u128","write_u16","write_all_buf","write_f64","write_u32_le","write_i64_le","shutdown"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWriteExt","id":"24:4170:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"W"}}},"a:2:3179:196-0:942:2592":{"id":"a:2:3179:196-0:942:2592","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13204:2009":{"id":"2:13204:2009","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47181:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:328:59":{"id":"0:328:59","crate_id":0,"name":"default","span":{"filename":"src/body/body.rs","begin":[354,4],"end":[356,5]},"visibility":"default","docs":"Returns `Body::empty()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:93":{"id":"22:93","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1039,0],"end":[1070,1]},"visibility":{"restricted":{"parent":"22:7:2875","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3076:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","has_remaining","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","reader","copy_to_bytes","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice","take","chunks_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"1:10741:2640","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["22:95:1738","22:96:1740","22:97:1743"],"negative":false,"synthetic":false,"blanket_impl":null}},"31:96:1891":{"id":"31:96:1891","crate_id":31,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:97:1923","31:98:2002","31:99:2017"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"36:26:134":{"id":"36:26:134","crate_id":36,"name":"Future","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[280,4],"end":[280,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"20:5:1573":{"id":"20:5:1573","crate_id":20,"name":"header","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/lib.rs","begin":[173,0],"end":[173,15]},"visibility":"public","docs":"HTTP header types\n\nThe module provides [`HeaderName`], [`HeaderMap`], and a number of types\nused for interacting with `HeaderMap`. These types allow representing both\nHTTP/1 and HTTP/2 headers.\n\n# `HeaderName`\n\nThe `HeaderName` type represents both standard header names as well as\ncustom header names. The type handles the case insensitive nature of header\nnames and is used as the key portion of `HeaderMap`. Header names are\nnormalized to lower case. In other words, when creating a `HeaderName` with\na string, even if upper case characters are included, when getting a string\nrepresentation of the `HeaderName`, it will be all lower case. This allows\nfor faster `HeaderMap` comparison operations.\n\nThe internal representation is optimized to efficiently handle the cases\nmost commonly encountered when working with HTTP. Standard header names are\nspecial cased and are represented internally as an enum. Short custom\nheaders will be stored directly in the `HeaderName` struct and will not\nincur any allocation overhead, however longer strings will require an\nallocation for storage.\n\n## Limitations\n\n`HeaderName` has a max length of 32,768 for header names. Attempting to\nparse longer names will result in a panic.\n\n# `HeaderMap`\n\n`HeaderMap` is a map structure of header names highly optimized for use\ncases common with HTTP. It is a [multimap] structure, where each header name\nmay have multiple associated header values. Given this, some of the APIs\ndiverge from [`HashMap`].\n\n## Overview\n\nJust like `HashMap` in Rust's stdlib, `HeaderMap` is based on [Robin Hood\nhashing]. This algorithm tends to reduce the worst case search times in the\ntable and enables high load factors without seriously affecting performance.\nInternally, keys and values are stored in vectors. As such, each insertion\nwill not incur allocation overhead. However, once the underlying vector\nstorage is full, a larger vector must be allocated and all values copied.\n\n## Deterministic ordering\n\nUnlike Rust's `HashMap`, values in `HeaderMap` are deterministically\nordered. Roughly, values are ordered by insertion. This means that a\nfunction that deterministically operates on a header map can rely on the\niteration order to remain consistent across processes and platforms.\n\n## Adaptive hashing\n\n`HeaderMap` uses an adaptive hashing strategy in order to efficiently handle\nmost common cases. All standard headers have statically computed hash values\nwhich removes the need to perform any hashing of these headers at runtime.\nThe default hash function emphasizes performance over robustness. However,\n`HeaderMap` detects high collision rates and switches to a secure hash\nfunction in those events. The threshold is set such that only denial of\nservice attacks should trigger it.\n\n## Limitations\n\n`HeaderMap` can store a maximum of 32,768 headers (header name / value\npairs). Attempting to insert more will result in a panic.\n\n[`HeaderName`]: struct.HeaderName.html\n[`HeaderMap`]: struct.HeaderMap.html\n[multimap]: https://en.wikipedia.org/wiki/Multimap\n[`HashMap`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html\n[Robin Hood hashing]: https://en.wikipedia.org/wiki/Hash_table#Robin_Hood_hashing","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["20:543:3076","20:2447:3077","20:2469:3078","20:2460:3079","20:2386:1580","20:489:2362","20:2415:3080","20:2396:3081","20:2404:3082","20:2423:3083","20:2494:3084","20:2482:3085","20:2527:3086","20:2504:2363","20:2515:3087","20:2431:3088","20:2439:3089","20:2643:2338","20:631:3090","20:2975:2339","20:787:3091","20:2983:3092","20:2720:3093","20:2721:3094","20:2722:3095","20:2723:3096","20:2724:3097","20:2725:3098","20:2726:3099","20:2727:3100","20:2728:3101","20:2729:3102","20:2730:3103","20:2731:3104","20:2732:3105","20:2733:3106","20:2734:3107","20:2735:3108","20:2736:3109","20:2737:3110","20:2738:3111","20:2739:3112","20:2740:3113","20:2741:3114","20:2742:3115","20:2743:3116","20:2744:3117","20:2745:3118","20:2746:3119","20:2747:3120","20:2748:3121","20:2749:3122","20:2750:3123","20:2751:3124","20:2752:3125","20:2753:3126","20:2754:3127","20:2755:3128","20:2756:3129","20:2757:3130","20:2758:3131","20:2759:3132","20:2760:3133","20:2761:3134","20:2762:3135","20:2763:3136","20:2764:3137","20:2765:3138","20:2766:3139","20:2767:3140","20:2768:3141","20:2769:3142","20:2770:3143","20:2771:3144","20:2772:3145","20:2773:3146","20:2774:3147","20:2775:3148","20:2776:3149","20:2777:3150","20:2778:3151","20:2779:3152","20:2780:3153","20:2781:3154","20:2782:3155","20:2783:3156","20:2784:3157","20:2785:3158","20:2786:3159","20:2787:3160","20:2789:3161","20:2790:3162","20:2788:3163","20:2791:3164","20:2792:3165","20:2793:3166","20:2794:3167","20:2795:3168","20:2796:3169","20:2797:3170","20:2798:3171"]}},"20:631:3090":{"id":"20:631:3090","crate_id":20,"name":"InvalidHeaderName","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"A possible error when converting a `HeaderName` from another type.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:2763:3136":{"id":"20:2763:3136","crate_id":20,"name":"LINK","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Allows the server to point an interested client to another resource\ncontaining metadata about the requested resource.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Link),}","value":null,"is_literal":false}},"2:13282:70103":{"id":"2:13282:70103","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2783:3156":{"id":"20:2783:3156","crate_id":20,"name":"SET_COOKIE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Used to send cookies from the server to the user agent.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SetCookie),}","value":null,"is_literal":false}},"b:2:3108-0:942:2592":{"id":"b:2:3108-0:942:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3111:1764"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:505:1870":{"id":"34:505:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[197,4],"end":[197,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"34:507:2004":{"id":"34:507:2004","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[200,4],"end":[203,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3431:128":{"id":"2:3431:128","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:167","2:3434:362"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9129:3293-0:771:2585":{"id":"a:2:9129:3293-0:771:2585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9129:3293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"22:562:1740":{"id":"22:562:1740","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[533,4],"end":[533,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:75:3515":{"id":"22:75:3515","crate_id":22,"name":"get_f64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[797,4],"end":[797,35]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\"[..];\nassert_eq!(1.2f64, buf.get_f64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3290:4721":{"id":"2:3290:4721","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3292:540"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:433:2247":{"id":"0:433:2247","crate_id":0,"name":"is_connect","span":{"filename":"src/error.rs","begin":[185,4],"end":[187,5]},"visibility":"public","docs":"Returns true if this was an error from `Connect`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1192:3508":{"id":"22:1192:3508","crate_id":22,"name":"get_uint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:55:3495":{"id":"22:55:3495","crate_id":22,"name":"get_i16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[393,4],"end":[393,35]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_i16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8323:116":{"id":"2:8323:116","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8324:3551","2:8325:3552","2:8326:3553","2:8327:3554","2:8331:3555","2:8334:3556"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3184:2773":{"id":"2:3184:2773","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13280:70102":{"id":"2:13280:70102","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1611":{"id":"0:0:1611","crate_id":0,"name":"hyper","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"# hyper\n\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n\n## Features\n\n- HTTP/1 and HTTP/2\n- Asynchronous design\n- Leading in performance\n- Tested and **correct**\n- Extensive production use\n- [Client](client/index.html) and [Server](server/index.html) APIs\n\nIf just starting out, **check out the [Guides](https://hyper.rs/guides)\nfirst.**\n\n## \"Low-level\"\n\nhyper is a lower-level HTTP library, meant to be a building block\nfor libraries and applications.\n\nIf looking for just a convenient HTTP client, consider the\n[reqwest](https://crates.io/crates/reqwest) crate.\n\n# Optional Features\n\nhyper uses a set of [feature flags] to reduce the amount of compiled code.\nIt is possible to just enable certain features over others. By default,\nhyper does not enable any features but allows one to enable a subset for\ntheir use case. Below is a list of the available feature flags. You may\nalso notice above each function, struct and trait there is listed one or\nmore feature flags that are required for that item to be used.\n\nIf you are new to hyper it is possible to enable the `full` feature flag\nwhich will enable all public APIs. Beware though that this will pull in\nmany extra dependencies that you may not need.\n\nThe following optional features are available:\n\n- `http1`: Enables HTTP/1 support.\n- `http2`: Enables HTTP/2 support.\n- `client`: Enables the HTTP `client`.\n- `server`: Enables the HTTP `server`.\n- `runtime`: Enables convenient integration with `tokio`, providing\n  connectors and acceptors for TCP, and a default executor.\n- `tcp`: Enables convenient implementations over TCP (using tokio).\n- `stream`: Provides `futures::Stream` capabilities.\n\n[feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section","links":{},"attrs":["#![deny(missing_docs)]","#![deny(missing_debug_implementations)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:202:1581","0:475:1585","0:485:1102","0:489:1587","0:723:1588","20:5:1573","20:3003:1574","20:1355:1575","20:1488:1576","20:3096:1577","20:3221:1578","20:3277:1579","0:28","0:297:1582","0:421:123","0:418:191"]}},"34:485:2742":{"id":"34:485:2742","crate_id":34,"name":"boxed","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[122,4],"end":[124,44]},"visibility":"default","docs":"Turn this body into a boxed trait object.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3065","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:563:1743":{"id":"22:563:1743","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[538,4],"end":[538,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8279:147":{"id":"2:8279:147","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8280:1923","2:8281:3080","2:8282:746"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2767:3140":{"id":"20:2767:3140","crate_id":20,"name":"PRAGMA","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"HTTP/1.0 header usually used for backwards compatibility.\n\nThe Pragma HTTP/1.0 general header is an implementation-specific header\nthat may have various effects along the request-response chain. It is\nused for backwards compatibility with HTTP/1.0 caches where the\nCache-Control HTTP/1.1 header is not yet present.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Pragma),}","value":null,"is_literal":false}},"34:106":{"id":"34:106","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[33,0],"end":[64,1]},"visibility":{"restricted":{"parent":"34:62:1531","path":"::full"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Full","id":"34:534:2025","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"items":["34:108:1870","34:109:123","34:110:2004","34:111:2012","34:112:1988","34:113:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:235:1746":{"id":"22:235:1746","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[168,4],"end":[168,70]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10945:1725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3112-0:942:2592":{"id":"b:2:3112-0:942:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3114:661"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:429:2240":{"id":"0:429:2240","crate_id":0,"name":"is_parse_status","span":{"filename":"src/error.rs","begin":[165,4],"end":[167,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error caused by an invalid response status code or\nreason phrase.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319:1961":{"id":"0:319:1961","crate_id":0,"name":"empty","span":{"filename":"src/body/body.rs","begin":[130,4],"end":[132,5]},"visibility":"public","docs":"Create an empty `Body` stream.\n\n# Example\n\n```\nuse hyper::{Body, Request};\n\n// create a `GET /` request\nlet get = Request::new(Body::empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:48:2012":{"id":"34:48:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[37,4],"end":[40,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2024","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2024","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3908-0:942:2592":{"id":"b:2:3908-0:942:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3906:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3910:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6088:64414":{"id":"5:6088:64414","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15741:2678"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2404:3082":{"id":"20:2404:3082","crate_id":20,"name":"IterMut","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[93,0],"end":[98,1]},"visibility":"public","docs":"`HeaderMap` mutable entry iterator\n\nYields `(&HeaderName, &mut value)` tuples. The same header name may be\nyielded more than once if it has more than one associated value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3294:4723":{"id":"2:3294:4723","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3296:1082"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2758:3131":{"id":"20:2758:3131","crate_id":20,"name":"IF_MODIFIED_SINCE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Makes a request conditional based on the modification date.\n\nThe If-Modified-Since request HTTP header makes the request conditional:\nthe server will send back the requested resource, with a 200 status,\nonly if it has been last modified after the given date. If the request\nhas not been modified since, the response will be a 304 without any\nbody; the Last-Modified header will contain the date of last\nmodification. Unlike If-Unmodified-Since, If-Modified-Since can only be\nused with a GET or HEAD.\n\nWhen used in combination with If-None-Match, it is ignored, unless the\nserver doesn't support If-None-Match.\n\nThe most common use case is to update a cached entity that has no\nassociated ETag.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfModifiedSince),}","value":null,"is_literal":false}},"2:10123:3637":{"id":"2:10123:3637","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10124:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8474:153":{"id":"2:8474:153","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8475:1923","2:8476:900","2:8477:2017","2:8478:478","2:8480:3560","2:8483:3561","2:8484:3562","2:8485:3563","2:8486:3516","2:8488:3564","2:8490:3565","2:8491:3566","2:8493:819","2:8496:3567","2:8503:3568","2:8505:3569","2:8508:3570","2:8509:3571","2:8510:3572","2:8512:3573","2:8514:3574","2:8517:1279","2:8518:1758","2:8519:3575","2:8523:3576","2:8526:3577","2:8527:3578","2:8528:3579","2:8530:3580","2:8531:2780","2:8533:3581","2:8536:3582","2:8538:3583","2:8548:3584","2:8563:3585","2:8565:3586","2:8569:3587","2:8578:3588","2:8581:3589","2:8583:3590","2:8586:261","2:8593:278","2:8600:3591","2:8607:3592","2:8616:3593","2:8626:993","2:8633:3594","2:8640:3483","2:8641:1798","2:8642:3485","2:8654:3484","2:8661:3482","2:8673:3481","2:8680:3595","2:8681:3596","2:8686:3597","2:8689:3598","2:8692:3599","2:8693:1739","2:8695:3600","2:8697:398","2:8700:3601","2:8703:976","2:8706:3602","2:8709:585","2:8712:3603","2:8715:885","2:8717:804","2:8719:770","2:8721:693","2:8723:676","2:8725:3604","2:8726:3605","2:8734:3606"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:389:2017":{"id":"34:389:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[82,4],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13192:70088":{"id":"2:13192:70088","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2794:3167":{"id":"20:2794:3167","crate_id":20,"name":"WWW_AUTHENTICATE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Defines the authentication method that should be used to gain access to\na resource.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::WwwAuthenticate),}","value":null,"is_literal":false}},"2:3483:4503":{"id":"2:3483:4503","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3485:167","2:3486:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"20:583":{"id":"20:583","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[3470,4],"end":[3470,35]},"visibility":{"restricted":{"parent":"20:526:3172","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543:3076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3191:205-0:942:2592":{"id":"a:2:3191:205-0:942:2592","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"20:2737:3110":{"id":"20:2737:3110","crate_id":20,"name":"CACHE_CONTROL","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Specifies directives for caching mechanisms in both requests and\nresponses.\n\nCaching directives are unidirectional, meaning that a given directive in\na request is not implying that the same directive is to be given in the\nresponse.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::CacheControl),}","value":null,"is_literal":false}},"1:6769:4345":{"id":"1:6769:4345","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:64839"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:60:3500":{"id":"22:60:3500","crate_id":22,"name":"get_u64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[493,4],"end":[493,32]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13206:65580":{"id":"2:13206:65580","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"22:44:1740":{"id":"22:44:1740","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[133,4],"end":[133,29]},"visibility":"default","docs":"Returns a slice starting at the current position and of length between 0\nand `Buf::remaining()`. Note that this *can* return shorter slice (this allows\nnon-continuous internal representation).\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk()` should return an\nempty slice.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13201:65582":{"id":"2:13201:65582","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15752:2687"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[546,0],"end":[617,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:354:2034","0:361:2041","0:365:2044","0:369:2053","0:371:248"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4596:2829":{"id":"1:4596:2829","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:2129","1:4598:6209","1:4600:1804","1:4601:5475","1:4602:6181","1:4603:63874","1:4604:3432","1:4613:3580"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:780":{"id":"0:780","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[151,0],"end":[159,1]},"visibility":{"restricted":{"parent":"0:723:1588","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:229:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:781:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:796":{"id":"0:796","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[225,0],"end":[229,1]},"visibility":{"restricted":{"parent":"0:723:1588","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10108:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:797:640"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:338:1738":{"id":"22:338:1738","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[133,4],"end":[133,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6393:208":{"id":"5:6393:208","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6394:3610"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:575":{"id":"20:575","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[3449,4],"end":[3449,40]},"visibility":{"restricted":{"parent":"20:526:3172","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543:3076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[512,0],"end":[520,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:781:105","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:346:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2415:3080":{"id":"20:2415:3080","crate_id":20,"name":"IntoIter","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[104,0],"end":[109,1]},"visibility":"public","docs":"An owning iterator over the entries of a `HeaderMap`.\n\nThis struct is created by the `into_iter` method on `HeaderMap`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,47],"end":[65,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Response","name":"Response","id":"20:1488:1576","glob":false}},"1:5705:4379":{"id":"1:5705:4379","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:6277"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2784:3157":{"id":"20:2784:3157","crate_id":20,"name":"STRICT_TRANSPORT_SECURITY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Tells the client to communicate with HTTPS instead of using HTTP.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::StrictTransportSecurity),}","value":null,"is_literal":false}},"22:1149:1743":{"id":"22:1149:1743","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3123-0:771:2585":{"id":"b:2:3123-0:771:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3126:123","2:3127:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"36:13:2212":{"id":"36:13:2212","crate_id":36,"name":"Service","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["36:15:1576","36:16:123","36:17:134","36:18:2034","36:19:360"],"generics":{"params":[{"name":"Request","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2785-0:297:1582":{"id":"b:2:2785-0:297:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2779:3071","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2787:63723"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:85":{"id":"22:85","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1013,0],"end":[1015,1]},"visibility":{"restricted":{"parent":"22:7:2875","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'_","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","has_remaining","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","reader","copy_to_bytes","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice","take","chunks_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["22:1145:1738","22:1146:1740","22:1147:1746","22:1149:1743","22:1150:1735","22:1151:3489","22:1152:3490","22:1153:3491","22:1154:3492","22:1155:3493","22:1156:3494","22:1157:3495","22:1158:3496","22:1159:3497","22:1160:3498","22:1161:3499","22:1162:3500","22:1163:3501","22:1164:3502","22:1165:3503","22:1166:3508","22:1167:3509","22:1168:3510","22:1169:3511","22:1170:1751"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:1165:3503":{"id":"22:1165:3503","crate_id":22,"name":"get_i64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:263":{"id":"34:263","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[38,0],"end":[66,1]},"visibility":{"restricted":{"parent":"34:225:59504","path":"::combinators::box_body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3065","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["34:266:1870","34:267:123","34:268:2004","34:269:2012","34:270:1988","34:271:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3220:1723-0:942:2592":{"id":"a:2:3220:1723-0:942:2592","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"22:70:3510":{"id":"22:70:3510","crate_id":22,"name":"get_int","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[693,4],"end":[693,47]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_int(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6086:70747":{"id":"5:6086:70747","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:1908","`String`":"5:8341:201"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:6395-0:421:123":{"id":"b:5:6395-0:421:123","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10115:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6393:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6397:3610"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:510:2017":{"id":"34:510:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[218,4],"end":[218,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2460:3079":{"id":"20:2460:3079","crate_id":20,"name":"GetAll","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[150,0],"end":[153,1]},"visibility":"public","docs":"A view to all values stored in a single entry.\n\nThis struct is returned by `HeaderMap::get_all`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:269:2012":{"id":"34:269:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[52,4],"end":[55,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3065","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3065","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9128:3294-0:771:2585":{"id":"a:2:9128:3294-0:771:2585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9128:3294","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"34:43":{"id":"34:43","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[24,0],"end":[51,1]},"visibility":{"restricted":{"parent":"34:3:1961","path":"::empty"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2024","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"items":["34:45:1870","34:46:123","34:47:2004","34:48:2012","34:49:1988","34:50:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:177:123":{"id":"34:177:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[39,4],"end":[39,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2565:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"31:27:3073":{"id":"31:27:3073","crate_id":31,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:28:6514"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:340:123":{"id":"34:340:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[57,4],"end":[57,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"5:6065":{"id":"5:6065","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5885:1311","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6066:70743","5:6067:2838","5:6070:70744","5:6073:70745","5:6085:70746","5:6086:70747","5:6087:2858","5:6088:64414","5:6089:64415"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2745:3118":{"id":"20:2745:3118","crate_id":20,"name":"CONTENT_SECURITY_POLICY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Allows controlling resources the user agent is allowed to load for a\ngiven page.\n\nWith a few exceptions, policies mostly involve specifying server origins\nand script endpoints. This helps guard against cross-site scripting\nattacks (XSS).","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentSecurityPolicy),}","value":null,"is_literal":false}},"22:1166:3508":{"id":"22:1166:3508","crate_id":22,"name":"get_uint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:437:2256":{"id":"0:437:2256","crate_id":0,"name":"into_cause","span":{"filename":"src/error.rs","begin":[205,4],"end":[207,5]},"visibility":"public","docs":"Consumes the error, returning its cause.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StdError","id":"1:2565:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1173:1746":{"id":"22:1173:1746","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10945:1725","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"33:258:2976":{"id":"33:258:2976","crate_id":33,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["33:261:2633","33:262:559"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"2:12273:5208":{"id":"2:12273:5208","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12274:1923","2:12275:62643"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3640:133":{"id":"2:3640:133","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3642:667"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"36:35:2034":{"id":"36:35:2034","crate_id":36,"name":"poll_ready","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[299,4],"end":[299,80]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:270:1988":{"id":"34:270:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[59,4],"end":[59,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:495":{"id":"34:495","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[165,0],"end":[194,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3411:2839","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3398:112","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["34:497:1870","34:498:123","34:499:2004","34:500:2012","34:501:1988","34:502:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:427:2234":{"id":"0:427:2234","crate_id":0,"name":"is_parse","span":{"filename":"src/error.rs","begin":[151,4],"end":[153,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2447:3077":{"id":"20:2447:3077","crate_id":20,"name":"Drain","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[136,0],"end":[144,1]},"visibility":"public","docs":"A drain iterator for `HeaderMap`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:293:1988":{"id":"34:293:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[118,4],"end":[118,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2759:3132":{"id":"20:2759:3132","crate_id":20,"name":"IF_NONE_MATCH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Makes a request conditional based on the E-Tag.\n\nThe If-None-Match HTTP request header makes the request conditional. For\nGET and HEAD methods, the server will send back the requested resource,\nwith a 200 status, only if it doesn't have an ETag matching the given\nones. For other methods, the request will be processed only if the\neventually existing resource's ETag doesn't match any of the values\nlisted.\n\nWhen the condition fails for GET and HEAD methods, then the server must\nreturn HTTP status code 304 (Not Modified). For methods that apply\nserver-side changes, the status code 412 (Precondition Failed) is used.\nNote that the server generating a 304 response MUST generate any of the\nfollowing header fields that would have been sent in a 200 (OK) response\nto the same request: Cache-Control, Content-Location, Date, ETag,\nExpires, and Vary.\n\nThe comparison with the stored ETag uses the weak comparison algorithm,\nmeaning two files are considered identical not only if they are\nidentical byte to byte, but if the content is equivalent. For example,\ntwo pages that would differ only by the date of generation in the footer\nwould be considered as identical.\n\nWhen used in combination with If-Modified-Since, it has precedence (if\nthe server supports it).\n\nThere are two common use cases:\n\n* For `GET` and `HEAD` methods, to update a cached entity that has an associated ETag.\n* For other methods, and in particular for `PUT`, `If-None-Match` used with\nthe `*` value can be used to save a file not known to exist,\nguaranteeing that another upload didn't happen before, losing the data\nof the previous put; this problems is the variation of the lost update\nproblem.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfNoneMatch),}","value":null,"is_literal":false}},"5:5817:5226":{"id":"5:5817:5226","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5819:167","5:5820:415"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,22],"end":[65,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::header","name":"header","id":"20:5:1573","glob":false}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[440,0],"end":[458,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10108:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:338:640"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:50:3490":{"id":"22:50:3490","crate_id":22,"name":"get_u8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[287,4],"end":[287,30]},"visibility":"default","docs":"Gets an unsigned 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_u8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:782":{"id":"0:782","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[161,0],"end":[189,1]},"visibility":{"restricted":{"parent":"0:723:1588","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:308:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:783:1800","0:784:1801","0:785:1802","0:786:1803","0:787:1804"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:944:1714":{"id":"0:944:1714","crate_id":0,"name":"io","span":{"filename":"src/upgrade.rs","begin":[83,4],"end":[83,13]},"visibility":"public","docs":"The original IO object used before the upgrade.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:13239:2907":{"id":"2:13239:2907","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673","`DoubleEndedIterator`":"2:8323:116","str::split_whitespace":"1:15741:2678","str::rsplit":"1:15741:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49139:2836","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,30],"end":[65,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Method","name":"Method","id":"20:3003:1574","glob":false}},"20:2768:3141":{"id":"20:2768:3141","crate_id":20,"name":"PROXY_AUTHENTICATE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Defines the authentication method that should be used to gain access to\na proxy.\n\nUnlike `www-authenticate`, the `proxy-authenticate` header field applies\nonly to the next outbound client on the response chain. This is because\nonly the client that chose a given proxy is likely to have the\ncredentials necessary for authentication. However, when multiple proxies\nare used within the same administrative domain, such as office and\nregional caching proxies within a large corporate network, it is common\nfor credentials to be generated by the user agent and passed through the\nhierarchy until consumed. Hence, in such a configuration, it will appear\nas if Proxy-Authenticate is being forwarded because each proxy will send\nthe same challenge set.\n\nThe `proxy-authenticate` header is sent along with a `407 Proxy\nAuthentication Required`.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ProxyAuthenticate),}","value":null,"is_literal":false}},"2:10117:3634":{"id":"2:10117:3634","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10118:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:518:2017":{"id":"34:518:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[251,4],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13215:4827":{"id":"2:13215:4827","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49115:5033","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4614:2830":{"id":"1:4614:2830","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:2908","1:4616:1780","1:4617:63758","1:4618:63759"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13315:4396":{"id":"2:13315:4396","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15735:2673"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49447:4397","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2386:1580":{"id":"20:2386:1580","crate_id":20,"name":"HeaderMap","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[45,0],"end":[52,1]},"visibility":"public","docs":"A set of HTTP headers\n\n`HeaderMap` is an multimap of [`HeaderName`] to values.\n\n[`HeaderName`]: struct.HeaderName.html\n\n# Examples\n\nBasic usage\n\n```\n# use http::HeaderMap;\n# use http::header::{CONTENT_LENGTH, HOST, LOCATION};\nlet mut headers = HeaderMap::new();\n\nheaders.insert(HOST, \"example.com\".parse().unwrap());\nheaders.insert(CONTENT_LENGTH, \"123\".parse().unwrap());\n\nassert!(headers.contains_key(HOST));\nassert!(!headers.contains_key(LOCATION));\n\nassert_eq!(headers[HOST], \"example.com\");\n\nheaders.remove(HOST);\n\nassert!(!headers.contains_key(HOST));\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13260:70096":{"id":"2:13260:70096","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2724:3097":{"id":"20:2724:3097","crate_id":20,"name":"ACCEPT_RANGES","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Marker used by the server to advertise partial request support.\n\nThe Accept-Ranges response HTTP header is a marker used by the server to\nadvertise its support of partial requests. The value of this field\nindicates the unit that can be used to define a range.\n\nIn presence of an Accept-Ranges header, the browser may try to resume an\ninterrupted download, rather than to start it from the start again.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptRanges),}","value":null,"is_literal":false}},"22:1159:3497":{"id":"22:1159:3497","crate_id":22,"name":"get_u32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13561:146":{"id":"2:13561:146","crate_id":2,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"F"},"generics":{"params":[],"where_predicates":[]}}},"2:3274:4715":{"id":"2:3274:4715","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3275:167","2:3276:891"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:174":{"id":"34:174","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[33,0],"end":[99,1]},"visibility":{"restricted":{"parent":"34:138:3060","path":"::limited"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2565:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"items":["34:176:1870","34:177:123","34:178:2004","34:179:2012","34:180:1988","34:181:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6070:70744":{"id":"5:6070:70744","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1193:3509":{"id":"22:1193:3509","crate_id":22,"name":"get_uint_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2779:3152":{"id":"20:2779:3152","crate_id":20,"name":"SEC_WEBSOCKET_KEY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"The |Sec-WebSocket-Key| header field is used in the WebSocket opening\nhandshake. It is sent from the client to the server to provide part\nof the information used by the server to prove that it received a\nvalid WebSocket opening handshake. This helps ensure that the server\ndoes not accept connections from non-WebSocket clients (e.g., HTTP\nclients) that are being abused to send data to unsuspecting WebSocket\nservers.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketKey),}","value":null,"is_literal":false}},"31:110:3074":{"id":"31:110:3074","crate_id":31,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:111:6514"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"31:96:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2439:3089":{"id":"20:2439:3089","crate_id":20,"name":"ValuesMut","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[130,0],"end":[132,1]},"visibility":"public","docs":"`HeaderMap` mutable value iterator","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:1172:1740":{"id":"22:1172:1740","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4621:2833":{"id":"1:4621:2833","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:6243","1:4623:64050","1:4624:64051","1:4626:2832","1:4627:6245","1:4629:2907","1:4630:5552"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:2826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:500:2012":{"id":"34:500:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[180,4],"end":[183,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13539:134":{"id":"2:13539:134","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13540:167","2:13541:992"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3118-0:297:1582":{"id":"b:2:3118-0:297:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3088:213","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3121:123","2:3122:1385"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2786:3159":{"id":"20:2786:3159","crate_id":20,"name":"TRAILER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Allows the sender to include additional fields at the end of chunked\nmessages.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Trailer),}","value":null,"is_literal":false}},"0:428:2237":{"id":"0:428:2237","crate_id":0,"name":"is_parse_too_large","span":{"filename":"src/error.rs","begin":[156,4],"end":[161,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error caused by a message that was too large.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:56:3496":{"id":"22:56:3496","crate_id":22,"name":"get_u32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[413,4],"end":[413,32]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2782-0:312:1837":{"id":"b:2:2782-0:312:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2784:1887"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:346:661":{"id":"0:346:661","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[514,4],"end":[519,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"5:781:105","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2771:3144":{"id":"20:2771:3144","crate_id":20,"name":"PUBLIC_KEY_PINS_REPORT_ONLY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Sends reports of pinning violation to the report-uri specified in the\nheader.\n\nUnlike `Public-Key-Pins`, this header still allows browsers to connect\nto the server if the pinning is violated.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::PublicKeyPinsReportOnly),}","value":null,"is_literal":false}},"a:2:9129:3293-0:773:2588":{"id":"a:2:9129:3293-0:773:2588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9129:3293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:2:3191:205-0:771:2585":{"id":"a:2:3191:205-0:771:2585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13225:65182":{"id":"2:13225:65182","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1147:1746":{"id":"22:1147:1746","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10945:1725","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:789:640":{"id":"0:789:640","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[192,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10057:191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3278:3070":{"id":"2:3278:3070","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3280:251"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:52:3492":{"id":"22:52:3492","crate_id":22,"name":"get_u16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[333,4],"end":[333,32]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_u16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2741:3114":{"id":"20:2741:3114","crate_id":20,"name":"CONTENT_LANGUAGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Used to describe the languages intended for the audience.\n\nThis header allows a user to differentiate according to the users' own\npreferred language. For example, if \"Content-Language: de-DE\" is set, it\nsays that the document is intended for German language speakers\n(however, it doesn't indicate the document is written in German. For\nexample, it might be written in English as part of a language course for\nGerman speakers).\n\nIf no Content-Language is specified, the default is that the content is\nintended for all language audiences. Multiple language tags are also\npossible, as well as applying the Content-Language header to various\nmedia types and not only to textual documents.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentLanguage),}","value":null,"is_literal":false}},"1:9222:4332":{"id":"1:9222:4332","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9223:68330","1:9224:68331","1:9225:68332","1:9226:68333","1:9227:5072","1:9228:41520","1:9229:68329"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3179:196":{"id":"2:3179:196","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10121:3636":{"id":"2:10121:3636","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10122:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"36:33:123":{"id":"36:33:123","crate_id":36,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[296,4],"end":[296,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:3082:145":{"id":"2:3082:145","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3084:1764"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:335":{"id":"34:335","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[50,0],"end":[82,1]},"visibility":{"restricted":{"parent":"34:300:3767","path":"::combinators::map_data"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"B2"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"B2"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3066","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["34:339:1870","34:340:123","34:341:2004","34:342:2012","34:343:1988"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:335:2017":{"id":"0:335:2017","crate_id":0,"name":"size_hint","span":{"filename":"src/body/body.rs","begin":[413,4],"end":[437,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1170:1751":{"id":"22:1170:1751","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13312:64417":{"id":"2:13312:64417","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1182:3494":{"id":"22:1182:3494","crate_id":22,"name":"get_i16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6367:4340":{"id":"1:6367:4340","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6368:2634","1:6369:9599","1:6370:64865","1:6371:64866","1:6372:64867","1:6373:2633"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10442:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:31:48-0:773:2588":{"id":"b:31:48-0:773:2588","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.21/src/future.rs","begin":[73,0],"end":[84,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"31:44:2965","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["31:52:161","31:53:123","31:54:63732"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"F"}}},"20:2734:3107":{"id":"20:2734:3107","crate_id":20,"name":"ALLOW","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Lists the set of methods support by a resource.\n\nThis header must be sent if the server responds with a 405 Method Not\nAllowed status code to indicate which request methods can be used. An\nempty Allow header indicates that the resource allows no request\nmethods, which might occur temporarily for a given resource, for\nexample.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Allow),}","value":null,"is_literal":false}},"2:2831:169":{"id":"2:2831:169","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2833:585","2:2834:885"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"20:2735:3108":{"id":"20:2735:3108","crate_id":20,"name":"ALT_SVC","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Advertises the availability of alternate services to clients.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AltSvc),}","value":null,"is_literal":false}},"22:1176:1735":{"id":"22:1176:1735","crate_id":22,"name":"has_remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3220:1723-0:771:2585":{"id":"a:2:3220:1723-0:771:2585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3187:203":{"id":"2:3187:203","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:786:1803":{"id":"0:786:1803","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/upgrade.rs","begin":[182,4],"end":[184,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1178:3490":{"id":"22:1178:3490","crate_id":22,"name":"get_u8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"30:6248:2983":{"id":"30:6248:2983","crate_id":30,"name":"SpawnExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:6249:2093"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Spawn","id":"33:16:2974","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:431:2244":{"id":"0:431:2244","crate_id":0,"name":"is_canceled","span":{"filename":"src/error.rs","begin":[175,4],"end":[177,5]},"visibility":"public","docs":"Returns true if this was about a `Request` that was canceled.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:402:1866":{"id":"0:402:1866","crate_id":0,"name":"to_bytes","span":{"filename":"src/body/to_bytes.rs","begin":[47,0],"end":[77,1]},"visibility":"public","docs":"Concatenate the buffers from a body into a single `Bytes` asynchronously.\n\nThis may require copying the data into a single buffer. If you don't need\na contiguous buffer, prefer the [`aggregate`](crate::body::aggregate())\nfunction.\n\n# Note\n\nCare needs to be taken if the remote is untrusted. The function doesn't implement any length\nchecks and an malicious peer might make it consume arbitrary amounts of memory. Checking the\n`Content-Length` is a possibility, but it is not strictly mandated to be present.\n\n# Example\n\n```\n# #[cfg(all(feature = \"client\", feature = \"tcp\", any(feature = \"http1\", feature = \"http2\")))]\n# async fn doc() -> hyper::Result<()> {\nuse hyper::{body::HttpBody};\n\n# let request = hyper::Request::builder()\n#        .method(hyper::Method::POST)\n#        .uri(\"http://httpbin.org/post\")\n#        .header(\"content-type\", \"application/json\")\n#        .body(hyper::Body::from(r#\"{\"library\":\"hyper\"}\"#)).unwrap();\n# let client = hyper::Client::new();\nlet response = client.request(request).await?;\n\nconst MAX_ALLOWED_RESPONSE_SIZE: u64 = 1024;\n\nlet response_content_length = match response.body().size_hint().upper() {\n    Some(v) => v,\n    None => MAX_ALLOWED_RESPONSE_SIZE + 1 // Just to protect ourselves from a malicious response\n};\n\nif response_content_length < MAX_ALLOWED_RESPONSE_SIZE {\n    let body_bytes = hyper::body::to_bytes(response.into_body()).await?;\n    println!(\"body: {:?}\", body_bytes);\n}\n\n# Ok(())\n# }\n```","links":{"crate::body::aggregate()":"0:242:1863"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["body",{"kind":"generic","inner":"T"}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:470:1582","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"HttpBody","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":true,"abi":"Rust"}}},"0:333:2012":{"id":"0:333:2012","crate_id":0,"name":"poll_trailers","span":{"filename":"src/body/body.rs","begin":[370,4],"end":[398,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:470:1582","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13195:70090":{"id":"2:13195:70090","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15741:2678"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3112-0:771:2585":{"id":"b:2:3112-0:771:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3114:661"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:1163:3501":{"id":"22:1163:3501","crate_id":22,"name":"get_u64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1187:3499":{"id":"22:1187:3499","crate_id":22,"name":"get_i32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:1355:1575":{"id":"20:1355:1575","crate_id":20,"name":"Request","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/request.rs","begin":[157,0],"end":[160,1]},"visibility":"public","docs":"Represents an HTTP request.\n\nAn HTTP request consists of a head and a potentially optional body. The body\ncomponent is generic, enabling arbitrary types to represent the HTTP body.\nFor example, the body could be `Vec<u8>`, a `Stream` of byte chunks, or a\nvalue that has been deserialized.\n\n# Examples\n\nCreating a `Request` to send\n\n```no_run\nuse http::{Request, Response};\n\nlet mut request = Request::builder()\n    .uri(\"https://www.rust-lang.org/\")\n    .header(\"User-Agent\", \"my-awesome-agent/1.0\");\n\nif needs_awesome_header() {\n    request = request.header(\"Awesome\", \"yes\");\n}\n\nlet response = send(request.body(()).unwrap());\n\n# fn needs_awesome_header() -> bool {\n#     true\n# }\n#\nfn send(req: Request<()>) -> Response<()> {\n    // ...\n# panic!()\n}\n```\n\nInspecting a request to see what was sent.\n\n```\nuse http::{Request, Response, StatusCode};\n\nfn respond_to(req: Request<()>) -> http::Result<Response<()>> {\n    if req.uri() != \"/awesome-url\" {\n        return Response::builder()\n            .status(StatusCode::NOT_FOUND)\n            .body(())\n    }\n\n    let has_awesome_header = req.headers().contains_key(\"Awesome\");\n    let body = req.body();\n\n    // ...\n# panic!()\n}\n```\n\nDeserialize a request of bytes via json:\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Request;\nuse serde::de;\n\nfn deserialize<T>(req: Request<Vec<u8>>) -> serde_json::Result<Request<T>>\n    where for<'de> T: de::Deserialize<'de>,\n{\n    let (parts, body) = req.into_parts();\n    let body = serde_json::from_slice(&body)?;\n    Ok(Request::from_parts(parts, body))\n}\n#\n# fn main() {}\n```\n\nOr alternatively, serialize the body of a request to json\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Request;\nuse serde::ser;\n\nfn serialize<T>(req: Request<T>) -> serde_json::Result<Request<Vec<u8>>>\n    where T: ser::Serialize,\n{\n    let (parts, body) = req.into_parts();\n    let body = serde_json::to_vec(&body)?;\n    Ok(Request::from_parts(parts, body))\n}\n#\n# fn main() {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3127:1384":{"id":"2:3127:1384","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3341:4698":{"id":"2:3341:4698","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"31:127:2968":{"id":"31:127:2968","crate_id":31,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:128:161","31:129:123","31:130:72605"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"31:96:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"31:122:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:3003:1574":{"id":"20:3003:1574","crate_id":20,"name":"Method","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/method.rs","begin":[46,0],"end":[46,25]},"visibility":"public","docs":"The Request Method (VERB)\n\nThis type also contains constants for a number of common HTTP methods such\nas GET, POST, etc.\n\nCurrently includes 8 variants representing the 8 methods defined in\n[RFC 7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH,\nand an Extension variant for all extensions.\n\n# Examples\n\n```\nuse http::Method;\n\nassert_eq!(Method::GET, Method::from_bytes(b\"GET\").unwrap());\nassert!(Method::GET.is_idempotent());\nassert_eq!(Method::POST.as_str(), \"POST\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:3221:1578":{"id":"20:3221:1578","crate_id":20,"name":"Uri","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/uri/mod.rs","begin":[96,0],"end":[100,1]},"visibility":"public","docs":"The URI component of a request.\n\nFor HTTP 1, this is included as part of the request line. From Section 5.3,\nRequest Target:\n\n> Once an inbound connection is obtained, the client sends an HTTP\n> request message (Section 3) with a request-target derived from the\n> target URI.  There are four distinct formats for the request-target,\n> depending on both the method being requested and whether the request\n> is to a proxy.\n>\n> ```notrust\n> request-target = origin-form\n>                / absolute-form\n>                / authority-form\n>                / asterisk-form\n> ```\n\nThe URI is structured as follows:\n\n```notrust\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|-|   |-------------------------------||--------| |-------------------| |-----|\n |                  |                       |               |              |\nscheme          authority                 path            query         fragment\n```\n\nFor HTTP 2.0, the URI is encoded using pseudoheaders.\n\n# Examples\n\n```\nuse http::Uri;\n\nlet uri = \"/foo/bar?baz\".parse::<Uri>().unwrap();\nassert_eq!(uri.path(), \"/foo/bar\");\nassert_eq!(uri.query(), Some(\"baz\"));\nassert_eq!(uri.host(), None);\n\nlet uri = \"https://www.rust-lang.org/install.html\".parse::<Uri>().unwrap();\nassert_eq!(uri.scheme_str(), Some(\"https\"));\nassert_eq!(uri.host(), Some(\"www.rust-lang.org\"));\nassert_eq!(uri.path(), \"/install.html\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"5:772:207":{"id":"5:772:207","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:2030","5:774:3608","5:775:3609"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:229:1782":{"id":"24:229:1782","crate_id":24,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:230:1793"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:489:1587":{"id":"0:489:1587","crate_id":0,"name":"service","span":{"filename":"src/service/mod.rs","begin":[1,0],"end":[55,31]},"visibility":"public","docs":"Asynchronous Services\n\nA [`Service`](Service) is a trait representing an asynchronous\nfunction of a request to a response. It's similar to\n`async fn(Request) -> Result<Response, Error>`.\n\nThe argument and return value isn't strictly required to be for HTTP.\nTherefore, hyper uses several \"trait aliases\" to reduce clutter around\nbounds. These are:\n\n- `HttpService`: This is blanketly implemented for all types that\n  implement `Service<http::Request<B1>, Response = http::Response<B2>>`.\n- `MakeService`: When a `Service` returns a new `Service` as its \"response\",\n  we consider it a `MakeService`. Again, blanketly implemented in those cases.\n- `MakeConnection`: A `Service` that returns a \"connection\", a type that\n  implements `AsyncRead` and `AsyncWrite`.\n\n# HttpService\n\nIn hyper, especially in the server setting, a `Service` is usually bound\nto a single connection. It defines how to respond to **all** requests that\nconnection will receive.\n\nThe helper [`service_fn`](service_fn) should be sufficient for most cases, but\nif you need to implement `Service` for a type manually, you can follow the example\nin `service_struct_impl.rs`.\n\n# MakeService\n\nSince a `Service` is bound to a single connection, a [`Server`](crate::Server)\nneeds a way to make them as it accepts connections. This is what a\n`MakeService` does.\n\nResources that need to be shared by all `Service`s can be put into a\n`MakeService`, and then passed to individual `Service`s when `call`\nis called.","links":{"Service":"36:13:2212","service_fn":"0:683:2475"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["36:13:2212","0:628:2474","0:683:2475"]}},"20:2747:3120":{"id":"20:2747:3120","crate_id":20,"name":"CONTENT_TYPE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Used to indicate the media type of the resource.\n\nIn responses, a Content-Type header tells the client what the content\ntype of the returned content actually is. Browsers will do MIME sniffing\nin some cases and will not necessarily follow the value of this header;\nto prevent this behavior, the header X-Content-Type-Options can be set\nto nosniff.\n\nIn requests, (such as POST or PUT), the client tells the server what\ntype of data is actually sent.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentType),}","value":null,"is_literal":false}},"22:1175:1743":{"id":"22:1175:1743","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13213:65602":{"id":"2:13213:65602","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15741:2678"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2798:3171":{"id":"20:2798:3171","crate_id":20,"name":"X_XSS_PROTECTION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Stop pages from loading when an XSS attack is detected.\n\nThe HTTP X-XSS-Protection response header is a feature of Internet\nExplorer, Chrome and Safari that stops pages from loading when they\ndetect reflected cross-site scripting (XSS) attacks. Although these\nprotections are largely unnecessary in modern browsers when sites\nimplement a strong Content-Security-Policy that disables the use of\ninline JavaScript ('unsafe-inline'), they can still provide protections\nfor users of older web browsers that don't yet support CSP.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XXssProtection),}","value":null,"is_literal":false}},"20:2721:3094":{"id":"20:2721:3094","crate_id":20,"name":"ACCEPT_CHARSET","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Advertises which character set the client is able to understand.\n\nThe Accept-Charset request HTTP header advertises which character set\nthe client is able to understand. Using content negotiation, the server\nthen selects one of the proposals, uses it and informs the client of its\nchoice within the Content-Type response header. Browsers usually don't\nset this header as the default value for each content type is usually\ncorrect and transmitting it would allow easier fingerprinting.\n\nIf the server cannot serve any matching character set, it can\ntheoretically send back a 406 (Not Acceptable) error code. But, for a\nbetter user experience, this is rarely done and the more common way is\nto ignore the Accept-Charset header in this case.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptCharset),}","value":null,"is_literal":false}},"34:387:2012":{"id":"34:387:2012","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[70,4],"end":[73,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3067","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2386:1580","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2975:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3067","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13263:70097":{"id":"2:13263:70097","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13242:34179":{"id":"2:13242:34179","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12618:5004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:202:1581":{"id":"0:202:1581","crate_id":0,"name":"body","span":{"filename":"src/body/mod.rs","begin":[1,0],"end":[65,1]},"visibility":"public","docs":"Streaming bodies for Requests and Responses\n\nFor both [Clients](crate::client) and [Servers](crate::server), requests and\nresponses use streaming bodies, instead of complete buffering. This\nallows applications to not use memory they don't need, and allows exerting\nback-pressure on connections by only reading when asked.\n\nThere are two pieces to this in hyper:\n\n- **The [`HttpBody`](HttpBody) trait** describes all possible bodies.\n  hyper allows any body type that implements `HttpBody`, allowing\n  applications to have fine-grained control over their streaming.\n- **The [`Body`](Body) concrete type**, which is an implementation of\n  `HttpBody`, and returned by hyper as a \"receive stream\" (so, for server\n  requests and client responses). It is also a decent default implementation\n  if you don't have very custom needs of your send streams.","links":{"Body":"0:297:1582","HttpBody":"34:470:1582"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["22:42:1726","22:526:1728","34:470:1861","34:642:1862","0:242:1863","0:297:1582","0:312:1837","0:402:1866"]}},"2:13304:70110":{"id":"2:13304:70110","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2728:3101":{"id":"20:2728:3101","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_ORIGIN","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates whether the response can be shared with resources with the\ngiven origin.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlAllowOrigin),}","value":null,"is_literal":false}},"2:3088:213":{"id":"2:3088:213","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3090:123","2:3091:1385"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:92:1743":{"id":"22:92:1743","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1033,4],"end":[1033,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3191:205-0:421:123":{"id":"a:2:3191:205-0:421:123","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"20:2770:3143":{"id":"20:2770:3143","crate_id":20,"name":"PUBLIC_KEY_PINS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Associates a specific cryptographic public key with a certain server.\n\nThis decreases the risk of MITM attacks with forged certificates. If one\nor several keys are pinned and none of them are used by the server, the\nbrowser will not accept the response as legitimate, and will not display\nit.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::PublicKeyPins),}","value":null,"is_literal":false}},"20:2773:3146":{"id":"20:2773:3146","crate_id":20,"name":"REFERER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Contains the address of the previous web page from which a link to the\ncurrently requested page was followed.\n\nThe Referer header allows servers to identify where people are visiting\nthem from and may use that data for analytics, logging, or optimized\ncaching, for example.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Referer),}","value":null,"is_literal":false}},"2:13218:34312":{"id":"2:13218:34312","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15741:2678"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49422:5048","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3306:4426":{"id":"2:3306:4426","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3308:167","2:3309:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3191:205-0:312:1837":{"id":"a:2:3191:205-0:312:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"22:97:1743":{"id":"22:97:1743","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1062,4],"end":[1062,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3108-0:421:123":{"id":"b:2:3108-0:421:123","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3111:1764"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2731:3104":{"id":"20:2731:3104","crate_id":20,"name":"ACCESS_CONTROL_REQUEST_HEADERS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Informs the server which HTTP headers will be used when an actual\nrequest is made.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner:\n        Repr::Standard(StandardHeader::AccessControlRequestHeaders),}","value":null,"is_literal":false}},"20:2781:3154":{"id":"20:2781:3154","crate_id":20,"name":"SEC_WEBSOCKET_VERSION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"The |Sec-WebSocket-Version| header field is used in the WebSocket\nopening handshake.  It is sent from the client to the server to\nindicate the protocol version of the connection.  This enables\nservers to correctly interpret the opening handshake and subsequent\ndata being sent from the data, and close the connection if the server\ncannot interpret that data in a safe manner.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketVersion),}","value":null,"is_literal":false}},"2:13298:70108":{"id":"2:13298:70108","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12851:4802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1179:3491":{"id":"22:1179:3491","crate_id":22,"name":"get_i8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:384:1870":{"id":"34:384:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[54,4],"end":[54,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"22:1155:3493":{"id":"22:1155:3493","crate_id":22,"name":"get_u16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:527":{"id":"34:527","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[289,0],"end":[319,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["34:528:1870","34:529:123","34:530:2004","34:531:2012","34:532:1988","34:533:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:57:3497":{"id":"22:57:3497","crate_id":22,"name":"get_u32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[433,4],"end":[433,35]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:2839":{"id":"2:3411:2839","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:526"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3398:112","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:336":{"id":"22:336","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[132,0],"end":[155,1]},"visibility":{"restricted":{"parent":"22:316:1758","path":"::buf::take"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","has_remaining","get_f64_le","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","reader","copy_to_bytes","chain","get_f32_le","get_int","get_i128_le","get_u128","get_u64_le","get_i32","get_i16_le","get_u16","copy_to_slice","take","chunks_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Take","id":"22:1261:2835","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["22:338:1738","22:339:1740","22:340:1743","22:341:1751"],"negative":false,"synthetic":false,"blanket_impl":null}},"24:4106:1805":{"id":"24:4106:1805","crate_id":24,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4107:3516","24:4109:1814","24:4111:2600","24:4114:1816","24:4121:71480","24:4123:71481","24:4125:71482","24:4127:71483","24:4129:71484","24:4131:71485","24:4133:71486","24:4135:71487","24:4137:71488","24:4139:71489","24:4141:71490","24:4143:71491","24:4145:5387","24:4147:71492","24:4149:46910","24:4151:71493","24:4153:71494","24:4155:71495","24:4157:71496","24:4159:71497","24:4161:71498","24:4163:71499","24:4116:6237","24:4118:2827","24:4120:1758"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:229:1782","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8242:4727":{"id":"2:8242:4727","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8244:3600"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9129:3293-0:942:2592":{"id":"a:2:9129:3293-0:942:2592","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9129:3293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9129:3293","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"34:45:1870":{"id":"34:45:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[25,4],"end":[25,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"D"},"generics":{"params":[],"where_predicates":[]}}},"0:781:1793":{"id":"0:781:1793","crate_id":0,"name":"poll_read","span":{"filename":"src/upgrade.rs","begin":[152,4],"end":[158,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"24:368:1784","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:339:1870":{"id":"34:339:1870","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[56,4],"end":[56,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"B2"},"generics":{"params":[],"where_predicates":[]}}},"0:783:1800":{"id":"0:783:1800","crate_id":0,"name":"poll_write","span":{"filename":"src/upgrade.rs","begin":[162,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47300:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1171:1738":{"id":"22:1171:1738","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12845:4801":{"id":"2:12845:4801","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12847:4820","2:12848:900","2:12849:68463","2:12850:68464"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:494:2017":{"id":"34:494:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[160,4],"end":[160,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13200:288":{"id":"2:13200:288","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15752:2687","str::as_mut_ptr":"1:15741:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:308:1783":{"id":"24:308:1783","crate_id":24,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:309:1800","24:310:1802","24:311:1803","24:312:1801","24:315:1804"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13231:3591":{"id":"2:13231:3591","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:12826:3475","prim@char":"1:15735:2673","`None`":"2:47181:162"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12836:4799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1189:3501":{"id":"22:1189:3501","crate_id":22,"name":"get_u64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2431:3088":{"id":"20:2431:3088","crate_id":20,"name":"Values","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[124,0],"end":[126,1]},"visibility":"public","docs":"`HeaderMap` value iterator.\n\nEach value contained in the `HeaderMap` will be yielded.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"36:27:2034":{"id":"36:27:2034","crate_id":36,"name":"poll_ready","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[282,4],"end":[282,80]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13841:1795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50039:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2754:3127":{"id":"20:2754:3127","crate_id":20,"name":"FORWARDED","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Contains information from the client-facing side of proxy servers that\nis altered or lost when a proxy is involved in the path of the request.\n\nThe alternative and de-facto standard versions of this header are the\nX-Forwarded-For, X-Forwarded-Host and X-Forwarded-Proto headers.\n\nThis header is used for debugging, statistics, and generating\nlocation-dependent content and by design it exposes privacy sensitive\ninformation, such as the IP address of the client. Therefore the user's\nprivacy must be kept in mind when deploying this header.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Forwarded),}","value":null,"is_literal":false}},"0:475:1585":{"id":"0:475:1585","crate_id":0,"name":"ext","span":{"filename":"src/ext.rs","begin":[1,0],"end":[221,1]},"visibility":"public","docs":"HTTP extensions.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[]}},"2:3299:4683":{"id":"2:3299:4683","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3300:167","2:3301:931"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3179:196-0:421:123":{"id":"a:2:3179:196-0:421:123","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13220:70093":{"id":"2:13220:70093","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49403:5046","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:517:1988":{"id":"34:517:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[247,4],"end":[247,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:16:123":{"id":"36:16:123","crate_id":36,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[239,4],"end":[239,15]},"visibility":"default","docs":"Errors produced by the service.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"20:2477:1507":{"id":"20:2477:1507","crate_id":20,"name":"0","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[162,11],"end":[162,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"20:2482:3085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},"2:3126:123":{"id":"2:3126:123","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38494:2941","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"36:20":{"id":"36:20","crate_id":36,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","begin":[274,0],"end":[289,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Request","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"S"}}},"items":["36:24:1576","36:25:123","36:26:134","36:27:2034","36:28:360"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2766:3139":{"id":"20:2766:3139","crate_id":20,"name":"ORIGIN","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates where a fetch originates from.\n\nIt doesn't include any path information, but only the server name. It is\nsent with CORS requests, as well as with POST requests. It is similar to\nthe Referer header, but, unlike this header, it doesn't disclose the\nwhole path.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Origin),}","value":null,"is_literal":false}},"0:488:2440":{"id":"0:488:2440","crate_id":0,"name":"execute","span":{"filename":"src/rt.rs","begin":[11,4],"end":[11,32]},"visibility":"default","docs":"Place the future into the executor to be run.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fut",{"kind":"generic","inner":"Fut"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"34:529:123":{"id":"34:529:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[291,4],"end":[291,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38494:2941","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"1:1075:4394":{"id":"1:1075:4394","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:2030","1:1077:5215","1:1078:64414","1:1079:64415","1:1080:6106","1:1081:64416","1:1082:64417"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1161:3499":{"id":"22:1161:3499","crate_id":22,"name":"get_i32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2748:3121":{"id":"20:2748:3121","crate_id":20,"name":"COOKIE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Contains stored HTTP cookies previously sent by the server with the\nSet-Cookie header.\n\nThe Cookie header might be omitted entirely, if the privacy setting of\nthe browser are set to block them, for example.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Cookie),}","value":null,"is_literal":false}},"20:2733:3106":{"id":"20:2733:3106","crate_id":20,"name":"AGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates the time in seconds the object has been in a proxy cache.\n\nThe Age header is usually close to zero. If it is Age: 0, it was\nprobably just fetched from the origin server; otherwise It is usually\ncalculated as a difference between the proxy's current date and the Date\ngeneral header included in the HTTP response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Age),}","value":null,"is_literal":false}},"0:792":{"id":"0:792","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[210,0],"end":[223,1]},"visibility":{"restricted":{"parent":"0:723:1588","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:793:167","0:794:992"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:504":{"id":"20:504","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[3315,4],"end":[3315,41]},"visibility":{"restricted":{"parent":"20:475:3173","path":"::header::map::into_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoHeaderName","id":"20:489:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[505,0],"end":[510,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:344:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:470:1861":{"id":"34:470:1861","crate_id":34,"name":"HttpBody","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[46,0],"end":[136,1]},"visibility":"public","docs":"Trait representing a streaming body of a Request or Response.\n\nData is streamed via the `poll_data` function, which asynchronously yields `T: Buf` values. The\n`size_hint` function provides insight into the total number of bytes that will be streamed.\n\nThe `poll_trailers` function returns an optional set of trailers used to finalize the request /\nresponse exchange. This is mostly used when using the HTTP/2.0 protocol.\n","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["34:471:1870","34:472:123","34:473:2004","34:474:2012","34:475:1988","34:476:2017","34:477:1886","34:478:2045","34:479:3767","34:482:1986","34:485:2742","34:486:3768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["34:106","34:380","34:43","34:487","34:503","34:286","34:263","34:511","34:495","34:519","34:527","34:335","34:174","0:329"]}},"31:44:2965":{"id":"31:44:2965","crate_id":31,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:45:161","31:46:123","31:47:63732"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"31:39:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13189":{"id":"2:13189","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12286:1311","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13190:771","2:13191:1749","2:13192:70088","2:13193:70089","2:13195:70090","2:13198:2032","2:13199:70091","2:13200:288","2:13201:65582","2:13202:58715","2:13204:2009","2:13206:65580","2:13208:65581","2:13210:4411","2:13211:70092","2:13212:65601","2:13213:65602","2:13214:5068","2:13215:4827","2:13216:1598","2:13217:34322","2:13218:34312","2:13219:5552","2:13220:70093","2:13221:34307","2:13222:65617","2:13225:65182","2:13228:65184","2:13231:3591","2:13235:3556","2:13239:2907","2:13242:34179","2:13245:65611","2:13248:70094","2:13251:70095","2:13254:65613","2:13257:65615","2:13260:70096","2:13263:70097","2:13266:2235","2:13269:70098","2:13272:70099","2:13275:70100","2:13278:70101","2:13280:70102","2:13282:70103","2:13284:70104","2:13285:70105","2:13286:70106","2:13289:70107","2:13292:16938","2:13295:65618","2:13298:70108","2:13301:70109","2:13304:70110","2:13307:4953","2:13309:5215","2:13310:6106","2:13311:64416","2:13312:64417","2:13313:70111","2:13315:4396","2:13316:70112"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2755:3128":{"id":"20:2755:3128","crate_id":20,"name":"FROM","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Contains an Internet email address for a human user who controls the\nrequesting user agent.\n\nIf you are running a robotic user agent (e.g. a crawler), the From\nheader should be sent, so you can be contacted if problems occur on\nservers, such as if the robot is sending excessive, unwanted, or invalid\nrequests.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::From),}","value":null,"is_literal":false}},"1:6861:4342":{"id":"1:6861:4342","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:64941"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:513":{"id":"20:513","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[3336,4],"end":[3336,49]},"visibility":{"restricted":{"parent":"20:475:3173","path":"::header::map::into_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoHeaderName","id":"20:489:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[19,0],"end":[19,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"http_body::Body","name":"HttpBody","id":"34:470:1582","glob":false}},"2:13307:4953":{"id":"2:13307:4953","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12765:3966","FromStr::Err":"2:12765:3966"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12765:3966","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12765:3966","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"30:239:2964":{"id":"30:239:2964","crate_id":30,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:240:819","30:243:71720","30:245:6427","30:248:71721","30:250:71722","30:252:6478","30:253:3577","30:254:71723","30:255:3578","30:256:3579","30:258:2742","30:260:71724","30:262:71725","30:263:71726","30:264:71727","30:265:71728"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3118-0:942:2592":{"id":"b:2:3118-0:942:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3088:213","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:942:2592","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3121:123","2:3122:1385"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2723:3096":{"id":"20:2723:3096","crate_id":20,"name":"ACCEPT_LANGUAGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Advertises which languages the client is able to understand.\n\nThe Accept-Language request HTTP header advertises which languages the\nclient is able to understand, and which locale variant is preferred.\nUsing content negotiation, the server then selects one of the proposals,\nuses it and informs the client of its choice with the Content-Language\nresponse header. Browsers set adequate values for this header according\ntheir user interface language and even if a user can change it, this\nhappens rarely (and is frown upon as it leads to fingerprinting).\n\nThis header is a hint to be used when the server has no way of\ndetermining the language via another way, like a specific URL, that is\ncontrolled by an explicit user decision. It is recommended that the\nserver never overrides an explicit decision. The content of the\nAccept-Language is often out of the control of the user (like when\ntraveling and using an Internet Cafe in a different country); the user\nmay also want to visit a page in another language than the locale of\ntheir user interface.\n\nIf the server cannot serve any matching language, it can theoretically\nsend back a 406 (Not Acceptable) error code. But, for a better user\nexperience, this is rarely done and more common way is to ignore the\nAccept-Language header in this case.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptLanguage),}","value":null,"is_literal":false}},"b:2:3123-0:773:2588":{"id":"b:2:3123-0:773:2588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:773:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3126:123","2:3127:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:294:2017":{"id":"34:294:2017","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[122,4],"end":[122,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1862","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:267:123":{"id":"34:267:123","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[43,4],"end":[43,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"E"},"generics":{"params":[],"where_predicates":[]}}},"0:373:640":{"id":"0:373:640","crate_id":0,"name":"fmt","span":{"filename":"src/body/body.rs","begin":[620,4],"end":[633,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10057:191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1177:3489":{"id":"22:1177:3489","crate_id":22,"name":"copy_to_slice","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3337:4696":{"id":"2:3337:4696","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:683:2475":{"id":"0:683:2475","crate_id":0,"name":"service_fn","span":{"filename":"src/service/util.rs","begin":[27,0],"end":[36,1]},"visibility":"public","docs":"Create a `Service` from a function.\n\n# Example\n\n```\nuse hyper::{Body, Request, Response, Version};\nuse hyper::service::service_fn;\n\nlet service = service_fn(|req: Request<Body>| async move {\n    if req.version() == Version::HTTP_11 {\n        Ok(Response::new(Body::from(\"Hello World\")))\n    } else {\n        // Note: it's usually better to return a Response\n        // with an appropriate StatusCode instead of an Err.\n        Err(\"not HTTP/1.1, abort connection\")\n    }\n});\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ServiceFn","id":"0:687:2546","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"Request","id":"20:1355:1575","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}],"output":{"kind":"generic","inner":"S"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13539:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"20:564":{"id":"20:564","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/map.rs","begin":[3428,4],"end":[3428,47]},"visibility":{"restricted":{"parent":"20:526:3172","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543:3076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"22:1194:3510":{"id":"22:1194:3510","crate_id":22,"name":"get_int","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[18,16],"end":[18,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"bytes::Buf","name":"Buf","id":"22:42:1726","glob":false}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[351,0],"end":[357,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3157:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:328:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:112:1988":{"id":"34:112:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[54,4],"end":[54,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14010:4417":{"id":"2:14010:4417","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14011:64886","2:14012:64887","2:14013:64888","2:14014:62822","2:14015:64889","2:14016:64890","2:14017:3580"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2797:3170":{"id":"20:2797:3170","crate_id":20,"name":"X_FRAME_OPTIONS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates whether or not a browser should be allowed to render a page in\na frame.\n\nSites can use this to avoid clickjacking attacks, by ensuring that their\ncontent is not embedded into other sites.\n\nThe added security is only provided if the user accessing the document\nis using a browser supporting `x-frame-options`.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XFrameOptions),}","value":null,"is_literal":false}},"34:49:1988":{"id":"34:49:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[44,4],"end":[44,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[359,0],"end":[438,1]},"visibility":{"restricted":{"parent":"0:247:1581","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:330:1870","0:331:123","0:332:2004","0:333:2012","0:334:1988","0:335:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:73:3513":{"id":"22:73:3513","crate_id":22,"name":"get_f32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[755,4],"end":[755,35]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];\nassert_eq!(1.2f32, buf.get_f32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2744:3117":{"id":"20:2744:3117","crate_id":20,"name":"CONTENT_RANGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Indicates where in a full body message a partial message belongs.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentRange),}","value":null,"is_literal":false}},"34:501:1988":{"id":"34:501:1988","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[187,4],"end":[187,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2726:3099":{"id":"20:2726:3099","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_HEADERS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.7/src/header/name.rs","begin":[154,0],"end":[973,1]},"visibility":"public","docs":"Preflight response indicating permitted HTTP headers.\n\nThe Access-Control-Allow-Headers response header is used in response to\na preflight request to indicate which HTTP headers will be available via\nAccess-Control-Expose-Headers when making the actual request.\n\nThe simple headers, Accept, Accept-Language, Content-Language,\nContent-Type (but only with a MIME type of its parsed value (ignoring\nparameters) of either application/x-www-form-urlencoded,\nmultipart/form-data, or text/plain), are always available and don't need\nto be listed by this header.\n\nThis header is required if the request has an\nAccess-Control-Request-Headers header.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2643:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlAllowHeaders),}","value":null,"is_literal":false}},"a:2:3179:196-0:297:1582":{"id":"a:2:3179:196-0:297:1582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2787:63723":{"id":"2:2787:63723","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:489:2362":{"id":"20:489:2362","crate_id":20,"name":"IntoHeaderName","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:490:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:330:1870":{"id":"0:330:1870","crate_id":0,"name":"Data","span":{"filename":"src/body/body.rs","begin":[360,4],"end":[360,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:777":{"id":"0:777","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[121,0],"end":[149,1]},"visibility":{"restricted":{"parent":"0:723:1588","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:771:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:778:2615"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3118-0:312:1837":{"id":"b:2:3118-0:312:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3088:213","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3121:123","2:3122:1385"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:418:191":{"id":"0:418:191","crate_id":0,"name":"Result","span":{"filename":"src/error.rs","begin":[6,0],"end":[6,51]},"visibility":"public","docs":"Result type often returned from methods that can have hyper `Error`s.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"std::result::Result","id":"2:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"34:519":{"id":"34:519","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[256,0],"end":[287,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["trailers","map_data","is_end_stream","size_hint","data","boxed_unsync","map_err","boxed"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1488:1576","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"items":["34:521:1870","34:522:123","34:523:2004","34:524:2012","34:525:1988","34:526:2017"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3646:4789":{"id":"2:3646:4789","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3648:67648"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:4170:2918":{"id":"24:4170:2918","crate_id":24,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4171:2129","24:4173:6209","24:4176:6185","24:4179:6183","24:4182:6181","24:4186:64297","24:4188:64303","24:4190:64298","24:4192:64304","24:4194:64299","24:4196:64305","24:4198:64300","24:4200:64306","24:4202:64301","24:4204:64307","24:4206:71212","24:4208:71213","24:4210:71214","24:4212:71215","24:4214:71216","24:4216:71217","24:4218:71218","24:4220:71219","24:4222:71220","24:4224:71221","24:4226:71222","24:4228:71223","24:4184:5475","24:4185:6180"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:308:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"2:22392:69388":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"20:3018:3804":{"crate_id":20,"path":["http","method","Inner"],"kind":"enum"},"24:14538:2834":{"crate_id":24,"path":["tokio","io","util","chain","Chain"],"kind":"struct"},"24:5708:6280":{"crate_id":24,"path":["tokio","runtime","task","error","JoinError"],"kind":"struct"},"2:49456:5051":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:50776:4771":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:15752:2687":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:1622:8909":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:49447:4397":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:3091:5920":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"15:269:5529":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"30:11958:6496":{"crate_id":30,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"2:51169:4773":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"30:7785:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"29:4015:9093":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"12:877:4419":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:6269:5739":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"29:6927:9657":{"crate_id":29,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13627:7764":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"12:784:4491":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:4268:103":{"crate_id":24,"path":["tokio","io","util","copy","Copy"],"kind":"struct"},"5:1602:3080":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:7545:4441":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"30:8577:71469":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"18:739:6846":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"24:6875:3804":{"crate_id":24,"path":["tokio","runtime","thread_pool","queue","Inner"],"kind":"struct"},"30:11435:3860":{"crate_id":30,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"12:2009:3080":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:2760:3133":{"crate_id":20,"path":["http","header","name","IF_RANGE"],"kind":"constant"},"20:2724:3097":{"crate_id":20,"path":["http","header","name","ACCEPT_RANGES"],"kind":"constant"},"14:194:47162":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:46172:5120":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11422:4471":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"27:170:55107":{"crate_id":27,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:27759:4730":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:45587:181":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:1472:3077":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"29:5520:9458":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4203:9155":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"30:7140:3865":{"crate_id":30,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"29:5122:9279":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:15735:2673":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13192:7656":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8369:1837":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:4612:220":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"14:189:8175":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:2537:5339":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"12:2323:9722":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"24:10968:1904":{"crate_id":24,"path":["tokio","time","error","Kind"],"kind":"enum"},"2:23740:4960":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"20:3227:2592":{"crate_id":20,"path":["http","uri","Parts"],"kind":"struct"},"1:2177:4421":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"29:5151:9303":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"30:5897:6508":{"crate_id":30,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"1:8376:4517":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"30:11572:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:1132:2944":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"29:4125:9142":{"crate_id":29,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11492:4475":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:4273:4583":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:8474:153":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:22411:69402":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4605:66853":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:53131:8394":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:24408:5087":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"20:2603:6081":{"crate_id":20,"path":["http","header","map","ExtraValue"],"kind":"struct"},"2:51923:4766":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10975:7198":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4073:9112":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:5772:6649":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"24:14236:6236":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU8"],"kind":"struct"},"30:12828:6509":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"30:7222:3875":{"crate_id":30,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:9129:3293":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:15717:64003":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2162:3077":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9264:7104":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:9592:124":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:1717:8974":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:11072:4366":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"16:4417:7908":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"24:11488:6188":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF32Le"],"kind":"struct"},"20:2482:3085":{"crate_id":20,"path":["http","header","map","VacantEntry"],"kind":"struct"},"29:5970:9513":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7216:5760":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:8902:48811":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"24:6240:6307":{"crate_id":24,"path":["tokio","runtime","blocking","task","BlockingTask"],"kind":"struct"},"9:1020:5438":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6858:9641":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:15741:2678":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:7593:5275":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:46327:4882":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"29:4379:9219":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7928:1833":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"34:651:3066":{"crate_id":34,"path":["http_body","combinators","map_data","MapData"],"kind":"struct"},"2:10119:3635":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4470:9255":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:49097:4914":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"37:287:3941":{"crate_id":37,"path":["httparse","ParserConfig"],"kind":"struct"},"24:14273:6214":{"crate_id":24,"path":["tokio","io","util","read_exact","ReadExact"],"kind":"struct"},"17:10179:7130":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:11313:3283":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10317:5947":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:5086:2884":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:3299:4683":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"20:2722:3095":{"crate_id":20,"path":["http","header","name","ACCEPT_ENCODING"],"kind":"constant"},"17:9933:7117":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13799:7830":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:23478:2479":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"35:0:1599":{"crate_id":35,"path":["futures_channel"],"kind":"module"},"1:1152:8410":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4317:9187":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"24:9849:1579":{"crate_id":24,"path":["tokio","sync","watch","state","Version"],"kind":"struct"},"30:10859:71469":{"crate_id":30,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"6:4459:9249":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:8279:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4060:9107":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10584:6024":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"14:11:8175":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:48211:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"29:154:41959":{"crate_id":29,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4501:9265":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:11978:6187":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF32"],"kind":"struct"},"6:6636:9636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"24:10285:6900":{"crate_id":24,"path":["tokio","time","driver","entry","StateCell"],"kind":"struct"},"18:866:6054":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10477:5995":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:23773:8274":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"20:2386:1580":{"crate_id":20,"path":["http","header","map","HeaderMap"],"kind":"struct"},"30:12838:3082":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"2:52080:4761":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:1149:8408":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"30:8239:71469":{"crate_id":30,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"24:11189:6644":{"crate_id":24,"path":["tokio","util","try_lock","LockGuard"],"kind":"struct"},"6:5159:9303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10061:7126":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"30:10586:71469":{"crate_id":30,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"17:10160:7129":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"24:10942:6328":{"crate_id":24,"path":["tokio","time","driver","Driver"],"kind":"struct"},"30:6527:6419":{"crate_id":30,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:38494:2941":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:4786:4980":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:3064:5919":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"30:5875:6512":{"crate_id":30,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"2:47654:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"34:642:1862":{"crate_id":34,"path":["http_body","size_hint","SizeHint"],"kind":"struct"},"17:13788:7826":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"29:4219:9157":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13746:7813":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11199:7211":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:5821:3885":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"24:14655:71469":{"crate_id":24,"path":["tokio","io","util","buf_stream","_","__Origin"],"kind":"struct"},"17:11254:5929":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:6227:4613":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"37:298:1575":{"crate_id":37,"path":["httparse","Request"],"kind":"struct"},"1:15485:6699":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:1658:4492":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"30:506:2966":{"crate_id":30,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"24:5769:4401":{"crate_id":24,"path":["tokio","runtime","task","join","JoinHandle"],"kind":"struct"},"2:3646:4789":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12552:7451":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"29:5945:9495":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:2765:2940":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"20:2766:3139":{"crate_id":20,"path":["http","header","name","ORIGIN"],"kind":"constant"},"2:48315:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"12:2025:4420":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"12:976:4497":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"27:977:6048":{"crate_id":27,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:46276:2834":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5595:5588":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13429:7709":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"29:3910:9033":{"crate_id":29,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:12273:5208":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:7180:3784":{"crate_id":24,"path":["tokio","runtime","thread_pool","idle","State"],"kind":"struct"},"2:32051:68420":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:13574:7753":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:15759:2694":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"27:888:3480":{"crate_id":27,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"29:4005:9087":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:9689:70982":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:584:8822":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:1678:5331":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:7151:8423":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:744:70992":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:4629:4853":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"29:5461:9446":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11045:48819":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12685:7475":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:46307:4880":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:52002:4754":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"20:3351:2787":{"crate_id":20,"path":["http","extensions","Extensions"],"kind":"struct"},"17:11962:7337":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:268:2910":{"crate_id":24,"path":["tokio","io","async_seek","AsyncSeek"],"kind":"trait"},"5:1224:5334":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"29:5213:9331":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"30:10466:71469":{"crate_id":30,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"24:9532:3778":{"crate_id":24,"path":["tokio","sync","broadcast","error","SendError"],"kind":"struct"},"5:1080:6649":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"10:0:2649":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"24:10998:57968":{"crate_id":24,"path":["tokio","time","error","InsertError"],"kind":"enum"},"30:8735:3896":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"30:10027:6444":{"crate_id":30,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"24:9701:1837":{"crate_id":24,"path":["tokio","sync","oneshot","Sender"],"kind":"struct"},"2:49571:4809":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:48202:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"30:13021:6837":{"crate_id":30,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"35:412:3806":{"crate_id":35,"path":["futures_channel","lock","Lock"],"kind":"struct"},"20:2749:3122":{"crate_id":20,"path":["http","header","name","DNT"],"kind":"constant"},"30:7032:3859":{"crate_id":30,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"30:12193:6501":{"crate_id":30,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"30:7760:3870":{"crate_id":30,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"20:2472:4053":{"crate_id":20,"path":["hyper","header","Entry","Occupied"],"kind":"variant"},"1:0:1302":{"crate_id":1,"path":["std"],"kind":"module"},"2:13938:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:14345:4384":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:2780:3153":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_PROTOCOL"],"kind":"constant"},"16:7870:5696":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"9:996:5437":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"20:1492:2592":{"crate_id":20,"path":["http","response","Parts"],"kind":"struct"},"17:9528:1728":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:5857:6656":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:50824:4751":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:6769:4345":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:2543:5994":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:7545:3564":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:6520:69511":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"30:11167:3867":{"crate_id":30,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"17:10962:7197":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"39:0:1609":{"crate_id":39,"path":["tracing"],"kind":"module"},"2:49519:4800":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:11931:4516":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"24:13905:6223":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI32"],"kind":"struct"},"20:1488:1576":{"crate_id":20,"path":["http","response","Response"],"kind":"struct"},"30:5199:3056":{"crate_id":30,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"30:12466:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"30:10550:3864":{"crate_id":30,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"1:12550:6695":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:7559:4442":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:23798:4955":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11811:4444":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"24:12930:6247":{"crate_id":24,"path":["tokio","io","util","read_until","ReadUntil"],"kind":"struct"},"30:7882:3871":{"crate_id":30,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"9:692:5371":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"24:12793:2835":{"crate_id":24,"path":["tokio","io","util","take","Take"],"kind":"struct"},"2:10239:8268":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"29:4503:9270":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:11833:6673":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"5:3346:4422":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"0:402:1866":{"crate_id":0,"path":["hyper","body","to_bytes"],"kind":"function"},"17:13598:7757":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:3955:123":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:54:5492":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:5953:9495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"33:19:2973":{"crate_id":33,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"27:880:6839":{"crate_id":27,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"24:11155:2981":{"crate_id":24,"path":["tokio","util","wake","WakerRef"],"kind":"struct"},"5:6457:3077":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"29:3997:9084":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:4704:7916":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:5753:5597":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8020:4542":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"20:3003:1574":{"crate_id":20,"path":["http","method","Method"],"kind":"struct"},"2:5481:13228":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:13098:7639":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:12108:4507":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"20:2710:6100":{"crate_id":20,"path":["http","header","name","MaybeLower"],"kind":"struct"},"5:6654:2996":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"24:11831:6205":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU32Le"],"kind":"struct"},"2:13630:173":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:49557:4806":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11304:48821":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:14552:1726":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:14335:9812":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:10057:191":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"29:5371:9416":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:9886:7116":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"24:1042:6857":{"crate_id":24,"path":["tokio","util","linked_list","Pointers"],"kind":"struct"},"30:9829:3859":{"crate_id":30,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"20:2772:3145":{"crate_id":20,"path":["http","header","name","RANGE"],"kind":"constant"},"30:7663:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"30:9005:71469":{"crate_id":30,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"12:429:5507":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12247:7384":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"24:9553:3781":{"crate_id":24,"path":["tokio","sync","broadcast","error","TryRecvError"],"kind":"enum"},"16:7250:5763":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3906:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"24:6653:6302":{"crate_id":24,"path":["tokio","runtime","handle","HandleInner"],"kind":"struct"},"2:47291:3611":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"12:2039:4422":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:3316:4428":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"29:1715:8977":{"crate_id":29,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"30:7160:71469":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"29:584:8825":{"crate_id":29,"path":["libc","unix","winsize"],"kind":"struct"},"17:13497:7731":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11124:64006":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:47696:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:7239:6649":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"24:7241:6885":{"crate_id":24,"path":["tokio","coop","Budget"],"kind":"struct"},"30:8792:3897":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"1:2723:2939":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:5860:4645":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"24:10319:6901":{"crate_id":24,"path":["tokio","time","driver","entry","TimerSharedPadded"],"kind":"struct"},"30:6251:2982":{"crate_id":30,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"17:9332:5987":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:38557:2881":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:48483:8319":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"27:905:70995":{"crate_id":27,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13898:7854":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:12010:3779":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:8275:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"20:2504:2363":{"crate_id":20,"path":["http","header","map","ValueIter"],"kind":"struct"},"20:2798:3171":{"crate_id":20,"path":["http","header","name","X_XSS_PROTECTION"],"kind":"constant"},"1:15205:8512":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"24:11537:6192":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI128Le"],"kind":"struct"},"17:13282:7678":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:6691:5749":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:4762:3804":{"crate_id":24,"path":["tokio","park","thread","Inner"],"kind":"struct"},"1:1075:4394":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"36:13:2212":{"crate_id":36,"path":["tower_service","Service"],"kind":"trait"},"2:48958:5017":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"30:8606:3890":{"crate_id":30,"path":["futures_util","future","select","Select"],"kind":"struct"},"2:47486:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"29:4233:9158":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"24:14587:2845":{"crate_id":24,"path":["tokio","io","util","buf_writer","BufWriter"],"kind":"struct"},"22:1233:2834":{"crate_id":22,"path":["bytes","buf","chain","Chain"],"kind":"struct"},"24:12563:6186":{"crate_id":24,"path":["tokio","io","util","write_buf","WriteBuf"],"kind":"struct"},"17:13912:7861":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"22:1242:3080":{"crate_id":22,"path":["bytes","buf","iter","IntoIter"],"kind":"struct"},"20:2741:3114":{"crate_id":20,"path":["http","header","name","CONTENT_LANGUAGE"],"kind":"constant"},"24:8956:3009":{"crate_id":24,"path":["tokio","sync","rwlock","read_guard","RwLockReadGuard"],"kind":"struct"},"2:3664:4793":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"30:8435:71469":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:7392:5695":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"27:958:6839":{"crate_id":27,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:12125:6195":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI32"],"kind":"struct"},"6:599:8830":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:11929:6189":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF64"],"kind":"struct"},"18:857:6053":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"24:308:1783":{"crate_id":24,"path":["tokio","io","async_write","AsyncWrite"],"kind":"trait"},"16:2794:5612":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"20:5:1573":{"crate_id":20,"path":["http","header"],"kind":"module"},"0:475:1585":{"crate_id":0,"path":["hyper","ext"],"kind":"module"},"5:2314:5335":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"29:5412:9434":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:4653:99":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:8341:201":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"20:2786:3159":{"crate_id":20,"path":["http","header","name","TRAILER"],"kind":"constant"},"20:2743:3116":{"crate_id":20,"path":["http","header","name","CONTENT_LOCATION"],"kind":"constant"},"16:6780:5750":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"24:7409:6337":{"crate_id":24,"path":["tokio","sync","broadcast","Recv"],"kind":"struct"},"2:32103:68419":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"24:5569:6363":{"crate_id":24,"path":["tokio","runtime","task","Notified"],"kind":"struct"},"1:1190:13226":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:3247:3069":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:3522:7032":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"29:5451:9444":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:1157:13225":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:15739:2676":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"24:1753:3784":{"crate_id":24,"path":["tokio","fs","file","State"],"kind":"enum"},"29:6885:9649":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"30:5804:3993":{"crate_id":30,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"34:562:71469":{"crate_id":34,"path":["http_body","full","_","__Origin"],"kind":"struct"},"6:5241:9342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:11022:6261":{"crate_id":24,"path":["tokio","time","interval","MissedTickBehavior"],"kind":"enum"},"2:55874:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10827:6022":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:48500:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"29:5990:9519":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"30:8382:71469":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"6:3905:9023":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:3252:4429":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"29:4247:4614":{"crate_id":29,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"24:9666:6362":{"crate_id":24,"path":["tokio","sync","notify","NotificationType"],"kind":"enum"},"6:4120:9138":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:53233:8400":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"27:1005:6051":{"crate_id":27,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10041:7124":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:45797:4973":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"12:556:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:51319:4753":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:6560:6287":{"crate_id":24,"path":["tokio","runtime","blocking","pool","Spawner"],"kind":"struct"},"1:11104:6611":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"29:5555:9483":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"30:7319:3875":{"crate_id":30,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"2:23826:8279":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13296:7679":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:10487:3624":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7226:5761":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:13056:41483":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:7820:64267":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"5:3954:6649":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10489:5997":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:12068:4505":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"30:8399:3886":{"crate_id":30,"path":["futures_util","future","join","Join3"],"kind":"struct"},"16:6605:5704":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8796:1910":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:24510:5089":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:14037:2852":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"24:8048:3777":{"crate_id":24,"path":["tokio","sync","mpsc","unbounded","UnboundedReceiver"],"kind":"struct"},"17:13620:7762":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"30:7595:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:23920:9735":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"20:2782:3155":{"crate_id":20,"path":["http","header","name","SERVER"],"kind":"constant"},"2:46154:97":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:11147:8481":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:7525:4440":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:4641:4854":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"20:2787:3160":{"crate_id":20,"path":["http","header","name","TRANSFER_ENCODING"],"kind":"constant"},"2:48241:123":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"24:79:6625":{"crate_id":24,"path":["tokio","macros","scoped_tls","set","Reset"],"kind":"struct"},"12:2045:4423":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13986:7876":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:10332:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:4890:7922":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:12836:4799":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"24:6550:6287":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","Spawner"],"kind":"struct"},"17:13477:7724":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"30:11369:3869":{"crate_id":30,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"30:10878:6452":{"crate_id":30,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"24:3037:10130":{"crate_id":24,"path":["tokio","io","util","copy_bidirectional","CopyBidirectional"],"kind":"struct"},"20:1574:2345":{"crate_id":20,"path":["http","status","InvalidStatusCode"],"kind":"struct"},"16:6424:5742":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"29:3964:9066":{"crate_id":29,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:11148:5008":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:9659:70981":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"12:354:9716":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11915:7322":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13402:7705":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:6893:9649":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7823:5701":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"20:3236:2347":{"crate_id":20,"path":["http","uri","InvalidUri"],"kind":"struct"},"20:3297:4107":{"crate_id":20,"path":["http","version","Http"],"kind":"enum"},"29:598:8833":{"crate_id":29,"path":["libc","unix","sigval"],"kind":"struct"},"35:560:2176":{"crate_id":35,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"1:14395:1725":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:12507:5036":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"20:3191:3990":{"crate_id":20,"path":["http","uri","scheme","Scheme"],"kind":"struct"},"16:4734:7917":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:3284:92":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"20:2778:3151":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_EXTENSIONS"],"kind":"constant"},"12:469:70972":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:9346:8590":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6718:5894":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:11037:5005":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10788:7184":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:10717:114":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"20:2796:3169":{"crate_id":20,"path":["http","header","name","X_DNS_PREFETCH_CONTROL"],"kind":"constant"},"34:738:71469":{"crate_id":34,"path":["http_body","combinators","map_err","_","__Origin"],"kind":"struct"},"17:12771:7215":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:6935:9657":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"24:13109:6244":{"crate_id":24,"path":["tokio","io","util","fill_buf","FillBuf"],"kind":"struct"},"17:11726:7287":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:10989:2835":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"20:2728:3101":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_ORIGIN"],"kind":"constant"},"2:3013:2479":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3014:4668":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"30:12544:71469":{"crate_id":30,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"17:10814:6021":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:3076:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:15229:5533":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:14952:4407":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:10028:7123":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"0:723:1588":{"crate_id":0,"path":["hyper","upgrade"],"kind":"module"},"30:10069:71469":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"20:2447:3077":{"crate_id":20,"path":["http","header","map","Drain"],"kind":"struct"},"2:49125:1728":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"30:11891:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"2:45717:1871":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:6107:4612":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:7511:4439":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"30:8078:3877":{"crate_id":30,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"5:4499:5313":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"24:1830:3878":{"crate_id":24,"path":["tokio","future","maybe_done","MaybeDone"],"kind":"enum"},"1:13825:4444":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:7363:188":{"crate_id":24,"path":["tokio","sync","broadcast","Receiver"],"kind":"struct"},"30:9719:6442":{"crate_id":30,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"20:2576:5506":{"crate_id":20,"path":["http","header","map","Bucket"],"kind":"struct"},"2:23834:8280":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:3189:103":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"30:11998:6497":{"crate_id":30,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"16:5707:5591":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:50116:2943":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"29:5351:9408":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"27:930:70994":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"29:3982:9078":{"crate_id":29,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:11161:4597":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7236:5762":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3184:2773":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:2779:3071":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:6887:9648":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4255:4614":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:5109:3652":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:48880:5009":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:5371:9415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:45562:180":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"29:6168:9604":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:47352:3081":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:13924:7863":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"24:9779:3008":{"crate_id":24,"path":["tokio","sync","rwlock","RwLock"],"kind":"struct"},"6:3881:9005":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:22781:2479":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:24578:5091":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"30:10962:6453":{"crate_id":30,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"24:4726:3902":{"crate_id":24,"path":["tokio","park","either","Either"],"kind":"enum"},"17:13780:7825":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"24:1787:4553":{"crate_id":24,"path":["tokio","fs","read_dir","ReadDir"],"kind":"struct"},"2:45677:2800":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:3320:4421":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:591:8825":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:10543:7139":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:11110:1893":{"crate_id":24,"path":["tokio","util","sync_wrapper","SyncWrapper"],"kind":"struct"},"6:3957:9059":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:49115:5033":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11172:2194":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:3262:4709":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:4427:3081":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:1459:3088":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:15758:2693":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:49700:4813":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9839:5962":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:12541:124":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:8303:5296":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:50993:4752":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"20:2790:3162":{"crate_id":20,"path":["http","header","name","UPGRADE_INSECURE_REQUESTS"],"kind":"constant"},"1:10546:4499":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"29:4207:9156":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:660:6061":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"30:4786:1892":{"crate_id":30,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"24:5673:6630":{"crate_id":24,"path":["tokio","runtime","enter","DisallowBlockingGuard"],"kind":"struct"},"20:2439:3089":{"crate_id":20,"path":["http","header","map","ValuesMut"],"kind":"struct"},"20:2733:3106":{"crate_id":20,"path":["http","header","name","AGE"],"kind":"constant"},"17:11519:7250":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"24:518:83":{"crate_id":24,"path":["tokio","loom","std","atomic_ptr","AtomicPtr"],"kind":"struct"},"24:13807:6219":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI128"],"kind":"struct"},"2:46666:1910":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:2843:5857":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"14:244:8179":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:9065:48815":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:5871:6658":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"0:489:1587":{"crate_id":0,"path":["hyper","service"],"kind":"module"},"2:53142:8395":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:811:6049":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:1311:6036":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12467:7437":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:5309:5189":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"29:4387:9223":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"30:6897:3862":{"crate_id":30,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"5:1669:180":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"9:1075:5439":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"24:9825:1840":{"crate_id":24,"path":["tokio","sync","watch","Shared"],"kind":"struct"},"17:9404:7017":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:1563:8870":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6087:5687":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:24544:5090":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"30:8213:3881":{"crate_id":30,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"6:3997:9082":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"12:377:5509":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4306:9182":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"20:2751:3124":{"crate_id":20,"path":["http","header","name","ETAG"],"kind":"constant"},"5:8335:9733":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"5:1184:70925":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:787:3091":{"crate_id":20,"path":["http","header","value","InvalidHeaderValue"],"kind":"struct"},"29:603:8835":{"crate_id":29,"path":["libc","unix","itimerval"],"kind":"struct"},"2:23718:8272":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"24:4106:1805":{"crate_id":24,"path":["tokio","io","util","async_read_ext","AsyncReadExt"],"kind":"trait"},"17:13272:7677":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"15:230:5524":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:8149:5219":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:51074:8336":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:8626:3011":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"29:4087:9125":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:51272:4765":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"24:368:1784":{"crate_id":24,"path":["tokio","io","read_buf","ReadBuf"],"kind":"struct"},"29:4402:9227":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:10129:3639":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11227:4607":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:8223:2806":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:55809:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11328:7215":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10599:7147":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"44:0:2647":{"crate_id":44,"path":["cfg_if"],"kind":"module"},"16:3287:5868":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4193:9154":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:22788:18382":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"20:2242:123":{"crate_id":20,"path":["http","error","Error"],"kind":"struct"},"6:5945:9490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3311:4427":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"12:1253:4498":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:10936:2861":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"30:10424:4894":{"crate_id":30,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"29:1588:8893":{"crate_id":29,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"29:5284:9367":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:47282:3291":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"29:6606:9635":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:15701:8670":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:12544:5039":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10611:7148":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"30:11984:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"1:9024:3008":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"27:698:6058":{"crate_id":27,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:14031:2854":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:49109:5032":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:2983:3092":{"crate_id":20,"path":["http","header","value","ToStrError"],"kind":"struct"},"24:4698:158":{"crate_id":24,"path":["tokio","loom","std","mutex","Mutex"],"kind":"struct"},"20:2726:3099":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_HEADERS"],"kind":"constant"},"17:11358:5989":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5400:9428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:10058:2829":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"29:1692:8967":{"crate_id":29,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:3743:3081":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:10110:2818":{"crate_id":24,"path":["tokio","task","task_local","with_task","Guard"],"kind":"struct"},"1:10243:7026":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:13051:8270":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"17:10656:7152":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:5197:9322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:3350:4682":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"20:2761:3134":{"crate_id":20,"path":["http","header","name","IF_UNMODIFIED_SINCE"],"kind":"constant"},"6:5998:9519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:13752:4445":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12442:7434":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:1518:4495":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"37:202:6614":{"crate_id":37,"path":["httparse","parse_headers_iter_uninit","ShrinkOnDrop"],"kind":"struct"},"17:9759:7114":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:5783:6877":{"crate_id":24,"path":["tokio","runtime","task","state","Snapshot"],"kind":"struct"},"16:3041:5862":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"24:229:1782":{"crate_id":24,"path":["tokio","io","async_read","AsyncRead"],"kind":"trait"},"2:45745:4905":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"34:686:71469":{"crate_id":34,"path":["http_body","combinators","map_data","_","__Origin"],"kind":"struct"},"16:6964:3290":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:53210:8399":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:9244:1832":{"crate_id":24,"path":["tokio","sync","task","atomic_waker","AtomicWaker"],"kind":"struct"},"2:5502:4851":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:46336:4883":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:11390:6386":{"crate_id":24,"path":["tokio","task","local","RunUntil"],"kind":"struct"},"23:24:6164":{"crate_id":23,"path":["itoa","Buffer"],"kind":"struct"},"17:11030:123":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:2795:3168":{"crate_id":20,"path":["http","header","name","X_CONTENT_TYPE_OPTIONS"],"kind":"constant"},"17:9162:5930":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:55848:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3313:3081":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"24:12174:6193":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI16"],"kind":"struct"},"35:467:3777":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"20:3092:1813":{"crate_id":20,"path":["http","response","Builder"],"kind":"struct"},"17:12040:7350":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"20:2431:3088":{"crate_id":20,"path":["http","header","map","Values"],"kind":"struct"},"6:605:8833":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"29:1622:8914":{"crate_id":29,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:50084:2950":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"29:5266:9355":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"20:2667:4490":{"crate_id":20,"path":["http","header","name","Repr"],"kind":"enum"},"16:7073:5753":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:10570:8432":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"20:2747:3120":{"crate_id":20,"path":["http","header","name","CONTENT_TYPE"],"kind":"constant"},"2:4822:3205":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10979:2834":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:10574:2201":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"31:122:2479":{"crate_id":31,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"24:4507:2860":{"crate_id":24,"path":["tokio","io","util","repeat","Repeat"],"kind":"struct"},"16:5975:5730":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"29:4350:9208":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"29:6098:9555":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:9130:3292":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"20:3073:3965":{"crate_id":20,"path":["http","method","extension","AllocatedExtension"],"kind":"struct"},"24:9330:3205":{"crate_id":24,"path":["tokio","sync","once_cell","OnceCell"],"kind":"struct"},"2:53195:8398":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6357:5740":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"29:1682:8961":{"crate_id":29,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"24:4304:2024":{"crate_id":24,"path":["tokio","io","util","empty","Empty"],"kind":"struct"},"16:3549:7899":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:47402:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:4346:2857":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:53085:8390":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"24:9742:3784":{"crate_id":24,"path":["tokio","sync","oneshot","State"],"kind":"struct"},"16:7205:5759":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6005:9523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"20:2754:3127":{"crate_id":20,"path":["http","header","name","FORWARDED"],"kind":"constant"},"16:5029:7926":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:525:8788":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10279:5960":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:5364:3784":{"crate_id":24,"path":["tokio","runtime","task","state","State"],"kind":"struct"},"1:14776:4447":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12537:7447":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:10442:2479":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:14003:6228":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU128"],"kind":"struct"},"29:4423:9237":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"30:12304:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"30:8252:187":{"crate_id":30,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"1:12088:4506":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:8288:2775":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13532:7742":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:14358:8507":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:5632:5589":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"30:11547:3067":{"crate_id":30,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"2:3290:4721":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"29:4195:9155":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"12:892:5494":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"29:4369:9216":{"crate_id":29,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:3422:1845":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:49863:5064":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"29:556:8810":{"crate_id":29,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:5697:4377":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:632:8848":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"20:2469:3078":{"crate_id":20,"path":["http","header","map","Entry"],"kind":"enum"},"1:14112:3624":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:7146:5754":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"24:14668:2844":{"crate_id":24,"path":["tokio","io","util","buf_reader","BufReader"],"kind":"struct"},"16:3772:7901":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"30:9854:71469":{"crate_id":30,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"20:2732:3105":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_REQUEST_METHOD"],"kind":"constant"},"1:6603:9534":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:50728:8333":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:11259:71469":{"crate_id":24,"path":["tokio","time","timeout","_","__Origin"],"kind":"struct"},"6:4133:9142":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:15151:4602":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:49289:5041":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"0:421:123":{"crate_id":0,"path":["hyper","Error"],"kind":"struct"},"5:7822:6665":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"29:6873:9647":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:12856:4798":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:1923:4419":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"30:12979:3903":{"crate_id":30,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"30:6737:3866":{"crate_id":30,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"24:4104:5552":{"crate_id":24,"path":["tokio","io","util","async_buf_read_ext","AsyncBufReadExt","lines"],"kind":"foreign_type"},"5:3935:4419":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:8948:3005":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"20:2415:3080":{"crate_id":20,"path":["http","header","map","IntoIter"],"kind":"struct"},"30:9359:4883":{"crate_id":30,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"1:6771:4346":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:2852:166":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:7228:172":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"29:3937:9056":{"crate_id":29,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11981:7342":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"24:4869:2199":{"crate_id":24,"path":["tokio","runtime","task","core","Header"],"kind":"struct"},"17:11750:7289":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"24:12833:2836":{"crate_id":24,"path":["tokio","io","util","split","Split"],"kind":"struct"},"35:486:3779":{"crate_id":35,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"24:9513:2997":{"crate_id":24,"path":["tokio","sync","barrier","Barrier"],"kind":"struct"},"24:9872:6381":{"crate_id":24,"path":["tokio","sync","watch","state","AtomicState"],"kind":"struct"},"5:5299:186":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:4157:6025":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:681:7026":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:10108:106":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:3431:128":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:53105:8392":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:11241:4615":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"40:0:6530":{"crate_id":40,"path":["tracing_core"],"kind":"module"},"24:7641:6349":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","OwnedPermit"],"kind":"struct"},"1:2458:8419":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:4866:3648":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:7803:4797":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:45654:185":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:3110:4554":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"30:8525:3888":{"crate_id":30,"path":["futures_util","future","join","Join5"],"kind":"struct"},"2:47938:3635":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:49875:5057":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9476:7019":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"20:3277:1579":{"crate_id":20,"path":["http","version","Version"],"kind":"struct"},"1:10454:64864":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"20:489:2362":{"crate_id":20,"path":["http","header","map","into_header_name","IntoHeaderName"],"kind":"trait"},"17:11779:7300":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:49748:8327":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"12:2303:9719":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"29:4273:9171":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"12:2013:3077":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:3246:2848":{"crate_id":20,"path":["http","uri","ErrorKind"],"kind":"enum"},"16:4477:7910":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"30:239:2964":{"crate_id":30,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"29:1609:8907":{"crate_id":29,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9809:70983":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13582:7754":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13119:7644":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"20:1967:3989":{"crate_id":20,"path":["http","uri","port","Port"],"kind":"struct"},"2:32045:5135":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:3191:205":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"29:4052:9107":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3529:2845":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"33:407:2981":{"crate_id":33,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"29:3989:9082":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6166:5734":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"24:1926:1726":{"crate_id":24,"path":["tokio","io","blocking","Buf"],"kind":"struct"},"17:12598:7458":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6682:5703":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"24:9763:3198":{"crate_id":24,"path":["tokio","sync","semaphore","Semaphore"],"kind":"struct"},"2:45752:3649":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"30:6787:3861":{"crate_id":30,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:49438:5050":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12632:7471":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"29:5304:9383":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:49431:5049":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"24:11046:6924":{"crate_id":24,"path":["tokio","util","rand","FastRand"],"kind":"struct"},"1:6593:4375":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:896:6056":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"22:1040:6928":{"crate_id":22,"path":["bytes","fmt","BytesRef"],"kind":"struct"},"30:12768:71469":{"crate_id":30,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"2:46406:4888":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"30:8035:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:569:8813":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:5990:4604":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4517:9272":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"27:996:6050":{"crate_id":27,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:1415:3081":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"25:65:6624":{"crate_id":25,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:9088:48816":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:48968:5018":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:8103:3077":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:8079:5230":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:6871:9659":{"crate_id":24,"path":["tokio","runtime","thread_pool","queue","Steal"],"kind":"struct"},"30:11613:3874":{"crate_id":30,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"2:46675:8315":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:4385:2853":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:1806:4554":{"crate_id":24,"path":["tokio","fs","read_dir","DirEntry"],"kind":"struct"},"5:8176:3080":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:5167:9305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5273:5615":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:14828:4505":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:7355:3080":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"12:968:4496":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5386:9417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"14:0:2652":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:12567:5040":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:3990:9078":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4852:7921":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:4535:7912":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:51602:8345":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12168:7157":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"24:8459:3804":{"crate_id":24,"path":["tokio","sync","oneshot","Inner"],"kind":"struct"},"2:49542:4803":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:10699:125":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:1628:3088":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12095:7361":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"27:0:2656":{"crate_id":27,"path":["memchr"],"kind":"module"},"1:9648:6690":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:46659:8265":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:909:93":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:12321:6204":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU32"],"kind":"struct"},"30:7565:3874":{"crate_id":30,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"30:9475:3857":{"crate_id":30,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"2:3465:3053":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"18:704:6839":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"30:12647:59052":{"crate_id":30,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"2:8756:4796":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4005:9084":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"27:820:6060":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:5889:4649":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:12618:5004":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"24:609:89":{"crate_id":24,"path":["tokio","loom","std","atomic_usize","AtomicUsize"],"kind":"struct"},"6:5522:9457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:47368:3080":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:45498:3054":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"24:6647:5338":{"crate_id":24,"path":["tokio","runtime","handle","Handle"],"kind":"struct"},"24:988:6375":{"crate_id":24,"path":["tokio","util","wake_list","WakeList"],"kind":"struct"},"2:47952:3636":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:24476:4452":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"12:1118:3084":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:4684:4858":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:49663:4812":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"35:539:3784":{"crate_id":35,"path":["futures_channel","mpsc","State"],"kind":"struct"},"1:5683:4376":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:1522:8852":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:14808:8740":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"29:562:8813":{"crate_id":29,"path":["libc","unix","hostent"],"kind":"struct"},"2:23647:5081":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"30:10668:5015":{"crate_id":30,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"33:0:2955":{"crate_id":33,"path":["futures_task"],"kind":"module"},"2:46368:3859":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:51421:4745":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5130:9279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:46397:4887":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:10918:5338":{"crate_id":24,"path":["tokio","time","driver","handle","Handle"],"kind":"struct"},"20:2784:3157":{"crate_id":20,"path":["http","header","name","STRICT_TRANSPORT_SECURITY"],"kind":"constant"},"29:5233:9342":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"30:12497:2860":{"crate_id":30,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"20:3178:3987":{"crate_id":20,"path":["http","uri","authority","Authority"],"kind":"struct"},"31:27:3073":{"crate_id":31,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"2:49403:5046":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10001:48865":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5459:9444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11628:7267":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13865:7847":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:10811:4487":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"20:2767:3140":{"crate_id":20,"path":["http","header","name","PRAGMA"],"kind":"constant"},"2:47570:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:24204:5084":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"24:5637:71210":{"crate_id":24,"path":["tokio","runtime","enter","EnterContext"],"kind":"enum"},"24:9842:3998":{"crate_id":24,"path":["tokio","sync","watch","error","RecvError"],"kind":"struct"},"1:6767:4343":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5420:9434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:3635:209":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"30:10169:6446":{"crate_id":30,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"7:0:1449":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:48196:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:47248:3290":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:2968:5860":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5969:9507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:45608:184":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"30:10043:4888":{"crate_id":30,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"16:7119:5618":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:5627:4372":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:8929:48812":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:3282:4509":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"9:722:5372":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:46488:4842":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:13450:4436":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"45:0:1610":{"crate_id":45,"path":["want"],"kind":"module"},"24:9661:3195":{"crate_id":24,"path":["tokio","sync","notify","Notify"],"kind":"struct"},"24:1451:1814":{"crate_id":24,"path":["tokio","fs","read","read"],"kind":"function"},"29:4032:9099":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"30:11778:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"1:7013:3282":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12582:7454":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:2246:5336":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"30:12894:71469":{"crate_id":30,"path":["futures_util","stream","select_all","_","__Origin"],"kind":"struct"},"24:2109:2854":{"crate_id":24,"path":["tokio","io","stdin","Stdin"],"kind":"struct"},"29:4486:9262":{"crate_id":29,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:3380:4423":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"31:44:2965":{"crate_id":31,"path":["futures_core","future","TryFuture"],"kind":"trait"},"30:8950:3901":{"crate_id":30,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"6:4419:9233":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"24:8606:3198":{"crate_id":24,"path":["tokio","sync","batch_semaphore","Semaphore"],"kind":"struct"},"17:10673:49003":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:5469:9446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"20:2727:3100":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_METHODS"],"kind":"constant"},"30:12067:6499":{"crate_id":30,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"12:1100:3078":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:9210:48818":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4431:9237":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13041:7601":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:9767:3199":{"crate_id":24,"path":["tokio","sync","semaphore","SemaphorePermit"],"kind":"struct"},"30:1343:3899":{"crate_id":30,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"2:2190:4670":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"29:4075:9119":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10623:7149":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"24:957:6627":{"crate_id":24,"path":["tokio","util","atomic_cell","AtomicCell"],"kind":"struct"},"24:14441:2837":{"crate_id":24,"path":["tokio","io","util","lines","Lines"],"kind":"struct"},"24:12881:2194":{"crate_id":24,"path":["tokio","io","util","shutdown","Shutdown"],"kind":"struct"},"16:6569:5891":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:542:5621":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"30:12521:1910":{"crate_id":30,"path":["futures_util","stream","once","Once"],"kind":"struct"},"1:11382:3784":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:11042:4360":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:2456:8418":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"24:10989:6921":{"crate_id":24,"path":["tokio","time","error","Elapsed"],"kind":"struct"},"12:1667:5516":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:11209:4358":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:7631:4840":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:1665:8942":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:3472:4419":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:3188:202":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:5191:9321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:2761:5338":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"30:13058:6437":{"crate_id":30,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"1:7337:171":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"30:12735:6820":{"crate_id":30,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"29:3949:9059":{"crate_id":29,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11216:4644":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:5314:7104":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:52473:4787":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10128:6032":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:5414:9431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4449:9248":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11822:7316":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"20:2515:3087":{"crate_id":20,"path":["http","header","map","ValueIterMut"],"kind":"struct"},"6:6221:9626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:10960:123":{"crate_id":24,"path":["tokio","time","error","Error"],"kind":"struct"},"2:46704:8266":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:9059:6754":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"20:3182:1813":{"crate_id":20,"path":["http","uri","builder","Builder"],"kind":"struct"},"6:5978:9513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:23890:41203":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:12851:4802":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"35:439:3774":{"crate_id":35,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"29:6862:9643":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:49847:5056":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"24:9676:4627":{"crate_id":24,"path":["tokio","sync","notify","Waiter"],"kind":"struct"},"16:6072:5672":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:3918:9033":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"24:5790:6281":{"crate_id":24,"path":["tokio","runtime","task","Id"],"kind":"struct"},"20:2404:3082":{"crate_id":20,"path":["http","header","map","IterMut"],"kind":"struct"},"12:1180:5503":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:4641:7914":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11640:7270":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5379:9416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:11406:2199":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"30:7186:146":{"crate_id":30,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"5:7797:6660":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:10741:2640":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:10068:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10685:4385":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"30:10929:10129":{"crate_id":30,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:52115:4743":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:51016:4756":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:8691:158":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10468:5996":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"24:5284:6282":{"crate_id":24,"path":["tokio","runtime","task","raw","RawTask"],"kind":"struct"},"1:11405:4470":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"30:6709:71469":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:11475:3081":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"18:169:55107":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:46077:4397":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13446:7716":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"15:0:2653":{"crate_id":15,"path":["addr2line"],"kind":"module"},"24:68:71453":{"crate_id":24,"path":["tokio","macros","scoped_tls","ScopedKey"],"kind":"struct"},"29:4137:9151":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10957:2831":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"24:8162:3001":{"crate_id":24,"path":["tokio","sync","mutex","MutexGuard"],"kind":"struct"},"6:1676:8950":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:1619:3078":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:3108:124":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"27:896:6841":{"crate_id":27,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:8849:5927":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:50930:8334":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:15092:4595":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:12054:3002":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12456:7436":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:50075:2949":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:781:105":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"29:4298:9182":{"crate_id":29,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"30:10128:5323":{"crate_id":30,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"29:4411:9233":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:49905:4510":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"24:9009:3010":{"crate_id":24,"path":["tokio","sync","rwlock","write_guard","RwLockWriteGuard"],"kind":"struct"},"24:935:6626":{"crate_id":24,"path":["tokio","coop","with_budget","ResetGuard"],"kind":"struct"},"2:50707:8332":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:9637:83":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11653:7272":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"34:575:3063":{"crate_id":34,"path":["http_body","limited","Limited"],"kind":"struct"},"13:0:2645":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:8242:4727":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:1507:4494":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"24:13219:6218":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF64Le"],"kind":"struct"},"2:23927:5150":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"12:2315:70977":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"30:6248:2983":{"crate_id":30,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"9:0:2648":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:3483:4503":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"30:9802:71469":{"crate_id":30,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"2:52727:4775":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12155:7372":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:46437:4891":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"30:8142:173":{"crate_id":30,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"29:4509:9272":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"29:4093:9128":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7264:5705":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:11868:9811":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:51122:4785":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"41:0:6531":{"crate_id":41,"path":["lazy_static"],"kind":"module"},"5:1619:3083":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:9748:3197":{"crate_id":24,"path":["tokio","sync","batch_semaphore","TryAcquireError"],"kind":"enum"},"16:4995:7925":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:50888:4772":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"30:10199:71469":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"24:7221:6286":{"crate_id":24,"path":["tokio","runtime","Runtime"],"kind":"struct"},"24:2321:2912":{"crate_id":24,"path":["tokio","io","split","WriteHalf"],"kind":"struct"},"29:6844:9640":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6391:5741":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"33:22:2975":{"crate_id":33,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"24:14489:6179":{"crate_id":24,"path":["tokio","io","util","flush","Flush"],"kind":"struct"},"2:3623:5114":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"35:349:1837":{"crate_id":35,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"27:853:138":{"crate_id":27,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"29:1752:8989":{"crate_id":29,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:7403:115":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:8813:4628":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:5635:4373":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"24:1574:2827":{"crate_id":24,"path":["tokio","fs","read_to_string","read_to_string"],"kind":"function"},"6:1602:8895":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"29:5514:9457":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:0:471":{"crate_id":2,"path":["core"],"kind":"module"},"17:0:2655":{"crate_id":17,"path":["object"],"kind":"module"},"30:10248:71469":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"24:4165:2917":{"crate_id":24,"path":["tokio","io","util","async_seek_ext","AsyncSeekExt"],"kind":"trait"},"30:10035:6445":{"crate_id":30,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"6:6644:9638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10331:5962":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"9:469:8642":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"29:6231:9629":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"34:534:2025":{"crate_id":34,"path":["http_body","full","Full"],"kind":"struct"},"20:544:2479":{"crate_id":20,"path":["http","header","map","as_header_name","Sealed"],"kind":"trait"},"30:12360:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"16:6768:5898":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:10413:6785":{"crate_id":24,"path":["tokio","time","driver","wheel","level","Level"],"kind":"struct"},"2:4:958":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:6861:4342":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"35:346:188":{"crate_id":35,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"6:6870:9643":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:7405:6336":{"crate_id":24,"path":["tokio","sync","broadcast","RecvGuard"],"kind":"struct"},"2:49207:5038":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"29:5274:9360":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:45470:3931":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"24:6671:6305":{"crate_id":24,"path":["tokio","runtime","handle","TryCurrentError"],"kind":"struct"},"20:3211:2367":{"crate_id":20,"path":["http","uri","scheme","Protocol"],"kind":"enum"},"16:6949:5902":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11482:7235":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:15760:2695":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"24:14326:1784":{"crate_id":24,"path":["tokio","io","util","read_buf","ReadBuf"],"kind":"struct"},"5:6239:5275":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"30:6757:71469":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"22:526:1728":{"crate_id":22,"path":["bytes","bytes","Bytes"],"kind":"struct"},"17:10516:5998":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"24:9691:3784":{"crate_id":24,"path":["tokio","sync","notify","State"],"kind":"enum"},"30:12788:6836":{"crate_id":30,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"6:4215:9156":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:7761:5766":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:53096:8391":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:2816:5876":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"20:3326:3985":{"crate_id":20,"path":["http","byte_str","ByteStr"],"kind":"struct"},"6:6100:9554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13377:7700":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"25:49:58682":{"crate_id":25,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"30:11941:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"1:5766:4640":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"16:3195:5864":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"24:7192:6287":{"crate_id":24,"path":["tokio","runtime","thread_pool","Spawner"],"kind":"struct"},"1:6698:4337":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:48475:4502":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"30:8690:3895":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"17:12262:7387":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7971:123":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"12:866:3077":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"24:13052:6238":{"crate_id":24,"path":["tokio","io","util","read_to_end","ReadToEnd"],"kind":"struct"},"9:41:5421":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"30:6634:3861":{"crate_id":30,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"2:3718:3059":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"24:13758:6215":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF32"],"kind":"struct"},"20:2791:3164":{"crate_id":20,"path":["http","header","name","VARY"],"kind":"constant"},"22:531:6119":{"crate_id":22,"path":["bytes","bytes","Vtable"],"kind":"struct"},"29:530:8790":{"crate_id":29,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6126:5733":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:5580:5587":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:1540:8860":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:772:207":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13172:7650":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3539:6675":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:8119:69618":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:51350:4757":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:46060:5192":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"37:0:1603":{"crate_id":37,"path":["httparse"],"kind":"module"},"17:12221:7380":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:13978:7873":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12073:7360":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"22:0:1598":{"crate_id":22,"path":["bytes"],"kind":"module"},"2:9250:4799":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"35:473:3778":{"crate_id":35,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"17:13590:7756":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"29:6192:9614":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:4383:2852":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:1617:8907":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:7360:1837":{"crate_id":24,"path":["tokio","sync","broadcast","Sender"],"kind":"struct"},"17:10106:6030":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:14763:4446":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:3411:2839":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12480:7439":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:12460:6208":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU8"],"kind":"struct"},"17:11434:7220":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:7828:1911":{"crate_id":24,"path":["tokio","sync","mpsc","chan","Chan"],"kind":"struct"},"30:5934:6622":{"crate_id":30,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"24:5089:2818":{"crate_id":24,"path":["tokio","runtime","task","harness","poll_future","Guard"],"kind":"struct"},"17:10558:7142":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"30:11865:3875":{"crate_id":30,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"1:12049:3001":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:4480:2860":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"29:1614:8909":{"crate_id":29,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"24:6564:9913":{"crate_id":24,"path":["tokio","runtime","blocking","pool","Mandatory"],"kind":"enum"},"30:8913:71469":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"24:10938:3804":{"crate_id":24,"path":["tokio","time","driver","sleep","Inner"],"kind":"struct"},"1:10553:14231":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"18:820:6050":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"30:12710:71469":{"crate_id":30,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"17:13348:7693":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:3365:5609":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"35:447:1837":{"crate_id":35,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"1:14680:6625":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:0:2772":{"crate_id":21,"path":["fnv"],"kind":"module"},"16:5522:5584":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"30:7057:71469":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"29:6856:9642":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"30:7907:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:1647:4491":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"30:11649:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"2:2213:4674":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:1658:8938":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:4305:2854":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:9519:4619":{"crate_id":24,"path":["tokio","sync","barrier","BarrierState"],"kind":"struct"},"30:12847:6510":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"5:2294:5350":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11159:7208":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"29:3884:9013":{"crate_id":29,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5269:9354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"20:543:3076":{"crate_id":20,"path":["http","header","map","as_header_name","AsHeaderName"],"kind":"trait"},"24:9864:6899":{"crate_id":24,"path":["tokio","sync","watch","state","StateSnapshot"],"kind":"struct"},"29:4363:9213":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10529:7138":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5221:9331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:3714:7900":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"24:13317:6220":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI128Le"],"kind":"struct"},"29:6879:9648":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"30:9173:104":{"crate_id":30,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"2:48178:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:14388:114":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:14548:8432":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:7894:5725":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11830:4446":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:11890:8669":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"16:5561:5586":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:4173:1784":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"24:12740:2829":{"crate_id":24,"path":["tokio","io","util","write","Write"],"kind":"struct"},"20:2789:3161":{"crate_id":20,"path":["http","header","name","UPGRADE"],"kind":"constant"},"6:1596:8893":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"30:7380:6409":{"crate_id":30,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"2:22692:4739":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:46039:5198":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12385:7422":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:49636:4811":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:9186:5992":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:46029:5197":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"29:5406:9431":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13506:7732":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"30:11300:3870":{"crate_id":30,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"1:10816:4488":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:46014:4934":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10266:5949":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"24:8166:3193":{"crate_id":24,"path":["tokio","sync","mutex","OwnedMutexGuard"],"kind":"struct"},"6:4371:9213":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"30:10764:4890":{"crate_id":30,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"17:12699:7478":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:5407:5575":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"30:11325:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"6:5185:9318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11847:7320":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6614:9635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:1236:7027":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:1633:3084":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"29:524:8737":{"crate_id":29,"path":["libc","unix","timespec"],"kind":"struct"},"29:512:8785":{"crate_id":29,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:3345:4700":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:11110:5007":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"30:8771:71469":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"5:1204:5333":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"20:2783:3156":{"crate_id":20,"path":["http","header","name","SET_COOKIE"],"kind":"constant"},"6:5528:9458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"30:7846:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12795:7496":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11147:7207":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:543:8793":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"30:12488:3081":{"crate_id":30,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"24:5977:6326":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","BasicScheduler"],"kind":"struct"},"2:23942:5105":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"31:39:2479":{"crate_id":31,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"20:2739:3112":{"crate_id":20,"path":["http","header","name","CONTENT_DISPOSITION"],"kind":"constant"},"1:15740:2677":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"20:2775:3148":{"crate_id":20,"path":["http","header","name","REFRESH"],"kind":"constant"},"20:3088:1813":{"crate_id":20,"path":["http","request","Builder"],"kind":"struct"},"17:13180:7651":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:694:6063":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"14:47:8175":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"27:1033:6053":{"crate_id":27,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6366:5522":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:50911:4776":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:4506:7911":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11082:5935":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11947:7332":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"24:4773:6875":{"crate_id":24,"path":["tokio","park","thread","CachedParkThread"],"kind":"struct"},"1:4557:2828":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:3972:3183":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:10929:2024":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:7982:2024":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:4511:2861":{"crate_id":24,"path":["tokio","io","util","sink","Sink"],"kind":"struct"},"2:6399:3857":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:11217:5012":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:6124:9565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:783:6691":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"30:10805:71469":{"crate_id":30,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"5:4627:6653":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"7:85:46793":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"9:1056:5431":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11738:7288":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:1446:3085":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6014:5732":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:747:3081":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:6605:9536":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:50039:176":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"31:96:1891":{"crate_id":31,"path":["futures_core","stream","Stream"],"kind":"trait"},"2:49855:5061":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:0:2646":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"30:13115:6417":{"crate_id":30,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:12297:5172":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:46416:4889":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:3866:2640":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"29:6077:9549":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:6746:2818":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:9473:6687":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:1488:3089":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10887:7188":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:9245:5939":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"29:6020:9541":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:13851:2951":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13842:7846":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"20:2797:3170":{"crate_id":20,"path":["http","header","name","X_FRAME_OPTIONS"],"kind":"constant"},"1:3953:191":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"20:2723:3096":{"crate_id":20,"path":["http","header","name","ACCEPT_LANGUAGE"],"kind":"constant"},"17:13062:7610":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:1446:3083":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"31:0:1600":{"crate_id":31,"path":["futures_core"],"kind":"module"},"20:2738:3111":{"crate_id":20,"path":["http","header","name","CONNECTION"],"kind":"constant"},"9:686:5369":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"29:6804:9639":{"crate_id":29,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"27:915:6846":{"crate_id":27,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:2171:4420":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:10668:4392":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:820:6691":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"24:4170:2918":{"crate_id":24,"path":["tokio","io","util","async_write_ext","AsyncWriteExt"],"kind":"trait"},"18:837:4801":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"29:4119:9140":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9440:7018":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:2773:5883":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:7260:6634":{"crate_id":24,"path":["tokio","coop","RestoreOnPending"],"kind":"struct"},"2:49039:5023":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4511:9270":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"29:6060:9544":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:9961:7118":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:1501:4493":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11015:4358":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"6:6085:9549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:2759:3132":{"crate_id":20,"path":["http","header","name","IF_NONE_MATCH"],"kind":"constant"},"2:51578:8344":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"30:10112:71469":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"30:10311:4892":{"crate_id":30,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"5:3325:5290":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:49243:5010":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:46457:4893":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:47214:1923":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:4040:9099":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:4899:4356":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:6768:4886":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:4230:7904":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6852:9640":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"46:0:6534":{"crate_id":46,"path":["try_lock"],"kind":"module"},"30:12907:3081":{"crate_id":30,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"16:7042:5906":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:6214:9623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:2754:5610":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"30:8005:3872":{"crate_id":30,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"20:2475:4054":{"crate_id":20,"path":["hyper","header","Entry","Vacant"],"kind":"variant"},"17:13453:7717":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"24:7634:1837":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","Sender"],"kind":"struct"},"29:1564:8876":{"crate_id":29,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4101:9128":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:13898:6696":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7333:5708":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"35:419:5300":{"crate_id":35,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"1:11845:4447":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:49048:5024":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:11235:4597":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:2829:398":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"1:9643:6689":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:10115:115":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"30:12932:3905":{"crate_id":30,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"24:12991:6239":{"crate_id":24,"path":["tokio","io","util","read_to_string","ReadToString"],"kind":"struct"},"24:6587:188":{"crate_id":24,"path":["tokio","runtime","blocking","shutdown","Receiver"],"kind":"struct"},"29:5261:9354":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:22364:3480":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:13714:4443":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:14:2129":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:51546:8343":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:6864:9642":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"30:12589:71469":{"crate_id":30,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"35:461:188":{"crate_id":35,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"6:5292:9367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:5817:5226":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:5838:4643":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"30:11394:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:6607:9538":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:3082:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:49859:5060":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11767:7297":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"20:1355:1575":{"crate_id":20,"path":["http","request","Request"],"kind":"struct"},"1:5649:4375":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"30:12408:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"30:11478:3871":{"crate_id":30,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"24:8612:65":{"crate_id":24,"path":["tokio","sync","batch_semaphore","Acquire"],"kind":"struct"},"29:5378:9417":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12756:7486":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:15745:2680":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:754:70994":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"29:4185:9154":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:3085:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"24:9922:10133":{"crate_id":24,"path":["tokio","task","yield_now","yield_now","YieldNow"],"kind":"struct"},"6:4358:9208":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"27:826:6057":{"crate_id":27,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:15742:2679":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"30:12961:71469":{"crate_id":30,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"20:2737:3110":{"crate_id":20,"path":["http","header","name","CACHE_CONTROL"],"kind":"constant"},"16:7477:5711":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10377:5951":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:15757:2692":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"14:56:7235":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4439:9242":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:375:5289":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"29:4515:9275":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:11733:5027":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:15750:2685":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"20:2781:3154":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_VERSION"],"kind":"constant"},"5:8286:5120":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:8348:2774":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:8088:3080":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:52806:4759":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"29:6092:9554":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:1630:8914":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11588:7262":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1827:6649":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:3306:4426":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"0:942:2592":{"crate_id":0,"path":["hyper","upgrade","Parts"],"kind":"struct"},"2:47377:164":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"24:9656:3006":{"crate_id":24,"path":["tokio","sync","mutex","TryLockError"],"kind":"struct"},"17:9896:70980":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:15706:13227":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"20:3346:8640":{"crate_id":20,"path":["http","extensions","IdHasher"],"kind":"struct"},"6:5359:9408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"30:8103:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:2801:101":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:4313:6867":{"crate_id":24,"path":["tokio","io","util","mem","Pipe"],"kind":"struct"},"17:10801:7186":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"0:628:2474":{"crate_id":0,"path":["hyper","service","make_service_fn"],"kind":"function"},"2:49361:5045":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:8055:2992":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"29:1657:8942":{"crate_id":29,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12712:7479":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:3429:5613":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5766:5598":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"20:2588:6079":{"crate_id":20,"path":["http","header","map","Links"],"kind":"struct"},"29:1721:4608":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:15736:2674":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"29:4264:9166":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:55796:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"0:202:1581":{"crate_id":0,"path":["hyper","body"],"kind":"module"},"30:11027:6432":{"crate_id":30,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:46388:3861":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:10111:106":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:14199:6227":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI8"],"kind":"struct"},"17:12494:7441":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:578:8819":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"13:120:47134":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"29:4156:9152":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5384:5574":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"12:1855:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"30:7699:3873":{"crate_id":30,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:52869:4779":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"30:10904:71469":{"crate_id":30,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"6:6155:2276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"13:232:8641":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:46298:4879":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5428:9436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13306:7680":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"24:14101:6232":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU32"],"kind":"struct"},"2:48491:4839":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"24:12819:71469":{"crate_id":24,"path":["tokio","io","util","take","_","__Origin"],"kind":"struct"},"12:949:4495":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2776:94":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:53057:4747":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5436:9438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"30:9658:6441":{"crate_id":30,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"24:2097:6860":{"crate_id":24,"path":["tokio","io","stdio_common","SplitByUtf8BoundaryIfWindows"],"kind":"struct"},"2:46289:4878":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:7514:5709":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:1591:3082":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"24:14700:71469":{"crate_id":24,"path":["tokio","io","util","buf_reader","_","__Origin"],"kind":"struct"},"2:13665:3056":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"30:12046:6498":{"crate_id":30,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"1:900:4527":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"29:4065:9112":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12408:7431":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"30:12427:6505":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"24:4705:2884":{"crate_id":24,"path":["tokio","loom","std","unsafe_cell","UnsafeCell"],"kind":"struct"},"17:12307:7395":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:5941:175":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6208:5736":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:0:1607":{"crate_id":24,"path":["tokio"],"kind":"module"},"17:11714:7284":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"20:2721:3094":{"crate_id":20,"path":["http","header","name","ACCEPT_CHARSET"],"kind":"constant"},"5:7753:219":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"30:9420:3857":{"crate_id":30,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"35:528:3783":{"crate_id":35,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"3:0:413":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:2104:2852":{"crate_id":24,"path":["tokio","io","stderr","Stderr"],"kind":"struct"},"30:9159:71469":{"crate_id":30,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"20:490:2479":{"crate_id":20,"path":["http","header","map","into_header_name","Sealed"],"kind":"trait"},"24:5561:3993":{"crate_id":24,"path":["tokio","runtime","task","Task"],"kind":"struct"},"0:485:1102":{"crate_id":0,"path":["hyper","rt"],"kind":"module"},"5:1549:91":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"30:7968:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:11231:5013":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:23383:4334":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:1000:3081":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:15746:2681":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"30:9210:4880":{"crate_id":30,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"17:9034:48814":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:14866:4456":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10149:7116":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:610:6058":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"24:9525:2998":{"crate_id":24,"path":["tokio","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6807:5751":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12725:7480":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:5643:4374":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:50098:154":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"24:12501:6184":{"crate_id":24,"path":["tokio","io","util","write_all_buf","WriteAllBuf"],"kind":"struct"},"2:24948:4938":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"30:11145:71469":{"crate_id":30,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"2:22824:2479":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8861:3012":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:10576:3804":{"crate_id":24,"path":["tokio","time","driver","Inner"],"kind":"struct"},"1:2159:3080":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"20:2774:3147":{"crate_id":20,"path":["http","header","name","REFERRER_POLICY"],"kind":"constant"},"6:6910:9654":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"24:6868:6633":{"crate_id":24,"path":["tokio","runtime","thread_pool","queue","Local"],"kind":"struct"},"17:12275:7388":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:47528:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:24272:5085":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:10469:4541":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10926:7194":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12982:7549":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"24:9577:3778":{"crate_id":24,"path":["tokio","sync","mpsc","error","SendError"],"kind":"struct"},"1:15753:2688":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"12:761:3082":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:49879:5058":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:15749:2684":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:7378:5694":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"20:2561:6078":{"crate_id":20,"path":["http","header","map","HashValue"],"kind":"struct"},"35:433:3773":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"17:294:7021":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:712:3480":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"9:963:5436":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"24:12625:6182":{"crate_id":24,"path":["tokio","io","util","write_all","WriteAll"],"kind":"struct"},"1:14565:4448":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"20:3186:3988":{"crate_id":20,"path":["http","uri","path","PathAndQuery"],"kind":"struct"},"30:13160:71719":{"crate_id":30,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"29:4309:9187":{"crate_id":29,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"30:11458:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"2:4940:4982":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"30:12975:3904":{"crate_id":30,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"12:1159:5502":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"20:2788:3163":{"crate_id":20,"path":["http","header","name","USER_AGENT"],"kind":"constant"},"16:7174:5756":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"37:251:3940":{"crate_id":37,"path":["httparse","InvalidChunkSize"],"kind":"struct"},"2:46425:4890":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:3251:4563":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:47300:174":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:11203:5011":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2582:8420":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"16:7158:5755":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"20:2758:3131":{"crate_id":20,"path":["http","header","name","IF_MODIFIED_SINCE"],"kind":"constant"},"29:1532:8860":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"24:10885:3804":{"crate_id":24,"path":["tokio","time","clock","Inner"],"kind":"struct"},"17:9574:5936":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:15754:2689":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:23955:5104":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:5734:6631":{"crate_id":24,"path":["tokio","runtime","task","inject","Inject"],"kind":"struct"},"24:11684:6194":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI16Le"],"kind":"struct"},"17:10407:5945":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"27:1025:6052":{"crate_id":27,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:566:86":{"crate_id":24,"path":["tokio","loom","std","atomic_u32","AtomicU32"],"kind":"struct"},"29:1700:8968":{"crate_id":29,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:53076:8389":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:7571:5686":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4410:9227":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:11994:4518":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"30:8956:3902":{"crate_id":30,"path":["futures_util","future","either","Either"],"kind":"enum"},"37:225:123":{"crate_id":37,"path":["httparse","Error"],"kind":"enum"},"20:2802:6102":{"crate_id":20,"path":["http","header","name","StandardHeader"],"kind":"enum"},"20:2975:2339":{"crate_id":20,"path":["http","header","value","HeaderValue"],"kind":"struct"},"30:6346:72369":{"crate_id":30,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"30:8200:71469":{"crate_id":30,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"6:1533:8857":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9849:70985":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"24:13856:6225":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI64"],"kind":"struct"},"16:5815:5600":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3440:2844":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4300:9179":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"27:1042:6054":{"crate_id":27,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"31:127:2968":{"crate_id":31,"path":["futures_core","stream","TryStream"],"kind":"trait"},"1:15755:2690":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"30:9112:71469":{"crate_id":30,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"24:11337:10135":{"crate_id":24,"path":["tokio","task","task_local","TaskLocalFuture"],"kind":"struct"},"17:12917:7498":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12343:7401":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:4499:6871":{"crate_id":24,"path":["tokio","io","util","vec_with_initialized","VecWithInitialized"],"kind":"struct"},"24:7159:6329":{"crate_id":24,"path":["tokio","runtime","thread_pool","ThreadPool"],"kind":"struct"},"24:13954:6221":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI16"],"kind":"struct"},"5:1581:3081":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:3554:5113":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"29:5399:9430":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:22629:2479":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"22:786:1729":{"crate_id":22,"path":["bytes","bytes_mut","BytesMut"],"kind":"struct"},"16:6518:5744":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:2362:581":{"crate_id":1,"path":["std","env"],"kind":"module"},"30:11739:6493":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"1:14937:4406":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:48978:5019":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6644:5748":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"30:11106:6454":{"crate_id":30,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"30:12235:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"2:3398:112":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:45976:8300":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10938:7195":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"20:2736:3109":{"crate_id":20,"path":["http","header","name","AUTHORIZATION"],"kind":"constant"},"2:52266:4767":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:49422:5048":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:47780:89":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"30:7344:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"29:4104:9133":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4227:9157":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:32039:3956":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:607:7025":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"24:12027:6191":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI128"],"kind":"struct"},"30:9054:71469":{"crate_id":30,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"30:10353:71469":{"crate_id":30,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"12:463:70976":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:3563:2840":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"24:441:4356":{"crate_id":24,"path":["tokio","net","addr","ToSocketAddrs"],"kind":"trait"},"6:4325:9190":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"29:4317:9190":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"29:4441:9248":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11264:9523":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"24:2165:2818":{"crate_id":24,"path":["tokio","io","split","Guard"],"kind":"struct"},"1:11069:4365":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"29:5183:9321":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"27:153:55106":{"crate_id":27,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13154:7645":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"30:12874:3891":{"crate_id":30,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"16:6252:5738":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"20:2696:4488":{"crate_id":20,"path":["http","header","name","Custom"],"kind":"struct"},"2:3321:4688":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11932:7328":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10353:5953":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:2777:3150":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_ACCEPT"],"kind":"constant"},"2:45738:1833":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"34:37:2024":{"crate_id":34,"path":["http_body","empty","Empty"],"kind":"struct"},"30:12111:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"22:1261:2835":{"crate_id":22,"path":["bytes","buf","take","Take"],"kind":"struct"},"1:10996:1728":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:3732:156":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"29:6147:2276":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:4448:7909":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:10322:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:46237:6667":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:49307:5042":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"28:0:2886":{"crate_id":28,"path":["num_cpus"],"kind":"module"},"32:0:2954":{"crate_id":32,"path":["pin_utils"],"kind":"module"},"16:6219:5737":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:11965:3998":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"30:12172:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"20:2746:3119":{"crate_id":20,"path":["http","header","name","CONTENT_SECURITY_POLICY_REPORT_ONLY"],"kind":"constant"},"24:10079:4522":{"crate_id":24,"path":["tokio","task","task_local","LocalKey"],"kind":"struct"},"5:8317:5297":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"12:112:70975":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"24:4756:6874":{"crate_id":24,"path":["tokio","park","thread","UnparkThread"],"kind":"struct"},"2:23757:8665":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:13611:6233":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU32Le"],"kind":"struct"},"2:46083:5193":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"24:12272:6206":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU64"],"kind":"struct"},"30:3439:72247":{"crate_id":30,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"33:203:2972":{"crate_id":33,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"1:11872:64002":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"30:11718:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"20:2745:3118":{"crate_id":20,"path":["http","header","name","CONTENT_SECURITY_POLICY"],"kind":"constant"},"16:5330:7105":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"30:12925:3080":{"crate_id":30,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"0:297:1582":{"crate_id":0,"path":["hyper","body","Body"],"kind":"struct"},"5:4583:6652":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"6:5255:9353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"22:1255:5619":{"crate_id":22,"path":["bytes","buf","reader","Reader"],"kind":"struct"},"0:775:938":{"crate_id":0,"path":["hyper","upgrade","on"],"kind":"function"},"19:0:973":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"12:181:5510":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:1918:6858":{"crate_id":24,"path":["tokio","io","blocking","Blocking"],"kind":"struct"},"20:2720:3093":{"crate_id":20,"path":["http","header","name","ACCEPT"],"kind":"constant"},"36:0:1608":{"crate_id":36,"path":["tower_service"],"kind":"module"},"17:13240:7665":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"30:11804:6494":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"20:2765:3138":{"crate_id":20,"path":["http","header","name","MAX_FORWARDS"],"kind":"constant"},"24:10879:6906":{"crate_id":24,"path":["tokio","time","clock","Clock"],"kind":"struct"},"30:9895:3861":{"crate_id":30,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"2:31864:5145":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"24:6129:6327":{"crate_id":24,"path":["tokio","runtime","blocking","pool","BlockingPool"],"kind":"struct"},"16:7279:5907":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:8364:5221":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:4270:4582":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:4008:7030":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:1908:43256":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"20:2537:2640":{"crate_id":20,"path":["http","header","map","Cursor"],"kind":"enum"},"29:5339:9403":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"35:547:3789":{"crate_id":35,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"17:10448:5982":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:49883:117":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:3179:196":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"29:4356:9211":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:4401:9224":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:46359:3858":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:7615:5276":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:3428:127":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"12:1200:5504":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"24:7815:6636":{"crate_id":24,"path":["tokio","sync","mpsc","chan","Rx"],"kind":"struct"},"16:7024:5905":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:69:5270":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4347:9200":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6731:5895":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7843:5767":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:10200:7131":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:6028:9541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"24:14632:2919":{"crate_id":24,"path":["tokio","io","util","buf_stream","BufStream"],"kind":"struct"},"20:0:1572":{"crate_id":20,"path":["http"],"kind":"module"},"16:6152:5689":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:14405:64004":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"9:603:8657":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6591:5747":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"30:9071:6439":{"crate_id":30,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"30:9572:71469":{"crate_id":30,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"18:644:6060":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:3218:5865":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12521:7445":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"30:11840:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"30:6598:3858":{"crate_id":30,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"1:11221:4647":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"24:11371:71469":{"crate_id":24,"path":["tokio","task","task_local","_","__Origin"],"kind":"struct"},"2:12902:4805":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"29:4323:9191":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10950:7196":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"20:2771:3144":{"crate_id":20,"path":["http","header","name","PUBLIC_KEY_PINS_REPORT_ONLY"],"kind":"constant"},"1:11045:4364":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"16:2912:5859":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:1430:3078":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:45546:182":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:667:6062":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4395:9223":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:49413:5047":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"29:536:8793":{"crate_id":29,"path":["libc","unix","rusage"],"kind":"struct"},"29:3860:8996":{"crate_id":29,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:3978:9069":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:49004:5020":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"12:925:3089":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"24:4230:6256":{"crate_id":24,"path":["tokio","io","util","buf_reader","SeekState"],"kind":"enum"},"6:4331:9191":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"29:6213:9626":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:531:8737":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:10329:6622":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:147:3056":{"crate_id":24,"path":["tokio","future","poll_fn","PollFn"],"kind":"struct"},"2:51373:4760":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:7182:8423":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:11040:6262":{"crate_id":24,"path":["tokio","time","interval","Interval"],"kind":"struct"},"30:12858:3081":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"17:10635:7150":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:50962:4764":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:5927:5604":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"23:37:6162":{"crate_id":23,"path":["itoa","Integer"],"kind":"trait"},"2:46478:4894":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"30:825:3056":{"crate_id":30,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:2115:8261":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46468:2835":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:24306:4545":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:1482:4419":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"24:9774:3200":{"crate_id":24,"path":["tokio","sync","semaphore","OwnedSemaphorePermit"],"kind":"struct"},"30:10716:6450":{"crate_id":30,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"17:10502:7137":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"27:836:6061":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:49017:5021":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:13415:6224":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI32Le"],"kind":"struct"},"16:3264:5867":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:7856:5768":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:14473:71469":{"crate_id":24,"path":["tokio","io","util","lines","_","__Origin"],"kind":"struct"},"17:11337:5990":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:2140:1029":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:21:652":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:47959:3637":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:5705:4379":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2831:169":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:4576:2818":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"29:1900:43256":{"crate_id":29,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"30:9776:3858":{"crate_id":30,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"25:55:6623":{"crate_id":25,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"30:8614:3891":{"crate_id":30,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"16:6101:5685":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:6812:9639":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:729:70995":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"29:5961:9507":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:48931:5014":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4052:9102":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:10367:4425":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"24:10951:6917":{"crate_id":24,"path":["tokio","time","driver","ClockTime"],"kind":"struct"},"12:1235:5505":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8276:3784":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:48299:3633":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:32203:68416":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:3113:1814":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4241:9158":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"30:9294:4882":{"crate_id":30,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"30:9528:6440":{"crate_id":30,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"6:6923:9655":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:2643:2338":{"crate_id":20,"path":["http","header","name","HeaderName"],"kind":"struct"},"29:1594:8895":{"crate_id":29,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11002:2836":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"30:12631:71469":{"crate_id":30,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"24:13158:6246":{"crate_id":24,"path":["tokio","io","util","read_line","ReadLine"],"kind":"struct"},"16:7185:5757":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"29:1546:8865":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11945:3778":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:9790:4990":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12659:7473":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:3892:9013":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:2740:3113":{"crate_id":20,"path":["http","header","name","CONTENT_ENCODING"],"kind":"constant"},"30:11231:3868":{"crate_id":30,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"27:942:6850":{"crate_id":27,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:3862:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:53116:8393":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:5012:3649":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:7804:5699":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:9516:64275":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"24:7977:6636":{"crate_id":24,"path":["tokio","sync","mpsc","list","Rx"],"kind":"struct"},"20:2792:3165":{"crate_id":20,"path":["http","header","name","VIA"],"kind":"constant"},"24:11880:6203":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU16Le"],"kind":"struct"},"6:4341:9197":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:3878:5301":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11993:7344":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11809:7312":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"34:620:3062":{"crate_id":34,"path":["http_body","limited","LengthLimitError"],"kind":"struct"},"1:11286:4344":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:49714:4814":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"20:2423:3083":{"crate_id":20,"path":["http","header","map","Keys"],"kind":"struct"},"12:930:4493":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:8238:4725":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:7733:4916":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:46267:4877":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"29:3897:9023":{"crate_id":29,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:187:2909":{"crate_id":24,"path":["tokio","io","async_buf_read","AsyncBufRead"],"kind":"trait"},"24:5581:6629":{"crate_id":24,"path":["tokio","runtime","task","UnownedTask"],"kind":"struct"},"17:11555:7255":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"22:140:1727":{"crate_id":22,"path":["bytes","buf","buf_mut","BufMut"],"kind":"trait"},"24:10891:6402":{"crate_id":24,"path":["tokio","time","driver","entry","TimerEntry"],"kind":"struct"},"16:4386:7907":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:49058:5025":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"24:9539:3998":{"crate_id":24,"path":["tokio","sync","broadcast","error","RecvError"],"kind":"enum"},"30:7491:3867":{"crate_id":30,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"30:9133:5226":{"crate_id":30,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"24:6581:1837":{"crate_id":24,"path":["tokio","runtime","blocking","shutdown","Sender"],"kind":"struct"},"17:13205:7661":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"24:10908:6912":{"crate_id":24,"path":["tokio","time","driver","entry","CachePadded"],"kind":"struct"},"20:2396:3081":{"crate_id":20,"path":["http","header","map","Iter"],"kind":"struct"},"1:2565:123":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"14:216:47167":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"20:2750:3123":{"crate_id":20,"path":["http","header","name","DATE"],"kind":"constant"},"3:300:191":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:152:55106":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6464:5702":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"0:771:2585":{"crate_id":0,"path":["hyper","upgrade","Upgraded"],"kind":"struct"},"2:9128:3294":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:3800:7902":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:8253:98":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"20:631:3090":{"crate_id":20,"path":["http","header","name","InvalidHeaderName"],"kind":"struct"},"16:0:2654":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:10988:7199":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:9222:4332":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:6620:5889":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:49343:5044":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:1760:8989":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:13554:146":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4281:9171":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"29:4112:9138":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:3604:7036":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:32004:5112":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:9600:70987":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:2733:5611":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6032:5617":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"30:7521:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12287:7389":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"35:519:3782":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"24:12419:6199":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI8"],"kind":"struct"},"30:6922:71469":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:5066:3651":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"29:4254:9159":{"crate_id":29,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6744:5896":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6238:5692":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"30:9923:71469":{"crate_id":30,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"30:10611:4842":{"crate_id":30,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"29:1555:8870":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:11189:5010":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"20:1359:2592":{"crate_id":20,"path":["http","request","Parts"],"kind":"struct"},"38:0:1604":{"crate_id":38,"path":["httpdate"],"kind":"module"},"30:10087:6448":{"crate_id":30,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"1:7863:3793":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"29:6628:9636":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"30:1080:3889":{"crate_id":30,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"20:2748:3121":{"crate_id":20,"path":["http","header","name","COOKIE"],"kind":"constant"},"6:0:776":{"crate_id":6,"path":["libc"],"kind":"module"},"29:4333:9197":{"crate_id":29,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:13213:4609":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"24:1026:156":{"crate_id":24,"path":["tokio","util","linked_list","LinkedList"],"kind":"struct"},"17:13609:7761":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"9:27:5420":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:10304:5948":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7360:180":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6021:5856":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:10998:5004":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"27:870:6063":{"crate_id":27,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9133:48817":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:4614:2830":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:3261:4568":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:5987:9514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:45998:4932":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:15130:4596":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:49261:5011":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"34:606:71469":{"crate_id":34,"path":["http_body","limited","_","__Origin"],"kind":"struct"},"24:4292:6866":{"crate_id":24,"path":["tokio","io","util","copy_buf","CopyBuf"],"kind":"struct"},"17:12118:7367":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:2166:4419":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:12548:4553":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"20:2755:3128":{"crate_id":20,"path":["http","header","name","FROM"],"kind":"constant"},"20:2779:3152":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_KEY"],"kind":"constant"},"24:2114:2856":{"crate_id":24,"path":["tokio","io","stdout","Stdout"],"kind":"struct"},"17:13318:7683":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:9758:3196":{"crate_id":24,"path":["tokio","sync","batch_semaphore","AcquireError"],"kind":"struct"},"6:5210:9323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11039:4359":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:12059:3009":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:8419:4419":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"24:13268:6216":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF32Le"],"kind":"struct"},"12:1688:5517":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"30:8354:3885":{"crate_id":30,"path":["futures_util","future","join","Join"],"kind":"struct"},"2:2692:560":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11678:7274":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4494:9262":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4293:9178":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13810:7831":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"24:4096:2916":{"crate_id":24,"path":["tokio","io","util","async_buf_read_ext","AsyncBufReadExt"],"kind":"trait"},"24:11134:6394":{"crate_id":24,"path":["tokio","util","vec_deque_cell","VecDequeCell"],"kind":"struct"},"9:900:9725":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:45710:4794":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"24:9622:3998":{"crate_id":24,"path":["tokio","sync","mpsc","error","RecvError"],"kind":"struct"},"24:8399:1890":{"crate_id":24,"path":["tokio","sync","oneshot"],"kind":"module"},"24:1931:3784":{"crate_id":24,"path":["tokio","io","blocking","State"],"kind":"enum"},"2:13841:1795":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6999:5752":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13772:7822":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"24:10898:6909":{"crate_id":24,"path":["tokio","time","driver","entry","TimerHandle"],"kind":"struct"},"1:11465:4472":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"30:9333:71469":{"crate_id":30,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"22:42:1726":{"crate_id":22,"path":["bytes","buf","buf_impl","Buf"],"kind":"trait"},"16:4790:7919":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:2188:4423":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:2945:5882":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:12034:3000":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:5520:2996":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"20:2555:6077":{"crate_id":20,"path":["http","header","map","Pos"],"kind":"struct"},"2:37337:3480":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"30:10293:71469":{"crate_id":30,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"24:10203:4523":{"crate_id":24,"path":["tokio","task","task_local","AccessError"],"kind":"struct"},"2:53272:8401":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"20:2768:3141":{"crate_id":20,"path":["http","header","name","PROXY_AUTHENTICATE"],"kind":"constant"},"1:11009:2837":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:13709:6217":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF64"],"kind":"struct"},"2:23482:4735":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:10125:175":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"37:28:1728":{"crate_id":37,"path":["httparse","iter","Bytes"],"kind":"struct"},"29:6043:9542":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"24:11586:6198":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI64Le"],"kind":"struct"},"29:1514:8852":{"crate_id":29,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9943:70988":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"29:518:8788":{"crate_id":29,"path":["libc","unix","timeval"],"kind":"struct"},"17:11604:7263":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"30:5539:6821":{"crate_id":30,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"17:10224:7133":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"24:544:85":{"crate_id":24,"path":["tokio","loom","std","atomic_u16","AtomicU16"],"kind":"struct"},"6:4377:9216":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9769:70986":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:1637:3089":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"27:708:7014":{"crate_id":27,"path":["memchr","cow","Imp"],"kind":"enum"},"12:396:5508":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5563:9483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"30:10745:71469":{"crate_id":30,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"2:10717:2479":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"20:2756:3129":{"crate_id":20,"path":["http","header","name","HOST"],"kind":"constant"},"30:11682:6492":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"29:5979:9514":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4083:9119":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:11331:4460":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"30:12136:6500":{"crate_id":30,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"12:0:2651":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"29:3943:9057":{"crate_id":29,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"29:4451:9249":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"0:242:1863":{"crate_id":0,"path":["hyper","body","aggregate"],"kind":"function"},"5:8170:3080":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"29:5420:9436":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:22639:4335":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3024:9731":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"27:812:6839":{"crate_id":27,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:8749:3929":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"29:6915:9655":{"crate_id":29,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9729:70984":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"9:749:5373":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"30:10649:71469":{"crate_id":30,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"24:11233:6892":{"crate_id":24,"path":["tokio","time","timeout","Timeout"],"kind":"struct"},"1:10579:2834":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"34:246:3065":{"crate_id":34,"path":["http_body","combinators","box_body","BoxBody"],"kind":"struct"},"2:2320:3055":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:1723:8977":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"29:3854:8995":{"crate_id":29,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:3022:2030":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:48940:5015":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"30:8456:3887":{"crate_id":30,"path":["futures_util","future","join","Join4"],"kind":"struct"},"20:2730:3103":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_MAX_AGE"],"kind":"constant"},"30:6867:71469":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"30:12027:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"24:9787:3206":{"crate_id":24,"path":["tokio","sync","once_cell","SetError"],"kind":"enum"},"20:2657:6098":{"crate_id":20,"path":["http","header","name","HdrName"],"kind":"struct"},"34:703:3067":{"crate_id":34,"path":["http_body","combinators","map_err","MapErr"],"kind":"struct"},"2:46139:4936":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13564:7750":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"30:7724:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"29:662:42284":{"crate_id":29,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:11700:5026":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:10458:7066":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"31:194:1832":{"crate_id":31,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"20:2773:3146":{"crate_id":20,"path":["http","header","name","REFERER"],"kind":"constant"},"17:13258:7673":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11539:7251":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"30:12379:6504":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"9:776:5418":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:5421:5576":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:4922:7923":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"29:4417:9234":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:50031:3052":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:46345:8312":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:421:1908":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:2184:6651":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:3207:2880":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"27:1061:6055":{"crate_id":27,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:49157:5007":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"24:13464:6222":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI16Le"],"kind":"struct"},"29:4431:9242":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4145:9151":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:3145:5872":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:7683:4449":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:5002:4987":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:3197:2534":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:47181:162":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:49189:5037":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:6496:6306":{"crate_id":24,"path":["tokio","runtime","handle","TryCurrentErrorKind"],"kind":"enum"},"2:24374:4546":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:51498:8342":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7573:4443":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:2633:6083":{"crate_id":20,"path":["http","header","map","Danger"],"kind":"enum"},"24:13660:6231":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU16Le"],"kind":"struct"},"1:3276:1714":{"crate_id":1,"path":["std","io"],"kind":"module"},"35:552:3805":{"crate_id":35,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"17:9005:48813":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:9634:6351":{"crate_id":24,"path":["tokio","sync","mpsc","error","SendTimeoutError"],"kind":"enum"},"16:3506:5869":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:15751:2686":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:48530:8325":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10844:5962":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"24:12678:6210":{"crate_id":24,"path":["tokio","io","util","write_vectored","WriteVectored"],"kind":"struct"},"37:350:2199":{"crate_id":37,"path":["httparse","Header"],"kind":"struct"},"30:9948:4884":{"crate_id":30,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"8:0:2647":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:2867:163":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:47223:3081":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4512:2818":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"20:2763:3136":{"crate_id":20,"path":["http","header","name","LINK"],"kind":"constant"},"30:6959:3864":{"crate_id":30,"path":["futures_util","future","future","Then"],"kind":"struct"},"16:5488:5582":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"29:5363:9415":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:3359:5291":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:45631:183":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"31:110:3074":{"crate_id":31,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"24:8169:3194":{"crate_id":24,"path":["tokio","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:15240:5533":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"29:5392:9428":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:50857:4784":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"30:13088:6420":{"crate_id":30,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:10930:3082":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13942:7869":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:9713:3998":{"crate_id":24,"path":["tokio","sync","oneshot","error","RecvError"],"kind":"struct"},"6:3868:8996":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"29:4470:9257":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:4226:6649":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4539:2826":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8362:188":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4066:9109":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:14320:4388":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"24:6643:6328":{"crate_id":24,"path":["tokio","runtime","driver","Driver"],"kind":"struct"},"27:1072:6056":{"crate_id":27,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:10726:199":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:9971:70979":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"29:6850:9641":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:2776:3149":{"crate_id":20,"path":["http","header","name","RETRY_AFTER"],"kind":"constant"},"6:6068:9544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6200:9614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"12:2331:2806":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2431:4859":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10571:7145":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:14388:2826":{"crate_id":24,"path":["tokio","io","util","read","Read"],"kind":"struct"},"20:2596:6080":{"crate_id":20,"path":["http","header","map","RawLinks"],"kind":"struct"},"2:3268:4712":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:3185:2878":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:8039:68443":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:5472:5581":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:8271:5295":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:636:6839":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:774:6839":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:3320:5921":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:9738:6691":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:8951:3006":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"29:4175:9153":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"29:4285:9178":{"crate_id":29,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10095:6029":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:50801:4763":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:23852:41202":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:48949:5016":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:5433:5577":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"30:13042:6838":{"crate_id":30,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"9:927:46890":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:547:5595":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10236:5926":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:983:5324":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"24:4803:6628":{"crate_id":24,"path":["tokio","runtime","enter","Enter"],"kind":"struct"},"20:2753:3126":{"crate_id":20,"path":["http","header","name","EXPIRES"],"kind":"constant"},"16:7406:5693":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:4671:7915":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"20:2762:3135":{"crate_id":20,"path":["http","header","name","LAST_MODIFIED"],"kind":"constant"},"1:11075:4483":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"34:0:1602":{"crate_id":34,"path":["http_body"],"kind":"module"},"30:12557:173":{"crate_id":30,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"5:1461:3084":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"30:9495:71469":{"crate_id":30,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"30:6621:71469":{"crate_id":30,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"18:790:6047":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:11185:6618":{"crate_id":24,"path":["tokio","util","try_lock","TryLock"],"kind":"struct"},"1:10678:4384":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:55861:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12142:7369":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13221:7664":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13370:7698":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:161:41959":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"30:5673:6621":{"crate_id":30,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"1:8534:2998":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"30:11203:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"20:2769:3142":{"crate_id":20,"path":["http","header","name","PROXY_AUTHORIZATION"],"kind":"constant"},"2:10906:3081":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:51055:4741":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"20:2729:3102":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_EXPOSE_HEADERS"],"kind":"constant"},"24:14616:71469":{"crate_id":24,"path":["tokio","io","util","buf_writer","_","__Origin"],"kind":"struct"},"17:12946:7518":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:1547:8862":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:22833:4740":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"24:9835:3778":{"crate_id":24,"path":["tokio","sync","watch","error","SendError"],"kind":"struct"},"43:0:6533":{"crate_id":43,"path":["log"],"kind":"module"},"2:46377:4885":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:46052:5051":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:10127:3638":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:12826:3475":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:3220:1723":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:6839:4347":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"27:966:6047":{"crate_id":27,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:55822:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47738:82":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:720:6841":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:7557:3088":{"crate_id":24,"path":["tokio","sync","mpsc","block","Values"],"kind":"struct"},"6:1700:8967":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:52932:4744":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"20:2734:3107":{"crate_id":20,"path":["http","header","name","ALLOW"],"kind":"constant"},"2:22377:69388":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"24:6626:6304":{"crate_id":24,"path":["tokio","runtime","context","EnterGuard"],"kind":"struct"},"17:12431:7432":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:5528:757":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:0:2656":{"crate_id":18,"path":["memchr"],"kind":"module"},"9:157:5388":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"29:0:776":{"crate_id":29,"path":["libc"],"kind":"module"},"6:6899:9650":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8578:2999":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:1106:2890":{"crate_id":24,"path":["tokio","select"],"kind":"macro"},"6:563:8810":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6636:5706":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"30:6551:3857":{"crate_id":30,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"2:51683:4786":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:9551:5928":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5407:9430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:10443:4523":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"29:150:41958":{"crate_id":29,"path":["libc","unix","FILE"],"kind":"enum"},"30:7943:3067":{"crate_id":30,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"12:2032:4421":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"20:2744:3117":{"crate_id":20,"path":["http","header","name","CONTENT_RANGE"],"kind":"constant"},"30:10527:71469":{"crate_id":30,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"2:46120:5196":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:6051:9542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:1524:4496":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"30:13103:6418":{"crate_id":30,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"29:1539:8862":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"35:504:3780":{"crate_id":35,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"11:0:2650":{"crate_id":11,"path":["adler"],"kind":"module"},"16:7884:5697":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:3640:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13884:7852":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:14702:6698":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:53157:8396":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:5295:47238":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"29:5937:9490":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"29:6902:9654":{"crate_id":29,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4046:9100":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:2770:3143":{"crate_id":20,"path":["http","header","name","PUBLIC_KEY_PINS"],"kind":"constant"},"35:43:1889":{"crate_id":35,"path":["futures_channel","mpsc"],"kind":"module"},"16:6176:5735":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:1642:3085":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"33:16:2974":{"crate_id":33,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"18:677:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:3018:5861":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:48522:8324":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"30:6689:3857":{"crate_id":30,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"27:1013:4801":{"crate_id":27,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:8323:116":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:1493:4491":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12741:7482":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:3756:3082":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"20:2731:3104":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_REQUEST_HEADERS"],"kind":"constant"},"5:4683:6653":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"29:625:8848":{"crate_id":29,"path":["libc","unix","protoent"],"kind":"struct"},"29:6083:9551":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4183:9153":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:14696:6697":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"24:9584:3779":{"crate_id":24,"path":["tokio","sync","mpsc","error","TrySendError"],"kind":"enum"},"2:49082:5123":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"24:496:71468":{"crate_id":24,"path":["tokio","net","addr","sealed","ToSocketAddrsPriv"],"kind":"trait"},"30:7460:71469":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:2855:165":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4095:9125":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:1792:3784":{"crate_id":24,"path":["tokio","fs","read_dir","State"],"kind":"enum"},"30:8718:71469":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:13733:7807":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"30:9022:6438":{"crate_id":30,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"24:9683:6363":{"crate_id":24,"path":["tokio","sync","notify","Notified"],"kind":"struct"},"12:1144:3085":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10945:1725":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"24:8903:3203":{"crate_id":24,"path":["tokio","sync","rwlock","owned_write_guard_mapped","OwnedRwLockMappedWriteGuard"],"kind":"struct"},"2:47945:3634":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:3425:126":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"30:12506:6834":{"crate_id":30,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"24:11324:71469":{"crate_id":24,"path":["tokio","task","unconstrained","_","__Origin"],"kind":"struct"},"17:11458:7234":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4387:9219":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"24:8158:158":{"crate_id":24,"path":["tokio","sync","mutex","Mutex"],"kind":"struct"},"17:9296:7015":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:5281:4595":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"29:1728:8980":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"24:7973:6635":{"crate_id":24,"path":["tokio","sync","mpsc","list","Tx"],"kind":"struct"},"24:12370:6202":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU16"],"kind":"struct"},"5:5077:640":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"30:7112:71469":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:10536:4431":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:46106:5194":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:46159:5119":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"30:3545:2967":{"crate_id":30,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"30:8148:3878":{"crate_id":30,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"24:10902:6910":{"crate_id":24,"path":["tokio","time","driver","entry","TimerShared"],"kind":"struct"},"30:7092:3863":{"crate_id":30,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"17:10052:7125":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:1651:4498":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"0:773:2588":{"crate_id":0,"path":["hyper","upgrade","OnUpgrade"],"kind":"struct"},"16:3939:7903":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"30:13073:6421":{"crate_id":30,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"29:3958:9064":{"crate_id":29,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"0:683:2475":{"crate_id":0,"path":["hyper","service","service_fn"],"kind":"function"},"29:5247:9353":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:2991:5871":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13760:7819":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:50021:187":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:2614:6082":{"crate_id":20,"path":["http","header","map","Link"],"kind":"enum"},"29:1709:8974":{"crate_id":29,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12507:7442":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:3079:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:47308:191":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"24:6050:6632":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","CoreGuard"],"kind":"struct"},"2:51035:8335":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11616:7266":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:12211:8418":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"18:136:55105":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:670:42284":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:894:4526":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6367:4340":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"29:5997:9523":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:1438:3080":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:9727:3781":{"crate_id":24,"path":["tokio","sync","oneshot","error","TryRecvError"],"kind":"enum"},"17:10253:5950":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:3945:9056":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"24:14150:6230":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU16"],"kind":"struct"},"16:3392:5874":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"29:6177:9607":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:49588:4810":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:9811:1837":{"crate_id":24,"path":["tokio","sync","watch","Sender"],"kind":"struct"},"5:2202:5293":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:48263:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:0:262":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:1428:3082":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:3338:5608":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:3278:3070":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:48229:104":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:511:8780":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:2889:5877":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13540:7745":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"30:6989:71469":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:13356:7696":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"20:2752:3125":{"crate_id":20,"path":["http","header","name","EXPECT"],"kind":"constant"},"2:49030:5022":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4523:9275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:6695:4387":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"0:0:1611":{"crate_id":0,"path":["hyper"],"kind":"module"},"16:6491:5743":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:5672:5590":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:46247:8311":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:2484:48903":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:8268:4542":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"17:10071:6035":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13637:7769":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:46693:6834":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:6298:1813":{"crate_id":24,"path":["tokio","runtime","builder","Builder"],"kind":"struct"},"29:5202:9323":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9610:4591":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:12610:7460":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:4290:3082":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:57131:8407":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:14010:4417":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10403:5958":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10211:7132":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:23811:4956":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:15734:2672":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"18:849:6052":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:4425:9234":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:8236:2807":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10081:5960":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:22835:4739":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:20:8639":{"crate_id":21,"path":["fnv","FnvHasher"],"kind":"struct"},"29:4058:9109":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:7426:6649":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4023:9093":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"30:10697:71469":{"crate_id":30,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"2:47360:3082":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"30:7209:71469":{"crate_id":30,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"17:8954:5993":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:7815:3804":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:10821:2848":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"26:0:2885":{"crate_id":26,"path":["tokio_macros"],"kind":"module"},"30:12331:6503":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"1:11817:167":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"30:6363:6477":{"crate_id":30,"path":["futures_util","fns","OkFn"],"kind":"struct"},"2:51762:4774":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"30:9236:71469":{"crate_id":30,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"24:8039:3775":{"crate_id":24,"path":["tokio","sync","mpsc","unbounded","UnboundedSender"],"kind":"struct"},"27:920:70992":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:9804:188":{"crate_id":24,"path":["tokio","sync","watch","Receiver"],"kind":"struct"},"2:3487:4857":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12195:7377":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"0:312:1837":{"crate_id":0,"path":["hyper","body","Sender"],"kind":"struct"},"1:3233:4557":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"30:10923:6833":{"crate_id":30,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"16:7786:5700":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10515:13223":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"37:324:1576":{"crate_id":37,"path":["httparse","Response"],"kind":"struct"},"30:7821:3869":{"crate_id":30,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"20:2460:3079":{"crate_id":20,"path":["http","header","map","GetAll"],"kind":"struct"},"2:55716:4909":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"29:3873:9005":{"crate_id":29,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:8133:3080":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:5399:2818":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:12568:7452":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:1018:4542":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:24340:5086":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:885:6055":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:46189:5121":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"33:258:2976":{"crate_id":33,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"1:15070:4367":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6881:9647":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"29:6116:9565":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:46:9724":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7453:5690":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:8436:5271":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"29:5428:9438":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:5312:9383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"29:4462:9255":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5228:9333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"29:577:8822":{"crate_id":29,"path":["libc","unix","pollfd"],"kind":"struct"},"1:4621:2833":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:15748:2683":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:5876:4648":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7467:5691":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:1554:8865":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:5868:4646":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"29:4393:9224":{"crate_id":29,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11883:64046":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"29:5159:9305":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:51398:4742":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:7195:5758":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:7841:6886":{"crate_id":24,"path":["tokio","sync","mpsc","chan","RxFields"],"kind":"struct"},"30:10380:2835":{"crate_id":30,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"2:47612:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:8141:180":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:2877:170":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5282:9360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:37313:164":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"20:2494:3084":{"crate_id":20,"path":["http","header","map","OccupiedEntry"],"kind":"struct"},"1:14965:4413":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:14052:6234":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU64"],"kind":"struct"},"30:13127:6423":{"crate_id":30,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"2:52616:4755":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:47231:3082":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"7:38:46786":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:5790:5599":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:1736:8980":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:53180:8397":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:5456:5578":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:50128:2942":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"24:10925:6913":{"crate_id":24,"path":["tokio","time","driver","wheel","level","Expiration"],"kind":"struct"},"30:7269:6409":{"crate_id":30,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"29:81:41892":{"crate_id":29,"path":["libc","unix","DIR"],"kind":"enum"},"16:6413:5521":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:1690:8961":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"20:3221:1578":{"crate_id":20,"path":["http","uri","Uri"],"kind":"struct"},"20:3055:3964":{"crate_id":20,"path":["http","method","extension","InlineExtension"],"kind":"struct"},"12:160:5506":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"24:11733:6201":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU128Le"],"kind":"struct"},"1:11167:4598":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"34:470:1582":{"crate_id":34,"path":["http_body","Body"],"kind":"trait"},"30:8861:3898":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"2:49867:5062":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:4935:4981":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:10117:3634":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:4307:2855":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5717:5593":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"30:9978:71469":{"crate_id":30,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:519:8785":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13488:7728":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11001:7200":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:22432:69405":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:8752:3930":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:15747:2682":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:6465:4398":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:1774:4384":{"crate_id":24,"path":["tokio","fs","open_options","OpenOptions"],"kind":"struct"},"16:5346:5688":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:46113:5195":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"20:2794:3167":{"crate_id":20,"path":["http","header","name","WWW_AUTHENTICATE"],"kind":"constant"},"6:3951:9057":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10725:4575":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"30:12867:3080":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"29:504:8780":{"crate_id":29,"path":["libc","unix","group"],"kind":"struct"},"6:5548:9472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:3294:4723":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"30:8942:3900":{"crate_id":30,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"29:571:8819":{"crate_id":29,"path":["libc","unix","iovec"],"kind":"struct"},"30:10406:71469":{"crate_id":30,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"5:6670:5248":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:6661:6304":{"crate_id":24,"path":["tokio","runtime","handle","EnterGuard"],"kind":"struct"},"6:1729:4608":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:9368:7016":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7194:3077":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"34:633:3064":{"crate_id":34,"path":["http_body","next","Trailers"],"kind":"struct"},"16:7738:5765":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"20:1238:2343":{"crate_id":20,"path":["http","method","InvalidMethod"],"kind":"struct"},"16:5360:5573":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"20:3241:2348":{"crate_id":20,"path":["http","uri","InvalidUriParts"],"kind":"struct"},"16:6554:5745":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"30:11503:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"29:3970:9069":{"crate_id":29,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:13589:3878":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"24:4752:6873":{"crate_id":24,"path":["tokio","park","thread","ParkThread"],"kind":"struct"},"30:10267:4891":{"crate_id":30,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"2:51200:4777":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:51223:4780":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:5996:5731":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13386:7701":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"24:1278:124":{"crate_id":24,"path":["tokio","fs","file","File"],"kind":"struct"},"6:1572:8876":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13819:7833":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1584:8885":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:3032:69607":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"37:261:2200":{"crate_id":37,"path":["httparse","Status"],"kind":"enum"},"24:588:88":{"crate_id":24,"path":["tokio","loom","std","atomic_u8","AtomicU8"],"kind":"struct"},"24:6780:4548":{"crate_id":24,"path":["tokio","runtime","thread_pool","park","Parker"],"kind":"struct"},"1:10530:13224":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:49918:5132":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:299:7022":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13394:7703":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:1041:4401":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:616:8838":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"29:592:8830":{"crate_id":29,"path":["libc","unix","linger"],"kind":"struct"},"24:7637:6348":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","Permit"],"kind":"struct"},"1:11978:3781":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"24:8847:3202":{"crate_id":24,"path":["tokio","sync","rwlock","owned_write_guard","OwnedRwLockWriteGuard"],"kind":"struct"},"24:5515:2981":{"crate_id":24,"path":["tokio","runtime","task","waker","WakerRef"],"kind":"struct"},"6:624:8843":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:3116:2827":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:12076:6197":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI64"],"kind":"struct"},"24:11273:6264":{"crate_id":24,"path":["tokio","time","driver","sleep","Sleep"],"kind":"struct"},"29:1650:8938":{"crate_id":29,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6091:9551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:13730:64268":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:3092:212":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8177:4542":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:13378:64276":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:9595:4590":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:13547:7746":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"30:3424:6620":{"crate_id":30,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"24:13366:6226":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI64Le"],"kind":"struct"},"29:1736:8984":{"crate_id":29,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:3652:4792":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"20:2742:3115":{"crate_id":20,"path":["http","header","name","CONTENT_LENGTH"],"kind":"constant"},"17:13331:7688":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:6110:5727":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8527:2997":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:10464:1813":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14000:7879":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"23:0:1605":{"crate_id":23,"path":["itoa"],"kind":"module"},"12:812:4492":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:51446:4746":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"30:11256:71469":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:46317:4881":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:1762:5751":{"crate_id":24,"path":["tokio","fs","file","Operation"],"kind":"enum"},"5:8094:5325":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"15:248:5525":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:10140:5962":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:11635:6196":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI32Le"],"kind":"struct"},"6:88:41892":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"18:766:6850":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13685:7806":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4344:2856":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"14:250:8180":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:620:7014":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"42:0:6532":{"crate_id":42,"path":["tracing_attributes"],"kind":"module"},"17:13163:7649":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"24:7807:6635":{"crate_id":24,"path":["tokio","sync","mpsc","chan","Tx"],"kind":"struct"},"17:10912:7190":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:5555:4391":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"30:8136:1720":{"crate_id":30,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"29:6206:9623":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:3249:4562":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:7093:6660":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:5406:4602":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:2183:4422":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:2395:8415":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:6326:4884":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:2836:120":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:14789:4506":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:3337:4696":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:2433:8417":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"20:3195:3986":{"crate_id":20,"path":["http","uri","scheme","Scheme2"],"kind":"enum"},"24:7644:188":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","Receiver"],"kind":"struct"},"17:11015:7201":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:52049:4758":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:10121:3636":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:10123:3637":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"30:7638:3868":{"crate_id":30,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"2:49393:2837":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:11293:71469":{"crate_id":24,"path":["tokio","time","driver","sleep","_","__Origin"],"kind":"struct"},"16:5736:5594":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:4596:2829":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:4267:4581":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:12845:4801":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:47239:3080":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"24:13513:6229":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU128Le"],"kind":"struct"},"16:3118:5873":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"30:6812:71469":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"24:4246:6256":{"crate_id":24,"path":["tokio","io","util","buf_writer","SeekState"],"kind":"enum"},"16:7420:5710":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"30:6847:3860":{"crate_id":30,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"1:8727:6754":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:14340:9814":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:801:6048":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4013:9087":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:9649:7112":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:10372:4838":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"29:1668:8950":{"crate_id":29,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:4308:2920":{"crate_id":24,"path":["tokio","io","util","mem","DuplexStream"],"kind":"struct"},"17:510:7023":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:14858:8508":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"30:12990:3906":{"crate_id":30,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"16:7342:5722":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"27:950:6839":{"crate_id":27,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"16:4614:7913":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"27:137:55105":{"crate_id":27,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:2004:2818":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"30:0:1601":{"crate_id":30,"path":["futures_util"],"kind":"module"},"30:8973:2834":{"crate_id":30,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"1:3235:4558":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:15738:2675":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:3172:5863":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:1744:8984":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12234:7382":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"12:840:3083":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:49725:4815":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:3257:4707":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4112:9133":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4272:9166":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:3241:5866":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"22:1248:6114":{"crate_id":22,"path":["bytes","buf","limit","Limit"],"kind":"struct"},"2:13902:187":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:3327:4691":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"12:1762:6647":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"12:2309:9720":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11100:5937":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"30:6336:6523":{"crate_id":30,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"29:1525:8857":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:2527:3086":{"crate_id":20,"path":["http","header","map","ValueDrain"],"kind":"struct"},"17:12208:7379":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5231:7927":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:4823:7920":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:10304:6692":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:157:41958":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:1302:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:13359:8417":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"29:617:8843":{"crate_id":29,"path":["libc","unix","servent"],"kind":"struct"},"29:6891:9650":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:4304:7905":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"20:2725:3098":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_CREDENTIALS"],"kind":"constant"},"17:11186:7209":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"29:6636:9638":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"24:9707:188":{"crate_id":24,"path":["tokio","sync","oneshot","Receiver"],"kind":"struct"},"1:2027:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"29:4038:9100":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:48512:3784":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:3088:213":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"12:2005:3081":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:2318:2911":{"crate_id":24,"path":["tokio","io","split","ReadHalf"],"kind":"struct"},"17:12373:7420":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"35:454:3775":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"1:11923:3081":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"22:374:6115":{"crate_id":22,"path":["bytes","buf","uninit_slice","UninitSlice"],"kind":"struct"},"1:15756:2691":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:11499:7240":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13963:7872":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:5855:5601":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:4762:7918":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"24:11003:4505":{"crate_id":24,"path":["tokio","time","instant","Instant"],"kind":"struct"},"2:24442:5088":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:6185:9607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13554:7747":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"30:12602:3890":{"crate_id":30,"path":["futures_util","stream","select","Select"],"kind":"struct"},"5:3028:69606":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"20:3096:1577":{"crate_id":20,"path":["http","status","StatusCode"],"kind":"struct"},"6:5274:9355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:51809:4778":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"29:4292:9179":{"crate_id":29,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"29:5189:9322":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:3908:4490":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9799:7115":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"29:5220:9333":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10435:7135":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"30:8174:3880":{"crate_id":30,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"2:11075:5006":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12028:7348":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"24:8786:3201":{"crate_id":24,"path":["tokio","sync","rwlock","owned_read_guard","OwnedRwLockReadGuard"],"kind":"struct"},"17:12783:7489":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12182:7376":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"29:4025:9096":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"20:2785:3158":{"crate_id":20,"path":["http","header","name","TE"],"kind":"constant"},"6:4478:9257":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:23576:5080":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"23:39:2479":{"crate_id":23,"path":["itoa","private","Sealed"],"kind":"trait"},"2:22409:69400":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"34:250:3068":{"crate_id":34,"path":["http_body","combinators","box_body","UnsyncBoxBody"],"kind":"struct"},"2:24238:3980":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"24:6900:71454":{"crate_id":24,"path":["tokio","runtime","thread_pool","queue","push_overflow","BatchTaskIter"],"kind":"struct"},"12:2018:4419":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:50753:4783":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:7295:5707":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13520:7739":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11939:3080":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:610:8835":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"24:13562:6235":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU64Le"],"kind":"struct"},"35:426:3793":{"crate_id":35,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"17:11026:7202":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"24:1744:114":{"crate_id":24,"path":["tokio","fs","dir_builder","DirBuilder"],"kind":"struct"},"30:8836:71469":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:11572:7257":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:6345:4337":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"30:12666:6815":{"crate_id":30,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"5:8352:5220":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5347:9403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"27:843:6062":{"crate_id":27,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11794:7306":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10117:6031":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:3966:9064":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12051:7351":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:49851:5059":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:23874:41194":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"30:10218:6447":{"crate_id":30,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:5057:4988":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"24:4259:6864":{"crate_id":24,"path":["tokio","io","util","copy","CopyBuffer"],"kind":"struct"},"17:2512:5946":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"29:4493:9265":{"crate_id":29,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:14717:2830":{"crate_id":24,"path":["tokio","io","seek","Seek"],"kind":"struct"},"2:48722:5213":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"29:4044:9102":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"12:774:3080":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:12063:3010":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:4364:9211":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:1475:4498":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:51840:4781":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:1527:8854":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13933:7867":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:5693:4371":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"30:11909:6495":{"crate_id":30,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"6:1708:8968":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:57110:8406":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"29:4339:9200":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:49139:2836":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"30:9250:4881":{"crate_id":30,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"6:6239:9629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:2155:3081":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:12765:3966":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"35:140:3781":{"crate_id":35,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"17:13054:7608":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"29:5540:9472":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:53018:4782":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"20:2757:3130":{"crate_id":20,"path":["http","header","name","IF_MATCH"],"kind":"constant"},"9:809:3784":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"20:2735:3108":{"crate_id":20,"path":["http","header","name","ALT_SVC"],"kind":"constant"},"2:4931:3650":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:49871:5063":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:7059:6625":{"crate_id":24,"path":["tokio","runtime","thread_pool","worker","block_in_place","Reset"],"kind":"struct"},"30:8500:71469":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"18:782:6839":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11231:5931":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"18:650:6057":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:3157:111":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"24:12223:6200":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU128"],"kind":"struct"},"17:12010:7347":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:4199:3077":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"29:1576:8885":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:3743:6018":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"29:1519:8854":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7549:5698":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11835:7317":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:2314:5952":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:46099:5050":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"24:1036:6082":{"crate_id":24,"path":["tokio","util","linked_list","Link"],"kind":"trait"},"18:829:6051":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"24:10188:6385":{"crate_id":24,"path":["tokio","task","local","LocalSet"],"kind":"struct"},"2:12583:5043":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"22:1298:6116":{"crate_id":22,"path":["bytes","buf","writer","Writer"],"kind":"struct"},"30:9820:6443":{"crate_id":30,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"5:3023:69966":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:6577:5746":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"30:12563:3881":{"crate_id":30,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"17:12327:7396":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7303:5764":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6136:5728":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:11782:6207":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU64Le"],"kind":"struct"},"6:4127:9140":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3681:3058":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"24:5664:6625":{"crate_id":24,"path":["tokio","runtime","enter","exit","Reset"],"kind":"struct"},"5:8111:5326":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:3187:203":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"30:11674:6491":{"crate_id":30,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"30:9276:71469":{"crate_id":30,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"34:624:1870":{"crate_id":34,"path":["http_body","next","Data"],"kind":"struct"},"1:10254:8513":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"33:237:2971":{"crate_id":33,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"12:1651:5515":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:45970:4397":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"30:10833:6451":{"crate_id":30,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"12:937:4494":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4164:9152":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10420:5944":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:4350:7906":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:9817:3649":{"crate_id":24,"path":["tokio","sync","watch","Ref"],"kind":"struct"},"1:14371:125":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"19:117:9668":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:47444:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:4284:3080":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"33:380:72614":{"crate_id":33,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"2:9632:76":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"24:11439:6190":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF64Le"],"kind":"struct"},"1:7915:4542":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"14:231:5223":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"12:853:3088":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:696:4522":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:3823:6649":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:15733:2671":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4033:9096":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:10931:6914":{"crate_id":24,"path":["tokio","time","driver","wheel","Wheel"],"kind":"struct"},"1:1497:4492":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:13539:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13465:7723":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:4955:7924":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:912:5323":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:2866:5858":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:12865:71469":{"crate_id":24,"path":["tokio","io","util","split","_","__Origin"],"kind":"struct"},"1:14034:2856":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4262:9159":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:49735:4816":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:5561:4389":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:9511:6688":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:10955:2836":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:13735:10138":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:3274:4715":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:9719:7113":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:6393:208":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:2204:4673":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:48726:5212":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:2397:8416":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8081:3793":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"24:11304:10136":{"crate_id":24,"path":["tokio","task","unconstrained","Unconstrained"],"kind":"struct"},"17:11665:7273":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:9504:64270":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:12645:7472":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"30:12515:2024":{"crate_id":30,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"2:9795:4991":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6176:9604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:5505:5583":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"35:310:1890":{"crate_id":35,"path":["futures_channel","oneshot"],"kind":"module"},"25:0:1606":{"crate_id":25,"path":["pin_project_lite"],"kind":"module"},"1:14921:4405":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:5284:4596":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"27:987:6049":{"crate_id":27,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:14971:4414":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:3341:4698":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"30:9755:71469":{"crate_id":30,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"1:9245:1349":{"crate_id":1,"path":["std","task"],"kind":"module"},"30:8161:3879":{"crate_id":30,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"5:6634:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"0:418:191":{"crate_id":0,"path":["hyper","Result"],"kind":"typedef"},"1:11260:4386":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:11860:4448":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:15214:64863":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:9063:3204":{"crate_id":24,"path":["tokio","sync","rwlock","write_guard_mapped","RwLockMappedWriteGuard"],"kind":"struct"},"24:6678:6287":{"crate_id":24,"path":["tokio","runtime","spawner","Spawner"],"kind":"enum"},"2:45985:4931":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46447:4892":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:22633:4333":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:7227:1904":{"crate_id":24,"path":["tokio","runtime","Kind"],"kind":"enum"},"6:3972:9066":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11970:7339":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:9280:7105":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2108:559":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:6936:2952":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:537:8790":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:3354:4420":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3286:4719":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"0:486:2437":{"crate_id":0,"path":["hyper","rt","Executor"],"kind":"trait"},"29:609:8838":{"crate_id":29,"path":["libc","unix","tms"],"kind":"struct"},"2:55835:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3617:2847":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"35:21:6618":{"crate_id":35,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"1:8298:5300":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:11696:7283":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:22430:69403":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"30:12916:3082":{"crate_id":30,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"30:10153:71469":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:12671:7474":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"30:7440:3876":{"crate_id":30,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"17:10864:7187":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:7686:4451":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:3333:4694":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:13577:4454":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11378:5988":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"24:9606:3781":{"crate_id":24,"path":["tokio","sync","mpsc","error","TryRecvError"],"kind":"enum"},"1:10733:2846":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"30:12262:6502":{"crate_id":30,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"1:10673:4553":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:11481:4474":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11118:48820":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"29:5177:9318":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:7628:4445":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:6106:9555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"30:9597:68":{"crate_id":30,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"30:10493:6449":{"crate_id":30,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"16:3488:5870":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"20:2764:3137":{"crate_id":20,"path":["http","header","name","LOCATION"],"kind":"constant"},"17:11277:7212":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"20:2793:3166":{"crate_id":20,"path":["http","header","name","WARNING"],"kind":"constant"},"2:46684:2860":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:1530:4497":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:52979:4762":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:5960:5606":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"30:12985:6525":{"crate_id":30,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"9:234:5396":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"30:9395:71469":{"crate_id":30,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"}},"external_crates":{"29":{"name":"libc","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"futures_util","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"40":{"name":"tracing_core","html_root_url":"https://docs.rs/tracing-core/0.1.22/"},"41":{"name":"lazy_static","html_root_url":"https://docs.rs/lazy_static/1.4.0/"},"27":{"name":"memchr","html_root_url":null},"32":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"tokio","html_root_url":null},"20":{"name":"http","html_root_url":"https://docs.rs/http/0.2.7/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"46":{"name":"try_lock","html_root_url":"https://docs.rs/try-lock/0.2.3/"},"22":{"name":"bytes","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"43":{"name":"log","html_root_url":"https://docs.rs/log/0.4.17/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"35":{"name":"futures_channel","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"42":{"name":"tracing_attributes","html_root_url":"https://docs.rs/tracing-attributes/0.1.21/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"38":{"name":"httpdate","html_root_url":null},"28":{"name":"num_cpus","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"tokio_macros","html_root_url":null},"37":{"name":"httparse","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"44":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"futures_core","html_root_url":null},"23":{"name":"itoa","html_root_url":"https://docs.rs/itoa/1.0.2/"},"39":{"name":"tracing","html_root_url":"https://docs.rs/tracing/0.1.34/"},"45":{"name":"want","html_root_url":"https://docs.rs/want/0.3.0/"},"36":{"name":"tower_service","html_root_url":"https://docs.rs/tower-service/0.3.1/"},"33":{"name":"futures_task","html_root_url":null},"21":{"name":"fnv","html_root_url":null},"25":{"name":"pin_project_lite","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"34":{"name":"http_body","html_root_url":"https://docs.rs/http-body/0.4.5/"}},"format_version":15}