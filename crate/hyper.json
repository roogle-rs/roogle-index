{"root":"0:0:1619","crate_version":"0.14.20","includes_private":false,"index":{"36:24:1584":{"id":"36:24:1584","crate_id":36,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[361,4],"end":[361,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Response","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}},"34:524:2018":{"id":"34:524:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[270,4],"end":[273,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1494:1584","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1494:1584","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:502:2023":{"id":"34:502:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[191,4],"end":[191,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[20,0],"end":[20,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"http_body::SizeHint","name":"SizeHint","id":"34:642:1868","glob":false}},"2:13394:66980":{"id":"2:13394:66980","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15775:2681","self::pattern":"2:12992:3379"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2736:4015":{"id":"20:2736:4015","crate_id":20,"name":"ACCESS_CONTROL_MAX_AGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates how long the results of a preflight request can be cached.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlMaxAge),}","value":null,"is_literal":false}},"34:387:2018":{"id":"34:387:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[70,4],"end":[73,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3077","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3077","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1079:4468":{"id":"1:1079:4468","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:2036","1:1081:5287","1:1082:64057","1:1083:64058","1:1084:6182","1:1085:64059","1:1086:64060"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3235:200-0:939:2600":{"id":"a:2:3235:200-0:939:2600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"22:1188:3403":{"id":"22:1188:3403","crate_id":22,"name":"get_u64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13438:70424":{"id":"2:13438:70424","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12992:3379","prim@char":"1:15775:2681","str::rmatch_indices":"1:15781:2686","`DoubleEndedIterator`":"2:8406:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49461:5114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:43":{"id":"34:43","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[24,0],"end":[24,30]},"visibility":{"restricted":{"parent":"34:3:1967","path":"::empty"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2030","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"items":["34:45:1876","34:46:127","34:47:2010","34:48:2018","34:49:1994","34:50:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:1195:3414":{"id":"22:1195:3414","crate_id":22,"name":"get_int_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2841-0:421:127":{"id":"b:2:2841-0:421:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2835:3081","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2843:63957"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"36:29":{"id":"36:29","crate_id":36,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[374,0],"end":[374,44]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Request","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["36:32:1584","36:33:127","36:34:138","36:35:2040","36:36:364"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:720:1596":{"id":"0:720:1596","crate_id":0,"name":"upgrade","span":{"filename":"src/upgrade.rs","begin":[1,0],"end":[382,1]},"visibility":"public","docs":"HTTP Upgrades\n\nThis module deals with managing [HTTP Upgrades][mdn] in hyper. Since\nseveral concepts in HTTP allow for first talking HTTP, and then converting\nto a different protocol, this module conflates them into a single API.\nThose include:\n\n- HTTP/1.1 Upgrades\n- HTTP `CONNECT`\n\nYou are responsible for any other pre-requisites to establish an upgrade,\nsuch as sending the appropriate headers, methods, and status codes. You can\nthen use [`on`][] to grab a `Future` which will resolve to the upgraded\nconnection object, or an error if the upgrade fails.\n\n[mdn]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism\n\n# Client\n\nSending an HTTP upgrade from the [`client`](super::client) involves setting\neither the appropriate method, if wanting to `CONNECT`, or headers such as\n`Upgrade` and `Connection`, on the `http::Request`. Once receiving the\n`http::Response` back, you must check for the specific information that the\nupgrade is agreed upon by the server (such as a `101` status code), and then\nget the `Future` from the `Response`.\n\n# Server\n\nReceiving upgrade requests in a server requires you to check the relevant\nheaders in a `Request`, and if an upgrade should be done, you then send the\ncorresponding headers in a response. To then wait for hyper to finish the\nupgrade, you call `on()` with the `Request`, and then can spawn a task\nawaiting it.\n\n# Example\n\nSee [this example][example] showing how upgrades work with both\nClients and Servers.\n\n[example]: https://github.com/hyperium/hyper/blob/master/examples/upgrades.rs","links":{"`on`":"0:772:945"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:768:2593","0:770:2596","0:939:2600","0:772:945"]}},"34:528:1876":{"id":"34:528:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[290,4],"end":[290,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"b:2:3168-0:770:2596":{"id":"b:2:3168-0:770:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3170:667"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3179-0:770:2596":{"id":"b:2:3179-0:770:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10269:3543":{"id":"2:10269:3543","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10270:646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:85":{"id":"22:85","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1013,0],"end":[1013,36]},"visibility":{"restricted":{"parent":"22:7:2883","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["copy_to_slice","get_u16","reader","copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","take","chunks_vectored","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","get_f64_le","chain","get_f32_le","get_int","get_i128_le","get_u128","has_remaining","get_u64_le","get_i32","get_i16_le"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["22:1145:1746","22:1146:1748","22:1147:1754","22:1149:1751","22:1150:1743","22:1151:3392","22:1152:3393","22:1153:3394","22:1154:3395","22:1155:3396","22:1156:3397","22:1157:3398","22:1158:3399","22:1159:3400","22:1160:3401","22:1161:3402","22:1162:3403","22:1163:3404","22:1164:3405","22:1165:3406","22:1166:3411","22:1167:3412","22:1168:3413","22:1169:3414","22:1170:1759"],"negative":false,"synthetic":false,"blanket_impl":null}},"33:19:2981":{"id":"33:19:2981","crate_id":33,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["33:20:72870","33:21:72871"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8560:157":{"id":"2:8560:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8561:1929","2:8562:907","2:8563:3464","2:8566:2023","2:8567:482","2:8569:3465","2:8572:3466","2:8573:3467","2:8574:3468","2:8575:3419","2:8577:3469","2:8579:3470","2:8580:3471","2:8582:826","2:8585:3472","2:8592:3473","2:8594:3474","2:8597:3475","2:8598:3476","2:8599:3477","2:8601:3478","2:8603:3479","2:8606:1286","2:8607:1766","2:8608:3480","2:8612:3481","2:8615:3482","2:8616:3483","2:8617:3484","2:8619:3485","2:8620:2788","2:8622:3486","2:8625:3487","2:8627:3488","2:8637:3489","2:8652:3490","2:8654:3491","2:8658:3492","2:8667:3493","2:8670:3494","2:8672:3495","2:8675:265","2:8682:282","2:8689:3496","2:8696:3497","2:8705:3498","2:8715:1000","2:8722:3499","2:8729:3386","2:8730:1804","2:8731:3388","2:8743:3387","2:8750:3385","2:8762:3384","2:8769:3500","2:8770:3501","2:8775:3502","2:8778:3503","2:8781:3504","2:8782:1747","2:8784:3505","2:8786:402","2:8789:3506","2:8792:983","2:8795:3507","2:8798:591","2:8801:3508","2:8804:892","2:8806:811","2:8808:777","2:8810:699","2:8812:682","2:8814:3509","2:8815:3510","2:8823:3511"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10271:3544":{"id":"2:10271:3544","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10272:646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3247:209-0:421:127":{"id":"a:2:3247:209-0:421:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"33:258:2984":{"id":"33:258:2984","crate_id":33,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["33:261:2641","33:262:565"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"0:319:1967":{"id":"0:319:1967","crate_id":0,"name":"empty","span":{"filename":"src/body/body.rs","begin":[130,4],"end":[132,5]},"visibility":"public","docs":"Create an empty `Body` stream.\n\n# Example\n\n```\nuse hyper::{Body, Request};\n\n// create a `GET /` request\nlet get = Request::new(Body::empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,30],"end":[65,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Method","name":"Method","id":"20:3009:1582","glob":false}},"22:49:3392":{"id":"22:49:3392","crate_id":22,"name":"copy_to_slice","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[250,4],"end":[250,47]},"visibility":"default","docs":"Copies bytes from `self` into `dst`.\n\nThe cursor is advanced by the number of bytes copied. `self` must have\nenough remaining bytes to fill `dst`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\nlet mut dst = [0; 5];\n\nbuf.copy_to_slice(&mut dst);\nassert_eq!(&b\"hello\"[..], &dst);\nassert_eq!(6, buf.remaining());\n```\n\n# Panics\n\nThis function panics if `self.remaining() < dst.len()`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3132:75":{"id":"2:3132:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3134:293"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"30:6251:2990":{"id":"30:6251:2990","crate_id":30,"name":"LocalSpawnExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:6252:6470"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LocalSpawn","id":"33:19:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6781:4408":{"id":"1:6781:4408","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6782:65334"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:499:2010":{"id":"34:499:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[173,4],"end":[176,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3245:106":{"id":"2:3245:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6076":{"id":"5:6076","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5896:1318","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6077:71068","5:6078:2846","5:6081:71069","5:6084:71070","5:6096:71071","5:6097:71072","5:6098:2866","5:6099:64057","5:6100:64058"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3168-0:312:1843":{"id":"b:2:3168-0:312:1843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3170:667"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13361:70415":{"id":"2:13361:70415","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15781:2686"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2754:4033":{"id":"20:2754:4033","crate_id":20,"name":"COOKIE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Contains stored HTTP cookies previously sent by the server with the\nSet-Cookie header.\n\nThe Cookie header might be omitted entirely, if the privacy setting of\nthe browser are set to block them, for example.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Cookie),}","value":null,"is_literal":false}},"34:270:1994":{"id":"34:270:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[59,4],"end":[59,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:45:1754":{"id":"22:45:1754","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[163,4],"end":[163,70]},"visibility":"default","docs":"Fills `dst` with potentially multiple slices starting at `self`'s\ncurrent position.\n\nIf the `Buf` is backed by disjoint slices of bytes, `chunk_vectored` enables\nfetching more than one slice at once. `dst` is a slice of `IoSlice`\nreferences, enabling the slice to be directly used with [`writev`]\nwithout any further conversion. The sum of the lengths of all the\nbuffers in `dst` will be less than or equal to `Buf::remaining()`.\n\nThe entries in `dst` will be overwritten, but the data **contained** by\nthe slices **will not** be modified. If `chunk_vectored` does not fill every\nentry in `dst`, then `dst` is guaranteed to contain all remaining slices\nin `self.\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk_vectored` must return 0\nwithout mutating `dst`.\n\nImplementations should also take care to properly handle being called\nwith `dst` being a zero length slice.\n\n[`writev`]: http://man7.org/linux/man-pages/man2/readv.2.html","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10984:1733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3696:137":{"id":"2:3696:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3698:673"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3691:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13423:67301":{"id":"2:13423:67301","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15775:2681","str::splitn":"1:15781:2686","self::pattern":"2:12992:3379"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49433:5084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1175:1751":{"id":"22:1175:1751","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[536,0],"end":[544,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:352:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2804:4083":{"id":"20:2804:4083","crate_id":20,"name":"X_XSS_PROTECTION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Stop pages from loading when an XSS attack is detected.\n\nThe HTTP X-XSS-Protection response header is a feature of Internet\nExplorer, Chrome and Safari that stops pages from loading when they\ndetect reflected cross-site scripting (XSS) attacks. Although these\nprotections are largely unnecessary in modern browsers when sites\nimplement a strong Content-Security-Policy that disables the use of\ninline JavaScript ('unsafe-inline'), they can still provide protections\nfor users of older web browsers that don't yet support CSP.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XXssProtection),}","value":null,"is_literal":false}},"36:34:138":{"id":"36:34:138","crate_id":36,"name":"Future","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[380,4],"end":[380,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}},"22:55:3398":{"id":"22:55:3398","crate_id":22,"name":"get_i16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[393,4],"end":[393,35]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_i16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[351,0],"end":[357,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3213:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:328:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2766:4045":{"id":"20:2766:4045","crate_id":20,"name":"IF_RANGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Makes a request conditional based on range.\n\nThe If-Range HTTP request header makes a range request conditional: if\nthe condition is fulfilled, the range request will be issued and the\nserver sends back a 206 Partial Content answer with the appropriate\nbody. If the condition is not fulfilled, the full resource is sent back,\nwith a 200 OK status.\n\nThis header can be used either with a Last-Modified validator, or with\nan ETag, but not with both.\n\nThe most common use case is to resume a download, to guarantee that the\nstored resource has not been modified since the last fragment has been\nreceived.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfRange),}","value":null,"is_literal":false}},"b:2:3179-0:297:1590":{"id":"b:2:3179-0:297:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:76:1759":{"id":"22:76:1759","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[816,4],"end":[816,59]},"visibility":"default","docs":"Consumes `len` bytes inside self and returns new instance of `Bytes`\nwith this data.\n\nThis function may be optimized by the underlying type to avoid actual\ncopies. For example, `Bytes` implementation will do a shallow copy\n(ref-count increment).\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet bytes = (&b\"hello world\"[..]).copy_to_bytes(5);\nassert_eq!(&bytes[..], &b\"hello\"[..]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:233:1748":{"id":"22:233:1748","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[141,4],"end":[141,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:343:1994":{"id":"34:343:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[79,4],"end":[79,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:429:2246":{"id":"0:429:2246","crate_id":0,"name":"is_parse_status","span":{"filename":"src/error.rs","begin":[165,4],"end":[167,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error caused by an invalid response status code or\nreason phrase.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13374:67268":{"id":"2:13374:67268","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10892:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10892:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"20:2780:4059":{"id":"20:2780:4059","crate_id":20,"name":"REFERRER_POLICY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Governs which referrer information should be included with requests\nmade.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ReferrerPolicy),}","value":null,"is_literal":false}},"34:385:127":{"id":"34:385:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[55,4],"end":[55,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"E"}}},"1:6712:4402":{"id":"1:6712:4402","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6713:8583"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10481:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"30:3545:2975":{"id":"30:3545:2975","crate_id":30,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:3546:907","30:3547:752","30:3548:826","30:3551:3475","30:3552:3473","30:3555:3474","30:3559:6535","30:3562:2788","30:3564:3501","30:3569:419","30:3570:482","30:3571:3504","30:3572:3493","30:3576:282","30:3579:265","30:3582:3482","30:3583:6539","30:3585:3481","30:3588:72125","30:3592:3480","30:3597:3477","30:3600:3478","30:3603:6534","30:3605:3472","30:3608:6541","30:3612:1766","30:3613:1286","30:3614:3483","30:3615:3485","30:3616:2750","30:3618:71991","30:3620:2820","30:3621:6538","30:3622:3469","30:3624:3419","30:3626:3476","30:3627:6536","30:3628:6537","30:3629:3484","30:3631:72126","30:3633:72127","30:3635:72128","30:3636:6533"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"31:96:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:564:1759":{"id":"22:564:1759","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[551,4],"end":[551,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13355":{"id":"2:13355","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12452:1318","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13356:778","2:13357:1757","2:13358:70413","2:13359:70414","2:13361:70415","2:13364:2038","2:13365:70416","2:13366:292","2:13367:67269","2:13368:58889","2:13370:2015","2:13372:67267","2:13374:67268","2:13376:4570","2:13377:70417","2:13378:67287","2:13379:67288","2:13380:5141","2:13381:4811","2:13382:1606","2:13383:34445","2:13384:34435","2:13385:5625","2:13386:70418","2:13387:34430","2:13388:67303","2:13391:66978","2:13394:66980","2:13397:3496","2:13401:3459","2:13405:2915","2:13408:34302","2:13411:67297","2:13414:70419","2:13417:70420","2:13420:67299","2:13423:67301","2:13426:70421","2:13429:70422","2:13432:2241","2:13435:70423","2:13438:70424","2:13441:70425","2:13444:70426","2:13446:70427","2:13448:70428","2:13450:70429","2:13451:70430","2:13452:70431","2:13455:70432","2:13458:17024","2:13461:67304","2:13464:70433","2:13467:70434","2:13470:70435","2:13473:5025","2:13475:5287","2:13476:6182","2:13477:64059","2:13478:64060","2:13479:70436","2:13481:4470","2:13482:70437"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8838:3866":{"id":"2:8838:3866","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:1178:3393":{"id":"22:1178:3393","crate_id":22,"name":"get_u8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:472:127":{"id":"34:472:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[51,4],"end":[51,14]},"visibility":"default","docs":"The error type this `Body` might generate.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"22:1171:1746":{"id":"22:1171:1746","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3138:149":{"id":"2:3138:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3140:1772"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:290:127":{"id":"34:290:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[102,4],"end":[102,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"E"}}},"2:13358:70413":{"id":"2:13358:70413","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:421:127":{"id":"0:421:127","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[11,0],"end":[13,1]},"visibility":"public","docs":"Represents errors that can occur handling HTTP streams.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:426","a:2:3276:1731-0:421:127","a:2:9217:3201-0:421:127","a:2:3235:200-0:421:127","a:2:3247:209-0:421:127","a:2:9218:3200-0:421:127","b:2:3164-0:421:127","b:2:2838-0:421:127","b:2:3964-0:421:127","b:2:3179-0:421:127","b:2:3174-0:421:127","b:2:2841-0:421:127","b:2:3168-0:421:127","b:5:6406-0:421:127","0:451","0:453","0:455"]}},"2:13357:1757":{"id":"2:13357:1757","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:13:2218":{"id":"36:13:2218","crate_id":36,"name":"Service","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["36:15:1584","36:16:127","36:17:138","36:18:2040","36:19:364"],"generics":{"params":[{"name":"Request","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9217:3201-0:312:1843":{"id":"a:2:9217:3201-0:312:1843","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9217:3201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"34:108:1876":{"id":"34:108:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[37,4],"end":[37,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"D"}}},"20:2762:4041":{"id":"20:2762:4041","crate_id":20,"name":"HOST","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Specifies the domain name of the server and (optionally) the TCP port\nnumber on which the server is listening.\n\nIf no port is given, the default port for the service requested (e.g.,\n\"80\" for an HTTP URL) is implied.\n\nA Host header field must be sent in all HTTP/1.1 request messages. A 400\n(Bad Request) status code will be sent to any HTTP/1.1 request message\nthat lacks a Host header field or contains more than one.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Host),}","value":null,"is_literal":false}},"22:1159:3400":{"id":"22:1159:3400","crate_id":22,"name":"get_u32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:475:1593":{"id":"0:475:1593","crate_id":0,"name":"ext","span":{"filename":"src/ext.rs","begin":[1,0],"end":[227,1]},"visibility":"public","docs":"HTTP extensions.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[]}},"20:2739:4018":{"id":"20:2739:4018","crate_id":20,"name":"AGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates the time in seconds the object has been in a proxy cache.\n\nThe Age header is usually close to zero. If it is Age: 0, it was\nprobably just fetched from the origin server; otherwise It is usually\ncalculated as a difference between the proxy's current date and the Date\ngeneral header included in the HTTP response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Age),}","value":null,"is_literal":false}},"0:373:646":{"id":"0:373:646","crate_id":0,"name":"fmt","span":{"filename":"src/body/body.rs","begin":[620,4],"end":[633,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10210:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10199:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:1494:1584":{"id":"20:1494:1584","crate_id":20,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/response.rs","begin":[179,0],"end":[179,22]},"visibility":"public","docs":"Represents an HTTP response\n\nAn HTTP response consists of a head and a potentially optional body. The body\ncomponent is generic, enabling arbitrary types to represent the HTTP body.\nFor example, the body could be `Vec<u8>`, a `Stream` of byte chunks, or a\nvalue that has been deserialized.\n\nTypically you'll work with responses on the client side as the result of\nsending a `Request` and on the server you'll be generating a `Response` to\nsend back to the client.\n\n# Examples\n\nCreating a `Response` to return\n\n```\nuse http::{Request, Response, StatusCode};\n\nfn respond_to(req: Request<()>) -> http::Result<Response<()>> {\n    let mut builder = Response::builder()\n        .header(\"Foo\", \"Bar\")\n        .status(StatusCode::OK);\n\n    if req.headers().contains_key(\"Another-Header\") {\n        builder = builder.header(\"Another-Header\", \"Ack\");\n    }\n\n    builder.body(())\n}\n```\n\nA simple 404 handler\n\n```\nuse http::{Request, Response, StatusCode};\n\nfn not_found(_req: Request<()>) -> http::Result<Response<()>> {\n    Response::builder()\n        .status(StatusCode::NOT_FOUND)\n        .body(())\n}\n```\n\nOr otherwise inspecting the result of a request:\n\n```no_run\nuse http::{Request, Response};\n\nfn get(url: &str) -> http::Result<Response<()>> {\n    // ...\n# panic!()\n}\n\nlet response = get(\"https://www.rust-lang.org/\").unwrap();\n\nif !response.status().is_success() {\n    panic!(\"failed to get a successful response status!\");\n}\n\nif let Some(date) = response.headers().get(\"Date\") {\n    // we've got a `Date` header!\n}\n\nlet body = response.body();\n// ...\n```\n\nDeserialize a response of bytes via json:\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Response;\nuse serde::de;\n\nfn deserialize<T>(res: Response<Vec<u8>>) -> serde_json::Result<Response<T>>\n    where for<'de> T: de::Deserialize<'de>,\n{\n    let (parts, body) = res.into_parts();\n    let body = serde_json::from_slice(&body)?;\n    Ok(Response::from_parts(parts, body))\n}\n#\n# fn main() {}\n```\n\nOr alternatively, serialize the body of a response to json\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Response;\nuse serde::ser;\n\nfn serialize<T>(res: Response<T>) -> serde_json::Result<Response<Vec<u8>>>\n    where T: ser::Serialize,\n{\n    let (parts, body) = res.into_parts();\n    let body = serde_json::to_vec(&body)?;\n    Ok(Response::from_parts(parts, body))\n}\n#\n# fn main() {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:793:4003":{"id":"20:793:4003","crate_id":20,"name":"InvalidHeaderValue","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/value.rs","begin":[28,0],"end":[28,29]},"visibility":"public","docs":"A possible error when converting a `HeaderValue` from a string or byte\nslice.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13365:70416":{"id":"2:13365:70416","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"22:64:3407":{"id":"22:64:3407","crate_id":22,"name":"get_u128","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[573,4],"end":[573,34]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3164-0:770:2596":{"id":"b:2:3164-0:770:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3167:1772"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2743:4022":{"id":"20:2743:4022","crate_id":20,"name":"CACHE_CONTROL","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Specifies directives for caching mechanisms in both requests and\nresponses.\n\nCaching directives are unidirectional, meaning that a given directive in\na request is not implying that the same directive is to be given in the\nresponse.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::CacheControl),}","value":null,"is_literal":false}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[492,0],"end":[501,1]},"visibility":{"restricted":{"parent":"0:411:1591","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10250:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:452:646"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3679:5186":{"id":"2:3679:5186","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3610:5185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2733:4012":{"id":"20:2733:4012","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_METHODS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Preflight header response indicating permitted access methods.\n\nThe Access-Control-Allow-Methods response header specifies the method or\nmethods allowed when accessing the resource in response to a preflight\nrequest.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlAllowMethods),}","value":null,"is_literal":false}},"20:2753:4032":{"id":"20:2753:4032","crate_id":20,"name":"CONTENT_TYPE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Used to indicate the media type of the resource.\n\nIn responses, a Content-Type header tells the client what the content\ntype of the returned content actually is. Browsers will do MIME sniffing\nin some cases and will not necessarily follow the value of this header;\nto prevent this behavior, the header X-Content-Type-Options can be set\nto nosniff.\n\nIn requests, (such as POST or PUT), the client tells the server what\ntype of data is actually sent.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentType),}","value":null,"is_literal":false}},"2:13476:6182":{"id":"2:13476:6182","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:36:364":{"id":"36:36:364","crate_id":36,"name":"call","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[386,4],"end":[386,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["request",{"kind":"generic","inner":"Request"}]],"output":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1155:3396":{"id":"22:1155:3396","crate_id":22,"name":"get_u16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2746:4025":{"id":"20:2746:4025","crate_id":20,"name":"CONTENT_ENCODING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Used to compress the media-type.\n\nWhen present, its value indicates what additional content encoding has\nbeen applied to the entity-body. It lets the client know, how to decode\nin order to obtain the media-type referenced by the Content-Type header.\n\nIt is recommended to compress data as much as possible and therefore to\nuse this field, but some types of resources, like jpeg images, are\nalready compressed.  Sometimes using additional compression doesn't\nreduce payload size and can even make the payload longer.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentEncoding),}","value":null,"is_literal":false}},"2:3244:206":{"id":"2:3244:206","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3330:4831":{"id":"2:3330:4831","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:171","2:3332:898"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13450:70429":{"id":"2:13450:70429","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1151:3392":{"id":"22:1151:3392","crate_id":22,"name":"copy_to_slice","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:47:1751":{"id":"22:47:1751","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[206,4],"end":[206,38]},"visibility":"default","docs":"Advance the internal cursor of the Buf\n\nThe next call to `chunk()` will return a slice starting `cnt` bytes\nfurther into the underlying buffer.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Panics\n\nThis function **may** panic if `cnt > self.remaining()`.\n\n# Implementer notes\n\nIt is recommended for implementations of `advance` to panic if `cnt >\nself.remaining()`. If the implementation does not panic, the call must\nbehave as if `cnt == self.remaining()`.\n\nA call with `cnt == 0` should never panic and be a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3276:1731-0:770:2596":{"id":"a:2:3276:1731-0:770:2596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"34:498:127":{"id":"34:498:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[171,4],"end":[171,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3454:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"b:2:2838-0:939:2600":{"id":"b:2:2838-0:939:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2840:1893"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3383:4768":{"id":"2:3383:4768","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:171","2:3386:1214"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:770:2596":{"id":"0:770:2596","crate_id":0,"name":"OnUpgrade","span":{"filename":"src/upgrade.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"A future for a possible HTTP upgrade.\n\nIf no upgrade was available, or it doesn't succeed, yields an `Error`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:3276:1731-0:770:2596","a:2:9217:3201-0:770:2596","a:2:3235:200-0:770:2596","a:2:3247:209-0:770:2596","a:2:9218:3200-0:770:2596","b:2:3164-0:770:2596","b:2:2838-0:770:2596","b:2:3964-0:770:2596","b:2:13724-0:770:2596","b:2:3179-0:770:2596","b:2:3174-0:770:2596","b:2:2841-0:770:2596","b:2:3168-0:770:2596","b:30:504-0:770:2596","b:30:237-0:770:2596","b:31:48-0:770:2596","0:789","0:793"]}},"20:2730:4009":{"id":"20:2730:4009","crate_id":20,"name":"ACCEPT_RANGES","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Marker used by the server to advertise partial request support.\n\nThe Accept-Ranges response HTTP header is a marker used by the server to\nadvertise its support of partial requests. The value of this field\nindicates the unit that can be used to define a range.\n\nIn presence of an Accept-Ranges header, the browser may try to resume an\ninterrupted download, rather than to start it from the start again.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptRanges),}","value":null,"is_literal":false}},"22:842:1759":{"id":"22:842:1759","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[966,4],"end":[966,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6479:4437":{"id":"1:6479:4437","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6480:68597","1:6481:68598"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13380:5141":{"id":"2:13380:5141","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15775:2681"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49281:5105","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13367:67269":{"id":"2:13367:67269","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15792:2695"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:452:646":{"id":"0:452:646","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[493,4],"end":[500,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10210:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10199:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2759:4038":{"id":"20:2759:4038","crate_id":20,"name":"EXPIRES","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Contains the date/time after which the response is considered stale.\n\nInvalid dates, like the value 0, represent a date in the past and mean\nthat the resource is already expired.\n\nIf there is a Cache-Control header with the \"max-age\" or \"s-max-age\"\ndirective in the response, the Expires header is ignored.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Expires),}","value":null,"is_literal":false}},"34:526:2023":{"id":"34:526:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[284,4],"end":[284,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:470:1867":{"id":"34:470:1867","crate_id":34,"name":"HttpBody","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[46,0],"end":[46,14]},"visibility":"public","docs":"Trait representing a streaming body of a Request or Response.\n\nData is streamed via the `poll_data` function, which asynchronously yields `T: Buf` values. The\n`size_hint` function provides insight into the total number of bytes that will be streamed.\n\nThe `poll_trailers` function returns an optional set of trailers used to finalize the request /\nresponse exchange. This is mostly used when using the HTTP/2.0 protocol.\n","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["34:471:1876","34:472:127","34:473:2010","34:474:2018","34:475:1994","34:476:2023","34:477:1892","34:478:2051","34:479:3702","34:482:1992","34:485:2750","34:486:3703"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["34:519","34:106","34:380","34:495","34:511","34:43","34:487","34:286","34:263","34:527","34:335","34:503","34:174","0:329"]}},"b:2:2838-0:421:127":{"id":"b:2:2838-0:421:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2840:1893"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:60:3403":{"id":"22:60:3403","crate_id":22,"name":"get_u64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[493,4],"end":[493,32]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:939:2600":{"id":"b:2:3179-0:939:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:22805:4450":{"id":"2:22805:4450","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22795:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:24:2649-0:768:2593":{"id":"b:24:2649-0:768:2593","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.19.2/src/io/util/async_write_ext.rs","begin":[1293,0],"end":[1293,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:309:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["write_buf","write_i32","write_u32","write_i64_le","write_u32_le","write_f64","write_f32_le","write_all_buf","shutdown","flush","write_i64","write","write_i8","write_u8","write_u64","write_u16_le","write_i32_le","write_u128_le","write_f64_le","write_all","write_i128","write_i16","write_u128","write_i128_le","write_vectored","write_u16","write_f32","write_i16_le","write_u64_le"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWriteExt","id":"24:4168:2926","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"W"}}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[487,0],"end":[496,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:340:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:1146:1748":{"id":"22:1146:1748","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:271:2023":{"id":"34:271:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[63,4],"end":[63,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2857:104":{"id":"2:2857:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2858:396","2:2859:398"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6408:3515":{"id":"5:6408:3515","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:772:945":{"id":"0:772:945","crate_id":0,"name":"on","span":{"filename":"src/upgrade.rs","begin":[104,0],"end":[106,1]},"visibility":"public","docs":"Gets a pending HTTP upgrade from this message.\n\nThis can be called on the following types:\n\n- `http::Request<B>`\n- `http::Response<B>`\n- `&mut http::Request<B>`\n- `&mut http::Response<B>`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["msg",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::CanUpgrade","id":"0:811:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"20:2770:4049":{"id":"20:2770:4049","crate_id":20,"name":"LOCATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates the URL to redirect a page to.\n\nThe Location response header indicates the URL to redirect a page to. It\nonly provides a meaning when served with a 3xx status response.\n\nThe HTTP method used to make the new request to fetch the page pointed\nto by Location depends of the original method and of the kind of\nredirection:\n\n* If 303 (See Also) responses always lead to the use of a GET method,\n307 (Temporary Redirect) and 308 (Permanent Redirect) don't change the\nmethod used in the original request;\n\n* 301 (Permanent Redirect) and 302 (Found) doesn't change the method\nmost of the time, though older user-agents may (so you basically don't\nknow).\n\nAll responses with one of these status codes send a Location header.\n\nBeside redirect response, messages with 201 (Created) status also\ninclude the Location header. It indicates the URL to the newly created\nresource.\n\nLocation and Content-Location are different: Location indicates the\ntarget of a redirection (or the URL of a newly created resource), while\nContent-Location indicates the direct URL to use to access the resource\nwhen content negotiation happened, without the need of further content\nnegotiation. Location is a header associated with the response, while\nContent-Location is associated with the entity returned.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Location),}","value":null,"is_literal":false}},"20:2790:4069":{"id":"20:2790:4069","crate_id":20,"name":"STRICT_TRANSPORT_SECURITY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Tells the client to communicate with HTTPS instead of using HTTP.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::StrictTransportSecurity),}","value":null,"is_literal":false}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[149,0],"end":[490,1]},"visibility":{"restricted":{"parent":"0:411:1591","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:427:2240","0:428:2243","0:429:2246","0:430:2248","0:431:2250","0:432:2112","0:433:2253","0:434:2255","0:435:2083","0:436:2258","0:437:2262","0:448:852"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2838-0:768:2593":{"id":"b:2:2838-0:768:2593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2840:1893"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3377:4765":{"id":"2:3377:4765","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:171","2:3380:1211"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:456:2264":{"id":"0:456:2264","crate_id":0,"name":"source","span":{"filename":"src/error.rs","begin":[514,4],"end":[519,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StdError","id":"1:2569:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"outlives":"'static"}]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:779":{"id":"0:779","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[161,0],"end":[189,1]},"visibility":{"restricted":{"parent":"0:720:1596","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:309:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:780:1806","0:781:1807","0:782:1808","0:783:1809","0:784:1810"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2792:4071":{"id":"20:2792:4071","crate_id":20,"name":"TRAILER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Allows the sender to include additional fields at the end of chunked\nmessages.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Trailer),}","value":null,"is_literal":false}},"36:16:127":{"id":"36:16:127","crate_id":36,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[316,4],"end":[316,14]},"visibility":"default","docs":"Errors produced by the service.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"b:2:3174-0:312:1843":{"id":"b:2:3174-0:312:1843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3144:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3177:127","2:3178:1392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3235:200-0:768:2593":{"id":"a:2:3235:200-0:768:2593","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5707:4426":{"id":"1:5707:4426","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5708:64116"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:775:2623":{"id":"0:775:2623","crate_id":0,"name":"downcast","span":{"filename":"src/upgrade.rs","begin":[136,4],"end":[148,5]},"visibility":"public","docs":"Tries to downcast the internal trait object to the type passed.\n\nOn success, returns the downcasted parts. On error, returns the\n`Upgraded` back.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:230:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:309:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1169:3414":{"id":"22:1169:3414","crate_id":22,"name":"get_int_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1157:3398":{"id":"22:1157:3398","crate_id":22,"name":"get_i16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:386:2010":{"id":"34:386:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[57,4],"end":[60,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3077","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3077","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3077","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:96:1748":{"id":"22:96:1748","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1051,4],"end":[1051,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3350:4839":{"id":"2:3350:4839","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3352:1089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1167:3412":{"id":"22:1167:3412","crate_id":22,"name":"get_uint_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2569:127":{"id":"1:2569:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2570:2264","1:2572:2667","1:2573:1828","1:2574:2175"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10250:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10257:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:312:1843":{"id":"0:312:1843","crate_id":0,"name":"Sender","span":{"filename":"src/body/body.rs","begin":[109,0],"end":[113,1]},"visibility":"public","docs":"A sender half created through [`Body::channel()`].\n\nUseful when wanting to stream chunks from another thread.\n\n## Body Closing\n\nNote that the request body will always be closed normally when the sender is dropped (meaning\nthat the empty terminating chunk will be sent to the remote). If you desire to close the\nconnection with an incomplete response (e.g. in the case of an error during asynchronous\nprocessing), call the [`Sender::abort()`] method to abort the body in an abnormal fashion.\n\n[`Body::channel()`]: struct.Body.html#method.channel\n[`Sender::abort()`]: struct.Sender.html#method.abort","links":{},"attrs":["#[must_use = \"Sender does nothing unless sent on\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:353","a:2:3276:1731-0:312:1843","a:2:9217:3201-0:312:1843","a:2:3235:200-0:312:1843","a:2:3247:209-0:312:1843","a:2:9218:3200-0:312:1843","b:2:3164-0:312:1843","b:2:2838-0:312:1843","b:2:3964-0:312:1843","b:2:3179-0:312:1843","b:2:3174-0:312:1843","b:2:2841-0:312:1843","b:2:3168-0:312:1843","0:372"]}},"31:44:2973":{"id":"31:44:2973","crate_id":31,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:45:165","31:46:127","31:47:63967"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"31:39:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:1172:1748":{"id":"22:1172:1748","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:680:2483":{"id":"0:680:2483","crate_id":0,"name":"service_fn","span":{"filename":"src/service/util.rs","begin":[27,0],"end":[36,1]},"visibility":"public","docs":"Create a `Service` from a function.\n\n# Example\n\n```\nuse hyper::{Body, Request, Response, Version};\nuse hyper::service::service_fn;\n\nlet service = service_fn(|req: Request<Body>| async move {\n    if req.version() == Version::HTTP_11 {\n        Ok(Response::new(Body::from(\"Hello World\")))\n    } else {\n        // Note: it's usually better to return a Response\n        // with an appropriate StatusCode instead of an Err.\n        Err(\"not HTTP/1.1, abort connection\")\n    }\n});\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"ServiceFn","id":"0:684:2554","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3484:131","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"Request","id":"20:1361:1583","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}],"output":{"kind":"generic","inner":"S"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"34:380":{"id":"34:380","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[49,0],"end":[49,35]},"visibility":{"restricted":{"parent":"34:348:1992","path":"::combinators::map_err"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3484:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"E"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3077","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["34:384:1876","34:385:127","34:386:2010","34:387:2018","34:388:1994","34:389:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:437:2262":{"id":"0:437:2262","crate_id":0,"name":"into_cause","span":{"filename":"src/error.rs","begin":[205,4],"end":[207,5]},"visibility":"public","docs":"Consumes the error, returning its cause.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StdError","id":"1:2569:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9218:3200-0:939:2600":{"id":"a:2:9218:3200-0:939:2600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9218:3200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9218:3200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"31:53:127":{"id":"31:53:127","crate_id":31,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.21/src/future.rs","begin":[78,4],"end":[78,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"E"}}},"20:3227:1586":{"id":"20:3227:1586","crate_id":20,"name":"Uri","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/uri/mod.rs","begin":[96,0],"end":[96,14]},"visibility":"public","docs":"The URI component of a request.\n\nFor HTTP 1, this is included as part of the request line. From Section 5.3,\nRequest Target:\n\n> Once an inbound connection is obtained, the client sends an HTTP\n> request message (Section 3) with a request-target derived from the\n> target URI.  There are four distinct formats for the request-target,\n> depending on both the method being requested and whether the request\n> is to a proxy.\n>\n> ```notrust\n> request-target = origin-form\n>                / absolute-form\n>                / authority-form\n>                / asterisk-form\n> ```\n\nThe URI is structured as follows:\n\n```notrust\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|-|   |-------------------------------||--------| |-------------------| |-----|\n |                  |                       |               |              |\nscheme          authority                 path            query         fragment\n```\n\nFor HTTP 2.0, the URI is encoded using pseudoheaders.\n\n# Examples\n\n```\nuse http::Uri;\n\nlet uri = \"/foo/bar?baz\".parse::<Uri>().unwrap();\nassert_eq!(uri.path(), \"/foo/bar\");\nassert_eq!(uri.query(), Some(\"baz\"));\nassert_eq!(uri.host(), None);\n\nlet uri = \"https://www.rust-lang.org/install.html\".parse::<Uri>().unwrap();\nassert_eq!(uri.scheme_str(), Some(\"https\"));\nassert_eq!(uri.host(), Some(\"www.rust-lang.org\"));\nassert_eq!(uri.path(), \"/install.html\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13397:3496":{"id":"2:13397:3496","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47347:166","self::pattern":"2:12992:3379","prim@char":"1:15775:2681"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4605:2837":{"id":"1:4605:2837","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4606:2135","1:4607:6290","1:4609:1810","1:4610:5548","1:4611:6262","1:4612:65461","1:4613:3336","1:4622:3485"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:371:252":{"id":"0:371:252","crate_id":0,"name":"abort","span":{"filename":"src/body/body.rs","begin":[605,4],"end":[611,5]},"visibility":"public","docs":"Aborts the body in an abnormal fashion.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:522:127":{"id":"34:522:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[258,4],"end":[258,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"22:232:1746":{"id":"22:232:1746","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[137,4],"end":[137,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6100:64058":{"id":"5:6100:64058","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15781:2686"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13448:70428":{"id":"2:13448:70428","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2768:4047":{"id":"20:2768:4047","crate_id":20,"name":"LAST_MODIFIED","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Content-Types that are acceptable for the response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::LastModified),}","value":null,"is_literal":false}},"20:2735:4014":{"id":"20:2735:4014","crate_id":20,"name":"ACCESS_CONTROL_EXPOSE_HEADERS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates which headers can be exposed as part of the response by\nlisting their names.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlExposeHeaders),}","value":null,"is_literal":false}},"2:3478:1851":{"id":"2:3478:1851","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3479:565"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:70427":{"id":"2:13446:70427","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:335":{"id":"34:335","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[50,0],"end":[50,37]},"visibility":{"restricted":{"parent":"34:300:3702","path":"::combinators::map_data"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3484:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"B2"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"B2"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3076","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["34:339:1876","34:340:127","34:341:2010","34:342:2018","34:343:1994"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:297:1590":{"id":"0:297:1590","crate_id":0,"name":"Body","span":{"filename":"src/body/body.rs","begin":[36,0],"end":[41,1]},"visibility":"public","docs":"A stream of `Bytes`, used when receiving bodies.\n\nA good default [`HttpBody`](crate::body::HttpBody) to use in many\napplications.\n\nNote: To read the full body, use [`body::to_bytes`](crate::body::to_bytes)\nor [`body::aggregate`](crate::body::aggregate).","links":{"crate::body::HttpBody":"34:470:1590","crate::body::to_bytes":"0:402:1872","crate::body::aggregate":"0:242:1869"},"attrs":["#[must_use = \"streams do nothing unless polled\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:318","a:2:3276:1731-0:297:1590","a:2:9217:3201-0:297:1590","a:2:3235:200-0:297:1590","a:2:3247:209-0:297:1590","a:2:9218:3200-0:297:1590","b:2:3164-0:297:1590","b:2:2838-0:297:1590","b:2:3964-0:297:1590","b:2:3179-0:297:1590","b:2:3174-0:297:1590","b:2:2841-0:297:1590","b:2:3168-0:297:1590","0:327","0:329","0:337","0:339","0:341","0:343","0:345","0:347","0:349","0:351"]}},"34:292:2018":{"id":"34:292:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[111,4],"end":[114,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3078","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3078","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:556":{"id":"20:556","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[3395,4],"end":[3395,36]},"visibility":{"restricted":{"parent":"20:526:6172","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543:3991","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5641:4422":{"id":"1:5641:4422","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5642:65280","1:5643:65282","1:5644:65281","1:5645:65283"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:266:1876":{"id":"34:266:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[42,4],"end":[42,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"D"}}},"0:418:195":{"id":"0:418:195","crate_id":0,"name":"Result","span":{"filename":"src/error.rs","begin":[6,0],"end":[6,51]},"visibility":"public","docs":"Result type often returned from methods that can have hyper `Error`s.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"std::result::Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"20:2761:4040":{"id":"20:2761:4040","crate_id":20,"name":"FROM","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Contains an Internet email address for a human user who controls the\nrequesting user agent.\n\nIf you are running a robotic user agent (e.g. a crawler), the From\nheader should be sent, so you can be contacted if problems occur on\nservers, such as if the robot is sending excessive, unwanted, or invalid\nrequests.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::From),}","value":null,"is_literal":false}},"34:642:1868":{"id":"34:642:1868","crate_id":34,"name":"SizeHint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/size_hint.rs","begin":[10,0],"end":[10,19]},"visibility":"public","docs":"A `Body` size hint\n\nThe default implementation returns:\n\n* 0 for `lower`\n* `None` for `upper`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:346:667":{"id":"0:346:667","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[514,4],"end":[519,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2727:4006":{"id":"20:2727:4006","crate_id":20,"name":"ACCEPT_CHARSET","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Advertises which character set the client is able to understand.\n\nThe Accept-Charset request HTTP header advertises which character set\nthe client is able to understand. Using content negotiation, the server\nthen selects one of the proposals, uses it and informs the client of its\nchoice within the Content-Type response header. Browsers usually don't\nset this header as the default value for each content type is usually\ncorrect and transmitting it would allow easier fingerprinting.\n\nIf the server cannot serve any matching character set, it can\ntheoretically send back a 406 (Not Acceptable) error code. But, for a\nbetter user experience, this is rarely done and the more common way is\nto ignore the Accept-Charset header in this case.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptCharset),}","value":null,"is_literal":false}},"34:525:1994":{"id":"34:525:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[280,4],"end":[280,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:293:1994":{"id":"34:293:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[118,4],"end":[118,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2785:4064":{"id":"20:2785:4064","crate_id":20,"name":"SEC_WEBSOCKET_KEY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"The |Sec-WebSocket-Key| header field is used in the WebSocket opening\nhandshake. It is sent from the client to the server to provide part\nof the information used by the server to prove that it received a\nvalid WebSocket opening handshake. This helps ensure that the server\ndoes not accept connections from non-WebSocket clients (e.g., HTTP\nclients) that are being abused to send data to unsuspecting WebSocket\nservers.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketKey),}","value":null,"is_literal":false}},"20:2981:2345":{"id":"20:2981:2345","crate_id":20,"name":"HeaderValue","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/value.rs","begin":[21,0],"end":[21,22]},"visibility":"public","docs":"Represents an HTTP header field value.\n\nIn practice, HTTP header field values are usually valid ASCII. However, the\nHTTP spec allows for a header value to contain opaque bytes as well. In this\ncase, the header field value is not able to be represented as a string.\n\nTo handle this, the `HeaderValue` is useable as a type and can be compared\nwith strings and implements `Debug`. A `to_str` fn is provided that returns\nan `Err` if the header value contains non visible ascii characters.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:6359:4402":{"id":"1:6359:4402","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6360:4688","1:6361:4689","1:6362:8582","1:6363:64816","1:6365:64819","1:6367:1721","1:6368:64817","1:6370:64818"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10481:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"31:96:1897":{"id":"31:96:1897","crate_id":31,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:97:1929","31:98:2008","31:99:2023"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:493:1994":{"id":"34:493:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[156,4],"end":[156,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[18,21],"end":[18,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"bytes::Bytes","name":"Bytes","id":"22:526:1736","glob":false}},"2:3610:5185":{"id":"2:3610:5185","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3612:68725","2:3613:68726","2:3614:67303"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:402:1872":{"id":"0:402:1872","crate_id":0,"name":"to_bytes","span":{"filename":"src/body/to_bytes.rs","begin":[47,0],"end":[77,1]},"visibility":"public","docs":"Concatenate the buffers from a body into a single `Bytes` asynchronously.\n\nThis may require copying the data into a single buffer. If you don't need\na contiguous buffer, prefer the [`aggregate`](crate::body::aggregate())\nfunction.\n\n# Note\n\nCare needs to be taken if the remote is untrusted. The function doesn't implement any length\nchecks and an malicious peer might make it consume arbitrary amounts of memory. Checking the\n`Content-Length` is a possibility, but it is not strictly mandated to be present.\n\n# Example\n\n```\n# #[cfg(all(feature = \"client\", feature = \"tcp\", any(feature = \"http1\", feature = \"http2\")))]\n# async fn doc() -> hyper::Result<()> {\nuse hyper::{body::HttpBody};\n\n# let request = hyper::Request::builder()\n#        .method(hyper::Method::POST)\n#        .uri(\"http://httpbin.org/post\")\n#        .header(\"content-type\", \"application/json\")\n#        .body(hyper::Body::from(r#\"{\"library\":\"hyper\"}\"#)).unwrap();\n# let client = hyper::Client::new();\nlet response = client.request(request).await?;\n\nconst MAX_ALLOWED_RESPONSE_SIZE: u64 = 1024;\n\nlet response_content_length = match response.body().size_hint().upper() {\n    Some(v) => v,\n    None => MAX_ALLOWED_RESPONSE_SIZE + 1 // Just to protect ourselves from a malicious response\n};\n\nif response_content_length < MAX_ALLOWED_RESPONSE_SIZE {\n    let body_bytes = hyper::body::to_bytes(response.into_body()).await?;\n    println!(\"body: {:?}\", body_bytes);\n}\n\n# Ok(())\n# }\n```","links":{"crate::body::aggregate()":"0:242:1869"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["body",{"kind":"generic","inner":"T"}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:470:1590","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"HttpBody","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":true,"abi":"Rust"}}},"2:4745:4850":{"id":"2:4745:4850","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4746:1929","2:4747:2008","2:4748:2023"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2763:4042":{"id":"20:2763:4042","crate_id":20,"name":"IF_MATCH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Makes a request conditional based on the E-Tag.\n\nFor GET and HEAD methods, the server will send back the requested\nresource only if it matches one of the listed ETags. For PUT and other\nnon-safe methods, it will only upload the resource in this case.\n\nThe comparison with the stored ETag uses the strong comparison\nalgorithm, meaning two files are considered identical byte to byte only.\nThis is weakened when the  W/ prefix is used in front of the ETag.\n\nThere are two common use cases:\n\n* For GET and HEAD methods, used in combination with an Range header, it\ncan guarantee that the new ranges requested comes from the same resource\nthan the previous one. If it doesn't match, then a 416 (Range Not\nSatisfiable) response is returned.\n\n* For other methods, and in particular for PUT, If-Match can be used to\nprevent the lost update problem. It can check if the modification of a\nresource that the user wants to upload will not override another change\nthat has been done since the original resource was fetched. If the\nrequest cannot be fulfilled, the 412 (Precondition Failed) response is\nreturned.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfMatch),}","value":null,"is_literal":false}},"0:790:171":{"id":"0:790:171","crate_id":0,"name":"Output","span":{"filename":"src/upgrade.rs","begin":[211,4],"end":[211,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}},"20:2481:4085":{"id":"20:2481:4085","crate_id":20,"name":"Vacant","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[162,4],"end":[162,10]},"visibility":"default","docs":"A vacant entry","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"20:2488:3997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}]}},"2:10265:3542":{"id":"2:10265:3542","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10266:646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:43:1746":{"id":"22:43:1746","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[102,4],"end":[102,33]},"visibility":"default","docs":"Returns the number of bytes between the current position and the end of\nthe buffer.\n\nThis value is greater than or equal to the length of the slice returned\nby `chunk()`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.remaining(), 11);\n\nbuf.get_u8();\n\nassert_eq!(buf.remaining(), 10);\n```\n\n# Implementer notes\n\nImplementations of `remaining` should ensure that the return value does\nnot change unless a call is made to `advance` or any other function that\nis documented to change the `Buf`'s current position.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,47],"end":[65,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Response","name":"Response","id":"20:1494:1584","glob":false}},"0:939:2600":{"id":"0:939:2600","crate_id":0,"name":"Parts","span":{"filename":"src/upgrade.rs","begin":[81,0],"end":[94,1]},"visibility":"public","docs":"The deconstructed parts of an [`Upgraded`](Upgraded) type.\n\nIncludes the original IO type, and a read buffer of bytes that the\nHTTP state machine may have already read before completing an upgrade.","links":{"Upgraded":"0:768:2593"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":["0:941:1722","0:942:2608"],"impls":["a:2:3276:1731-0:939:2600","a:2:9217:3201-0:939:2600","a:2:3235:200-0:939:2600","a:2:3247:209-0:939:2600","a:2:9218:3200-0:939:2600","b:2:3164-0:939:2600","b:2:2838-0:939:2600","b:2:3964-0:939:2600","b:2:3179-0:939:2600","b:2:3174-0:939:2600","b:2:2841-0:939:2600","b:2:3168-0:939:2600","0:944"]}},"5:6081:71069":{"id":"5:6081:71069","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:791:999":{"id":"0:791:999","crate_id":0,"name":"poll","span":{"filename":"src/upgrade.rs","begin":[213,4],"end":[222,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:13705:138","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14176:4504":{"id":"2:14176:4504","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14177:64215","2:14178:64216","2:14179:64217","2:14180:63057","2:14181:64218","2:14182:64219","2:14183:3485"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:630:4002":{"id":"20:630:4002","crate_id":20,"name":"InvalidHeaderName","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[61,0],"end":[61,28]},"visibility":"public","docs":"A possible error when converting a `HeaderName` from another type.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:2794:4075":{"id":"20:2794:4075","crate_id":20,"name":"USER_AGENT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Contains a string that allows identifying the requesting client's\nsoftware.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::UserAgent),}","value":null,"is_literal":false}},"2:3167:1772":{"id":"2:3167:1772","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3141:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7717:4545":{"id":"1:7717:4545","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7718:64113"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:45:1876":{"id":"34:45:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[25,4],"end":[25,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"D"}}},"34:486:3703":{"id":"34:486:3703","crate_id":34,"name":"boxed_unsync","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[130,4],"end":[132,37]},"visibility":"default","docs":"Turn this body into a boxed trait object that is !Sync.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3078","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:482:1109":{"id":"0:482:1109","crate_id":0,"name":"rt","span":{"filename":"src/rt.rs","begin":[1,0],"end":[12,1]},"visibility":"public","docs":"Runtime components\n\nBy default, hyper includes the [tokio](https://tokio.rs) runtime.\n\nIf the `runtime` feature is disabled, the types in this module can be used\nto plug in other runtimes.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:483:2445"]}},"a:2:3276:1731-0:421:127":{"id":"a:2:3276:1731-0:421:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:433:2253":{"id":"0:433:2253","crate_id":0,"name":"is_connect","span":{"filename":"src/error.rs","begin":[185,4],"end":[187,5]},"visibility":"public","docs":"Returns true if this was an error from `Connect`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:531:2018":{"id":"34:531:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[305,4],"end":[308,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"30:4786:1898":{"id":"30:4786:1898","crate_id":30,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:4787:72519","30:4789:1991","30:4792:1992","30:4795:281","30:4798:6489","30:4801:72521","30:4803:72522","30:4805:6488","30:4806:6490","30:4807:3492","30:4810:6497","30:4813:6498","30:4816:6501","30:4820:3486","30:4822:6495","30:4823:6491","30:4826:6492","30:4830:6493","30:4831:3491","30:4835:6494","30:4836:6499","30:4837:6500","30:4838:72638"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryStream","id":"31:127:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:1150:1743":{"id":"22:1150:1743","crate_id":22,"name":"has_remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,74],"end":[65,81]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Version","name":"Version","id":"20:3283:1587","glob":false}},"22:57:3400":{"id":"22:57:3400","crate_id":22,"name":"get_u32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[433,4],"end":[433,35]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:521:1876":{"id":"34:521:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[257,4],"end":[257,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"22:89":{"id":"22:89","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1021,0],"end":[1021,18]},"visibility":{"restricted":{"parent":"22:7:2883","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["copy_to_slice","get_u16","reader","copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","take","chunks_vectored","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","get_f64_le","chain","get_f32_le","get_int","get_i128_le","get_u128","has_remaining","get_u64_le","get_i32","get_i16_le"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["22:90:1746","22:91:1748","22:92:1751"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:177:127":{"id":"34:177:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[39,4],"end":[39,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2569:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}},"0:344:667":{"id":"0:344:667","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[507,4],"end":[509,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:25:127":{"id":"36:25:127","crate_id":36,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[362,4],"end":[362,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}},"34:489:1876":{"id":"34:489:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[139,4],"end":[139,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"20:2729:4008":{"id":"20:2729:4008","crate_id":20,"name":"ACCEPT_LANGUAGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Advertises which languages the client is able to understand.\n\nThe Accept-Language request HTTP header advertises which languages the\nclient is able to understand, and which locale variant is preferred.\nUsing content negotiation, the server then selects one of the proposals,\nuses it and informs the client of its choice with the Content-Language\nresponse header. Browsers set adequate values for this header according\ntheir user interface language and even if a user can change it, this\nhappens rarely (and is frown upon as it leads to fingerprinting).\n\nThis header is a hint to be used when the server has no way of\ndetermining the language via another way, like a specific URL, that is\ncontrolled by an explicit user decision. It is recommended that the\nserver never overrides an explicit decision. The content of the\nAccept-Language is often out of the control of the user (like when\ntraveling and using an Internet Cafe in a different country); the user\nmay also want to visit a page in another language than the locale of\ntheir user interface.\n\nIf the server cannot serve any matching language, it can theoretically\nsend back a 406 (Not Acceptable) error code. But, for a better user\nexperience, this is rarely done and more common way is to ignore the\nAccept-Language header in this case.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptLanguage),}","value":null,"is_literal":false}},"20:2480:1515":{"id":"20:2480:1515","crate_id":20,"name":"0","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[159,13],"end":[159,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"20:2500:3996","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},"2:3774:3069":{"id":"2:3774:3069","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3174-0:297:1590":{"id":"b:2:3174-0:297:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3144:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3177:127","2:3178:1392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:74:3417":{"id":"22:74:3417","crate_id":22,"name":"get_f64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[776,4],"end":[776,32]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\"[..];\nassert_eq!(1.2f64, buf.get_f64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:179:2018":{"id":"34:179:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[64,4],"end":[67,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3073","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3073","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:338:646":{"id":"0:338:646","crate_id":0,"name":"fmt","span":{"filename":"src/body/body.rs","begin":[441,4],"end":[457,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10210:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10199:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3346:4837":{"id":"2:3346:4837","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:546"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:793":{"id":"0:793","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[225,0],"end":[229,1]},"visibility":{"restricted":{"parent":"0:720:1596","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10250:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:794:646"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5697:4425":{"id":"1:5697:4425","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:65780","1:5699:65781","1:5700:65782","1:5701:65783"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:625:2482":{"id":"0:625:2482","crate_id":0,"name":"make_service_fn","span":{"filename":"src/service/make.rs","begin":[138,0],"end":[144,1]},"visibility":"public","docs":"Create a `MakeService` from a function.\n\n# Example\n\n```\n# #[cfg(feature = \"runtime\")]\n# async fn run() {\nuse std::convert::Infallible;\nuse hyper::{Body, Request, Response, Server};\nuse hyper::server::conn::AddrStream;\nuse hyper::service::{make_service_fn, service_fn};\n\nlet addr = ([127, 0, 0, 1], 3000).into();\n\nlet make_svc = make_service_fn(|socket: &AddrStream| {\n    let remote_addr = socket.remote_addr();\n    async move {\n        Ok::<_, Infallible>(service_fn(move |_: Request<Body>| async move {\n            Ok::<_, Infallible>(\n                Response::new(Body::from(format!(\"Hello, {}!\", remote_addr)))\n            )\n        }))\n    }\n});\n\n// Then bind and serve...\nlet server = Server::bind(&addr)\n    .serve(make_svc);\n\n// Finally, spawn `server` onto an Executor...\nif let Err(e) = server.await {\n    eprintln!(\"server error: {}\", e);\n}\n# }\n# fn main() {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MakeServiceFn","id":"0:931:2536","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Ret","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3484:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Target"}}}],"output":{"kind":"generic","inner":"Ret"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Ret"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"a:2:9218:3200-0:421:127":{"id":"a:2:9218:3200-0:421:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9218:3200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13376:4570":{"id":"2:13376:4570","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15781:2686","crate::ops::Index":"2:3539:4489","`str`":"1:15781:2686"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3164-0:421:127":{"id":"b:2:3164-0:421:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3167:1772"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2748:4027":{"id":"20:2748:4027","crate_id":20,"name":"CONTENT_LENGTH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates the size of the entity-body.\n\nThe header value must be a decimal indicating the number of octets sent\nto the recipient.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentLength),}","value":null,"is_literal":false}},"1:4630:2841":{"id":"1:4630:2841","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4631:6326","1:4632:65619","1:4633:65620","1:4635:2840","1:4636:6328","1:4638:2915","1:4639:5625"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4548:2834","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:4104:1811":{"id":"24:4104:1811","crate_id":24,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4105:3419","24:4107:1820","24:4109:2608","24:4112:1822","24:4119:71410","24:4121:71411","24:4123:71412","24:4125:71413","24:4127:71414","24:4129:71415","24:4131:71416","24:4133:71417","24:4135:71418","24:4137:71419","24:4139:71420","24:4141:71421","24:4143:5460","24:4145:71422","24:4147:47032","24:4149:71423","24:4151:71424","24:4153:71425","24:4155:71426","24:4157:71427","24:4159:71428","24:4161:71429","24:4114:6318","24:4116:2835","24:4118:1766"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:230:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10259:3539":{"id":"2:10259:3539","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10260:646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6607:4424":{"id":"1:6607:4424","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6608:64008","1:6609:9606","1:6610:9607","1:6611:9609","1:6612:9608","1:6613:9610","1:6614:9611","1:6615:9613","1:6616:7343","1:6617:9616","1:6618:9617","1:6619:9618","1:6620:9619","1:6621:9620","1:6622:9621","1:6623:9614","1:6624:9615"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13464:70433":{"id":"2:13464:70433","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12992:3379","prim@char":"1:15775:2681"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,57],"end":[65,67]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::StatusCode","name":"StatusCode","id":"20:3102:1585","glob":false}},"20:2483:1515":{"id":"20:2483:1515","crate_id":20,"name":"0","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[162,11],"end":[162,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"20:2488:3997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},"22:65:3408":{"id":"22:65:3408","crate_id":22,"name":"get_u128_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[593,4],"end":[593,37]},"visibility":"default","docs":"Gets an unsigned 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_u128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10250:109":{"id":"2:10250:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10251:646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1189:3404":{"id":"22:1189:3404","crate_id":22,"name":"get_u64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3168-0:297:1590":{"id":"b:2:3168-0:297:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3170:667"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6785:4411":{"id":"1:6785:4411","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6786:64430"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1619":{"id":"0:0:1619","crate_id":0,"name":"hyper","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"# hyper\n\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n\n## Features\n\n- HTTP/1 and HTTP/2\n- Asynchronous design\n- Leading in performance\n- Tested and **correct**\n- Extensive production use\n- [Client](client/index.html) and [Server](server/index.html) APIs\n\nIf just starting out, **check out the [Guides](https://hyper.rs/guides)\nfirst.**\n\n## \"Low-level\"\n\nhyper is a lower-level HTTP library, meant to be a building block\nfor libraries and applications.\n\nIf looking for just a convenient HTTP client, consider the\n[reqwest](https://crates.io/crates/reqwest) crate.\n\n# Optional Features\n\nhyper uses a set of [feature flags] to reduce the amount of compiled code.\nIt is possible to just enable certain features over others. By default,\nhyper does not enable any features but allows one to enable a subset for\ntheir use case. Below is a list of the available feature flags. You may\nalso notice above each function, struct and trait there is listed one or\nmore feature flags that are required for that item to be used.\n\nIf you are new to hyper it is possible to enable the `full` feature flag\nwhich will enable all public APIs. Beware though that this will pull in\nmany extra dependencies that you may not need.\n\nThe following optional features are available:\n\n- `http1`: Enables HTTP/1 support.\n- `http2`: Enables HTTP/2 support.\n- `client`: Enables the HTTP `client`.\n- `server`: Enables the HTTP `server`.\n- `runtime`: Enables convenient integration with `tokio`, providing\n  connectors and acceptors for TCP, and a default executor.\n- `tcp`: Enables convenient implementations over TCP (using tokio).\n- `stream`: Provides `futures::Stream` capabilities.\n\n[feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section","links":{},"attrs":["#![deny(missing_docs)]","#![deny(missing_debug_implementations)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:202:1589","0:475:1593","0:482:1109","0:486:1595","0:720:1596","20:5:1581","20:3009:1582","20:1361:1583","20:1494:1584","20:3102:1585","20:3227:1586","20:3283:1587","0:28","0:297:1590","0:421:127","0:418:195"]}},"20:2781:4060":{"id":"20:2781:4060","crate_id":20,"name":"REFRESH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Informs the web browser that the current page or frame should be\nrefreshed.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Refresh),}","value":null,"is_literal":false}},"2:3148:216":{"id":"2:3148:216","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150:127","2:3151:1391"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:530:2010":{"id":"34:530:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[293,4],"end":[296,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:400:1751":{"id":"22:400:1751","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[19,4],"end":[19,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2841-0:770:2596":{"id":"b:2:2841-0:770:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2835:3081","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2843:63957"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3397:4759":{"id":"2:3397:4759","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3399:345"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:53:3396":{"id":"22:53:3396","crate_id":22,"name":"get_u16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[353,4],"end":[353,35]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x09\\x08 hello\"[..];\nassert_eq!(0x0809, buf.get_u16_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:336":{"id":"22:336","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[132,0],"end":[132,28]},"visibility":{"restricted":{"parent":"22:316:1766","path":"::buf::take"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["copy_to_slice","get_u16","reader","copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","take","chunks_vectored","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","get_f64_le","chain","get_f32_le","get_int","get_i128_le","get_u128","has_remaining","get_u64_le","get_i32","get_i16_le"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Take","id":"22:1261:2843","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["22:338:1746","22:339:1748","22:340:1751","22:341:1759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:780:1806":{"id":"0:780:1806","crate_id":0,"name":"poll_write","span":{"filename":"src/upgrade.rs","begin":[162,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3962:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:511":{"id":"34:511","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[223,0],"end":[223,39]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1361:1583","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"items":["34:513:1876","34:514:127","34:515:2010","34:516:2018","34:517:1994","34:518:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13370:2015":{"id":"2:13370:2015","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47347:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10892:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10892:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:768:2593":{"id":"0:768:2593","crate_id":0,"name":"Upgraded","span":{"filename":"src/upgrade.rs","begin":[65,0],"end":[67,1]},"visibility":"public","docs":"An upgraded HTTP connection.\n\nThis type holds a trait object internally of the original IO that\nwas used to speak HTTP before the upgrade. It can be used directly\nas a `Read` or `Write` for convenience.\n\nAlternatively, if the exact type is known, this can be deconstructed\ninto its parts.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:774","a:2:3276:1731-0:768:2593","a:2:9217:3201-0:768:2593","a:2:3235:200-0:768:2593","a:2:3247:209-0:768:2593","a:2:9218:3200-0:768:2593","b:2:3164-0:768:2593","b:2:2838-0:768:2593","b:2:3964-0:768:2593","b:2:3179-0:768:2593","b:2:3174-0:768:2593","b:2:2841-0:768:2593","b:2:3168-0:768:2593","b:24:2649-0:768:2593","b:24:2497-0:768:2593","0:777","0:779","0:785"]}},"2:3070:4741":{"id":"2:3070:4741","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3069:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13011:4785":{"id":"2:13011:4785","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13013:4804","2:13014:907","2:13015:69674","2:13016:69675"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13481:4470":{"id":"2:13481:4470","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15775:2681"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49619:4471","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:430:2248":{"id":"0:430:2248","crate_id":0,"name":"is_user","span":{"filename":"src/error.rs","begin":[170,4],"end":[172,5]},"visibility":"public","docs":"Returns true if this error was caused by user code.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:30:237-0:770:2596":{"id":"b:30:237-0:770:2596","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.21/src/future/future/mod.rs","begin":[119,0],"end":[119,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["map","flatten","left_future","boxed_local","poll_unpin","inspect","never_error","flatten_stream","map_into","then","boxed","fuse","into_stream","right_future","unit_error","now_or_never"],"trait":{"kind":"resolved_path","inner":{"name":"FutureExt","id":"30:239:2972","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[19,0],"end":[19,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"http_body::Body","name":"HttpBody","id":"34:470:1590","glob":false}},"34:180:1994":{"id":"34:180:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[78,4],"end":[78,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3174-0:421:127":{"id":"b:2:3174-0:421:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3144:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3177:127","2:3178:1392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:516:2018":{"id":"34:516:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[237,4],"end":[240,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1361:1583","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1361:1583","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:17:138":{"id":"36:17:138","crate_id":36,"name":"Future","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[319,4],"end":[319,69]},"visibility":"default","docs":"The future response value.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"rhs":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Response","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"34:470:1590":{"id":"34:470:1590","crate_id":34,"name":"HttpBody","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["34:471:1876","34:472:127","34:473:2010","34:474:2018","34:475:1994","34:476:2023","34:477:1892","34:478:2051","34:479:3702","34:482:1992","34:485:2750","34:486:3703"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2801:4080":{"id":"20:2801:4080","crate_id":20,"name":"X_CONTENT_TYPE_OPTIONS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Marker used by the server to indicate that the MIME types advertised in\nthe `content-type` headers should not be changed and be followed.\n\nThis allows to opt-out of MIME type sniffing, or, in other words, it is\na way to say that the webmasters knew what they were doing.\n\nThis header was introduced by Microsoft in IE 8 as a way for webmasters\nto block content sniffing that was happening and could transform\nnon-executable MIME types into executable MIME types. Since then, other\nbrowsers have introduced it, even if their MIME sniffing algorithms were\nless aggressive.\n\nSite security testers usually expect this header to be set.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XContentTypeOptions),}","value":null,"is_literal":false}},"22:1186:3401":{"id":"22:1186:3401","crate_id":22,"name":"get_i32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:230:1788":{"id":"24:230:1788","crate_id":24,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:231:1799"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2764:4043":{"id":"20:2764:4043","crate_id":20,"name":"IF_MODIFIED_SINCE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Makes a request conditional based on the modification date.\n\nThe If-Modified-Since request HTTP header makes the request conditional:\nthe server will send back the requested resource, with a 200 status,\nonly if it has been last modified after the given date. If the request\nhas not been modified since, the response will be a 304 without any\nbody; the Last-Modified header will contain the date of last\nmodification. Unlike If-Unmodified-Since, If-Modified-Since can only be\nused with a GET or HEAD.\n\nWhen used in combination with If-None-Match, it is ignored, unless the\nserver doesn't support If-None-Match.\n\nThe most common use case is to update a cached entity that has no\nassociated ETag.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfModifiedSince),}","value":null,"is_literal":false}},"20:2734:4013":{"id":"20:2734:4013","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_ORIGIN","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates whether the response can be shared with resources with the\ngiven origin.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlAllowOrigin),}","value":null,"is_literal":false}},"20:2741:4020":{"id":"20:2741:4020","crate_id":20,"name":"ALT_SVC","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Advertises the availability of alternate services to clients.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AltSvc),}","value":null,"is_literal":false}},"2:3702:4743":{"id":"2:3702:4743","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3704:66441"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:515:2010":{"id":"34:515:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[227,4],"end":[230,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1361:1583","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1361:1583","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Request","id":"20:1361:1583","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1190:3405":{"id":"22:1190:3405","crate_id":22,"name":"get_i64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2789:4068":{"id":"20:2789:4068","crate_id":20,"name":"SET_COOKIE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Used to send cookies from the server to the user agent.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SetCookie),}","value":null,"is_literal":false}},"20:2453:3992":{"id":"20:2453:3992","crate_id":20,"name":"Drain","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[136,0],"end":[136,23]},"visibility":"public","docs":"A drain iterator for `HeaderMap`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:229":{"id":"22:229","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[132,0],"end":[132,30]},"visibility":{"restricted":{"parent":"22:199:3419","path":"::buf::chain"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["copy_to_slice","get_u16","reader","copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","take","chunks_vectored","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","get_f64_le","chain","get_f32_le","get_int","get_i128_le","get_u128","has_remaining","get_u64_le","get_i32","get_i16_le"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Chain","id":"22:1233:2842","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"items":["22:232:1746","22:233:1748","22:234:1751","22:235:1754","22:237:1759"],"negative":false,"synthetic":false,"blanket_impl":null}},"23:37:6242":{"id":"23:37:6242","crate_id":23,"name":"Integer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"23:39:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2841-0:939:2600":{"id":"b:2:2841-0:939:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2835:3081","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2843:63957"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:777":{"id":"0:777","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[151,0],"end":[159,1]},"visibility":{"restricted":{"parent":"0:720:1596","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:230:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:778:1799"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10261:3540":{"id":"2:10261:3540","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10262:646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:176:1876":{"id":"34:176:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[38,4],"end":[38,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"2:13377:70417":{"id":"2:13377:70417","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15781:2686","crate::ops::IndexMut":"2:3543:4906","str::slice_unchecked":"1:15781:2686"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3964-0:312:1843":{"id":"b:2:3964-0:312:1843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3962:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3966:1405"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:786:646":{"id":"0:786:646","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[192,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10210:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10199:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2838-0:297:1590":{"id":"b:2:2838-0:297:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2840:1893"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3213:115":{"id":"2:3213:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3214:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:369:2059":{"id":"0:369:2059","crate_id":0,"name":"try_send_data","span":{"filename":"src/body/body.rs","begin":[598,4],"end":[602,5]},"visibility":"public","docs":"Try to send data on this channel.\n\n# Errors\n\nReturns `Err(Bytes)` if the channel could not (currently) accept\nanother `Bytes`.\n\n# Note\n\nThis is mostly useful for when trying to send from some other thread\nthat doesn't have an async context. If in an async context, prefer\n`send_data()` instead.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["chunk",{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2800:4079":{"id":"20:2800:4079","crate_id":20,"name":"WWW_AUTHENTICATE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Defines the authentication method that should be used to gain access to\na resource.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::WwwAuthenticate),}","value":null,"is_literal":false}},"34:291:2010":{"id":"34:291:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[104,4],"end":[107,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3078","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3078","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3078","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2795:4073":{"id":"20:2795:4073","crate_id":20,"name":"UPGRADE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Used as part of the exchange to upgrade the protocol.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Upgrade),}","value":null,"is_literal":false}},"2:3183:1391":{"id":"2:3183:1391","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:434:2255":{"id":"0:434:2255","crate_id":0,"name":"is_incomplete_message","span":{"filename":"src/error.rs","begin":[190,4],"end":[192,5]},"visibility":"public","docs":"Returns true if the connection closed before a message could complete.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2745:4024":{"id":"20:2745:4024","crate_id":20,"name":"CONTENT_DISPOSITION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates if the content is expected to be displayed inline.\n\nIn a regular HTTP response, the Content-Disposition response header is a\nheader indicating if the content is expected to be displayed inline in\nthe browser, that is, as a Web page or as part of a Web page, or as an\nattachment, that is downloaded and saved locally.\n\nIn a multipart/form-data body, the HTTP Content-Disposition general\nheader is a header that can be used on the subpart of a multipart body\nto give information about the field it applies to. The subpart is\ndelimited by the boundary defined in the Content-Type header. Used on\nthe body itself, Content-Disposition has no effect.\n\nThe Content-Disposition header is defined in the larger context of MIME\nmessages for e-mail, but only a subset of the possible parameters apply\nto HTTP forms and POST requests. Only the value form-data, as well as\nthe optional directive name and filename, can be used in the HTTP\ncontext.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentDisposition),}","value":null,"is_literal":false}},"a:2:9217:3201-0:770:2596":{"id":"a:2:9217:3201-0:770:2596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9217:3201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:942:2608":{"id":"0:942:2608","crate_id":0,"name":"read_buf","span":{"filename":"src/upgrade.rs","begin":[92,4],"end":[92,23]},"visibility":"public","docs":"A buffer of bytes that have been read but not processed as HTTP.\n\nFor instance, if the `Connection` is used for an HTTP upgrade request,\nit is possible the server sent back the first bytes of the new protocol\nalong with the response upgrade.\n\nYou will want to check for any existing bytes if you plan to continue\ncommunicating on the IO object.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"20:2732:4011":{"id":"20:2732:4011","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_HEADERS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Preflight response indicating permitted HTTP headers.\n\nThe Access-Control-Allow-Headers response header is used in response to\na preflight request to indicate which HTTP headers will be available via\nAccess-Control-Expose-Headers when making the actual request.\n\nThe simple headers, Accept, Accept-Language, Content-Language,\nContent-Type (but only with a MIME type of its parsed value (ignoring\nparameters) of either application/x-www-form-urlencoded,\nmultipart/form-data, or text/plain), are always available and don't need\nto be listed by this header.\n\nThis header is required if the request has an\nAccess-Control-Request-Headers header.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlAllowHeaders),}","value":null,"is_literal":false}},"5:6078:2846":{"id":"5:6078:2846","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:97:1751":{"id":"22:97:1751","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1062,4],"end":[1062,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:495":{"id":"34:495","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[165,0],"end":[165,23]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3467:2847","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3454:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["34:497:1876","34:498:127","34:499:2010","34:500:2018","34:501:1994","34:502:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:562:1748":{"id":"22:562:1748","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[533,4],"end":[533,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:20":{"id":"36:20","crate_id":36,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[357,0],"end":[357,51]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Request","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"S"}}},"items":["36:24:1584","36:25:127","36:26:138","36:27:2040","36:28:364"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3179-0:312:1843":{"id":"b:2:3179-0:312:1843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13385:5625":{"id":"2:13385:5625","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49565:2845","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6077:71068":{"id":"5:6077:71068","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2737:4016":{"id":"20:2737:4016","crate_id":20,"name":"ACCESS_CONTROL_REQUEST_HEADERS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Informs the server which HTTP headers will be used when an actual\nrequest is made.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner:\n        Repr::Standard(StandardHeader::AccessControlRequestHeaders),}","value":null,"is_literal":false}},"b:2:2838-0:312:1843":{"id":"b:2:2838-0:312:1843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2840:1893"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"24:4163:2925":{"id":"24:4163:2925","crate_id":24,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4164:2916","24:4165:1786","24:4166:65160"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"24:269:2918","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2791:4070":{"id":"20:2791:4070","crate_id":20,"name":"TE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Informs the server of transfer encodings willing to be accepted as part\nof the response.\n\nSee also the Transfer-Encoding response header for more details on\ntransfer encodings. Note that chunked is always acceptable for HTTP/1.1\nrecipients and you that don't have to specify \"chunked\" using the TE\nheader. However, it is useful for setting if the client is accepting\ntrailer fields in a chunked transfer coding using the \"trailers\" value.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Te),}","value":null,"is_literal":false}},"34:510:2023":{"id":"34:510:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[218,4],"end":[218,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:24:2497-0:768:2593":{"id":"b:24:2497-0:768:2593","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.19.2/src/io/util/async_read_ext.rs","begin":[1294,0],"end":[1294,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:230:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["read_u64_le","read_f64","read_u128","read_i32","read_u16","read_to_end","read","read_to_string","read_f32_le","read_i64_le","read_i16_le","read_i128","read_u64","read_i16","read_u8","read_u32_le","take","read_u16_le","read_f64_le","read_u128_le","read_i32_le","read_f32","read_i64","read_u32","read_i8","read_buf","read_exact","chain","read_i128_le"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncReadExt","id":"24:4104:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"R"}}},"20:2783:4062":{"id":"20:2783:4062","crate_id":20,"name":"SEC_WEBSOCKET_ACCEPT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"The |Sec-WebSocket-Accept| header field is used in the WebSocket\nopening handshake. It is sent from the server to the client to\nconfirm that the server is willing to initiate the WebSocket\nconnection.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketAccept),}","value":null,"is_literal":false}},"20:2410:3865":{"id":"20:2410:3865","crate_id":20,"name":"IterMut","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[93,0],"end":[93,25]},"visibility":"public","docs":"`HeaderMap` mutable entry iterator\n\nYields `(&HeaderName, &mut value)` tuples. The same header name may be\nyielded more than once if it has more than one associated value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:339:1748":{"id":"22:339:1748","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[137,4],"end":[137,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2500:3996":{"id":"20:2500:3996","crate_id":20,"name":"OccupiedEntry","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[181,0],"end":[181,31]},"visibility":"public","docs":"A view into a single occupied location in a `HeaderMap`.\n\nThis struct is returned as part of the `Entry` enum.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:505:1876":{"id":"34:505:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[197,4],"end":[197,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"2:3962:68":{"id":"2:3962:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3963:1405"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"20:2649:2344":{"id":"20:2649:2344","crate_id":20,"name":"HeaderName","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[33,0],"end":[33,21]},"visibility":"public","docs":"Represents an HTTP header field name\n\nHeader field names identify the header. Header sets may include multiple\nheaders with the same name. The HTTP specification defines a number of\nstandard headers, but HTTP messages may include non-standard header names as\nwell as long as they adhere to the specification.\n\n`HeaderName` is used as the [`HeaderMap`] key. Constants are available for\nall standard header names in the [`header`] module.\n\n# Representation\n\n`HeaderName` represents standard header names using an `enum`, as such they\nwill not require an allocation for storage. All custom header names are\nlower cased upon conversion to a `HeaderName` value. This avoids the\noverhead of dynamically doing lower case conversion during the hash code\ncomputation and the comparison operation.\n\n[`HeaderMap`]: struct.HeaderMap.html\n[`header`]: index.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:1196:1759":{"id":"22:1196:1759","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1191:3406":{"id":"22:1191:3406","crate_id":22,"name":"get_i64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3303:3079":{"id":"2:3303:3079","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3305:171","2:3306:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:62:3405":{"id":"22:62:3405","crate_id":22,"name":"get_i64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[533,4],"end":[533,32]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3318:4825":{"id":"2:3318:4825","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:171","2:3321:545"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:335:2023":{"id":"0:335:2023","crate_id":0,"name":"size_hint","span":{"filename":"src/body/body.rs","begin":[413,4],"end":[437,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1145:1746":{"id":"22:1145:1746","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1152:3393":{"id":"22:1152:3393","crate_id":22,"name":"get_u8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:342:2018":{"id":"34:342:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[72,4],"end":[75,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3076","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3076","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:474:2018":{"id":"34:474:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[62,4],"end":[65,54]},"visibility":"default","docs":"Poll for an optional **single** `HeaderMap` of trailers.\n\nThis function should only be called once `poll_data` returns `None`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9218:3200-0:768:2593":{"id":"a:2:9218:3200-0:768:2593","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9218:3200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3182:127":{"id":"2:3182:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38660:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"20:2767:4046":{"id":"20:2767:4046","crate_id":20,"name":"IF_UNMODIFIED_SINCE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Makes the request conditional based on the last modification date.\n\nThe If-Unmodified-Since request HTTP header makes the request\nconditional: the server will send back the requested resource, or accept\nit in the case of a POST or another non-safe method, only if it has not\nbeen last modified after the given date. If the request has been\nmodified after the given date, the response will be a 412 (Precondition\nFailed) error.\n\nThere are two common use cases:\n\n* In conjunction non-safe methods, like POST, it can be used to\nimplement an optimistic concurrency control, like done by some wikis:\neditions are rejected if the stored document has been modified since the\noriginal has been retrieved.\n\n* In conjunction with a range request with a If-Range header, it can be\nused to ensure that the new fragment requested comes from an unmodified\ndocument.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfUnmodifiedSince),}","value":null,"is_literal":false}},"34:513:1876":{"id":"34:513:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[224,4],"end":[224,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"2:13383:34445":{"id":"2:13383:34445","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15781:2686"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49585:5120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:341:2010":{"id":"34:341:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[59,4],"end":[62,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3076","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3076","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3076","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:69:3412":{"id":"22:69:3412","crate_id":22,"name":"get_uint_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[673,4],"end":[673,51]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_uint_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23648:4757":{"id":"2:23648:4757","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23649:4931"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23644:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3245:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:532:1994":{"id":"34:532:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[312,4],"end":[312,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1149:1751":{"id":"22:1149:1751","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2841-0:297:1590":{"id":"b:2:2841-0:297:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2835:3081","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2843:63957"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13451:70430":{"id":"2:13451:70430","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1156:3397":{"id":"22:1156:3397","crate_id":22,"name":"get_i16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3235:200-0:297:1590":{"id":"a:2:3235:200-0:297:1590","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3168-0:939:2600":{"id":"b:2:3168-0:939:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3170:667"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:389:2023":{"id":"34:389:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[82,4],"end":[82,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:178:2010":{"id":"34:178:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[41,4],"end":[44,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3073","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3073","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3073","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:68:3411":{"id":"22:68:3411","crate_id":22,"name":"get_uint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[653,4],"end":[653,48]},"visibility":"default","docs":"Gets an unsigned n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_uint(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13432:2241":{"id":"2:13432:2241","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15775:2681","self::pattern":"2:12992:3379","str::matches":"1:15781:2686","`DoubleEndedIterator`":"2:8406:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49515:5117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:340:667":{"id":"0:340:667","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[489,4],"end":[495,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["chunk",{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:784:1810":{"id":"0:784:1810","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/upgrade.rs","begin":[186,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[529,0],"end":[534,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:350:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13475:5287":{"id":"2:13475:5287","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:309:1789":{"id":"24:309:1789","crate_id":24,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:310:1806","24:311:1808","24:312:1809","24:313:1807","24:316:1810"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:328:59":{"id":"0:328:59","crate_id":0,"name":"default","span":{"filename":"src/body/body.rs","begin":[354,4],"end":[356,5]},"visibility":"default","docs":"Returns `Body::empty()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2755:4034":{"id":"20:2755:4034","crate_id":20,"name":"DNT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates the client's tracking preference.\n\nThis header lets users indicate whether they would prefer privacy rather\nthan personalized content.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Dnt),}","value":null,"is_literal":false}},"34:471:1876":{"id":"34:471:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[48,4],"end":[48,18]},"visibility":"default","docs":"Values yielded by the `Body`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"20:2782:4061":{"id":"20:2782:4061","crate_id":20,"name":"RETRY_AFTER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"The Retry-After response HTTP header indicates how long the user agent\nshould wait before making a follow-up request. There are two main cases\nthis header is used:\n\n* When sent with a 503 (Service Unavailable) response, it indicates how\nlong the service is expected to be unavailable.\n\n* When sent with a redirect response, such as 301 (Moved Permanently),\nit indicates the minimum time that the user agent is asked to wait\nbefore issuing the redirected request.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::RetryAfter),}","value":null,"is_literal":false}},"20:2510:2369":{"id":"20:2510:2369","crate_id":20,"name":"ValueIter","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[189,0],"end":[189,27]},"visibility":"public","docs":"An iterator of all values associated with a single header name.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:10263:3541":{"id":"2:10263:3541","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10264:646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2744:4023":{"id":"20:2744:4023","crate_id":20,"name":"CONNECTION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Controls whether or not the network connection stays open after the\ncurrent transaction finishes.\n\nIf the value sent is keep-alive, the connection is persistent and not\nclosed, allowing for subsequent requests to the same server to be done.\n\nExcept for the standard hop-by-hop headers (Keep-Alive,\nTransfer-Encoding, TE, Connection, Trailer, Upgrade, Proxy-Authorization\nand Proxy-Authenticate), any hop-by-hop headers used by the message must\nbe listed in the Connection header, so that the first proxy knows he has\nto consume them and not to forward them further. Standard hop-by-hop\nheaders can be listed too (it is often the case of Keep-Alive, but this\nis not mandatory.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Connection),}","value":null,"is_literal":false}},"34:268:2010":{"id":"34:268:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[45,4],"end":[48,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3075","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3075","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3075","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:294:2023":{"id":"34:294:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[122,4],"end":[122,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3393:4773":{"id":"2:3393:4773","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3395:342"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9259:4447":{"id":"1:9259:4447","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9260:64094","1:9261:64095","1:9262:64096","1:9263:64097","1:9264:5145","1:9265:41642","1:9266:64093"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10481:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:54:3397":{"id":"22:54:3397","crate_id":22,"name":"get_i16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[373,4],"end":[373,32]},"visibility":"default","docs":"Gets a signed 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_i16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5719:4429":{"id":"1:5719:4429","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5720:6356"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:52:3395":{"id":"22:52:3395","crate_id":22,"name":"get_u16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[333,4],"end":[333,32]},"visibility":"default","docs":"Gets an unsigned 16 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 2.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09 hello\"[..];\nassert_eq!(0x0809, buf.get_u16());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3964-0:421:127":{"id":"b:2:3964-0:421:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3962:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3966:1405"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2765:4044":{"id":"20:2765:4044","crate_id":20,"name":"IF_NONE_MATCH","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Makes a request conditional based on the E-Tag.\n\nThe If-None-Match HTTP request header makes the request conditional. For\nGET and HEAD methods, the server will send back the requested resource,\nwith a 200 status, only if it doesn't have an ETag matching the given\nones. For other methods, the request will be processed only if the\neventually existing resource's ETag doesn't match any of the values\nlisted.\n\nWhen the condition fails for GET and HEAD methods, then the server must\nreturn HTTP status code 304 (Not Modified). For methods that apply\nserver-side changes, the status code 412 (Precondition Failed) is used.\nNote that the server generating a 304 response MUST generate any of the\nfollowing header fields that would have been sent in a 200 (OK) response\nto the same request: Cache-Control, Content-Location, Date, ETag,\nExpires, and Vary.\n\nThe comparison with the stored ETag uses the weak comparison algorithm,\nmeaning two files are considered identical not only if they are\nidentical byte to byte, but if the content is equivalent. For example,\ntwo pages that would differ only by the date of generation in the footer\nwould be considered as identical.\n\nWhen used in combination with If-Modified-Since, it has precedence (if\nthe server supports it).\n\nThere are two common use cases:\n\n* For `GET` and `HEAD` methods, to update a cached entity that has an associated ETag.\n* For other methods, and in particular for `PUT`, `If-None-Match` used with\nthe `*` value can be used to save a file not known to exist,\nguaranteeing that another upload didn't happen before, losing the data\nof the previous put; this problems is the variation of the lost update\nproblem.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::IfNoneMatch),}","value":null,"is_literal":false}},"22:1173:1754":{"id":"22:1173:1754","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10984:1733","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:497:1876":{"id":"34:497:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[170,4],"end":[170,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3454:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"22:95:1746":{"id":"22:95:1746","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1040,4],"end":[1040,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3401:4776":{"id":"2:3401:4776","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3964-0:768:2593":{"id":"b:2:3964-0:768:2593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3962:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3966:1405"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6709:4442":{"id":"1:6709:4442","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6710:64007","1:6711:65798"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10481:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2838-0:770:2596":{"id":"b:2:2838-0:770:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2840:1893"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:48:1743":{"id":"22:48:1743","crate_id":22,"name":"has_remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[225,4],"end":[225,35]},"visibility":"default","docs":"Returns true if there are any more bytes to consume\n\nThis is equivalent to `self.remaining() != 0`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"a\"[..];\n\nassert!(buf.has_remaining());\n\nbuf.get_u8();\n\nassert!(!buf.has_remaining());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:58:3401":{"id":"22:58:3401","crate_id":22,"name":"get_i32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[453,4],"end":[453,32]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:70:3413":{"id":"22:70:3413","crate_id":22,"name":"get_int","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[693,4],"end":[693,47]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in big-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03 hello\"[..];\nassert_eq!(0x010203, buf.get_int(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3247:209-0:939:2600":{"id":"a:2:3247:209-0:939:2600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2835:3081":{"id":"2:2835:3081","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2837:63957"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:477:1892":{"id":"34:477:1892","crate_id":34,"name":"data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[87,4],"end":[89,28]},"visibility":"default","docs":"Returns future that resolves to next data chunk, if any.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Data","id":"34:624:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:517:1994":{"id":"34:517:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[247,4],"end":[247,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3247:209-0:312:1843":{"id":"a:2:3247:209-0:312:1843","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:202:1589":{"id":"0:202:1589","crate_id":0,"name":"body","span":{"filename":"src/body/mod.rs","begin":[1,0],"end":[65,1]},"visibility":"public","docs":"Streaming bodies for Requests and Responses\n\nFor both [Clients](crate::client) and [Servers](crate::server), requests and\nresponses use streaming bodies, instead of complete buffering. This\nallows applications to not use memory they don't need, and allows exerting\nback-pressure on connections by only reading when asked.\n\nThere are two pieces to this in hyper:\n\n- **The [`HttpBody`](HttpBody) trait** describes all possible bodies.\n  hyper allows any body type that implements `HttpBody`, allowing\n  applications to have fine-grained control over their streaming.\n- **The [`Body`](Body) concrete type**, which is an implementation of\n  `HttpBody`, and returned by hyper as a \"receive stream\" (so, for server\n  requests and client responses). It is also a decent default implementation\n  if you don't have very custom needs of your send streams.","links":{"Body":"0:297:1590","HttpBody":"34:470:1590"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["22:42:1734","22:526:1736","34:470:1867","34:642:1868","0:242:1869","0:297:1590","0:312:1843","0:402:1872"]}},"22:61:3404":{"id":"22:61:3404","crate_id":22,"name":"get_u64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[513,4],"end":[513,35]},"visibility":"default","docs":"Gets an unsigned 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_u64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:485:2448":{"id":"0:485:2448","crate_id":0,"name":"execute","span":{"filename":"src/rt.rs","begin":[11,4],"end":[11,32]},"visibility":"default","docs":"Place the future into the executor to be run.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fut",{"kind":"generic","inner":"Fut"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"30:506:2974":{"id":"30:506:2974","crate_id":30,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:507:1991","30:510:72518","30:514:1992","30:517:72519","30:519:72520","30:521:281","30:524:6489","30:527:72521","30:529:72522","30:531:6493","30:532:72523","30:533:1798","30:535:752","30:536:72524"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"31:44:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:384:1876":{"id":"34:384:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[54,4],"end":[54,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"0:454:646":{"id":"0:454:646","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[504,4],"end":[510,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10210:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10199:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2738:4017":{"id":"20:2738:4017","crate_id":20,"name":"ACCESS_CONTROL_REQUEST_METHOD","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Informs the server know which HTTP method will be used when the actual\nrequest is made.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AccessControlRequestMethod),}","value":null,"is_literal":false}},"2:12439:5280":{"id":"2:12439:5280","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12440:1929","2:12441:62873"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"36:27:2040":{"id":"36:27:2040","crate_id":36,"name":"poll_ready","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[365,4],"end":[365,80]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:500:2018":{"id":"34:500:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[180,4],"end":[183,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2751:4030":{"id":"20:2751:4030","crate_id":20,"name":"CONTENT_SECURITY_POLICY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Allows controlling resources the user agent is allowed to load for a\ngiven page.\n\nWith a few exceptions, policies mostly involve specifying server origins\nand script endpoints. This helps guard against cross-site scripting\nattacks (XSS).","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentSecurityPolicy),}","value":null,"is_literal":false}},"0:783:1809":{"id":"0:783:1809","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/upgrade.rs","begin":[182,4],"end":[184,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3962:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2989:4004":{"id":"20:2989:4004","crate_id":20,"name":"ToStrError","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/value.rs","begin":[37,0],"end":[37,21]},"visibility":"public","docs":"A possible error when converting a `HeaderValue` to a string representation.\n\nHeader field values may contain opaque bytes, in which case it is not\npossible to represent the value as a string.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:10533:4487":{"id":"2:10533:4487","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10534:146","2:10535:35712","2:10536:65129"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:361:2047":{"id":"0:361:2047","crate_id":0,"name":"send_data","span":{"filename":"src/body/body.rs","begin":[570,4],"end":[575,5]},"visibility":"public","docs":"Send data on data channel when it is ready.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["chunk",{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::Result","id":"0:418:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":true,"abi":"Rust"},"has_body":true}},"31:54:63967":{"id":"31:54:63967","crate_id":31,"name":"try_poll","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.21/src/future.rs","begin":[81,4],"end":[81,81]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"F"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4908:4452":{"id":"1:4908:4452","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4909:3864","1:4910:64782"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13435:70423":{"id":"2:13435:70423","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12992:3379","`DoubleEndedIterator`":"2:8406:120","str::matches":"1:15781:2686","prim@char":"1:15775:2681"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49533:5118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3372:4501":{"id":"2:3372:4501","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:171","2:3375:344"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3355:4760":{"id":"2:3355:4760","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3356:171","2:3357:938"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13017:4782":{"id":"2:13017:4782","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13019:3454","2:13020:69309","2:13021:69310"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13011:4785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3247:209-0:297:1590":{"id":"a:2:3247:209-0:297:1590","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:794:646":{"id":"0:794:646","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[226,4],"end":[228,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10210:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10199:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:583":{"id":"20:583","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[3449,4],"end":[3449,32]},"visibility":{"restricted":{"parent":"20:526:6172","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543:3991","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3308:4502":{"id":"2:3308:4502","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:171","2:3311:1333"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:591":{"id":"20:591","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[3467,4],"end":[3467,40]},"visibility":{"restricted":{"parent":"20:526:6172","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543:3991","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3276:1731":{"id":"2:3276:1731","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1164:3405":{"id":"22:1164:3405","crate_id":22,"name":"get_i64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7886:4843":{"id":"2:7886:4843","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7887:69719","2:7888:69720","2:7889:69717","2:7890:69715","2:7891:69721","2:7892:69718","2:7893:69716"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9218:3200-0:770:2596":{"id":"a:2:9218:3200-0:770:2596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9218:3200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"22:1154:3395":{"id":"22:1154:3395","crate_id":22,"name":"get_u16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/body/mod.rs","begin":[18,16],"end":[18,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"bytes::Buf","name":"Buf","id":"22:42:1734","glob":false}},"22:1147:1754":{"id":"22:1147:1754","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10984:1733","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:436:2258":{"id":"0:436:2258","crate_id":0,"name":"is_timeout","span":{"filename":"src/error.rs","begin":[200,4],"end":[202,5]},"visibility":"public","docs":"Returns true if the error was caused by a timeout.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:6406-0:421:127":{"id":"b:5:6406-0:421:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10257:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6408:3515"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:789":{"id":"0:789","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[210,0],"end":[223,1]},"visibility":{"restricted":{"parent":"0:720:1596","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:790:171","0:791:999"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2841-0:768:2593":{"id":"b:2:2841-0:768:2593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2835:3081","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2843:63957"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:72:3415":{"id":"22:72:3415","crate_id":22,"name":"get_f32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[734,4],"end":[734,32]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];\nassert_eq!(1.2f32, buf.get_f32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:4094:2924":{"id":"24:4094:2924","crate_id":24,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4095:2840","24:4097:6328","24:4099:2915","24:4100:6326","24:4101:65619","24:4102:5625"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"24:188:2917","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:473:2010":{"id":"34:473:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[54,4],"end":[57,55]},"visibility":"default","docs":"Attempt to pull out the next data buffer of this stream.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[503,0],"end":[511,1]},"visibility":{"restricted":{"parent":"0:411:1591","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10257:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:454:646"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:782:1808":{"id":"0:782:1808","crate_id":0,"name":"poll_flush","span":{"filename":"src/upgrade.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3962:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6096:71071":{"id":"5:6096:71071","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3334:3080":{"id":"2:3334:3080","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13414:70419":{"id":"2:13414:70419","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12992:3379","`DoubleEndedIterator`":"2:8406:120","str::split":"1:15781:2686","str::rsplit_terminator":"1:15781:2686","prim@char":"1:15775:2681"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49361:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:506:127":{"id":"34:506:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[198,4],"end":[198,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"20:2488:3997":{"id":"20:2488:3997","crate_id":20,"name":"VacantEntry","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[169,0],"end":[169,29]},"visibility":"public","docs":"A view into a single empty location in a `HeaderMap`.\n\nThis struct is returned as part of the `Entry` enum.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:2777:4056":{"id":"20:2777:4056","crate_id":20,"name":"PUBLIC_KEY_PINS_REPORT_ONLY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Sends reports of pinning violation to the report-uri specified in the\nheader.\n\nUnlike `Public-Key-Pins`, this header still allows browsers to connect\nto the server if the pinning is violated.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::PublicKeyPinsReportOnly),}","value":null,"is_literal":false}},"2:2933:174":{"id":"2:2933:174","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2935:983","2:2936:811","2:2937:777","2:2938:699","2:2939:682"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2478:4084":{"id":"20:2478:4084","crate_id":20,"name":"Occupied","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[159,4],"end":[159,12]},"visibility":"default","docs":"An occupied entry","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"20:2500:3996","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}]}},"2:3543:4906":{"id":"2:3543:4906","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3545:739"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3539:4489","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:46:127":{"id":"34:46:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[26,4],"end":[26,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38660:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"b:2:3164-0:939:2600":{"id":"b:2:3164-0:939:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3167:1772"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:2784:4063":{"id":"20:2784:4063","crate_id":20,"name":"SEC_WEBSOCKET_EXTENSIONS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"The |Sec-WebSocket-Extensions| header field is used in the WebSocket\nopening handshake. It is initially sent from the client to the\nserver, and then subsequently sent from the server to the client, to\nagree on a set of protocol-level extensions to use for the duration\nof the connection.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketExtensions),}","value":null,"is_literal":false}},"22:1177:3392":{"id":"22:1177:3392","crate_id":22,"name":"copy_to_slice","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2521:3999":{"id":"20:2521:3999","crate_id":20,"name":"ValueIterMut","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[198,0],"end":[198,30]},"visibility":"public","docs":"A mutable iterator of all values associated with a single header name.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:2752:4031":{"id":"20:2752:4031","crate_id":20,"name":"CONTENT_SECURITY_POLICY_REPORT_ONLY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Allows experimenting with policies by monitoring their effects.\n\nThe HTTP Content-Security-Policy-Report-Only response header allows web\ndevelopers to experiment with policies by monitoring (but not enforcing)\ntheir effects. These violation reports consist of JSON documents sent\nvia an HTTP POST request to the specified URI.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner:\n        Repr::Standard(StandardHeader::ContentSecurityPolicyReportOnly),}","value":null,"is_literal":false}},"20:2429:3995":{"id":"20:2429:3995","crate_id":20,"name":"Keys","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[116,0],"end":[116,22]},"visibility":"public","docs":"An iterator over `HeaderMap` keys.\n\nEach header name is yielded only once, even if it has more than one\nassociated value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"24:4168:2926":{"id":"24:4168:2926","crate_id":24,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:4169:2135","24:4171:6290","24:4174:6266","24:4177:6264","24:4180:6262","24:4184:65361","24:4186:65367","24:4188:65362","24:4190:65368","24:4192:65363","24:4194:65369","24:4196:65364","24:4198:65370","24:4200:65365","24:4202:65371","24:4204:71753","24:4206:71754","24:4208:71755","24:4210:71756","24:4212:71757","24:4214:71758","24:4216:71759","24:4218:71760","24:4220:71761","24:4222:71762","24:4224:71763","24:4226:71764","24:4182:5548","24:4183:6261"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"24:309:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"31:27:3083":{"id":"31:27:3083","crate_id":31,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:28:6595"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:478:2051":{"id":"34:478:2051","crate_id":34,"name":"trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[95,4],"end":[97,28]},"visibility":"default","docs":"Returns future that resolves to trailers, if any.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Trailers","id":"34:633:3074","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:494:2023":{"id":"34:494:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[160,4],"end":[160,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:181:2023":{"id":"34:181:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[82,4],"end":[82,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:575":{"id":"20:575","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[3431,4],"end":[3431,37]},"visibility":{"restricted":{"parent":"20:526:6172","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543:3991","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2769:4048":{"id":"20:2769:4048","crate_id":20,"name":"LINK","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Allows the server to point an interested client to another resource\ncontaining metadata about the requested resource.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Link),}","value":null,"is_literal":false}},"22:1170:1759":{"id":"22:1170:1759","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1192:3411":{"id":"22:1192:3411","crate_id":22,"name":"get_uint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13359:70414":{"id":"2:13359:70414","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13382:1606":{"id":"2:13382:1606","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49297:1736","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:946:646":{"id":"0:946:646","crate_id":0,"name":"fmt","span":{"filename":"src/upgrade.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10210:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10199:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2774:4053":{"id":"20:2774:4053","crate_id":20,"name":"PROXY_AUTHENTICATE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Defines the authentication method that should be used to gain access to\na proxy.\n\nUnlike `www-authenticate`, the `proxy-authenticate` header field applies\nonly to the next outbound client on the response chain. This is because\nonly the client that chose a given proxy is likely to have the\ncredentials necessary for authentication. However, when multiple proxies\nare used within the same administrative domain, such as office and\nregional caching proxies within a large corporate network, it is common\nfor credentials to be generated by the user agent and passed through the\nhierarchy until consumed. Hence, in such a configuration, it will appear\nas if Proxy-Authenticate is being forwarded because each proxy will send\nthe same challenge set.\n\nThe `proxy-authenticate` header is sent along with a `407 Proxy\nAuthentication Required`.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ProxyAuthenticate),}","value":null,"is_literal":false}},"20:3009:1582":{"id":"20:3009:1582","crate_id":20,"name":"Method","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/method.rs","begin":[46,0],"end":[46,17]},"visibility":"public","docs":"The Request Method (VERB)\n\nThis type also contains constants for a number of common HTTP methods such\nas GET, POST, etc.\n\nCurrently includes 8 variants representing the 8 methods defined in\n[RFC 7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH,\nand an Extension variant for all extensions.\n\n# Examples\n\n```\nuse http::Method;\n\nassert_eq!(Method::GET, Method::from_bytes(b\"GET\").unwrap());\nassert!(Method::GET.is_idempotent());\nassert_eq!(Method::POST.as_str(), \"POST\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13728:752":{"id":"2:13728:752","crate_id":2,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"IntoFuture","id":"2:13720:150","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13379:67288":{"id":"2:13379:67288","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15781:2686"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:476:2023":{"id":"34:476:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[82,4],"end":[82,35]},"visibility":"default","docs":"Returns the bounds on the remaining length of the stream.\n\nWhen the **exact** remaining length of the stream is known, the upper bound will be set and\nwill equal the lower bound.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:92:1751":{"id":"22:92:1751","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1033,4],"end":[1033,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13411:67297":{"id":"2:13411:67297","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15781:2686","self::pattern":"2:12992:3379","prim@char":"1:15775:2681","`DoubleEndedIterator`":"2:8406:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49329:5080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3454:116":{"id":"2:3454:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3455:210","2:3456:530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:399:1748":{"id":"22:399:1748","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[10,4],"end":[10,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3168-0:768:2593":{"id":"b:2:3168-0:768:2593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3170:667"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13384:34435":{"id":"2:13384:34435","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15781:2686"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49594:5121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:354:2040":{"id":"0:354:2040","crate_id":0,"name":"poll_ready","span":{"filename":"src/body/body.rs","begin":[548,4],"end":[554,5]},"visibility":"public","docs":"Check to see if this `Sender` can send more data.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"crate::Result","id":"0:418:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:492:2018":{"id":"34:492:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[149,4],"end":[152,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2887:173":{"id":"2:2887:173","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:591","2:2890:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3235:200":{"id":"2:3235:200","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13386:70418":{"id":"2:13386:70418","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49575:5119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12931:3903":{"id":"2:12931:3903","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12932:126","2:12933:63332"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:487":{"id":"34:487","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[138,0],"end":[138,46]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["34:489:1876","34:490:127","34:491:2010","34:492:2018","34:493:1994","34:494:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2747:4026":{"id":"20:2747:4026","crate_id":20,"name":"CONTENT_LANGUAGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Used to describe the languages intended for the audience.\n\nThis header allows a user to differentiate according to the users' own\npreferred language. For example, if \"Content-Language: de-DE\" is set, it\nsays that the document is intended for German language speakers\n(however, it doesn't indicate the document is written in German. For\nexample, it might be written in English as part of a language course for\nGerman speakers).\n\nIf no Content-Language is specified, the default is that the content is\nintended for all language audiences. Multiple language tags are also\npossible, as well as applying the Content-Language header to various\nmedia types and not only to textual documents.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentLanguage),}","value":null,"is_literal":false}},"1:5649:4421":{"id":"1:5649:4421","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:6356","1:5651:68495","1:5652:68496"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2788:4067":{"id":"20:2788:4067","crate_id":20,"name":"SERVER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Contains information about the software used by the origin server to\nhandle the request.\n\nOverly long and detailed Server values should be avoided as they\npotentially reveal internal implementation details that might make it\n(slightly) easier for attackers to find and exploit known security\nholes.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Server),}","value":null,"is_literal":false}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[68,0],"end":[68,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::http::HeaderMap","name":"HeaderMap","id":"20:2392:1588","glob":false}},"20:2421:3463":{"id":"20:2421:3463","crate_id":20,"name":"IntoIter","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[104,0],"end":[104,22]},"visibility":"public","docs":"An owning iterator over the entries of a `HeaderMap`.\n\nThis struct is created by the `into_iter` method on `HeaderMap`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:81:3419":{"id":"22:81:3419","crate_id":22,"name":"chain","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[869,4],"end":[871,20]},"visibility":"default","docs":"Creates an adaptor which will chain this buffer with another.\n\nThe returned `Buf` instance will first consume all bytes from `self`.\nAfterwards the output is equivalent to the output of next.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut chain = b\"hello \"[..].chain(&b\"world\"[..]);\n\nlet full = chain.copy_to_bytes(11);\nassert_eq!(full.chunk(), b\"hello world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["next",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"22:1233:2842","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:90:1746":{"id":"22:90:1746","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1023,4],"end":[1023,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:51:3394":{"id":"22:51:3394","crate_id":22,"name":"get_i8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[310,4],"end":[310,30]},"visibility":"default","docs":"Gets a signed 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_i8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:563:1751":{"id":"22:563:1751","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[538,4],"end":[538,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2756:4035":{"id":"20:2756:4035","crate_id":20,"name":"DATE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Contains the date and time at which the message was originated.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Date),}","value":null,"is_literal":false}},"2:8358:136":{"id":"2:8358:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8360:670"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2776:4055":{"id":"20:2776:4055","crate_id":20,"name":"PUBLIC_KEY_PINS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Associates a specific cryptographic public key with a certain server.\n\nThis decreases the risk of MITM attacks with forged certificates. If one\nor several keys are pinned and none of them are used by the server, the\nbrowser will not accept the response as legitimate, and will not display\nit.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::PublicKeyPins),}","value":null,"is_literal":false}},"22:42:1734":{"id":"22:42:1734","crate_id":22,"name":"Buf","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:43:1746","22:44:1748","22:45:1754","22:47:1751","22:48:1743","22:49:3392","22:50:3393","22:51:3394","22:52:3395","22:53:3396","22:54:3397","22:55:3398","22:56:3399","22:57:3400","22:58:3401","22:59:3402","22:60:3403","22:61:3404","22:62:3405","22:63:3406","22:64:3407","22:65:3408","22:66:3409","22:67:3410","22:68:3411","22:69:3412","22:70:3413","22:71:3414","22:72:3415","22:73:3416","22:74:3417","22:75:3418","22:76:1759","22:80:1766","22:81:3419","22:83:2944"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"36:35:2040":{"id":"36:35:2040","crate_id":36,"name":"poll_ready","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[382,4],"end":[382,80]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:427:2240":{"id":"0:427:2240","crate_id":0,"name":"is_parse","span":{"filename":"src/error.rs","begin":[151,4],"end":[153,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3177:127":{"id":"2:3177:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"1:5569:4444":{"id":"1:5569:4444","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5570:65769","1:5571:5354"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10481:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2892:124":{"id":"2:2892:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8841:3867":{"id":"2:8841:3867","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:1165:3406":{"id":"22:1165:3406","crate_id":22,"name":"get_i64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2728:4007":{"id":"20:2728:4007","crate_id":20,"name":"ACCEPT_ENCODING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Advertises which content encoding the client is able to understand.\n\nThe Accept-Encoding request HTTP header advertises which content\nencoding, usually a compression algorithm, the client is able to\nunderstand. Using content negotiation, the server selects one of the\nproposals, uses it and informs the client of its choice with the\nContent-Encoding response header.\n\nEven if both the client and the server supports the same compression\nalgorithms, the server may choose not to compress the body of a\nresponse, if the identity value is also acceptable. Two common cases\nlead to this:\n\n* The data to be sent is already compressed and a second compression\nwon't lead to smaller data to be transmitted. This may the case with\nsome image formats;\n\n* The server is overloaded and cannot afford the computational overhead\ninduced by the compression requirement. Typically, Microsoft recommends\nnot to compress if a server use more than 80 % of its computational\npower.\n\nAs long as the identity value, meaning no encryption, is not explicitly\nforbidden, by an identity;q=0 or a *;q=0 without another explicitly set\nvalue for identity, the server must never send back a 406 Not Acceptable\nerror.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::AcceptEncoding),}","value":null,"is_literal":false}},"2:13705:138":{"id":"2:13705:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13706:171","2:13707:999"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:237:1759":{"id":"22:237:1759","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[174,4],"end":[174,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:501:1994":{"id":"34:501:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[187,4],"end":[187,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3235:200-0:421:127":{"id":"a:2:3235:200-0:421:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3276:1731-0:297:1590":{"id":"a:2:3276:1731-0:297:1590","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"20:2772:4051":{"id":"20:2772:4051","crate_id":20,"name":"ORIGIN","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates where a fetch originates from.\n\nIt doesn't include any path information, but only the server name. It is\nsent with CORS requests, as well as with POST requests. It is similar to\nthe Referer header, but, unlike this header, it doesn't disclose the\nwhole path.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Origin),}","value":null,"is_literal":false}},"34:519":{"id":"34:519","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[256,0],"end":[256,40]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1494:1584","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"items":["34:521:1876","34:522:127","34:523:2010","34:524:2018","34:525:1994","34:526:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13356:778":{"id":"2:13356:778","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15775:2681"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13458:17024":{"id":"2:13458:17024","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12992:3379","prim@char":"1:15775:2681"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:514:127":{"id":"34:514:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[225,4],"end":[225,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"34:518:2023":{"id":"34:518:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[251,4],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3367:4500":{"id":"2:3367:4500","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:171","2:3370:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2775:4054":{"id":"20:2775:4054","crate_id":20,"name":"PROXY_AUTHORIZATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Contains the credentials to authenticate a user agent to a proxy server.\n\nThis header is usually included after the server has responded with a\n407 Proxy Authentication Required status and the Proxy-Authenticate\nheader.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ProxyAuthorization),}","value":null,"is_literal":false}},"2:13401:3459":{"id":"2:13401:3459","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47347:166","prim@char":"1:15775:2681","self::pattern":"2:12992:3379"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2793:4072":{"id":"20:2793:4072","crate_id":20,"name":"TRANSFER_ENCODING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Specifies the form of encoding used to safely transfer the entity to the\nclient.\n\n`transfer-encoding` is a hop-by-hop header, that is applying to a\nmessage between two nodes, not to a resource itself. Each segment of a\nmulti-node connection can use different `transfer-encoding` values. If\nyou want to compress data over the whole connection, use the end-to-end\nheader `content-encoding` header instead.\n\nWhen present on a response to a `HEAD` request that has no body, it\nindicates the value that would have applied to the corresponding `GET`\nmessage.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::TransferEncoding),}","value":null,"is_literal":false}},"20:525":{"id":"20:525","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[3348,4],"end":[3348,40]},"visibility":{"restricted":{"parent":"20:475:6171","path":"::header::map::into_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoHeaderName","id":"20:489:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6381:4405":{"id":"1:6381:4405","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6382:2642","1:6383:9681","1:6384:68567","1:6385:68568","1:6386:68569","1:6387:2641"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10481:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:352:667":{"id":"0:352:667","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[538,4],"end":[543,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:269:2018":{"id":"34:269:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[52,4],"end":[55,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3075","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3075","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:1841":{"id":"0:320:1841","crate_id":0,"name":"channel","span":{"filename":"src/body/body.rs","begin":[138,4],"end":[140,5]},"visibility":"public","docs":"Create a `Body` stream with an associated sender half.\n\nUseful when wanting to stream chunks from another thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1194:3413":{"id":"22:1194:3413","crate_id":22,"name":"get_int","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:485:2750":{"id":"34:485:2750","crate_id":34,"name":"boxed","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[122,4],"end":[124,44]},"visibility":"default","docs":"Turn this body into a boxed trait object.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3075","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9218:3200-0:312:1843":{"id":"a:2:9218:3200-0:312:1843","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9218:3200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"20:3283:1587":{"id":"20:3283:1587","crate_id":20,"name":"Version","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/version.rs","begin":[26,0],"end":[26,18]},"visibility":"public","docs":"Represents a version of the HTTP spec.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:2923:167":{"id":"2:2923:167","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2924:402","2:2925:3386","2:2926:1804","2:2927:3453"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2892:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13378:67287":{"id":"2:13378:67287","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15781:2686"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13455:70432":{"id":"2:13455:70432","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12992:3379","prim@char":"1:15775:2681"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:80:1766":{"id":"22:80:1766","crate_id":22,"name":"take","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[847,4],"end":[849,20]},"visibility":"default","docs":"Creates an adaptor which will read at most `limit` bytes from `self`.\n\nThis function returns a new instance of `Buf` which will read at most\n`limit` bytes.\n\n# Examples\n\n```\nuse bytes::{Buf, BufMut};\n\nlet mut buf = b\"hello world\"[..].take(5);\nlet mut dst = vec![];\n\ndst.put(&mut buf);\nassert_eq!(dst, b\"hello\");\n\nlet mut buf = buf.into_inner();\ndst.clear();\ndst.put(&mut buf);\nassert_eq!(dst, b\" world\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["limit",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Take","id":"22:1261:2843","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13381:4811":{"id":"2:13381:4811","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15775:2681"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49287:5106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9218:3200-0:297:1590":{"id":"a:2:9218:3200-0:297:1590","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9218:3200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:332:2010":{"id":"0:332:2010","crate_id":0,"name":"poll_data","span":{"filename":"src/body/body.rs","begin":[363,4],"end":[368,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:470:1590","args":null,"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:470:1590","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3164-0:768:2593":{"id":"b:2:3164-0:768:2593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3167:1772"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3243:207":{"id":"2:3243:207","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3276:1731-0:768:2593":{"id":"a:2:3276:1731-0:768:2593","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"20:2740:4019":{"id":"20:2740:4019","crate_id":20,"name":"ALLOW","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Lists the set of methods support by a resource.\n\nThis header must be sent if the server responds with a 405 Method Not\nAllowed status code to indicate which request methods can be used. An\nempty Allow header indicates that the resource allows no request\nmethods, which might occur temporarily for a given resource, for\nexample.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Allow),}","value":null,"is_literal":false}},"0:941:1722":{"id":"0:941:1722","crate_id":0,"name":"io","span":{"filename":"src/upgrade.rs","begin":[83,4],"end":[83,13]},"visibility":"public","docs":"The original IO object used before the upgrade.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"0:448:852":{"id":"0:448:852","crate_id":0,"name":"message","span":{"filename":"src/error.rs","begin":[400,4],"end":[402,5]},"visibility":"public","docs":"The error's standalone message, without the message from the source.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"fmt::Display","id":"2:10257:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:341:1759":{"id":"22:341:1759","crate_id":22,"name":"copy_to_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[148,4],"end":[148,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:263":{"id":"34:263","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[38,0],"end":[38,33]},"visibility":{"restricted":{"parent":"34:225:59678","path":"::combinators::box_body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoxBody","id":"34:246:3075","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["34:266:1876","34:267:127","34:268:2010","34:269:2018","34:270:1994","34:271:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13441:70425":{"id":"2:13441:70425","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15775:2681","self::pattern":"2:12992:3379","`DoubleEndedIterator`":"2:8406:120","str::match_indices":"1:15781:2686"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49479:5115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:342:667":{"id":"0:342:667","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[500,4],"end":[502,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["vec",{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2797:4076":{"id":"20:2797:4076","crate_id":20,"name":"VARY","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Determines how to match future requests with cached responses.\n\nThe `vary` HTTP response header determines how to match future request\nheaders to decide whether a cached response can be used rather than\nrequesting a fresh one from the origin server. It is used by the server\nto indicate which headers it used when selecting a representation of a\nresource in a content negotiation algorithm.\n\nThe `vary` header should be set on a 304 Not Modified response exactly\nlike it would have been set on an equivalent 200 OK response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Vary),}","value":null,"is_literal":false}},"5:6099:64057":{"id":"5:6099:64057","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15781:2686"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:19:364":{"id":"36:19:364","crate_id":36,"name":"call","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[354,4],"end":[354,53]},"visibility":"default","docs":"Process the request and return the response asynchronously.\n\nThis function is expected to be callable off task. As such,\nimplementations should take care to not call `poll_ready`.\n\nBefore dispatching a request, `poll_ready` must be called and return\n`Poll::Ready(Ok(()))`.\n\n# Panics\n\nImplementations are permitted to panic if `call` is invoked without\nobtaining `Poll::Ready(Ok(()))` from `poll_ready`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["req",{"kind":"generic","inner":"Request"}]],"output":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"34:482:1992":{"id":"34:482:1992","crate_id":34,"name":"map_err","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[113,4],"end":[116,35]},"visibility":"default","docs":"Maps this body's error value to a different value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MapErr","id":"34:703:3077","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3484:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"E"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:289:1876":{"id":"34:289:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[101,4],"end":[101,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"D"}}},"34:490:127":{"id":"34:490:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[140,4],"end":[140,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"2:13364:2038":{"id":"2:13364:2038","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12463:5244"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:529:127":{"id":"34:529:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[291,4],"end":[291,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38660:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"22:73:3416":{"id":"22:73:3416","crate_id":22,"name":"get_f32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[755,4],"end":[755,35]},"visibility":"default","docs":"Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];\nassert_eq!(1.2f32, buf.get_f32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:71:3414":{"id":"22:71:3414","crate_id":22,"name":"get_int_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[713,4],"end":[713,50]},"visibility":"default","docs":"Gets a signed n-byte integer from `self` in little-endian byte order.\n\nThe current position is advanced by `nbytes`.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x010203, buf.get_int_le(3));\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:18:2040":{"id":"36:18:2040","crate_id":36,"name":"poll_ready","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[340,4],"end":[340,84]},"visibility":"default","docs":"Returns `Poll::Ready(Ok(()))` when the service is able to process requests.\n\nIf the service is at capacity, then `Poll::Pending` is returned and the task\nis notified when the service becomes ready again. This function is\nexpected to be called while on a task. Generally, this can be done with\na simple `futures::future::poll_fn` call.\n\nIf `Poll::Ready(Err(_))` is returned, the service is no longer able to service requests\nand the caller should discard the service instance.\n\nOnce `poll_ready` returns `Poll::Ready(Ok(()))`, a request may be dispatched to the\nservice using `call`. Until a request is dispatched, repeated calls to\n`poll_ready` must return either `Poll::Ready(Ok(()))` or `Poll::Ready(Err(_))`.\n\nNote that `poll_ready` may reserve shared resources that are consumed in a subsequent\ninvocation of `call`. Thus, it is critical for implementations to not assume that `call`\nwill always be invoked and to ensure that such resources are released if the service is\ndropped before `call` is invoked or the future returned by `call` is dropped before it\nis polled.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[440,0],"end":[458,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10250:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:338:646"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:543:3991":{"id":"20:543:3991","crate_id":20,"name":"AsHeaderName","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:544:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[522,0],"end":[527,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:348:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:111:2018":{"id":"34:111:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[47,4],"end":[50,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:534:2031","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:534:2031","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:533:2023":{"id":"34:533:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[316,4],"end":[316,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6404:212":{"id":"5:6404:212","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6405:3515"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:331:127":{"id":"0:331:127","crate_id":0,"name":"Error","span":{"filename":"src/body/body.rs","begin":[361,4],"end":[361,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"5:6098:2866":{"id":"5:6098:2866","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:841:1751":{"id":"22:841:1751","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[954,4],"end":[954,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:428:2243":{"id":"0:428:2243","crate_id":0,"name":"is_parse_too_large","span":{"filename":"src/error.rs","begin":[156,4],"end":[161,5]},"visibility":"public","docs":"Returns true if this was an HTTP parse error caused by a message that was too large.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[513,0],"end":[520,1]},"visibility":{"restricted":{"parent":"0:411:1591","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","cause","description","backtrace"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2569:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:456:2264"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3313:4821":{"id":"2:3313:4821","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:171","2:3316:877"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1161:3402":{"id":"22:1161:3402","crate_id":22,"name":"get_i32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3539:4489":{"id":"2:3539:4489","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3541:171","2:3542:738"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13022:4786":{"id":"2:13022:4786","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8321:4909":{"id":"2:8321:4909","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8323:1747"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:48:2018":{"id":"34:48:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[37,4],"end":[40,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2030","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2030","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:560":{"id":"22:560","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[526,0],"end":[526,18]},"visibility":{"restricted":{"parent":"22:458:1606","path":"::bytes"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["copy_to_slice","get_u16","reader","copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","take","chunks_vectored","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","get_f64_le","chain","get_f32_le","get_int","get_i128_le","get_u128","has_remaining","get_u64_le","get_i32","get_i16_le"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["22:561:1746","22:562:1748","22:563:1751","22:564:1759"],"negative":false,"synthetic":false,"blanket_impl":null}},"31:127:2976":{"id":"31:127:2976","crate_id":31,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:128:165","31:129:127","31:130:72873"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"31:96:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"31:122:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9217:3201-0:421:127":{"id":"a:2:9217:3201-0:421:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9217:3201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:2:9217:3201-0:768:2593":{"id":"a:2:9217:3201-0:768:2593","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9217:3201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[505,0],"end":[510,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:344:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:340:1751":{"id":"22:340:1751","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[142,4],"end":[142,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1180:3395":{"id":"22:1180:3395","crate_id":22,"name":"get_u16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2786:4065":{"id":"20:2786:4065","crate_id":20,"name":"SEC_WEBSOCKET_PROTOCOL","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"The |Sec-WebSocket-Protocol| header field is used in the WebSocket\nopening handshake. It is sent from the client to the server and back\nfrom the server to the client to confirm the subprotocol of the\nconnection.  This enables scripts to both select a subprotocol and be\nsure that the server agreed to serve that subprotocol.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketProtocol),}","value":null,"is_literal":false}},"2:13478:64060":{"id":"2:13478:64060","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13420:67299":{"id":"2:13420:67299","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:12992:3379","prim@char":"1:15775:2681","str::rsplitn":"1:15781:2686"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49415:5083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2798:4077":{"id":"20:2798:4077","crate_id":20,"name":"VIA","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Added by proxies to track routing.\n\nThe `via` general header is added by proxies, both forward and reverse\nproxies, and can appear in the request headers and the response headers.\nIt is used for tracking message forwards, avoiding request loops, and\nidentifying the protocol capabilities of senders along the\nrequest/response chain.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Via),}","value":null,"is_literal":false}},"22:1179:3394":{"id":"22:1179:3394","crate_id":22,"name":"get_i8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13391:66978":{"id":"2:13391:66978","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15775:2681","self::pattern":"2:12992:3379"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:112:1994":{"id":"34:112:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[54,4],"end":[54,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3521:3063":{"id":"2:3521:3063","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:226","2:3524:196","2:3525:58139"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2778:4057":{"id":"20:2778:4057","crate_id":20,"name":"RANGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates the part of a document that the server should return.\n\nSeveral parts can be requested with one Range header at once, and the\nserver may send back these ranges in a multipart document. If the server\nsends back ranges, it uses the 206 Partial Content for the response. If\nthe ranges are invalid, the server returns the 416 Range Not Satisfiable\nerror. The server can also ignore the Range header and return the whole\ndocument with a 200 status code.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Range),}","value":null,"is_literal":false}},"22:1176:1743":{"id":"22:1176:1743","crate_id":22,"name":"has_remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1153:3394":{"id":"22:1153:3394","crate_id":22,"name":"get_i8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13372:67267":{"id":"2:13372:67267","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10892:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10892:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"34:50:2023":{"id":"34:50:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[48,4],"end":[48,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2799:4078":{"id":"20:2799:4078","crate_id":20,"name":"WARNING","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"General HTTP header contains information about possible problems with\nthe status of the message.\n\nMore than one `warning` header may appear in a response. Warning header\nfields can in general be applied to any message, however some warn-codes\nare specific to caches and can only be applied to response messages.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Warning),}","value":null,"is_literal":false}},"20:2750:4029":{"id":"20:2750:4029","crate_id":20,"name":"CONTENT_RANGE","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates where in a full body message a partial message belongs.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentRange),}","value":null,"is_literal":false}},"2:13387:34430":{"id":"2:13387:34430","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49603:5122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:235:1754":{"id":"22:235:1754","crate_id":22,"name":"chunks_vectored","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[168,4],"end":[168,70]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10984:1733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:15:1584":{"id":"36:15:1584","crate_id":36,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[313,4],"end":[313,17]},"visibility":"default","docs":"Responses given by the service.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"src/service/mod.rs","begin":[38,0],"end":[38,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"tower_service::Service","name":"Service","id":"36:13:2218","glob":false}},"20:2787:4066":{"id":"20:2787:4066","crate_id":20,"name":"SEC_WEBSOCKET_VERSION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"The |Sec-WebSocket-Version| header field is used in the WebSocket\nopening handshake.  It is sent from the client to the server to\nindicate the protocol version of the connection.  This enables\nservers to correctly interpret the opening handshake and subsequent\ndata being sent from the data, and close the connection if the server\ncannot interpret that data in a safe manner.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::SecWebSocketVersion),}","value":null,"is_literal":false}},"2:3406:4779":{"id":"2:3406:4779","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1215"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8431:2782":{"id":"2:8431:2782","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8432:778","2:8433:1757"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:1163:3404":{"id":"22:1163:3404","crate_id":22,"name":"get_u64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3737:3068":{"id":"2:3737:3068","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"36:26:138":{"id":"36:26:138","crate_id":36,"name":"Future","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[363,4],"end":[363,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}},"b:2:2841-0:312:1843":{"id":"b:2:2841-0:312:1843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2835:3081","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2843:63957"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:1181:3396":{"id":"22:1181:3396","crate_id":22,"name":"get_u16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3235:200-0:770:2596":{"id":"a:2:3235:200-0:770:2596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"34:47:2010":{"id":"34:47:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[29,4],"end":[32,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2030","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2030","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Empty","id":"34:37:2030","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:774":{"id":"0:774","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[121,0],"end":[149,1]},"visibility":{"restricted":{"parent":"0:720:1596","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:775:2623"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:50:3393":{"id":"22:50:3393","crate_id":22,"name":"get_u8","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[287,4],"end":[287,30]},"visibility":"default","docs":"Gets an unsigned 8 bit integer from `self`.\n\nThe current position is advanced by 1.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08 hello\"[..];\nassert_eq!(8, buf.get_u8());\n```\n\n# Panics\n\nThis function panics if there is no more remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:513":{"id":"20:513","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[3330,4],"end":[3330,46]},"visibility":{"restricted":{"parent":"20:475:6171","path":"::header::map::into_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoHeaderName","id":"20:489:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8362:151":{"id":"2:8362:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8363:1929","2:8364:3463","2:8365:753"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10488:142":{"id":"2:10488:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10489:701","2:10491:65106"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1182:3397":{"id":"22:1182:3397","crate_id":22,"name":"get_i16","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3964-0:297:1590":{"id":"b:2:3964-0:297:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3962:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3966:1405"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"34:113:2023":{"id":"34:113:2023","crate_id":34,"name":"size_hint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[58,4],"end":[58,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SizeHint","id":"34:642:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3174-0:768:2593":{"id":"b:2:3174-0:768:2593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3144:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3177:127","2:3178:1392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:365:2050":{"id":"0:365:2050","crate_id":0,"name":"send_trailers","span":{"filename":"src/body/body.rs","begin":[578,4],"end":[584,5]},"visibility":"public","docs":"Send trailers on trailers channel.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["trailers",{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::Result","id":"0:418:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":true,"abi":"Rust"},"has_body":true}},"34:527":{"id":"34:527","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[289,0],"end":[289,20]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["34:528:1876","34:529:127","34:530:2010","34:531:2018","34:532:1994","34:533:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13720:150":{"id":"2:13720:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13721:171","2:13722:150","2:13723:752"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8406:120":{"id":"2:8406:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8407:3454","2:8408:3455","2:8409:3456","2:8410:3457","2:8414:3458","2:8417:3459"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5663:4424":{"id":"1:5663:4424","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5664:9265","1:5665:64116","1:5666:6356","1:5667:64117","1:5668:4688","1:5669:4689","1:5670:64118","1:5671:1282","1:5672:64119","1:5673:64120","1:5674:64121","1:5675:64122","1:5676:64123","1:5677:64124","1:5678:64125","1:5679:64126"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"36:32:1584":{"id":"36:32:1584","crate_id":36,"name":"Response","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[378,4],"end":[378,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Response","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}},"5:5828:5292":{"id":"5:5828:5292","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:171","5:5831:419"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:4548:2834":{"id":"1:4548:2834","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4549:1820","1:4550:64274","1:4552:64275","1:4553:6318","1:4554:2835","1:4555:1822","1:4556:2608","1:4558:64276","1:4559:3485","1:4560:1606","1:4561:3419","1:4563:1766"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[359,0],"end":[438,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:330:1876","0:331:127","0:332:2010","0:333:2018","0:334:1994","0:335:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3338:4581":{"id":"2:3338:4581","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3340:1334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:338:1746":{"id":"22:338:1746","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","begin":[133,4],"end":[133,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[512,0],"end":[520,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:346:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:13724-0:770:2596":{"id":"b:2:13724-0:770:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoFuture","id":"2:13720:150","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:13726:171","2:13727:150","2:13728:752"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"F"}}},"24:442:4452":{"id":"24:442:4452","crate_id":24,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrsPriv","id":"24:498:71350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13366:292":{"id":"2:13366:292","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15781:2686","`u8`":"1:15792:2695"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:242:1869":{"id":"0:242:1869","crate_id":0,"name":"aggregate","span":{"filename":"src/body/aggregate.rs","begin":[16,0],"end":[31,1]},"visibility":"public","docs":"Aggregate the data buffers from a body asynchronously.\n\nThe returned `impl Buf` groups the `Buf`s from the `HttpBody` without\ncopying them. This is ideal if you don't require a contiguous buffer.\n\n# Note\n\nCare needs to be taken if the remote is untrusted. The function doesn't implement any length\nchecks and an malicious peer might make it consume arbitrary amounts of memory. Checking the\n`Content-Length` is a possibility, but it is not strictly mandated to be present.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["body",{"kind":"generic","inner":"T"}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:470:1590","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"HttpBody","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":true,"abi":"Rust"}}},"2:13429:70422":{"id":"2:13429:70422","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2803:4082":{"id":"20:2803:4082","crate_id":20,"name":"X_FRAME_OPTIONS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates whether or not a browser should be allowed to render a page in\na frame.\n\nSites can use this to avoid clickjacking attacks, by ensuring that their\ncontent is not embedded into other sites.\n\nThe added security is only provided if the user accessing the document\nis using a browser supporting `x-frame-options`.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XFrameOptions),}","value":null,"is_literal":false}},"30:6248:2991":{"id":"30:6248:2991","crate_id":30,"name":"SpawnExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:6249:2099"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Spawn","id":"33:16:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13452:70431":{"id":"2:13452:70431","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15775:2681","self::pattern":"2:12992:3379"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13022:4786","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:330:1876":{"id":"0:330:1876","crate_id":0,"name":"Data","span":{"filename":"src/body/body.rs","begin":[360,4],"end":[360,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Bytes","id":"22:526:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[498,0],"end":[503,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:342:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:564":{"id":"20:564","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[3413,4],"end":[3413,44]},"visibility":{"restricted":{"parent":"20:526:6172","path":"::header::map::as_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsHeaderName","id":"20:543:3991","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:348:667":{"id":"0:348:667","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[524,4],"end":[526,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1168:3413":{"id":"22:1168:3413","crate_id":22,"name":"get_int","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:778:1799":{"id":"0:778:1799","crate_id":0,"name":"poll_read","span":{"filename":"src/upgrade.rs","begin":[152,4],"end":[158,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"24:369:1790","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3962:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:49:1994":{"id":"34:49:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/empty.rs","begin":[44,4],"end":[44,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:1158:3399":{"id":"22:1158:3399","crate_id":22,"name":"get_u32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3240:2781":{"id":"2:3240:2781","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2402:3864":{"id":"20:2402:3864","crate_id":20,"name":"Iter","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[84,0],"end":[84,22]},"visibility":"public","docs":"`HeaderMap` entry iterator.\n\nYields `(&HeaderName, &value)` tuples. The same header name may be yielded\nmore than once if it has more than one associated value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"34:507:2010":{"id":"34:507:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[200,4],"end":[203,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3484:131":{"id":"2:3484:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3486:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3487:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"22:1162:3403":{"id":"22:1162:3403","crate_id":22,"name":"get_u64","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13405:2915":{"id":"2:13405:2915","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8406:120","self::pattern":"2:12992:3379","str::rsplit":"1:15781:2686","str::split_whitespace":"1:15781:2686","prim@char":"1:15775:2681"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49311:2844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3235:200-0:312:1843":{"id":"a:2:3235:200-0:312:1843","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"31:52:165":{"id":"31:52:165","crate_id":31,"name":"Ok","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.21/src/future.rs","begin":[77,4],"end":[77,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:10892:203":{"id":"2:10892:203","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10894:171","2:10895:58889","2:10896:2015","2:10897:67267","2:10898:67268","2:10899:738","2:10900:739"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10883:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:188:2917":{"id":"24:188:2917","crate_id":24,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:189:71364","24:190:65619"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"24:230:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,38],"end":[65,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Request","name":"Request","id":"20:1361:1583","glob":false}},"22:59:3402":{"id":"22:59:3402","crate_id":22,"name":"get_i32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[473,4],"end":[473,35]},"visibility":"default","docs":"Gets a signed 32 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_i32_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3362:4499":{"id":"2:3362:4499","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:171","2:3365:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:561:1746":{"id":"22:561:1746","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[528,4],"end":[528,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3247:209-0:768:2593":{"id":"a:2:3247:209-0:768:2593","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"34:340:127":{"id":"34:340:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[57,4],"end":[57,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"b:2:3164-0:312:1843":{"id":"b:2:3164-0:312:1843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3167:1772"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"20:489:2368":{"id":"20:489:2368","crate_id":20,"name":"IntoHeaderName","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:490:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:944":{"id":"0:944","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[80,9],"end":[80,14]},"visibility":{"restricted":{"parent":"0:720:1596","path":"::upgrade"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:10250:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10250:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:946:646"],"negative":false,"synthetic":false,"blanket_impl":null}},"34:286":{"id":"34:286","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[97,0],"end":[97,39]},"visibility":{"restricted":{"parent":"34:225:59678","path":"::combinators::box_body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnsyncBoxBody","id":"34:250:3078","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["34:289:1876","34:290:127","34:291:2010","34:292:2018","34:293:1994","34:294:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2796:4074":{"id":"20:2796:4074","crate_id":20,"name":"UPGRADE_INSECURE_REQUESTS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Sends a signal to the server expressing the client’s preference for an\nencrypted and authenticated response.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::UpgradeInsecureRequests),}","value":null,"is_literal":false}},"34:110:2010":{"id":"34:110:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[40,4],"end":[43,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:534:2031","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Full","id":"34:534:2031","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:339:1876":{"id":"34:339:1876","crate_id":34,"name":"Data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_data.rs","begin":[56,4],"end":[56,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"B2"}}},"34:174":{"id":"34:174","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/limited.rs","begin":[33,0],"end":[33,27]},"visibility":{"restricted":{"parent":"34:138:3070","path":"::limited"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2569:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Limited","id":"34:575:3073","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"items":["34:176:1876","34:177:127","34:178:2010","34:179:2018","34:180:1994","34:181:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9218:3200":{"id":"2:9218:3200","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:44:1748":{"id":"22:44:1748","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[133,4],"end":[133,29]},"visibility":"default","docs":"Returns a slice starting at the current position and of length between 0\nand `Buf::remaining()`. Note that this *can* return shorter slice (this allows\nnon-continuous internal representation).\n\nThis is a lower level function. Most operations are done with other\nfunctions.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"hello world\"[..];\n\nassert_eq!(buf.chunk(), &b\"hello world\"[..]);\n\nbuf.advance(6);\n\nassert_eq!(buf.chunk(), &b\"world\"[..]);\n```\n\n# Implementer notes\n\nThis function should never panic. Once the end of the buffer is reached,\ni.e., `Buf::remaining` returns 0, calls to `chunk()` should return an\nempty slice.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:483:2445":{"id":"0:483:2445","crate_id":0,"name":"Executor","span":{"filename":"src/rt.rs","begin":[9,0],"end":[12,1]},"visibility":"public","docs":"An executor of futures.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:485:2448"],"generics":{"params":[{"name":"Fut","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1187:3402":{"id":"22:1187:3402","crate_id":22,"name":"get_i32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[118,0],"end":[349,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:319:1967","0:320:1841"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:1185:3400":{"id":"22:1185:3400","crate_id":22,"name":"get_u32_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13368:58889":{"id":"2:13368:58889","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47347:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10892:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10892:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3342:4835":{"id":"2:3342:4835","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:878"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"34:475:1994":{"id":"34:475:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[74,4],"end":[74,35]},"visibility":"default","docs":"Returns `true` when the end of stream has been reached.\n\nAn end of stream means that both `poll_data` and `poll_trailers` will\nreturn `None`.\n\nA return value of `false` **does not** guarantee that a value will be\nreturned from `poll_stream` or `poll_trailers`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"36:33:127":{"id":"36:33:127","crate_id":36,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[379,4],"end":[379,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}}}},"2:3487:132":{"id":"2:3487:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3489:171","2:3490:366"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:63:3406":{"id":"22:63:3406","crate_id":22,"name":"get_i64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[553,4],"end":[553,35]},"visibility":"default","docs":"Gets a signed 64 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x0102030405060708, buf.get_i64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2840:1893":{"id":"2:2840:1893","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:523:2010":{"id":"34:523:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[260,4],"end":[263,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1494:1584","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1494:1584","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Response","id":"20:1494:1584","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2758:4037":{"id":"20:2758:4037","crate_id":20,"name":"EXPECT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates expectations that need to be fulfilled by the server in order\nto properly handle the request.\n\nThe only expectation defined in the specification is Expect:\n100-continue, to which the server shall respond with:\n\n* 100 if the information contained in the header is sufficient to cause\nan immediate success,\n\n* 417 (Expectation Failed) if it cannot meet the expectation; or any\nother 4xx status otherwise.\n\nFor example, the server may reject a request if its Content-Length is\ntoo large.\n\nNo common browsers send the Expect header, but some other clients such\nas cURL do so by default.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Expect),}","value":null,"is_literal":false}},"34:267:127":{"id":"34:267:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/box_body.rs","begin":[43,4],"end":[43,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"E"}}},"22:66:3409":{"id":"22:66:3409","crate_id":22,"name":"get_i128","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[613,4],"end":[613,34]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in big-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14104:141":{"id":"2:14104:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14105:266","2:14106:505","2:14107:269","2:14108:1065"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1184:3399":{"id":"22:1184:3399","crate_id":22,"name":"get_u32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:106":{"id":"34:106","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[33,0],"end":[33,24]},"visibility":{"restricted":{"parent":"34:62:1539","path":"::full"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Full","id":"34:534:2031","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"D"}}],"bindings":[]}},"param_names":[]}},"items":["34:108:1876","34:109:127","34:110:2010","34:111:2018","34:112:1994","34:113:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:1193:3412":{"id":"22:1193:3412","crate_id":22,"name":"get_uint_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:435:2083":{"id":"0:435:2083","crate_id":0,"name":"is_body_write_aborted","span":{"filename":"src/error.rs","begin":[195,4],"end":[197,5]},"visibility":"public","docs":"Returns true if the body write was aborted.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:503":{"id":"34:503","crate_id":34,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[196,0],"end":[196,46]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["is_end_stream","size_hint","data","boxed_unsync","boxed","map_err","map_data","trailers"],"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["34:505:1876","34:506:127","34:507:2010","34:508:2018","34:509:1994","34:510:2023"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2533:3998":{"id":"20:2533:3998","crate_id":20,"name":"ValueDrain","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[208,0],"end":[208,28]},"visibility":"public","docs":"An drain iterator of all values associated with a single header name.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"b:2:3179-0:421:127":{"id":"b:2:3179-0:421:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5575:4446":{"id":"1:5575:4446","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5576:6045","1:5577:2038"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10481:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:269:2918":{"id":"24:269:2918","crate_id":24,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:270:71386","24:271:71387"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"33:16:2982":{"id":"33:16:2982","crate_id":33,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["33:17:71977","33:18:2350"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:785":{"id":"0:785","crate_id":0,"name":null,"span":{"filename":"src/upgrade.rs","begin":[191,0],"end":[195,1]},"visibility":{"restricted":{"parent":"0:720:1596","path":"::upgrade"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10250:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:786:646"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3174-0:939:2600":{"id":"b:2:3174-0:939:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3144:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3177:127","2:3178:1392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8371:2783":{"id":"2:8371:2783","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8373:3460","2:8375:3461","2:8376:3462"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:93":{"id":"22:93","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1039,0],"end":[1039,47]},"visibility":{"restricted":{"parent":"22:7:2883","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3132:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["copy_to_slice","get_u16","reader","copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","take","chunks_vectored","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","get_f64_le","chain","get_f32_le","get_int","get_i128_le","get_u128","has_remaining","get_u64_le","get_i32","get_i16_le"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"1:10780:2648","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["22:95:1746","22:96:1748","22:97:1751"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3141:135":{"id":"2:3141:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3143:667"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2760:4039":{"id":"20:2760:4039","crate_id":20,"name":"FORWARDED","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Contains information from the client-facing side of proxy servers that\nis altered or lost when a proxy is involved in the path of the request.\n\nThe alternative and de-facto standard versions of this header are the\nX-Forwarded-For, X-Forwarded-Host and X-Forwarded-Proto headers.\n\nThis header is used for debugging, statistics, and generating\nlocation-dependent content and by design it exposes privacy sensitive\ninformation, such as the IP address of the client. Therefore the user's\nprivacy must be kept in mind when deploying this header.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Forwarded),}","value":null,"is_literal":false}},"0:431:2250":{"id":"0:431:2250","crate_id":0,"name":"is_canceled","span":{"filename":"src/error.rs","begin":[175,4],"end":[177,5]},"visibility":"public","docs":"Returns true if this was about a `Request` that was canceled.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3389:4771":{"id":"2:3389:4771","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3391:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2832:97":{"id":"2:2832:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2834:1893"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13727:150":{"id":"2:13727:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"F"}}},"30:239:2972":{"id":"30:239:2972","crate_id":30,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["30:240:826","30:243:71987","30:245:6535","30:248:71988","30:250:71989","30:252:6488","30:253:3482","30:254:71990","30:255:3483","30:256:3484","30:258:2750","30:260:71991","30:262:71992","30:263:71993","30:264:71994","30:265:71995"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2771:4050":{"id":"20:2771:4050","crate_id":20,"name":"MAX_FORWARDS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates the max number of intermediaries the request should be sent\nthrough.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::MaxForwards),}","value":null,"is_literal":false}},"20:2742:4021":{"id":"20:2742:4021","crate_id":20,"name":"AUTHORIZATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Contains the credentials to authenticate a user agent with a server.\n\nUsually this header is included after the server has responded with a\n401 Unauthorized status and the WWW-Authenticate header.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Authorization),}","value":null,"is_literal":false}},"20:5:1581":{"id":"20:5:1581","crate_id":20,"name":"header","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/lib.rs","begin":[173,0],"end":[173,14]},"visibility":"public","docs":"HTTP header types\n\nThe module provides [`HeaderName`], [`HeaderMap`], and a number of types\nused for interacting with `HeaderMap`. These types allow representing both\nHTTP/1 and HTTP/2 headers.\n\n# `HeaderName`\n\nThe `HeaderName` type represents both standard header names as well as\ncustom header names. The type handles the case insensitive nature of header\nnames and is used as the key portion of `HeaderMap`. Header names are\nnormalized to lower case. In other words, when creating a `HeaderName` with\na string, even if upper case characters are included, when getting a string\nrepresentation of the `HeaderName`, it will be all lower case. This allows\nfor faster `HeaderMap` comparison operations.\n\nThe internal representation is optimized to efficiently handle the cases\nmost commonly encountered when working with HTTP. Standard header names are\nspecial cased and are represented internally as an enum. Short custom\nheaders will be stored directly in the `HeaderName` struct and will not\nincur any allocation overhead, however longer strings will require an\nallocation for storage.\n\n## Limitations\n\n`HeaderName` has a max length of 32,768 for header names. Attempting to\nparse longer names will result in a panic.\n\n# `HeaderMap`\n\n`HeaderMap` is a map structure of header names highly optimized for use\ncases common with HTTP. It is a [multimap] structure, where each header name\nmay have multiple associated header values. Given this, some of the APIs\ndiverge from [`HashMap`].\n\n## Overview\n\nJust like `HashMap` in Rust's stdlib, `HeaderMap` is based on [Robin Hood\nhashing]. This algorithm tends to reduce the worst case search times in the\ntable and enables high load factors without seriously affecting performance.\nInternally, keys and values are stored in vectors. As such, each insertion\nwill not incur allocation overhead. However, once the underlying vector\nstorage is full, a larger vector must be allocated and all values copied.\n\n## Deterministic ordering\n\nUnlike Rust's `HashMap`, values in `HeaderMap` are deterministically\nordered. Roughly, values are ordered by insertion. This means that a\nfunction that deterministically operates on a header map can rely on the\niteration order to remain consistent across processes and platforms.\n\n## Adaptive hashing\n\n`HeaderMap` uses an adaptive hashing strategy in order to efficiently handle\nmost common cases. All standard headers have statically computed hash values\nwhich removes the need to perform any hashing of these headers at runtime.\nThe default hash function emphasizes performance over robustness. However,\n`HeaderMap` detects high collision rates and switches to a secure hash\nfunction in those events. The threshold is set such that only denial of\nservice attacks should trigger it.\n\n## Limitations\n\n`HeaderMap` can store a maximum of 32,768 headers (header name / value\npairs). Attempting to insert more will result in a panic.\n\n[`HeaderName`]: struct.HeaderName.html\n[`HeaderMap`]: struct.HeaderMap.html\n[multimap]: https://en.wikipedia.org/wiki/Multimap\n[`HashMap`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html\n[Robin Hood hashing]: https://en.wikipedia.org/wiki/Hash_table#Robin_Hood_hashing","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["20:543:3991","20:2453:3992","20:2475:3993","20:2466:3994","20:2392:1588","20:489:2368","20:2421:3463","20:2402:3864","20:2410:3865","20:2429:3995","20:2500:3996","20:2488:3997","20:2533:3998","20:2510:2369","20:2521:3999","20:2437:4000","20:2445:4001","20:2649:2344","20:630:4002","20:2981:2345","20:793:4003","20:2989:4004","20:2726:4005","20:2727:4006","20:2728:4007","20:2729:4008","20:2730:4009","20:2731:4010","20:2732:4011","20:2733:4012","20:2734:4013","20:2735:4014","20:2736:4015","20:2737:4016","20:2738:4017","20:2739:4018","20:2740:4019","20:2741:4020","20:2742:4021","20:2743:4022","20:2744:4023","20:2745:4024","20:2746:4025","20:2747:4026","20:2748:4027","20:2749:4028","20:2750:4029","20:2751:4030","20:2752:4031","20:2753:4032","20:2754:4033","20:2755:4034","20:2756:4035","20:2757:4036","20:2758:4037","20:2759:4038","20:2760:4039","20:2761:4040","20:2762:4041","20:2763:4042","20:2764:4043","20:2765:4044","20:2766:4045","20:2767:4046","20:2768:4047","20:2769:4048","20:2770:4049","20:2771:4050","20:2772:4051","20:2773:4052","20:2774:4053","20:2775:4054","20:2776:4055","20:2777:4056","20:2778:4057","20:2779:4058","20:2780:4059","20:2781:4060","20:2782:4061","20:2783:4062","20:2784:4063","20:2785:4064","20:2786:4065","20:2787:4066","20:2788:4067","20:2789:4068","20:2790:4069","20:2791:4070","20:2792:4071","20:2793:4072","20:2795:4073","20:2796:4074","20:2794:4075","20:2797:4076","20:2798:4077","20:2799:4078","20:2800:4079","20:2801:4080","20:2802:4081","20:2803:4082","20:2804:4083"]}},"0:350:667":{"id":"0:350:667","crate_id":0,"name":"from","span":{"filename":"src/body/body.rs","begin":[531,4],"end":[533,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2757:4036":{"id":"20:2757:4036","crate_id":20,"name":"ETAG","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Identifier for a specific version of a resource.\n\nThis header allows caches to be more efficient, and saves bandwidth, as\na web server does not need to send a full response if the content has\nnot changed. On the other side, if the content has changed, etags are\nuseful to help prevent simultaneous updates of a resource from\noverwriting each other (\"mid-air collisions\").\n\nIf the resource at a given URL changes, a new Etag value must be\ngenerated. Etags are therefore similar to fingerprints and might also be\nused for tracking purposes by some servers. A comparison of them allows\nto quickly determine whether two representations of a resource are the\nsame, but they might also be set to persist indefinitely by a tracking\nserver.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Etag),}","value":null,"is_literal":false}},"34:508:2018":{"id":"34:508:2018","crate_id":34,"name":"poll_trailers","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[207,4],"end":[210,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2843:63957":{"id":"2:2843:63957","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:83:2944":{"id":"22:83:2944","crate_id":22,"name":"reader","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[900,4],"end":[902,20]},"visibility":"default","docs":"Creates an adaptor which implements the `Read` trait for `self`.\n\nThis function returns a new value which implements `Read` by adapting\nthe `Read` trait functions to the `Buf` trait functions. Given that\n`Buf` operations are infallible, none of the `Read` functions will\nreturn with `Err`.\n\n# Examples\n\n```\nuse bytes::{Bytes, Buf};\nuse std::io::Read;\n\nlet buf = Bytes::from(\"hello world\");\n\nlet mut reader = buf.reader();\nlet mut dst = [0; 1024];\n\nlet num = reader.read(&mut dst).unwrap();\n\nassert_eq!(11, num);\nassert_eq!(&dst[..11], &b\"hello world\"[..]);\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Reader","id":"22:1255:5660","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:432:2112":{"id":"0:432:2112","crate_id":0,"name":"is_closed","span":{"filename":"src/error.rs","begin":[180,4],"end":[182,5]},"visibility":"public","docs":"Returns true if a sender's channel is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5711:4427":{"id":"1:5711:4427","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5712:63998"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10481:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:783:211":{"id":"5:783:211","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2036","5:785:3513","5:786:3514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:526:1736":{"id":"22:526:1736","crate_id":22,"name":"Bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","begin":[94,0],"end":[94,16]},"visibility":"public","docs":"A cheaply cloneable and sliceable chunk of contiguous memory.\n\n`Bytes` is an efficient container for storing and operating on contiguous\nslices of memory. It is intended for use primarily in networking code, but\ncould have applications elsewhere as well.\n\n`Bytes` values facilitate zero-copy network programming by allowing multiple\n`Bytes` objects to point to the same underlying memory.\n\n`Bytes` does not have a single implementation. It is an interface, whose\nexact behavior is implemented through dynamic dispatch in several underlying\nimplementations of `Bytes`.\n\nAll `Bytes` implementations must fulfill the following requirements:\n- They are cheaply cloneable and thereby shareable between an unlimited amount\n  of components, for example by modifying a reference count.\n- Instances can be sliced to refer to a subset of the the original buffer.\n\n```\nuse bytes::Bytes;\n\nlet mut mem = Bytes::from(\"Hello world\");\nlet a = mem.slice(0..5);\n\nassert_eq!(a, \"Hello\");\n\nlet b = mem.split_to(6);\n\nassert_eq!(mem, \"world\");\nassert_eq!(b, \"Hello \");\n```\n\n# Memory layout\n\nThe `Bytes` struct itself is fairly small, limited to 4 `usize` fields used\nto track information about which segment of the underlying memory the\n`Bytes` handle has access to.\n\n`Bytes` keeps both a pointer to the shared state containing the full memory\nslice and a pointer to the start of the region visible by the handle.\n`Bytes` also tracks the length of its view into the memory.\n\n# Sharing\n\n`Bytes` contains a vtable, which allows implementations of `Bytes` to define\nhow sharing/cloneing is implemented in detail.\nWhen `Bytes::clone()` is called, `Bytes` will call the vtable function for\ncloning the backing storage in order to share it behind between multiple\n`Bytes` instances.\n\nFor `Bytes` implementations which refer to constant memory (e.g. created\nvia `Bytes::from_static()`) the cloning implementation will be a no-op.\n\nFor `Bytes` implementations which point to a reference counted shared storage\n(e.g. an `Arc<[u8]>`), sharing will be implemented by increasing the\nthe reference count.\n\nDue to this mechanism, multiple `Bytes` instances may point to the same\nshared memory region.\nEach `Bytes` instance can point to different sections within that\nmemory region, and `Bytes` instances may or may not have overlapping views\ninto the memory.\n\nThe following diagram visualizes a scenario where 2 `Bytes` instances make\nuse of an `Arc`-based backing storage, and provide access to different views:\n\n```text\n\n   Arc ptrs                   +---------+\n   ________________________ / | Bytes 2 |\n  /                           +---------+\n /          +-----------+     |         |\n|_________/ |  Bytes 1  |     |         |\n|           +-----------+     |         |\n|           |           | ___/ data     | tail\n|      data |      tail |/              |\nv           v           v               v\n+-----+---------------------------------+-----+\n| Arc |     |           |               |     |\n+-----+---------------------------------+-----+\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:339"]}},"2:3481:130":{"id":"2:3481:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:364"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3484:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"36:28:364":{"id":"36:28:364","crate_id":36,"name":"call","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.2/src/lib.rs","begin":[369,4],"end":[369,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["request",{"kind":"generic","inner":"Request"}]],"output":{"kind":"qualified_path","inner":{"name":"Future","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"kind":"resolved_path","inner":{"name":"Service","id":"36:13:2218","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Request"}}],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3164-0:297:1590":{"id":"b:2:3164-0:297:1590","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3167:1772"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3178:1392":{"id":"2:3178:1392","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13473:5025":{"id":"2:13473:5025","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12931:3903","`FromStr`":"2:12931:3903"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12931:3903","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12931:3903","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2475:3993":{"id":"20:2475:3993","crate_id":20,"name":"Entry","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[157,0],"end":[157,25]},"visibility":"public","docs":"A view into a single location in a `HeaderMap`, which may be vacant or occupied.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"variants_stripped":false,"variants":["20:2478:4084","20:2481:4085"],"impls":[]}},"2:13417:70420":{"id":"2:13417:70420","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15781:2686","str::split_terminator":"1:15781:2686","self::pattern":"2:12992:3379","prim@char":"1:15775:2681"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49379:5111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:56:3399":{"id":"22:56:3399","crate_id":22,"name":"get_u32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[413,4],"end":[413,32]},"visibility":"default","docs":"Gets an unsigned 32 bit integer from `self` in the big-endian byte order.\n\nThe current position is advanced by 4.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];\nassert_eq!(0x0809A0A1, buf.get_u32());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13388:67303":{"id":"2:13388:67303","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:12992:3379","prim@char":"1:15775:2681"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:388:1994":{"id":"34:388:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/combinators/map_err.rs","begin":[78,4],"end":[78,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13002:4783":{"id":"2:13002:4783","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13004:4785","2:13005:69499","2:13006:69500","2:13007:69501","2:13008:69503","2:13009:69502","2:13010:69504"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:30:504-0:770:2596":{"id":"b:30:504-0:770:2596","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.21/src/future/try_future/mod.rs","begin":[134,0],"end":[134,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Fut","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Fut"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"31:44:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["inspect_ok","try_flatten","inspect_err","map_ok","err_into","unwrap_or_else","into_future","try_flatten_stream","map_err","ok_into","try_poll_unpin","and_then","map_ok_or_else","or_else"],"trait":{"kind":"resolved_path","inner":{"name":"TryFutureExt","id":"30:506:2974","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Fut"}}},"b:2:3964-0:939:2600":{"id":"b:2:3964-0:939:2600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3962:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3966:1405"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:22999:4932":{"id":"2:22999:4932","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23648:4757","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22990:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"34:491:2010":{"id":"34:491:2010","crate_id":34,"name":"poll_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[142,4],"end":[145,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8845:4842":{"id":"2:8845:4842","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7886:4843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:3102:1585":{"id":"20:3102:1585","crate_id":20,"name":"StatusCode","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/status.rs","begin":[45,0],"end":[45,21]},"visibility":"public","docs":"An HTTP status code (`status-code` in RFC 7230 et al.).\n\nConstants are provided for known status codes, including those in the IANA\n[HTTP Status Code Registry](\nhttps://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml).\n\nStatus code values in the range 100-999 (inclusive) are supported by this\ntype. Values in the range 100-599 are semantically classified by the most\nsignificant digit. See [`StatusCode::is_success`], etc. Values above 599\nare unclassified but allowed for legacy compatibility, though their use is\ndiscouraged. Applications may interpret such values as protocol errors.\n\n# Examples\n\n```\nuse http::StatusCode;\n\nassert_eq!(StatusCode::from_u16(200).unwrap(), StatusCode::OK);\nassert_eq!(StatusCode::NOT_FOUND.as_u16(), 404);\nassert!(StatusCode::OK.is_success());\n```","links":{"`StatusCode::is_success`":"20:3102:1585"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,22],"end":[65,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::header","name":"header","id":"20:5:1581","glob":false}},"0:334:1994":{"id":"0:334:1994","crate_id":0,"name":"is_end_stream","span":{"filename":"src/body/body.rs","begin":[400,4],"end":[411,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13408:34302":{"id":"2:13408:34302","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15775:2681","self::pattern":"2:12992:3379"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12784:5077","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22954:18505":{"id":"2:22954:18505","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22955:9802","2:22956:69810","2:22957:69811"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22947:2487","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2726:4005":{"id":"20:2726:4005","crate_id":20,"name":"ACCEPT","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Advertises which content types the client is able to understand.\n\nThe Accept request HTTP header advertises which content types, expressed\nas MIME types, the client is able to understand. Using content\nnegotiation, the server then selects one of the proposals, uses it and\ninforms the client of its choice with the Content-Type response header.\nBrowsers set adequate values for this header depending of the context\nwhere the request is done: when fetching a CSS stylesheet a different\nvalue is set for the request than when fetching an image, video or a\nscript.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Accept),}","value":null,"is_literal":false}},"5:6097:71072":{"id":"5:6097:71072","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:1914","`String`":"5:8352:205"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3691:213":{"id":"2:3691:213","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3692:171","2:3693:4743","2:3694:672","2:3695:357"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3696:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3691:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:2749:4028":{"id":"20:2749:4028","crate_id":20,"name":"CONTENT_LOCATION","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Indicates an alternate location for the returned data.\n\nThe principal use case is to indicate the URL of the resource\ntransmitted as the result of content negotiation.\n\nLocation and Content-Location are different: Location indicates the\ntarget of a redirection (or the URL of a newly created document), while\nContent-Location indicates the direct URL to use to access the resource,\nwithout the need of further content negotiation. Location is a header\nassociated with the response, while Content-Location is associated with\nthe entity returned.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::ContentLocation),}","value":null,"is_literal":false}},"b:2:3174-0:770:2596":{"id":"b:2:3174-0:770:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3144:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3177:127","2:3178:1392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13426:70421":{"id":"2:13426:70421","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:333:2018":{"id":"0:333:2018","crate_id":0,"name":"poll_trailers","span":{"filename":"src/body/body.rs","begin":[370,4],"end":[398,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HeaderMap","id":"20:2392:1588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"34:470:1590","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:839:1746":{"id":"22:839:1746","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[944,4],"end":[944,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3966:1405":{"id":"2:3966:1405","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45883:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:840:1748":{"id":"22:840:1748","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[949,4],"end":[949,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4623:2838":{"id":"1:4623:2838","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4624:2916","1:4625:1786","1:4626:65159","1:4627:65160"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1183:3398":{"id":"22:1183:3398","crate_id":22,"name":"get_i16_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1018,4],"end":[1018,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10267:179":{"id":"2:10267:179","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10268:646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10257:119":{"id":"2:10257:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10258:646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:31:48-0:770:2596":{"id":"b:31:48-0:770:2596","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.21/src/future.rs","begin":[73,0],"end":[73,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47474:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"31:44:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["31:52:165","31:53:127","31:54:63967"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"F"}}},"2:3247:209":{"id":"2:3247:209","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2802:4081":{"id":"20:2802:4081","crate_id":20,"name":"X_DNS_PREFETCH_CONTROL","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Controls DNS prefetching.\n\nThe `x-dns-prefetch-control` HTTP response header controls DNS\nprefetching, a feature by which browsers proactively perform domain name\nresolution on both links that the user may choose to follow as well as\nURLs for items referenced by the document, including images, CSS,\nJavaScript, and so forth.\n\nThis prefetching is performed in the background, so that the DNS is\nlikely to have been resolved by the time the referenced items are\nneeded. This reduces latency when the user clicks a link.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::XDnsPrefetchControl),}","value":null,"is_literal":false}},"20:2773:4052":{"id":"20:2773:4052","crate_id":20,"name":"PRAGMA","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"HTTP/1.0 header usually used for backwards compatibility.\n\nThe Pragma HTTP/1.0 general header is an implementation-specific header\nthat may have various effects along the request-response chain. It is\nused for backwards compatibility with HTTP/1.0 caches where the\nCache-Control HTTP/1.1 header is not yet present.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Pragma),}","value":null,"is_literal":false}},"22:838":{"id":"22:838","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","begin":[942,0],"end":[942,21]},"visibility":{"restricted":{"parent":"22:685:2881","path":"::bytes_mut"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["copy_to_slice","get_u16","reader","copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","take","chunks_vectored","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","get_f64_le","chain","get_f32_le","get_int","get_i128_le","get_u128","has_remaining","get_u64_le","get_i32","get_i16_le"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BytesMut","id":"22:786:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["22:839:1746","22:840:1748","22:841:1751","22:842:1759"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3276:1731-0:939:2600":{"id":"a:2:3276:1731-0:939:2600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13726:171":{"id":"2:13726:171","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13705:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"2:13461:67304":{"id":"2:13461:67304","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15775:2681","self::pattern":"2:12992:3379"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47347:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:71070":{"id":"5:6084:71070","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,69],"end":[65,72]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::http::Uri","name":"Uri","id":"20:3227:1586","glob":false}},"34:479:3702":{"id":"34:479:3702","crate_id":34,"name":"map_data","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[103,4],"end":[107,15]},"visibility":"default","docs":"Maps this body's data value to a different value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MapData","id":"34:651:3076","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3484:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Data","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Body","id":"34:470:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"generic","inner":"B"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8325:4908":{"id":"2:8325:4908","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8327:3505"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:486:1595":{"id":"0:486:1595","crate_id":0,"name":"service","span":{"filename":"src/service/mod.rs","begin":[1,0],"end":[55,31]},"visibility":"public","docs":"Asynchronous Services\n\nA [`Service`](Service) is a trait representing an asynchronous\nfunction of a request to a response. It's similar to\n`async fn(Request) -> Result<Response, Error>`.\n\nThe argument and return value isn't strictly required to be for HTTP.\nTherefore, hyper uses several \"trait aliases\" to reduce clutter around\nbounds. These are:\n\n- `HttpService`: This is blanketly implemented for all types that\n  implement `Service<http::Request<B1>, Response = http::Response<B2>>`.\n- `MakeService`: When a `Service` returns a new `Service` as its \"response\",\n  we consider it a `MakeService`. Again, blanketly implemented in those cases.\n- `MakeConnection`: A `Service` that returns a \"connection\", a type that\n  implements `AsyncRead` and `AsyncWrite`.\n\n# HttpService\n\nIn hyper, especially in the server setting, a `Service` is usually bound\nto a single connection. It defines how to respond to **all** requests that\nconnection will receive.\n\nThe helper [`service_fn`](service_fn) should be sufficient for most cases, but\nif you need to implement `Service` for a type manually, you can follow the example\nin `service_struct_impl.rs`.\n\n# MakeService\n\nSince a `Service` is bound to a single connection, a [`Server`](crate::Server)\nneeds a way to make them as it accepts connections. This is what a\n`MakeService` does.\n\nResources that need to be shared by all `Service`s can be put into a\n`MakeService`, and then passed to individual `Service`s when `call`\nis called.","links":{"Service":"36:13:2218","service_fn":"0:680:2483"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["36:13:2218","0:625:2482","0:680:2483"]}},"20:2779:4058":{"id":"20:2779:4058","crate_id":20,"name":"REFERER","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Contains the address of the previous web page from which a link to the\ncurrently requested page was followed.\n\nThe Referer header allows servers to identify where people are visiting\nthem from and may use that data for analytics, logging, or optimized\ncaching, for example.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner: Repr::Standard(StandardHeader::Referer),}","value":null,"is_literal":false}},"22:87":{"id":"22:87","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1017,0],"end":[1017,36]},"visibility":{"restricted":{"parent":"22:7:2883","path":"::buf::buf_impl"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["copy_to_slice","get_u16","reader","copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","take","chunks_vectored","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","get_f64_le","chain","get_f32_le","get_int","get_i128_le","get_u128","has_remaining","get_u64_le","get_i32","get_i16_le"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1914","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["22:1171:1746","22:1172:1748","22:1173:1754","22:1175:1751","22:1176:1743","22:1177:3392","22:1178:3393","22:1179:3394","22:1180:3395","22:1181:3396","22:1182:3397","22:1183:3398","22:1184:3399","22:1185:3400","22:1186:3401","22:1187:3402","22:1188:3403","22:1189:3404","22:1190:3405","22:1191:3406","22:1192:3411","22:1193:3412","22:1194:3413","22:1195:3414","22:1196:1759"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:2731:4010":{"id":"20:2731:4010","crate_id":20,"name":"ACCESS_CONTROL_ALLOW_CREDENTIALS","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/name.rs","begin":[156,0],"end":[975,1]},"visibility":"public","docs":"Preflight response indicating if the response to the request can be\nexposed to the page.\n\nThe Access-Control-Allow-Credentials response header indicates whether\nor not the response to the request can be exposed to the page. It can be\nexposed when the true value is returned; it can't in other cases.\n\nCredentials are cookies, authorization headers or TLS client\ncertificates.\n\nWhen used as part of a response to a preflight request, this indicates\nwhether or not the actual request can be made using credentials. Note\nthat simple GET requests are not preflighted, and so if a request is\nmade for a resource with credentials, if this header is not returned\nwith the resource, the response is ignored by the browser and not\nreturned to web content.\n\nThe Access-Control-Allow-Credentials header works in conjunction with\nthe XMLHttpRequest.withCredentials property or with the credentials\noption in the Request() constructor of the Fetch API. Credentials must\nbe set on both sides (the Access-Control-Allow-Credentials header and in\nthe XHR or Fetch request) in order for the CORS request with credentials\nto succeed.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"HeaderName{inner:\n        Repr::Standard(StandardHeader::AccessControlAllowCredentials),}","value":null,"is_literal":false}},"22:75:3418":{"id":"22:75:3418","crate_id":22,"name":"get_f64_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[797,4],"end":[797,35]},"visibility":"default","docs":"Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in little-endian byte order.\n\nThe current position is advanced by 8.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\"[..];\nassert_eq!(1.2f64, buf.get_f64_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3964-0:770:2596":{"id":"b:2:3964-0:770:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3962:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3966:1405"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:1160:3401":{"id":"22:1160:3401","crate_id":22,"name":"get_i32","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:504":{"id":"20:504","crate_id":20,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[3312,4],"end":[3312,38]},"visibility":{"restricted":{"parent":"20:475:6171","path":"::header::map::into_header_name"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoHeaderName","id":"20:489:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HeaderName","id":"20:2649:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"34:509:1994":{"id":"34:509:1994","crate_id":34,"name":"is_end_stream","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/lib.rs","begin":[214,4],"end":[214,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"31:110:3084":{"id":"31:110:3084","crate_id":31,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["31:111:6595"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"31:96:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9217:3201-0:939:2600":{"id":"a:2:9217:3201-0:939:2600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9217:3201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9217:3201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Parts","id":"0:939:2600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"22:1166:3411":{"id":"22:1166:3411","crate_id":22,"name":"get_uint","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1014,4],"end":[1014,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6881:4407":{"id":"1:6881:4407","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6882:68588"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:2466:3994":{"id":"20:2466:3994","crate_id":20,"name":"GetAll","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[150,0],"end":[150,24]},"visibility":"public","docs":"A view to all values stored in a single entry.\n\nThis struct is returned by `HeaderMap::get_all`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"22:140:1735":{"id":"22:140:1735","crate_id":22,"name":"BufMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["22:141:3420","22:142:3421","22:143:3422","22:144:3423","22:145:1765","22:147:1805","22:148:3424","22:149:3425","22:150:3426","22:151:3427","22:152:3428","22:153:3429","22:154:3430","22:155:3431","22:156:3432","22:157:3433","22:158:3434","22:159:3435","22:160:3436","22:161:3437","22:162:3438","22:163:3439","22:164:3440","22:165:3441","22:166:3442","22:167:3443","22:168:3444","22:169:3445","22:170:3446","22:171:3447","22:172:3448","22:173:3449","22:174:3450","22:175:2873","22:176:3451","22:177:3452"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5657:4423":{"id":"1:5657:4423","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5658:6356","1:5659:8588"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:91:1748":{"id":"22:91:1748","crate_id":22,"name":"chunk","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[1028,4],"end":[1028,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3324:4828":{"id":"2:3324:4828","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3326:171","2:3327:1088"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:1361:1583":{"id":"20:1361:1583","crate_id":20,"name":"Request","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/request.rs","begin":[157,0],"end":[157,21]},"visibility":"public","docs":"Represents an HTTP request.\n\nAn HTTP request consists of a head and a potentially optional body. The body\ncomponent is generic, enabling arbitrary types to represent the HTTP body.\nFor example, the body could be `Vec<u8>`, a `Stream` of byte chunks, or a\nvalue that has been deserialized.\n\n# Examples\n\nCreating a `Request` to send\n\n```no_run\nuse http::{Request, Response};\n\nlet mut request = Request::builder()\n    .uri(\"https://www.rust-lang.org/\")\n    .header(\"User-Agent\", \"my-awesome-agent/1.0\");\n\nif needs_awesome_header() {\n    request = request.header(\"Awesome\", \"yes\");\n}\n\nlet response = send(request.body(()).unwrap());\n\n# fn needs_awesome_header() -> bool {\n#     true\n# }\n#\nfn send(req: Request<()>) -> Response<()> {\n    // ...\n# panic!()\n}\n```\n\nInspecting a request to see what was sent.\n\n```\nuse http::{Request, Response, StatusCode};\n\nfn respond_to(req: Request<()>) -> http::Result<Response<()>> {\n    if req.uri() != \"/awesome-url\" {\n        return Response::builder()\n            .status(StatusCode::NOT_FOUND)\n            .body(())\n    }\n\n    let has_awesome_header = req.headers().contains_key(\"Awesome\");\n    let body = req.body();\n\n    // ...\n# panic!()\n}\n```\n\nDeserialize a request of bytes via json:\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Request;\nuse serde::de;\n\nfn deserialize<T>(req: Request<Vec<u8>>) -> serde_json::Result<Request<T>>\n    where for<'de> T: de::Deserialize<'de>,\n{\n    let (parts, body) = req.into_parts();\n    let body = serde_json::from_slice(&body)?;\n    Ok(Request::from_parts(parts, body))\n}\n#\n# fn main() {}\n```\n\nOr alternatively, serialize the body of a request to json\n\n```\n# extern crate serde;\n# extern crate serde_json;\n# extern crate http;\nuse http::Request;\nuse serde::ser;\n\nfn serialize<T>(req: Request<T>) -> serde_json::Result<Request<Vec<u8>>>\n    where T: ser::Serialize,\n{\n    let (parts, body) = req.into_parts();\n    let body = serde_json::to_vec(&body)?;\n    Ok(Request::from_parts(parts, body))\n}\n#\n# fn main() {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13467:70434":{"id":"2:13467:70434","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12992:3379","prim@char":"1:15775:2681"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10498:146":{"id":"2:10498:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10499:638","2:10500:2135","2:10501:65361","2:10502:65362","2:10503:65363","2:10504:65364","2:10505:65365","2:10506:65366","2:10507:65367","2:10508:65368","2:10509:65369","2:10510:65370","2:10511:65371","2:10512:65372","2:10513:65373","2:10514:1506"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13479:70436":{"id":"2:13479:70436","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15775:2681"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49610:5123","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2392:1588":{"id":"20:2392:1588","crate_id":20,"name":"HeaderMap","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[45,0],"end":[45,37]},"visibility":"public","docs":"A set of HTTP headers\n\n`HeaderMap` is an multimap of [`HeaderName`] to values.\n\n[`HeaderName`]: struct.HeaderName.html\n\n# Examples\n\nBasic usage\n\n```\n# use http::HeaderMap;\n# use http::header::{CONTENT_LENGTH, HOST, LOCATION};\nlet mut headers = HeaderMap::new();\n\nheaders.insert(HOST, \"example.com\".parse().unwrap());\nheaders.insert(CONTENT_LENGTH, \"123\".parse().unwrap());\n\nassert!(headers.contains_key(HOST));\nassert!(!headers.contains_key(LOCATION));\n\nassert_eq!(headers[HOST], \"example.com\");\n\nheaders.remove(HOST);\n\nassert!(!headers.contains_key(HOST));\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"HeaderValue","id":"20:2981:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"20:2437:4000":{"id":"20:2437:4000","crate_id":20,"name":"Values","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[124,0],"end":[124,24]},"visibility":"public","docs":"`HeaderMap` value iterator.\n\nEach value contained in the `HeaderMap` will be yielded.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[546,0],"end":[617,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:354:2040","0:361:2047","0:365:2050","0:369:2059","0:371:252"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13470:70435":{"id":"2:13470:70435","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15775:2681","self::pattern":"2:12992:3379"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13002:4783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13017:4782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3144:217":{"id":"2:3144:217","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3146:127","2:3147:1392"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:67:3410":{"id":"22:67:3410","crate_id":22,"name":"get_i128_le","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","begin":[633,4],"end":[633,37]},"visibility":"default","docs":"Gets a signed 128 bit integer from `self` in little-endian byte order.\n\nThe current position is advanced by 16.\n\n# Examples\n\n```\nuse bytes::Buf;\n\nlet mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];\nassert_eq!(0x01020304050607080910111213141516, buf.get_i128_le());\n```\n\n# Panics\n\nThis function panics if there is not enough remaining data in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"34:109:127":{"id":"34:109:127","crate_id":34,"name":"Error","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-body-0.4.5/src/full.rs","begin":[38,4],"end":[38,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38660:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"22:234:1751":{"id":"22:234:1751","crate_id":22,"name":"advance","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","begin":[149,4],"end":[149,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cnt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:397":{"id":"22:397","crate_id":22,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[5,0],"end":[5,25]},"visibility":{"restricted":{"parent":"22:390:2813","path":"::buf::vec_deque"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["copy_to_slice","get_u16","reader","copy_to_bytes","get_f64","get_int_le","get_uint","get_u128_le","get_i64","get_i32_le","get_u32","get_u16_le","get_u8","take","chunks_vectored","get_f32","get_uint_le","get_i128","get_i64_le","get_u64","get_u32_le","get_i16","get_i8","get_f64_le","chain","get_f32_le","get_int","get_i128_le","get_u128","has_remaining","get_u64_le","get_i32","get_i16_le"],"trait":{"kind":"resolved_path","inner":{"name":"Buf","id":"22:42:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"5:4623:224","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:5297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["22:398:1746","22:399:1748","22:400:1751"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3276:1731-0:312:1843":{"id":"a:2:3276:1731-0:312:1843","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:1731","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3179-0:768:2593":{"id":"b:2:3179-0:768:2593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Upgraded","id":"0:768:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13482:70437":{"id":"2:13482:70437","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15775:2681"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49628:5124","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3168-0:421:127":{"id":"b:2:3168-0:421:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:421:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3170:667"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9217:3201-0:297:1590":{"id":"a:2:9217:3201-0:297:1590","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9217:3201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Body","id":"0:297:1590","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:6783:4410":{"id":"1:6783:4410","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6784:68518"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5832:3820":{"id":"5:5832:3820","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:171","5:5835:2900"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9217:3201":{"id":"2:9217:3201","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3170:667":{"id":"2:3170:667","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:398:1746":{"id":"22:398:1746","crate_id":22,"name":"remaining","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","begin":[6,4],"end":[6,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/body/body.rs","begin":[619,0],"end":[634,1]},"visibility":{"restricted":{"parent":"0:247:1589","path":"::body::body"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10250:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Sender","id":"0:312:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:373:646"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:781:1807":{"id":"0:781:1807","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/upgrade.rs","begin":[170,4],"end":[176,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47466:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"task::Context","id":"2:14007:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"io::IoSlice","id":"1:10984:1733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50211:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3962:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3247:209-0:770:2596":{"id":"a:2:3247:209-0:770:2596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnUpgrade","id":"0:770:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3467:2847":{"id":"2:3467:2847","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3468:532"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3454:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13477:64059":{"id":"2:13477:64059","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13444:70426":{"id":"2:13444:70426","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:2445:4001":{"id":"20:2445:4001","crate_id":20,"name":"ValuesMut","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.2.8/src/header/map.rs","begin":[130,0],"end":[130,27]},"visibility":"public","docs":"`HeaderMap` mutable value iterator","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3135:74":{"id":"2:3135:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3137:1999"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10200:2837":{"id":"2:10200:2837","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10201:1506","2:10202:69617","2:10204:3336"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"20:2392:1588":{"crate_id":20,"path":["http","header","map","HeaderMap"],"kind":"struct"},"6:0:783":{"crate_id":6,"path":["libc"],"kind":"module"},"24:12290:6287":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU64"],"kind":"struct"},"17:12431:7515":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"20:2781:4060":{"crate_id":20,"path":["http","header","name","REFRESH"],"kind":"constant"},"6:4293:9260":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:46493:4862":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:3043:70168":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13532:7825":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:14435:1733":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"14:231:5302":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"24:5636:71642":{"crate_id":24,"path":["tokio","runtime","enter","EnterContext"],"kind":"enum"},"20:2763:4042":{"crate_id":20,"path":["http","header","name","IF_MATCH"],"kind":"constant"},"16:4448:7992":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"24:1920:6941":{"crate_id":24,"path":["tokio","io","blocking","Blocking"],"kind":"struct"},"1:15132:4667":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"20:2402:3864":{"crate_id":20,"path":["http","header","map","Iter"],"kind":"struct"},"16:3195:5937":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"29:3958:9146":{"crate_id":29,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"30:6598:3793":{"crate_id":30,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"17:13098:7722":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:53041:4971":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"24:13678:6312":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU16Le"],"kind":"struct"},"16:6644:5754":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:543:8875":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12155:7455":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"35:552:3740":{"crate_id":35,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"12:761:3865":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:47820:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:7854:65249":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"6:4127:9222":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"22:531:6199":{"crate_id":22,"path":["bytes","bytes","Vtable"],"kind":"struct"},"5:8314:5352":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:670:42406":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:37503:3383":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:13792:4539":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"29:5151:9385":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:5783:6731":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:6121:4684":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"35:560:2182":{"crate_id":35,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"29:1609:8989":{"crate_id":29,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:24370:5157":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"24:14217:6308":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI8"],"kind":"struct"},"29:6192:9696":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:22598:69397":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:14742:6781":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"30:10087:6556":{"crate_id":30,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"29:6606:9717":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"30:9528:6548":{"crate_id":30,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"24:12758:2837":{"crate_id":24,"path":["tokio","io","util","write","Write"],"kind":"struct"},"17:11932:7411":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"29:5420:9518":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10041:7207":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"30:8500:71381":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:2162:2846":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"24:7645:6429":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","Permit"],"kind":"struct"},"5:3035:9813":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:49281:5105":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:6250:5335":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"30:8718:71381":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:50039:5135":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"9:963:5509":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:2912:5932":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"24:10909:6483":{"crate_id":24,"path":["tokio","time","driver","entry","TimerEntry"],"kind":"struct"},"30:10466:71381":{"crate_id":30,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"2:53268:8473":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"0:0:1619":{"crate_id":0,"path":["hyper"],"kind":"module"},"0:720:1596":{"crate_id":0,"path":["hyper","upgrade"],"kind":"module"},"16:5472:5719":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11947:7415":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3487:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"30:9776:3793":{"crate_id":30,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"24:9566:3716":{"crate_id":24,"path":["tokio","sync","broadcast","error","TryRecvError"],"kind":"enum"},"9:749:5446":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"24:5976:6407":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","BasicScheduler"],"kind":"struct"},"1:13754:4537":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:48124:3541":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"20:3009:1582":{"crate_id":20,"path":["http","method","Method"],"kind":"struct"},"2:52978:4951":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"20:2750:4029":{"crate_id":20,"path":["http","header","name","CONTENT_RANGE"],"kind":"constant"},"1:1432:3865":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"35:426:3728":{"crate_id":35,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"1:3112:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:4506:7994":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"29:4005:9169":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:9096:6836":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:53248:8471":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"15:269:5602":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:3352:8722":{"crate_id":20,"path":["http","extensions","IdHasher"],"kind":"struct"},"18:136:55227":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11993:7427":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:2303:9801":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:9830:3554":{"crate_id":24,"path":["tokio","sync","watch","Ref"],"kind":"struct"},"30:6897:3797":{"crate_id":30,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"17:13865:7930":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"20:2801:4080":{"crate_id":20,"path":["http","header","name","X_CONTENT_TYPE_OPTIONS"],"kind":"constant"},"5:1441:3993":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:3478:1851":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:6859:4412":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:15792:2695":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:49121:5089":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:24040:41316":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"29:5122:9361":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12408:7514":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10938:7278":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:3303:3079":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:3235:200":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"30:8035:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:1838:6731":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:2269:4895":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13296:7762":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:3332:3922":{"crate_id":20,"path":["http","byte_str","ByteStr"],"kind":"struct"},"2:50256:2958":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"30:6551:3792":{"crate_id":30,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"24:9597:3714":{"crate_id":24,"path":["tokio","sync","mpsc","error","TrySendError"],"kind":"enum"},"17:12073:7443":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10623:7232":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:2170:4472":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"29:3943:9139":{"crate_id":29,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12699:7561":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:52899:4967":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"30:7209:71381":{"crate_id":30,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"17:13172:7733":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5407:9512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13598:7840":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:9510:6770":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"24:9696:6444":{"crate_id":24,"path":["tokio","sync","notify","Notified"],"kind":"struct"},"1:11370:4507":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"29:5378:9499":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"24:13629:6314":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU32Le"],"kind":"struct"},"2:50047:5130":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"8:0:2655":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"20:3024:3739":{"crate_id":20,"path":["http","method","Inner"],"kind":"enum"},"17:10140:6025":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"29:3897:9105":{"crate_id":29,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:7985:6718":{"crate_id":24,"path":["tokio","sync","mpsc","list","Rx"],"kind":"struct"},"16:2773:5956":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:3383:4768":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9649:7195":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:24018:41324":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:9551:6078":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:3265:4640":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"30:9420:3792":{"crate_id":30,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"13:0:2653":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:4614:65805":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:2889:5950":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:7894:5708":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"24:10978:127":{"crate_id":24,"path":["tokio","time","error","Error"],"kind":"struct"},"2:11241:5079":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:12463:5244":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"31:0:1608":{"crate_id":31,"path":["futures_core"],"kind":"module"},"24:9720:192":{"crate_id":24,"path":["tokio","sync","oneshot","Receiver"],"kind":"struct"},"2:8431:2782":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:6166:5740":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:1736:9062":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"30:6634:3796":{"crate_id":30,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"17:9528:1736":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:885:6128":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"30:6689:3792":{"crate_id":30,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"22:0:1606":{"crate_id":22,"path":["bytes"],"kind":"module"},"20:2735:4014":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_EXPOSE_HEADERS"],"kind":"constant"},"30:11613:3809":{"crate_id":30,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"1:5641:4422":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8568:3007":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"20:2728:4007":{"crate_id":20,"path":["http","header","name","ACCEPT_ENCODING"],"kind":"constant"},"30:11027:6540":{"crate_id":30,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"24:13286:6297":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF32Le"],"kind":"struct"},"17:13318:7766":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:10920:6993":{"crate_id":24,"path":["tokio","time","driver","entry","TimerShared"],"kind":"struct"},"30:7057:71381":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:51246:8418":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:1492:4001":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12287:7472":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:7226:5767":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"30:6959:3799":{"crate_id":30,"path":["futures_util","future","future","Then"],"kind":"struct"},"29:556:8892":{"crate_id":29,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:7208:8505":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7717:4545":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"24:12192:6274":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI16"],"kind":"struct"},"2:8065:2030":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:1457:3997":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"9:996:5510":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"29:6636:9720":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:5310:190":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:10377:6090":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7786:5682":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"29:6873:9729":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8895:3021":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"29:6879:9730":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:2462:8501":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"24:9552:3935":{"crate_id":24,"path":["tokio","sync","broadcast","error","RecvError"],"kind":"enum"},"24:14291:6295":{"crate_id":24,"path":["tokio","io","util","read_exact","ReadExact"],"kind":"struct"},"29:4104:9215":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5167:9387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:8929:48934":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:10224:7216":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"29:4093:9210":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11001:7283":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10420:6087":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"20:2753:4032":{"crate_id":20,"path":["http","header","name","CONTENT_TYPE"],"kind":"constant"},"2:2885:402":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"24:7187:3719":{"crate_id":24,"path":["tokio","runtime","thread_pool","idle","State"],"kind":"struct"},"20:2738:4017":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_REQUEST_METHOD"],"kind":"constant"},"30:10380:2843":{"crate_id":30,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"30:1343:3834":{"crate_id":30,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"29:4292:9261":{"crate_id":29,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10477:6021":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"30:10293:71381":{"crate_id":30,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"6:599:8912":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"20:2488:3997":{"crate_id":20,"path":["http","header","map","VacantEntry"],"kind":"struct"},"24:12581:6267":{"crate_id":24,"path":["tokio","io","util","write_buf","WriteBuf"],"kind":"struct"},"2:49565:2845":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:10707:4467":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:5996:5737":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12712:7562":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:8099:3463":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"30:12838:3865":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"2:7628:3469":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:13017:4782":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:12128:4578":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"30:7269:6580":{"crate_id":30,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"16:4350:7989":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:1648:4001":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"29:5997:9605":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"29:1539:8944":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:0:2654":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"24:8047:3710":{"crate_id":24,"path":["tokio","sync","mpsc","unbounded","UnboundedSender"],"kind":"struct"},"20:2475:3993":{"crate_id":20,"path":["http","header","map","Entry"],"kind":"enum"},"24:10128:2826":{"crate_id":24,"path":["tokio","task","task_local","with_task","Guard"],"kind":"struct"},"24:69:71343":{"crate_id":24,"path":["tokio","macros","scoped_tls","ScopedKey"],"kind":"struct"},"16:3772:7984":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:10493:64271":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:2843:5930":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5347:9485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"24:13433:6305":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI32Le"],"kind":"struct"},"30:10311:4869":{"crate_id":30,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"24:4163:2925":{"crate_id":24,"path":["tokio","io","util","async_seek_ext","AsyncSeekExt"],"kind":"trait"},"17:10912:7273":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"12:784:4473":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"20:3201:3923":{"crate_id":20,"path":["http","uri","scheme","Scheme2"],"kind":"enum"},"30:7663:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:4028:3090":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:6413:5594":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:46534:3794":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13780:7908":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:9550:6771":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:47904:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:6757:2826":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:7808:6742":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"20:2786:4065":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_PROTOCOL"],"kind":"constant"},"30:9978:71381":{"crate_id":30,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:4316:2863":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"30:12331:6525":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"1:8403:1843":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"20:2800:4079":{"crate_id":20,"path":["http","header","name","WWW_AUTHENTICATE"],"kind":"constant"},"2:3334:3080":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"33:0:2963":{"crate_id":33,"path":["futures_task"],"kind":"module"},"29:6043:9624":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"29:3937:9138":{"crate_id":29,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"30:6867:71381":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"30:11739:6515":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"29:5189:9404":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:52645:4979":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"30:9820:6551":{"crate_id":30,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"30:11369:3804":{"crate_id":30,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"6:5945:9572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:7537:4533":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:2305:5423":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:9282:1356":{"crate_id":1,"path":["std","task"],"kind":"module"},"2:52788:4947":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"24:4266:106":{"crate_id":24,"path":["tokio","io","util","copy","Copy"],"kind":"struct"},"2:7816:4858":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:1622:8991":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"30:12111:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"12:1651:5588":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:4353:2864":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"9:776:5491":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"24:10943:6996":{"crate_id":24,"path":["tokio","time","driver","wheel","level","Expiration"],"kind":"struct"},"2:57282:8488":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"18:667:6135":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:4641:7997":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"30:10248:71381":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:10304:6000":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:53277:8474":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"29:1614:8991":{"crate_id":29,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:22954:18505":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:4694:6735":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:3253:4634":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"29:3964:9148":{"crate_id":29,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"30:7032:3794":{"crate_id":30,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"20:2481:4085":{"crate_id":20,"path":["hyper","header","Entry","Vacant"],"kind":"variant"},"44:0:1618":{"crate_id":44,"path":["want"],"kind":"module"},"24:9862:1587":{"crate_id":24,"path":["tokio","sync","watch","state","Version"],"kind":"struct"},"17:10529:7221":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:6577:5752":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:6605:5686":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"20:2779:4058":{"crate_id":20,"path":["http","header","name","REFERER"],"kind":"constant"},"1:5890:4722":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:5595:5724":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:568:89":{"crate_id":24,"path":["tokio","loom","std","atomic_u32","AtomicU32"],"kind":"struct"},"30:8354:3820":{"crate_id":30,"path":["futures_util","future","join","Join"],"kind":"struct"},"2:8362:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"24:5087:2826":{"crate_id":24,"path":["tokio","runtime","task","harness","poll_future","Guard"],"kind":"struct"},"33:203:2980":{"crate_id":33,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"29:1519:8936":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"27:996:6123":{"crate_id":27,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:12733:5113":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:49433:5084":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:13705:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"12:354:9798":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:4364:9293":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:5283:6361":{"crate_id":24,"path":["tokio","runtime","task","raw","RawTask"],"kind":"struct"},"24:12899:2200":{"crate_id":24,"path":["tokio","io","util","shutdown","Shutdown"],"kind":"struct"},"17:14000:7962":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:699:4594":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:11200:4669":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12685:7558":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:38660:2949":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:13068:4789":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:3237:4629":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11231:6081":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11981:7425":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10458:7149":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7195:5764":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:5273:5921":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"34:562:71381":{"crate_id":34,"path":["http_body","full","_","__Origin"],"kind":"struct"},"2:50023:5132":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:46870:8348":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:14068:191":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:0:2662":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:0:2663":{"crate_id":17,"path":["object"],"kind":"module"},"2:22799:4448":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:7333:5691":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:15741:8752":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:10956:3739":{"crate_id":24,"path":["tokio","time","driver","sleep","Inner"],"kind":"struct"},"14:11:8258":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:10936:5404":{"crate_id":24,"path":["tokio","time","driver","handle","Handle"],"kind":"struct"},"6:6899:9732":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:1723:9059":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:704:6922":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:4632:2826":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:9005:48935":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46850:2868":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"24:11506:6269":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF32Le"],"kind":"struct"},"29:4137:9233":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6881:9729":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"29:4486:9344":{"crate_id":29,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11750:7372":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"30:6527:6509":{"crate_id":30,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:48368:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"20:3192:3925":{"crate_id":20,"path":["http","uri","path","PathAndQuery"],"kind":"struct"},"6:563:8892":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"24:14650:2927":{"crate_id":24,"path":["tokio","io","util","buf_stream","BufStream"],"kind":"struct"},"30:12985:6606":{"crate_id":30,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:13399:8499":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:50300:2950":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:6359:4402":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:49808:4795":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"30:6248:2991":{"crate_id":30,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"30:10550:3799":{"crate_id":30,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"5:6947:2960":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:3957:9141":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:24000:8362":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"24:309:1789":{"crate_id":24,"path":["tokio","io","async_write","AsyncWrite"],"kind":"trait"},"24:4290:6949":{"crate_id":24,"path":["tokio","io","util","copy_buf","CopyBuf"],"kind":"struct"},"30:8614:3826":{"crate_id":30,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"24:13176:6329":{"crate_id":24,"path":["tokio","io","util","read_line","ReadLine"],"kind":"struct"},"16:5421:5716":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:14:2135":{"crate_id":2,"path":["core","write"],"kind":"macro"},"0:772:945":{"crate_id":0,"path":["hyper","upgrade","on"],"kind":"function"},"24:8177:3101":{"crate_id":24,"path":["tokio","sync","mutex","MappedMutexGuard"],"kind":"struct"},"24:590:91":{"crate_id":24,"path":["tokio","loom","std","atomic_u8","AtomicU8"],"kind":"struct"},"17:12659:7556":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"35:346:192":{"crate_id":35,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"1:11899:4542":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4046:9182":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:9726:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:53382:8481":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:2933:174":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"29:5177:9400":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13041:7684":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:3318:4825":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:2192:4498":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:6556:6366":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","Spawner"],"kind":"struct"},"20:2775:4054":{"crate_id":20,"path":["http","header","name","PROXY_AUTHORIZATION"],"kind":"constant"},"20:2767:4046":{"crate_id":20,"path":["http","header","name","IF_UNMODIFIED_SINCE"],"kind":"constant"},"2:3148:216":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"30:8456:3822":{"crate_id":30,"path":["futures_util","future","join","Join4"],"kind":"struct"},"17:9440:7101":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10571:7228":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:14021:6309":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU128"],"kind":"struct"},"29:150:42080":{"crate_id":29,"path":["libc","unix","FILE"],"kind":"enum"},"30:9236:71381":{"crate_id":30,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"2:49150:5092":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6176:5741":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"34:0:1610":{"crate_id":34,"path":["http_body"],"kind":"module"},"17:9719:7196":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47457:3516":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:8954:6015":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"30:12408:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"17:13978:7956":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:46591:4867":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6014:5738":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:47518:3864":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:47568:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"12:2013:3992":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:3303:4138":{"crate_id":20,"path":["http","version","Http"],"kind":"enum"},"27:1005:6124":{"crate_id":27,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"24:10926:6995":{"crate_id":24,"path":["tokio","time","driver","entry","CachePadded"],"kind":"struct"},"6:6887:9730":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"24:369:1790":{"crate_id":24,"path":["tokio","io","read_buf","ReadBuf"],"kind":"struct"},"24:13070:6319":{"crate_id":24,"path":["tokio","io","util","read_to_end","ReadToEnd"],"kind":"struct"},"30:13088:6510":{"crate_id":30,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"24:11277:71381":{"crate_id":24,"path":["tokio","time","timeout","_","__Origin"],"kind":"struct"},"1:5697:4425":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:15795:2698":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:49920:8409":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"24:4801:6710":{"crate_id":24,"path":["tokio","runtime","enter","Enter"],"kind":"struct"},"16:4386:7990":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"20:2784:4063":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_EXTENSIONS"],"kind":"constant"},"35:439:3709":{"crate_id":35,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"24:7412:6417":{"crate_id":24,"path":["tokio","sync","broadcast","RecvGuard"],"kind":"struct"},"5:8181:3463":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10950:7279":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:6935:9739":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:866:6127":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"33:237:2979":{"crate_id":33,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"9:41:5494":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:10028:7206":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"9:1056:5504":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12234:7465":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"30:4786:1898":{"crate_id":30,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"17:11962:7420":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:5589:764":{"crate_id":2,"path":["core","iter"],"kind":"module"},"12:840:3995":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"29:4119:9222":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12095:7444":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"30:12735:6903":{"crate_id":30,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"2:49897:4799":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10502:7220":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"19:0:980":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"24:12643:6263":{"crate_id":24,"path":["tokio","io","util","write_all","WriteAll"],"kind":"struct"},"16:7392:5677":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:6881:3739":{"crate_id":24,"path":["tokio","runtime","thread_pool","queue","Inner"],"kind":"struct"},"6:6155:2282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"30:10716:6558":{"crate_id":30,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"30:11394:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:10962:7280":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"30:8525:3823":{"crate_id":30,"path":["futures_util","future","join","Join5"],"kind":"struct"},"2:49287:5106":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:7714:4880":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:49461:5114":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"29:3949:9141":{"crate_id":29,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"30:12427:6527":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"2:3962:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:1690:9043":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10968:2030":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:10575:4481":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"18:720:6924":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"29:1588:8975":{"crate_id":29,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"30:10904:71381":{"crate_id":30,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"1:5293:4667":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"29:5213:9413":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:10488:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13154:7728":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6101:5667":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:3539:4489":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:11504:4519":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:11118:48942":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11026:7285":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:782:6922":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"29:4075:9201":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:542:5645":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"12:2005:3864":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46623:4874":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:5719:4429":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4517:9354":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:2772:5404":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"27:698:6131":{"crate_id":27,"path":["memchr","cow","CowBytes"],"kind":"struct"},"29:6804:9721":{"crate_id":29,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"12:1200:5577":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"30:12788:6919":{"crate_id":30,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"1:9687:6773":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:13272:7760":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"24:9776:3105":{"crate_id":24,"path":["tokio","sync","semaphore","Semaphore"],"kind":"struct"},"1:14592:1734":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:15782:2687":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"29:4247:4686":{"crate_id":29,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:51207:8417":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11915:7405":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10975:2869":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"24:11207:6726":{"crate_id":24,"path":["tokio","util","try_lock","LockGuard"],"kind":"struct"},"17:12917:7581":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:7604:5335":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"27:153:55228":{"crate_id":27,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"29:4411:9315":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"24:11996:6268":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF32"],"kind":"struct"},"30:8200:71381":{"crate_id":30,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"18:650:6130":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:13490:4506":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"0:312:1843":{"crate_id":0,"path":["hyper","body","Sender"],"kind":"struct"},"2:46325:5191":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"29:518:8870":{"crate_id":29,"path":["libc","unix","timeval"],"kind":"struct"},"24:13972:6302":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI16"],"kind":"struct"},"6:4331:9273":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"22:1298:6196":{"crate_id":22,"path":["bytes","buf","writer","Writer"],"kind":"struct"},"20:3188:1819":{"crate_id":20,"path":["http","uri","builder","Builder"],"kind":"struct"},"20:2609:6154":{"crate_id":20,"path":["http","header","map","ExtraValue"],"kind":"struct"},"1:12148:4579":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"34:534:2031":{"crate_id":34,"path":["http_body","full","Full"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:10257:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:8328:5353":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"30:9597:68":{"crate_id":30,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"2:23923:8747":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:46473:4860":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"30:12979:3838":{"crate_id":30,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"20:2759:4038":{"crate_id":20,"path":["http","header","name","EXPIRES"],"kind":"constant"},"16:4922:8006":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:22805:4450":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:12590:6778":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:11444:4517":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"29:5555:9565":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:5766:5731":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"24:4094:2924":{"crate_id":24,"path":["tokio","io","util","async_buf_read_ext","AsyncBufReadExt"],"kind":"trait"},"6:161:42081":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:51593:4937":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12756:7569":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:9721:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12671:7557":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:46582:4866":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:9886:7199":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:50211:180":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"30:13021:6920":{"crate_id":30,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"6:1676:9032":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:729:71259":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"29:6628:9718":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:7738:5771":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:148:3066":{"crate_id":24,"path":["tokio","future","poll_fn","PollFn"],"kind":"struct"},"15:248:5598":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:45918:3554":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:3945:9138":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"12:1688:5590":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:49691:4784":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:11539:7334":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13772:7905":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"24:4311:6950":{"crate_id":24,"path":["tokio","io","util","mem","Pipe"],"kind":"struct"},"9:686:5442":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:4996:5054":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:3567:2848":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:23648:4757":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:6469:3792":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:21:658":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"30:13073:6511":{"crate_id":30,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"17:12521:7528":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:12388:6283":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU16"],"kind":"struct"},"16:2991:5944":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:4714:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11779:7383":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:6252:5744":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:1700:9049":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"29:625:8930":{"crate_id":29,"path":["libc","unix","protoent"],"kind":"struct"},"1:10996:2839":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:10780:2648":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"20:2510:2369":{"crate_id":20,"path":["http","header","map","ValueIter"],"kind":"struct"},"5:1011:3864":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:3521:3063":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:4690:4902":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:32030:5217":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"20:2478:4084":{"crate_id":20,"path":["hyper","header","Entry","Occupied"],"kind":"variant"},"16:5753:5730":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"24:546:88":{"crate_id":24,"path":["tokio","loom","std","atomic_u16","AtomicU16"],"kind":"struct"},"1:4521:2826":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7279:5980":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11628:7350":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:24093:5222":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"24:6297:1819":{"crate_id":24,"path":["tokio","runtime","builder","Builder"],"kind":"struct"},"6:1617:8989":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11869:4540":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"24:4244:6345":{"crate_id":24,"path":["tokio","io","util","buf_writer","SeekState"],"kind":"enum"},"20:543:3991":{"crate_id":20,"path":["http","header","map","as_header_name","AsHeaderName"],"kind":"trait"},"16:4477:7993":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:2791:4070":{"crate_id":20,"path":["http","header","name","TE"],"kind":"constant"},"30:11145:71381":{"crate_id":30,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"30:10353:71381":{"crate_id":30,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"24:6874:6715":{"crate_id":24,"path":["tokio","runtime","thread_pool","queue","Local"],"kind":"struct"},"20:2594:6152":{"crate_id":20,"path":["http","header","map","Links"],"kind":"struct"},"18:694:6136":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"20:2788:4067":{"crate_id":20,"path":["http","header","name","SERVER"],"kind":"constant"},"0:402:1872":{"crate_id":0,"path":["hyper","body","to_bytes"],"kind":"function"},"29:504:8862":{"crate_id":29,"path":["libc","unix","group"],"kind":"struct"},"2:47736:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:8122:68850":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:9219:3199":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"35:310:1896":{"crate_id":35,"path":["futures_channel","oneshot"],"kind":"module"},"2:51670:8424":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:9339:4783":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:53352:8479":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:32269:69604":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:47448:3198":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:11520:4521":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6682:5685":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:13054:7691":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:46442:2842":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:2739:4018":{"crate_id":20,"path":["http","header","name","AGE"],"kind":"constant"},"16:3488:5943":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"38:0:1612":{"crate_id":38,"path":["httpdate"],"kind":"module"},"2:2246:4891":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"24:4703:2892":{"crate_id":24,"path":["tokio","loom","std","unsafe_cell","UnsafeCell"],"kind":"struct"},"6:1533:8939":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10864:7270":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:46355:5193":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:10538:4848":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:7303:5770":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"24:12241:6281":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU128"],"kind":"struct"},"2:2887:173":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:6032:5662":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"30:0:1609":{"crate_id":30,"path":["futures_util"],"kind":"module"},"1:1486:4472":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"12:877:4472":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:47652:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:5649:4421":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5987:9596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11809:7395":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:49103:5087":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10984:1733":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:9065:48937":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"35:504:3715":{"crate_id":35,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"16:2754:5919":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"29:4393:9306":{"crate_id":29,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:14906:4550":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"27:950:6922":{"crate_id":27,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"16:7884:5679":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:14459:2845":{"crate_id":24,"path":["tokio","io","util","lines","Lines"],"kind":"struct"},"2:51444:4957":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"14:244:8262":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"29:5961:9589":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"7:0:1456":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:1794:3719":{"crate_id":24,"path":["tokio","fs","read_dir","State"],"kind":"enum"},"2:53229:4939":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:6621:9620":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:9186:6013":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"30:10027:6552":{"crate_id":30,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"2:22530:3383":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6614:9717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12568:7535":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"29:5979:9596":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:11048:2845":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"29:5233:9424":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"29:5461:9528":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"29:1594:8977":{"crate_id":29,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"20:2765:4044":{"crate_id":20,"path":["http","header","name","IF_NONE_MATCH"],"kind":"constant"},"17:13465:7806":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:3324:3864":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46205:5270":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"29:4195:9237":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:14360:4443":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:46825:8347":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:3247:209":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"30:10805:71381":{"crate_id":30,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"2:38723:2889":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"30:11256:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:24608:5161":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"24:5580:6711":{"crate_id":24,"path":["tokio","runtime","task","UnownedTask"],"kind":"struct"},"2:49729:4790":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:11266:4679":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"20:2749:4028":{"crate_id":20,"path":["http","header","name","CONTENT_LOCATION"],"kind":"constant"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"30:7440:3811":{"crate_id":30,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"1:6785:4411":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"24:7981:6717":{"crate_id":24,"path":["tokio","sync","mpsc","list","Tx"],"kind":"struct"},"17:12494:7524":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:9476:7102":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"30:11674:6513":{"crate_id":30,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"29:584:8907":{"crate_id":29,"path":["libc","unix","winsize"],"kind":"struct"},"30:12379:6526":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"2:47543:168":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:46243:4471":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:531:8819":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4083:9201":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4387:9301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:14992:4566":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"31:122:2487":{"crate_id":31,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"1:8985:3015":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4410:9309":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:8114:3992":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:3033:2036":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4227:9239":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:1637:3996":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13942:7952":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6068:9626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6357:5746":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:4927:3553":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:8560:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"24:5768:4440":{"crate_id":24,"path":["tokio","runtime","task","join","JoinHandle"],"kind":"struct"},"1:2460:8500":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:10738:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"30:10586:71381":{"crate_id":30,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"5:3365:4495":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:13002:4783":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:11929:8751":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"6:6028:9623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"24:9787:3107":{"crate_id":24,"path":["tokio","sync","semaphore","OwnedSemaphorePermit"],"kind":"struct"},"24:0:1615":{"crate_id":24,"path":["tokio"],"kind":"module"},"17:13348:7776":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"12:774:3463":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:51718:8425":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:10293:8595":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13547:7829":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"31:39:2487":{"crate_id":31,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"16:5330:7188":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"24:9935:10215":{"crate_id":24,"path":["tokio","task","yield_now","yield_now","YieldNow"],"kind":"struct"},"1:14588:8514":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"29:4470:9339":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:6479:4437":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:11616:7349":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:1194:13311":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13453:7800":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:10569:13309":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:3549:7982":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"29:5392:9510":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"29:4044:9184":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"24:8469:3739":{"crate_id":24,"path":["tokio","sync","oneshot","Inner"],"kind":"struct"},"2:56046:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6464:5684":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:11054:4454":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:46142:8382":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4005:9166":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:55968:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:0:1309":{"crate_id":1,"path":["std"],"kind":"module"},"30:12563:3816":{"crate_id":30,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"30:10406:71381":{"crate_id":30,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"24:1933:3719":{"crate_id":24,"path":["tokio","io","blocking","State"],"kind":"enum"},"30:9133:5292":{"crate_id":30,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"2:2892:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4401:9306":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:8144:3463":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"29:6083:9633":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"29:1752:9071":{"crate_id":29,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9659:71247":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6185:9689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:50973:4955":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:47862:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:51750:8426":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:51029:4976":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:7042:5979":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:32369:69605":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"29:6231:9711":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"14:0:2660":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:4355:2865":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:2782:4061":{"crate_id":20,"path":["http","header","name","RETRY_AFTER"],"kind":"constant"},"2:22795:2487":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"0:421:127":{"crate_id":0,"path":["hyper","Error"],"kind":"struct"},"2:5542:13313":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"24:6667:6385":{"crate_id":24,"path":["tokio","runtime","handle","EnterGuard"],"kind":"struct"},"24:9838:1846":{"crate_id":24,"path":["tokio","sync","watch","Shared"],"kind":"struct"},"17:13733:7890":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:14736:6780":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"35:539:3719":{"crate_id":35,"path":["futures_channel","mpsc","State"],"kind":"struct"},"1:6619:9618":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"30:11435:3795":{"crate_id":30,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"1:897:4598":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:8371:2783":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11588:7345":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:5221:9413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"35:486:3714":{"crate_id":35,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"12:2009:3463":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:3357:2795":{"crate_id":20,"path":["http","extensions","Extensions"],"kind":"struct"},"30:10697:71381":{"crate_id":30,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"29:1728:9062":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"30:9071:6547":{"crate_id":30,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"17:11835:7400":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"35:473:3713":{"crate_id":35,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:15779:2684":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8396:192":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"12:181:5583":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:11389:71381":{"crate_id":24,"path":["tokio","task","task_local","_","__Origin"],"kind":"struct"},"30:11300:3805":{"crate_id":30,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"16:4823:8003":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:46563:4878":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:8054:4614":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:10772:2854":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6491:5749":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13506:7815":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:11274:4669":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:9383:8672":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:23742:5153":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"20:2757:4036":{"crate_id":20,"path":["http","header","name","ETAG"],"kind":"constant"},"16:4535:7995":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:4340:3463":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:11653:6277":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI32Le"],"kind":"struct"},"1:3444:2852":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"20:2727:4006":{"crate_id":20,"path":["http","header","name","ACCEPT_CHARSET"],"kind":"constant"},"5:3877:2648":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5433:5717":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4358:9290":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"24:12883:71381":{"crate_id":24,"path":["tokio","io","util","split","_","__Origin"],"kind":"struct"},"24:4168:2926":{"crate_id":24,"path":["tokio","io","util","async_write_ext","AsyncWriteExt"],"kind":"trait"},"17:12182:7459":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6219:5743":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"29:1650:9020":{"crate_id":29,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"24:5568:6444":{"crate_id":24,"path":["tokio","runtime","task","Notified"],"kind":"struct"},"30:8005:3807":{"crate_id":30,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"27:870:6136":{"crate_id":27,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"29:524:8819":{"crate_id":29,"path":["libc","unix","timespec"],"kind":"struct"},"18:636:6922":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12552:7534":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:23939:8356":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:3064:5992":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:994:5305":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:15110:4463":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4300:9261":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:45883:1877":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"30:7785:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"24:10337:6984":{"crate_id":24,"path":["tokio","time","driver","entry","TimerSharedPadded"],"kind":"struct"},"2:10269:3543":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"20:5:1581":{"crate_id":20,"path":["http","header"],"kind":"module"},"24:6877:9741":{"crate_id":24,"path":["tokio","runtime","thread_pool","queue","Steal"],"kind":"struct"},"16:3041:5935":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2727:2947":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"29:1657:9024":{"crate_id":29,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"12:112:71242":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:50077:4582":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"30:3439:72105":{"crate_id":30,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"2:3350:4839":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13192:7739":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:8247:2815":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:3834:6731":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:429:5580":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:11922:64807":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:13477:7807":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:14428:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"12:892:5567":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"34:37:2030":{"crate_id":34,"path":["http_body","empty","Empty"],"kind":"struct"},"2:46249:5265":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:8902:48933":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13564:7833":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:23549:4449":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:45820:189":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"20:2785:4064":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_KEY"],"kind":"constant"},"6:5371:9497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:46180:5015":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6644:9720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"29:4175:9235":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"29:1514:8934":{"crate_id":29,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"30:10069:71381":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"20:3283:1587":{"crate_id":20,"path":["http","version","Version"],"kind":"struct"},"27:826:6130":{"crate_id":27,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:14868:4577":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:5314:7187":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"30:3545:2975":{"crate_id":30,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"17:12307:7478":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:14380:9896":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"24:11007:7004":{"crate_id":24,"path":["tokio","time","error","Elapsed"],"kind":"struct"},"5:1486:4480":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9259:4447":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4052:9184":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:11355:5083":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13933:7950":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:24642:4546":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:7897:3728":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"5:7250:6731":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4439:9324":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12442:7517":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5672:5726":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"43:0:2655":{"crate_id":43,"path":["cfg_if"],"kind":"module"},"29:6213:9708":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6091:9633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:11907:9893":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:3696:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:11421:3719":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"20:1244:2349":{"crate_id":20,"path":["http","method","InvalidMethod"],"kind":"struct"},"27:920:71260":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"29:4402:9309":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"27:896:6924":{"crate_id":27,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:6570:9995":{"crate_id":24,"path":["tokio","runtime","blocking","pool","Mandatory"],"kind":"enum"},"27:880:6922":{"crate_id":27,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"29:3970:9151":{"crate_id":29,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:3346:4837":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:51102:8416":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:51774:8427":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10117:6104":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"30:13058:6545":{"crate_id":30,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"30:7160:71381":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"35:528:3718":{"crate_id":35,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"29:1525:8939":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:11248:4454":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"30:6251:2990":{"crate_id":30,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"12:937:4476":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"29:4339:9282":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:2325:5401":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"30:11649:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"2:13222:41605":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"6:1563:8952":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:2314:6091":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:9061:3017":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"20:2533:3998":{"crate_id":20,"path":["http","header","map","ValueDrain"],"kind":"struct"},"2:47946:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:56007:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"29:4065:9194":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"34:686:71381":{"crate_id":34,"path":["http_body","combinators","map_data","_","__Origin"],"kind":"struct"},"2:50090:5205":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"24:2099:6943":{"crate_id":24,"path":["tokio","io","stdio_common","SplitByUtf8BoundaryIfWindows"],"kind":"struct"},"20:2981:2345":{"crate_id":20,"path":["http","header","value","HeaderValue"],"kind":"struct"},"24:7199:6366":{"crate_id":24,"path":["tokio","runtime","thread_pool","Spawner"],"kind":"struct"},"11:46:9806":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"24:11898:6284":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU16Le"],"kind":"struct"},"2:49886:4798":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8332:5415":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"30:11167:3802":{"crate_id":30,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"30:5934:6704":{"crate_id":30,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"2:6592:69663":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"5:8352:205":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5255:9435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:3240:2781":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"20:489:2368":{"crate_id":20,"path":["http","header","map","into_header_name","IntoHeaderName"],"kind":"trait"},"29:4503:9352":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"12:1235:5578":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:46403:6750":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:5063:5060":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:1592:3864":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"29:5406:9513":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:5780:4714":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"24:6128:6408":{"crate_id":24,"path":["tokio","runtime","blocking","pool","BlockingPool"],"kind":"struct"},"30:10153:71381":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:10128:6105":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:3946:4472":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:3243:207":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:14718:71381":{"crate_id":24,"path":["tokio","io","util","buf_reader","_","__Origin"],"kind":"struct"},"1:8982:3014":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"19:117:9750":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:14829:4578":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:3467:2847":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:2835:3081":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:5001:5055":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"27:1072:6129":{"crate_id":27,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:11947:6270":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF64"],"kind":"struct"},"24:9704:3719":{"crate_id":24,"path":["tokio","sync","notify","State"],"kind":"enum"},"2:47778:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:48894:5285":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:51188:4948":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"29:5363:9497":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:2856:170":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"20:793:4003":{"crate_id":20,"path":["http","header","value","InvalidHeaderValue"],"kind":"struct"},"30:10267:4868":{"crate_id":30,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"2:3070:4741":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:11111:4462":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"30:10833:6559":{"crate_id":30,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"16:5960:5915":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:14168:6311":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU16"],"kind":"struct"},"1:7585:4536":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:10585:4482":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:9296:7098":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"30:11984:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"30:12907:3864":{"crate_id":30,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"1:4276:4653":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"24:8174:3100":{"crate_id":24,"path":["tokio","sync","mutex","OwnedMutexGuard"],"kind":"struct"},"17:10353:6092":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:3245:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:9849:71254":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:23884:8354":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:48117:3539":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:32170:4398":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7804:5681":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"20:1365:2600":{"crate_id":20,"path":["http","request","Parts"],"kind":"struct"},"27:930:71257":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:10594:3739":{"crate_id":24,"path":["tokio","time","driver","Inner"],"kind":"struct"},"1:5903:4723":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:0:266":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:50288:2951":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"30:11503:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:15280:5606":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5130:9361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"30:7344:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"24:8966:3018":{"crate_id":24,"path":["tokio","sync","rwlock","read_guard","RwLockReadGuard"],"kind":"struct"},"6:1908:43378":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"30:7846:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"27:1025:6125":{"crate_id":27,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:3454:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:1729:4680":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:1776:4434":{"crate_id":24,"path":["tokio","fs","open_options","OpenOptions"],"kind":"struct"},"24:1755:3719":{"crate_id":24,"path":["tokio","fs","file","State"],"kind":"enum"},"17:13912:7944":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"0:625:2482":{"crate_id":0,"path":["hyper","service","make_service_fn"],"kind":"function"},"1:1646:3997":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"30:7186:150":{"crate_id":30,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"30:13160:72104":{"crate_id":30,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"6:6200:9696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:2760:4039":{"crate_id":20,"path":["http","header","name","FORWARDED"],"kind":"constant"},"2:2832:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1472:3996":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11028:2843":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"30:9755:71381":{"crate_id":30,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"6:5420:9516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:49329:5080":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:8152:184":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"20:3079:3902":{"crate_id":20,"path":["http","method","extension","AllocatedExtension"],"kind":"struct"},"2:49189:5094":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"37:202:6696":{"crate_id":37,"path":["httparse","parse_headers_iter_uninit","ShrinkOnDrop"],"kind":"struct"},"2:46832:1916":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:14074:2864":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:3917:4561":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:6241:4685":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5855:5734":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"30:7222:3810":{"crate_id":30,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"33:16:2982":{"crate_id":33,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"2:52252:4953":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:13488:7811":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"9:692:5444":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"20:3252:2856":{"crate_id":20,"path":["http","uri","ErrorKind"],"kind":"enum"},"22:786:1737":{"crate_id":22,"path":["bytes","bytes_mut","BytesMut"],"kind":"struct"},"24:8913:3110":{"crate_id":24,"path":["tokio","sync","rwlock","owned_write_guard_mapped","OwnedRwLockMappedWriteGuard"],"kind":"struct"},"17:11186:7292":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46841:8397":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"30:12916:3865":{"crate_id":30,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"18:849:6125":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:12017:3716":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:53405:8482":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"24:11604:6279":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI64Le"],"kind":"struct"},"24:2111:2862":{"crate_id":24,"path":["tokio","io","stdin","Stdin"],"kind":"struct"},"5:1602:3865":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"27:843:6135":{"crate_id":27,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:3720:4746":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"30:7760:3805":{"crate_id":30,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"24:4228:6345":{"crate_id":24,"path":["tokio","io","util","buf_reader","SeekState"],"kind":"enum"},"2:2060:2826":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"24:6587:1843":{"crate_id":24,"path":["tokio","runtime","blocking","shutdown","Sender"],"kind":"struct"},"2:14007:1801":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:52174:4946":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6136:5711":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5400:9510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5978:9595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:3039:70170":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"24:9532:4691":{"crate_id":24,"path":["tokio","sync","barrier","BarrierState"],"kind":"struct"},"16:6691:5755":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:15786:2689":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"29:4350:9290":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11434:7303":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"20:2731:4010":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_CREDENTIALS"],"kind":"constant"},"1:2586:8502":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"30:8956:3837":{"crate_id":30,"path":["futures_util","future","either","Either"],"kind":"enum"},"2:10210:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"35:447:1843":{"crate_id":35,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"17:9368:7099":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:3280:1722":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:69:5331":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"24:2167:2826":{"crate_id":24,"path":["tokio","io","split","Guard"],"kind":"struct"},"16:7264:5687":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:11041:2844":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"30:6847:3795":{"crate_id":30,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"16:3604:7119":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"30:9395:71381":{"crate_id":30,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"5:8130:70124":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13306:7763":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"20:3197:3927":{"crate_id":20,"path":["http","uri","scheme","Scheme"],"kind":"struct"},"5:8090:5297":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:12673:5109":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4215:9238":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"29:603:8917":{"crate_id":29,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6591:5753":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"12:1144:3997":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:3342:4835":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:11314:5081":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"12:160:5579":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:1540:8942":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11114:4554":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:12771:7298":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"24:1453:1820":{"crate_id":24,"path":["tokio","fs","read","read"],"kind":"function"},"37:28:1736":{"crate_id":37,"path":["httparse","iter","Bytes"],"kind":"struct"},"12:2315:71240":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:8838:3866":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13746:7896":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:11369:5084":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"30:10649:71381":{"crate_id":30,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"24:959:6709":{"crate_id":24,"path":["tokio","util","atomic_cell","AtomicCell"],"kind":"struct"},"0:418:195":{"crate_id":0,"path":["hyper","Result"],"kind":"typedef"},"14:250:8263":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:46265:5123":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"30:7380:6580":{"crate_id":30,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"20:2764:4043":{"crate_id":20,"path":["http","header","name","IF_MODIFIED_SINCE"],"kind":"constant"},"2:55888:4753":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:1136:2952":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"29:3884:9095":{"crate_id":29,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:6021:5929":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"14:216:47289":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13685:7889":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:5790:5732":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"0:482:1109":{"crate_id":0,"path":["hyper","rt"],"kind":"module"},"30:9948:4864":{"crate_id":30,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"30:8690:3830":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"1:11531:4522":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:50027:5134":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13582:7837":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"29:4058:9191":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:49872:4797":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"23:0:1613":{"crate_id":23,"path":["itoa"],"kind":"module"},"35:21:6700":{"crate_id":35,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:3702:4743":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"24:6593:192":{"crate_id":24,"path":["tokio","runtime","blocking","shutdown","Receiver"],"kind":"struct"},"35:140:3716":{"crate_id":35,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"17:12610:7543":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:5707:6359":{"crate_id":24,"path":["tokio","runtime","task","error","JoinError"],"kind":"struct"},"30:11203:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"24:12519:6265":{"crate_id":24,"path":["tokio","io","util","write_all_buf","WriteAllBuf"],"kind":"struct"},"2:51491:4945":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:51570:4934":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3255:4635":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:11767:7380":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:32217:69607":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"30:11572:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:6709:4442":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:53257:8472":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13377:7783":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"20:2743:4022":{"crate_id":20,"path":["http","header","name","CACHE_CONTROL"],"kind":"constant"},"27:170:55229":{"crate_id":27,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:51294:4977":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:2561:6150":{"crate_id":20,"path":["http","header","map","Pos"],"kind":"struct"},"5:7437:6731":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"29:6902:9736":{"crate_id":29,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:15005:4572":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5815:5733":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:48435:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"29:1692:9049":{"crate_id":29,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11325:4409":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"20:3233:2600":{"crate_id":20,"path":["http","uri","Parts"],"kind":"struct"},"29:4087:9207":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"29:5159:9387":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"9:469:8724":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:24574:5160":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:2816:5949":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"20:2567:6151":{"crate_id":20,"path":["http","header","map","HashValue"],"kind":"struct"},"24:14254:6317":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU8"],"kind":"struct"},"1:11143:6693":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:10558:7225":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:14898:8590":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:1045:4440":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"30:8239:71381":{"crate_id":30,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"20:2740:4019":{"crate_id":20,"path":["http","header","name","ALLOW"],"kind":"constant"},"22:1255:5660":{"crate_id":22,"path":["bytes","buf","reader","Reader"],"kind":"struct"},"2:45843:2808":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"18:754:71257":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:24472:4617":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"30:6922:71381":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"20:2792:4071":{"crate_id":20,"path":["http","header","name","TRAILER"],"kind":"constant"},"35:419:5415":{"crate_id":35,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"16:6366:5595":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:11084:4460":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"30:8399:3821":{"crate_id":30,"path":["futures_util","future","join","Join3"],"kind":"struct"},"2:9217:3201":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:49594:5121":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"29:1622:8996":{"crate_id":29,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"29:571:8901":{"crate_id":29,"path":["libc","unix","iovec"],"kind":"struct"},"2:2487:4851":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"25:49:58856":{"crate_id":25,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"30:12497:2868":{"crate_id":30,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"17:10844:6025":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"24:11016:58142":{"crate_id":24,"path":["tokio","time","error","InsertError"],"kind":"enum"},"17:13637:7852":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:11911:64429":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:8841:3867":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"24:11457:6271":{"crate_id":24,"path":["tokio","io","util","write_int","WriteF64Le"],"kind":"struct"},"29:154:42081":{"crate_id":29,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:10407:6088":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"27:0:2664":{"crate_id":27,"path":["memchr"],"kind":"module"},"1:13418:65250":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"12:1118:3996":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:610:6131":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10814:6068":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:5379:9498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"30:8771:71381":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"41:0:3099":{"crate_id":41,"path":["once_cell"],"kind":"module"},"2:3141:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"37:350:2205":{"crate_id":37,"path":["httparse","Header"],"kind":"struct"},"1:12251:8500":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:13520:7822":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"20:2770:4049":{"crate_id":20,"path":["http","header","name","LOCATION"],"kind":"constant"},"20:2736:4015":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_MAX_AGE"],"kind":"constant"},"17:10331:6025":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:1534:4479":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"30:7943:3077":{"crate_id":30,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"17:11572:7340":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:5147:2892":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"29:577:8904":{"crate_id":29,"path":["libc","unix","pollfd"],"kind":"struct"},"5:8282:5351":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"29:536:8875":{"crate_id":29,"path":["libc","unix","rusage"],"kind":"struct"},"2:3481:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9839:6025":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"24:498:71350":{"crate_id":24,"path":["tokio","net","addr","sealed","ToSocketAddrsPriv"],"kind":"trait"},"37:225:127":{"crate_id":37,"path":["httparse","Error"],"kind":"enum"},"16:5384:5714":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:55994:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49361:5110":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"29:4317:9272":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:4734:8000":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:1708:9050":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46218:5124":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:1630:3995":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"31:110:3084":{"crate_id":31,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"5:5868:6738":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:10200:2837":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13240:7748":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12795:7579":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"29:662:42406":{"crate_id":29,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:14077:2860":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"24:4754:6957":{"crate_id":24,"path":["tokio","park","thread","UnparkThread"],"kind":"struct"},"6:3978:9151":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"29:6147:2282":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13760:7902":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"29:3873:9087":{"crate_id":29,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:49479:5115":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"29:1721:4680":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11847:7403":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"24:4302:2030":{"crate_id":24,"path":["tokio","io","util","empty","Empty"],"kind":"struct"},"29:4423:9319":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:13923:6304":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI32"],"kind":"struct"},"18:811:6122":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:3320:5994":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:1602:8977":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:5370:5261":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:12784:5077":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"24:8166:162":{"crate_id":24,"path":["tokio","sync","mutex","Mutex"],"kind":"struct"},"5:7104:6742":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"20:2445:4001":{"crate_id":20,"path":["http","header","map","ValuesMut"],"kind":"struct"},"29:1532:8942":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:3091:5993":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"29:5451:9526":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"30:9112:71381":{"crate_id":30,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"2:45797:187":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:46603:4868":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"30:8103:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"24:9073:3111":{"crate_id":24,"path":["tokio","sync","rwlock","write_guard_mapped","RwLockMappedWriteGuard"],"kind":"struct"},"2:0:475":{"crate_id":2,"path":["core"],"kind":"module"},"6:5197:9404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:8849:6077":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"24:11128:1899":{"crate_id":24,"path":["tokio","util","sync_wrapper","SyncWrapper"],"kind":"struct"},"30:5673:6703":{"crate_id":30,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"2:4992:3555":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:49130:5090":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13370:7781":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:8612:3008":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:5561:5723":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:1764:5757":{"crate_id":24,"path":["tokio","fs","file","Operation"],"kind":"enum"},"1:12108:4577":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:9777:6774":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"30:6709:71381":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"20:2787:4066":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_VERSION"],"kind":"constant"},"1:5575:4446":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11714:7367":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:15791:2694":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"12:747:3864":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3754:3864":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"20:2783:4062":{"crate_id":20,"path":["http","header","name","SEC_WEBSOCKET_ACCEPT"],"kind":"constant"},"2:3610:5185":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:5782:6960":{"crate_id":24,"path":["tokio","runtime","task","state","Snapshot"],"kind":"struct"},"0:242:1869":{"crate_id":0,"path":["hyper","body","aggregate"],"kind":"function"},"6:4255:4686":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:3714:7983":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3743:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:432:1914":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:3691:213":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"31:96:1897":{"crate_id":31,"path":["futures_core","stream","Stream"],"kind":"trait"},"6:3868:9078":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"24:9885:6462":{"crate_id":24,"path":["tokio","sync","watch","state","AtomicState"],"kind":"struct"},"5:2195:6733":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4073:9194":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"30:8606:3825":{"crate_id":30,"path":["futures_util","future","select","Select"],"kind":"struct"},"1:1522:4477":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:49575:5119":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:49052:5082":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"12:396:5581":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:10764:4647":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:15794:2697":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:13865:4538":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:12439:5280":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:739:6929":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:4371:9295":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:6381:4405":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"24:9679:6443":{"crate_id":24,"path":["tokio","sync","notify","NotificationType"],"kind":"enum"},"20:2772:4051":{"crate_id":20,"path":["http","header","name","ORIGIN"],"kind":"constant"},"29:1709:9056":{"crate_id":29,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"30:7460:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:10317:6003":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:8325:4908":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"30:9475:3792":{"crate_id":30,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"14:47:8258":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:2159:3864":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"24:13531:6310":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU128Le"],"kind":"struct"},"1:11962:3864":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:4394:2861":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:6881:4407":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:829:6124":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:11303:9605":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"20:2726:4005":{"crate_id":20,"path":["http","header","name","ACCEPT"],"kind":"constant"},"6:6636:9718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"35:454:3710":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"6:4449:9330":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7928:1839":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"30:12874:3826":{"crate_id":30,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"5:6468:3992":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"12:1180:5576":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"24:13825:6300":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI128"],"kind":"struct"},"2:11999:6756":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:13540:7828":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11678:7357":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7856:5774":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10236:6018":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"20:2769:4048":{"crate_id":20,"path":["http","header","name","LINK"],"kind":"constant"},"42:0:6612":{"crate_id":42,"path":["log"],"kind":"module"},"2:49230:5098":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:6239:9711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12247:7467":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:47534:3463":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"24:9726:3935":{"crate_id":24,"path":["tokio","sync","oneshot","error","RecvError"],"kind":"struct"},"20:2702:4559":{"crate_id":20,"path":["http","header","name","Custom"],"kind":"struct"},"29:5520:9540":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:3800:7985":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12195:7460":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:48383:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:13796:177":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:7467:5673":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"30:10493:6557":{"crate_id":30,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:49211:5096":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"30:6363:6586":{"crate_id":30,"path":["futures_util","fns","OkFn"],"kind":"struct"},"30:12710:71381":{"crate_id":30,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"6:4478:9339":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"30:9022:6546":{"crate_id":30,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"29:617:8925":{"crate_id":29,"path":["libc","unix","servent"],"kind":"struct"},"12:2039:4497":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"24:12094:6278":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI64"],"kind":"struct"},"30:10929:10211":{"crate_id":30,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:1476:3992":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:22858:4931":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:10431:6872":{"crate_id":24,"path":["tokio","time","driver","wheel","level","Level"],"kind":"struct"},"24:2106:2860":{"crate_id":24,"path":["tokio","io","stderr","Stderr"],"kind":"struct"},"29:4015:9175":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"30:12589:71381":{"crate_id":30,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"17:9264:7187":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:11018:2842":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:46483:4861":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:48663:4849":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"24:611:92":{"crate_id":24,"path":["tokio","loom","std","atomic_usize","AtomicUsize"],"kind":"struct"},"24:11173:2989":{"crate_id":24,"path":["tokio","util","wake","WakerRef"],"kind":"struct"},"5:7833:6748":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"24:10969:7000":{"crate_id":24,"path":["tokio","time","driver","ClockTime"],"kind":"struct"},"27:977:6121":{"crate_id":27,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:7870:5678":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"29:5412:9516":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"29:4207:9238":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"30:7907:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:8406:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"29:4363:9295":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"30:7638:3803":{"crate_id":30,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"16:6208:5742":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"12:2331:2814":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"30:8735:3831":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"24:14507:6260":{"crate_id":24,"path":["tokio","io","util","flush","Flush"],"kind":"struct"},"2:3263:2888":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:3357:4497":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:610:8917":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8725:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"30:5804:3930":{"crate_id":30,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"2:5563:4748":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:11035:1736":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"24:13482:6303":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI16Le"],"kind":"struct"},"17:13163:7732":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:23001:4931":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:5210:9405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13924:7946":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"37:324:1584":{"crate_id":37,"path":["httparse","Response"],"kind":"struct"},"30:5539:6904":{"crate_id":30,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"30:8136:1728":{"crate_id":30,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"1:15798:2701":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"20:2410:3865":{"crate_id":20,"path":["http","header","map","IterMut"],"kind":"struct"},"17:607:7108":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:1680:184":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10489:6026":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"12:976:4479":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"30:12506:6917":{"crate_id":30,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"6:4033:9178":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:7815:6717":{"crate_id":24,"path":["tokio","sync","mpsc","chan","Tx"],"kind":"struct"},"5:8264:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:2260:4894":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:937:6708":{"crate_id":24,"path":["tokio","coop","with_budget","ResetGuard"],"kind":"struct"},"17:12385:7505":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:2859:169":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:5360:5713":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"24:14605:2853":{"crate_id":24,"path":["tokio","io","util","buf_writer","BufWriter"],"kind":"struct"},"20:2789:4068":{"crate_id":20,"path":["http","header","name","SET_COOKIE"],"kind":"constant"},"24:230:1788":{"crate_id":24,"path":["tokio","io","async_read","AsyncRead"],"kind":"trait"},"6:5241:9424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:9780:3106":{"crate_id":24,"path":["tokio","sync","semaphore","SemaphorePermit"],"kind":"struct"},"12:2309:9802":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4133:9224":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:49112:5088":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13119:7727":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:7146:5760":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"7:85:46915":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:13580:6316":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU64Le"],"kind":"struct"},"20:1498:2600":{"crate_id":20,"path":["http","response","Parts"],"kind":"struct"},"6:3990:9160":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:11408:6467":{"crate_id":24,"path":["tokio","task","local","RunUntil"],"kind":"struct"},"29:5428:9520":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:49415:5083":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"20:2780:4059":{"crate_id":20,"path":["http","header","name","REFERRER_POLICY"],"kind":"constant"},"16:6949:5975":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"9:1075:5512":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"29:5970:9595":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:1215:5399":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"29:4509:9354":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:22575:69395":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:5657:4423":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6964:3197":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"29:4264:9248":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:2453:3992":{"crate_id":20,"path":["http","header","map","Drain"],"kind":"struct"},"1:15787:2690":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:4638:6735":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:45636:3868":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"30:8435:71381":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"30:9005:71381":{"crate_id":30,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"24:1108:2898":{"crate_id":24,"path":["tokio","select"],"kind":"macro"},"17:9689:71251":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:2794:5657":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:47405:3463":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"31:27:3083":{"crate_id":31,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"1:10343:6775":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:10543:7222":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"27:812:6922":{"crate_id":27,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:3962:195":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"24:6632:6385":{"crate_id":24,"path":["tokio","runtime","context","EnterGuard"],"kind":"struct"},"17:10468:6022":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:1153:8490":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:6645:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"24:11800:6288":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU64Le"],"kind":"struct"},"29:1715:9059":{"crate_id":29,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:11311:71381":{"crate_id":24,"path":["tokio","time","driver","sleep","_","__Origin"],"kind":"struct"},"17:2484:49025":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:9218:3200":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"29:5937:9572":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12208:7462":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:13755:3813":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:2366:587":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:5127:3556":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"20:3098:1819":{"crate_id":20,"path":["http","response","Builder"],"kind":"struct"},"6:4120:9220":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"29:4254:9241":{"crate_id":29,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:47694:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11665:7356":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:4:965":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"12:377:5582":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"24:4760:3739":{"crate_id":24,"path":["tokio","park","thread","Inner"],"kind":"struct"},"16:4230:7987":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:5363:3719":{"crate_id":24,"path":["tokio","runtime","task","state","State"],"kind":"struct"},"6:5998:9601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"24:4104:1811":{"crate_id":24,"path":["tokio","io","util","async_read_ext","AsyncReadExt"],"kind":"trait"},"17:1236:7110":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12725:7563":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"24:14556:2842":{"crate_id":24,"path":["tokio","io","util","chain","Chain"],"kind":"struct"},"5:1934:4472":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:48110:3540":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:15789:2692":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"29:592:8912":{"crate_id":29,"path":["libc","unix","linger"],"kind":"struct"},"29:1900:43378":{"crate_id":29,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"30:10878:6560":{"crate_id":30,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"30:9572:71381":{"crate_id":30,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"20:630:4002":{"crate_id":20,"path":["http","header","name","InvalidHeaderName"],"kind":"struct"},"30:11941:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"2:24086:9817":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:49610:5123":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:3964:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"30:9854:71381":{"crate_id":30,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"29:6862:9725":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:5663:6707":{"crate_id":24,"path":["tokio","runtime","enter","exit","Reset"],"kind":"struct"},"24:9254:1838":{"crate_id":24,"path":["tokio","sync","task","atomic_waker","AtomicWaker"],"kind":"struct"},"29:5540:9554":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:11280:4687":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"24:4257:6947":{"crate_id":24,"path":["tokio","io","util","copy","CopyBuffer"],"kind":"struct"},"24:14070:6315":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU64"],"kind":"struct"},"1:12004:3935":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:48898:5284":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:3372:4501":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"37:0:1611":{"crate_id":37,"path":["httparse"],"kind":"module"},"17:12946:7601":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:24540:4618":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"31:44:2973":{"crate_id":31,"path":["futures_core","future","TryFuture"],"kind":"trait"},"6:3918:9115":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:3120:2835":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:12582:7537":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:10554:13308":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"12:968:4478":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:6221:9708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"30:12768:71381":{"crate_id":30,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"6:6176:9686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8761:6836":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"24:7367:1843":{"crate_id":24,"path":["tokio","sync","broadcast","Sender"],"kind":"struct"},"6:4281:9253":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"13:232:8723":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"20:2582:5579":{"crate_id":20,"path":["http","header","map","Bucket"],"kind":"struct"},"1:10756:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:15785:2688":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:9555:68516":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"30:10859:71381":{"crate_id":30,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"30:12666:6898":{"crate_id":30,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"2:24121:5177":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:9133:48939":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:52287:4935":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"29:3860:9078":{"crate_id":29,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:511:8862":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:7886:4843":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:6852:9722":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"29:6077:9631":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:2257:5402":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"30:12647:59226":{"crate_id":30,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"2:12992:3379":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:632:8930":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"24:10986:1910":{"crate_id":24,"path":["tokio","time","error","Kind"],"kind":"enum"},"24:7267:6716":{"crate_id":24,"path":["tokio","coop","RestoreOnPending"],"kind":"struct"},"2:6396:4864":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:3377:4765":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"3:0:417":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:1547:8944":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"27:708:7097":{"crate_id":27,"path":["memchr","cow","Imp"],"kind":"enum"},"24:5672:6712":{"crate_id":24,"path":["tokio","runtime","enter","DisallowBlockingGuard"],"kind":"struct"},"5:3483:4472":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:3533:2853":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6731:5968":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13282:7761":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:51341:4965":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"20:2798:4077":{"crate_id":20,"path":["http","header","name","VIA"],"kind":"constant"},"17:11482:7318":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"30:9495:71381":{"crate_id":30,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:49907:4800":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11978:3463":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:9961:7201":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:5531:3004":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:13776:6296":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF32"],"kind":"struct"},"12:930:4475":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"12:2025:4495":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:22558:69384":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"24:4771:6958":{"crate_id":24,"path":["tokio","park","thread","CachedParkThread"],"kind":"struct"},"17:11147:7290":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:22543:69384":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"24:7370:192":{"crate_id":24,"path":["tokio","sync","broadcast","Receiver"],"kind":"struct"},"2:32211:4399":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:23964:5027":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11406:2205":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:1658:4473":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"24:9817:192":{"crate_id":24,"path":["tokio","sync","watch","Receiver"],"kind":"struct"},"17:13898:7937":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7250:5769":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:1311:6109":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"29:6206:9705":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"30:12027:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"2:3276:1731":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"30:7491:3802":{"crate_id":30,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"17:2512:6089":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"20:2747:4026":{"crate_id":20,"path":["http","header","name","CONTENT_LANGUAGE"],"kind":"constant"},"34:642:1868":{"crate_id":34,"path":["http_body","size_hint","SizeHint"],"kind":"struct"},"29:6856:9724":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"12:1100:3993":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:4623:2838":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:10250:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11015:7284":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"9:900:9807":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"34:575:3073":{"crate_id":34,"path":["http_body","limited","Limited"],"kind":"struct"},"1:15788:2691":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"24:14673:71381":{"crate_id":24,"path":["tokio","io","util","buf_stream","_","__Origin"],"kind":"struct"},"2:11164:5077":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:1596:8975":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10850:4558":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:10405:8350":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:12982:7632":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:46511:8394":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:578:8901":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:10259:3539":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:12103:3019":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:5410:2826":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:11850:4538":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"29:4112:9220":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"30:8577:71381":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"30:9333:71381":{"crate_id":30,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"1:15797:2700":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:4790:8002":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:14686:2852":{"crate_id":24,"path":["tokio","io","util","buf_reader","BufReader"],"kind":"struct"},"20:2752:4031":{"crate_id":20,"path":["http","header","name","CONTENT_SECURITY_POLICY_REPORT_ONLY"],"kind":"constant"},"17:12262:7470":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"31:194:1838":{"crate_id":31,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"0:680:2483":{"crate_id":0,"path":["hyper","service","service_fn"],"kind":"function"},"24:12837:71381":{"crate_id":24,"path":["tokio","io","util","take","_","__Origin"],"kind":"struct"},"30:8973:2842":{"crate_id":30,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"6:5312:9465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:8297:5192":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:6004:4676":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:4509:2869":{"crate_id":24,"path":["tokio","io","util","sink","Sink"],"kind":"struct"},"24:11251:6975":{"crate_id":24,"path":["tokio","time","timeout","Timeout"],"kind":"struct"},"24:7234:1910":{"crate_id":24,"path":["tokio","runtime","Kind"],"kind":"enum"},"30:7112:71381":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:1195:70296":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"24:4724:3837":{"crate_id":24,"path":["tokio","park","either","Either"],"kind":"enum"},"5:374:5360":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:2175:4495":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:1689:5397":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:48413:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"24:14344:1790":{"crate_id":24,"path":["tokio","io","util","read_buf","ReadBuf"],"kind":"struct"},"2:46654:4871":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:4852:8004":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:1028:160":{"crate_id":24,"path":["tokio","util","linked_list","LinkedList"],"kind":"struct"},"20:3242:2353":{"crate_id":20,"path":["http","uri","InvalidUri"],"kind":"struct"},"2:3330:4831":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:55981:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9809:71252":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"20:1494:1584":{"crate_id":20,"path":["http","response","Response"],"kind":"struct"},"20:2771:4050":{"crate_id":20,"path":["http","header","name","MAX_FORWARDS"],"kind":"constant"},"30:7521:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:3118:5946":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11499:7323":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"30:10128:5304":{"crate_id":30,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"9:809:3719":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10975:7281":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:4279:4654":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:3218:5938":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:14605:4542":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"30:11891:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"24:8409:1896":{"crate_id":24,"path":["tokio","sync","oneshot"],"kind":"module"},"37:251:3877":{"crate_id":37,"path":["httparse","InvalidChunkSize"],"kind":"struct"},"24:1832:3813":{"crate_id":24,"path":["tokio","future","maybe_done","MaybeDone"],"kind":"enum"},"2:50270:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"12:463:71241":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:15781:2686":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:45911:4846":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"35:547:3724":{"crate_id":35,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"30:7882:3806":{"crate_id":30,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"2:49220:5097":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"29:4462:9337":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:1511:4476":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"12:866:3992":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"0:768:2593":{"crate_id":0,"path":["hyper","upgrade","Upgraded"],"kind":"struct"},"5:4237:6731":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13986:7959":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"29:1555:8952":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"29:1668:9032":{"crate_id":29,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:3429:5658":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"30:12925:3463":{"crate_id":30,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"6:1760:9071":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13627:7847":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:46613:4869":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:10903:3739":{"crate_id":24,"path":["tokio","time","clock","Inner"],"kind":"struct"},"6:1572:8958":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5269:9436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5522:9539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:3484:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:49585:5120":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:11064:7007":{"crate_id":24,"path":["tokio","util","rand","FastRand"],"kind":"struct"},"20:2758:4037":{"crate_id":20,"path":["http","header","name","EXPECT"],"kind":"constant"},"2:51545:4952":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"30:9210:4860":{"crate_id":30,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"1:14375:9894":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:3708:4745":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13356:7779":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"20:2773:4052":{"crate_id":20,"path":["http","header","name","PRAGMA"],"kind":"constant"},"16:3522:7115":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:10261:3540":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"9:1020:5511":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12051:7434":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"20:2796:4074":{"crate_id":20,"path":["http","header","name","UPGRADE_INSECURE_REQUESTS"],"kind":"constant"},"2:50055:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"29:4323:9273":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:584:8904":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:14803:4540":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"27:853:142":{"crate_id":27,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:3061:3901":{"crate_id":20,"path":["http","method","extension","InlineExtension"],"kind":"struct"},"30:9250:4861":{"crate_id":30,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"20:2729:4008":{"crate_id":20,"path":["http","header","name","ACCEPT_LANGUAGE"],"kind":"constant"},"1:13770:65246":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10160:7212":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9649:4663":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:46305:5017":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:6239:6388":{"crate_id":24,"path":["tokio","runtime","blocking","task","BlockingTask"],"kind":"struct"},"12:2323:9804":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"20:2741:4020":{"crate_id":20,"path":["http","header","name","ALT_SVC"],"kind":"constant"},"2:23644:2487":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:5717:5728":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"29:1564:8958":{"crate_id":29,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"13:120:47256":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:5707:4426":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:14017:2959":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"29:5371:9498":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:4955:8007":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:11163:64428":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"36:13:2218":{"crate_id":36,"path":["tower_service","Service"],"kind":"trait"},"1:5852:4717":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11304:48943":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:11072:3864":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12028:7431":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:22990:2487":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:13831:3066":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"33:258:2984":{"crate_id":33,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"1:7254:176":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12040:7433":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"30:10764:4867":{"crate_id":30,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:46320:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:15757:64273":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2748:566":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4523:9357":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:7599:4537":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:10712:4625":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:8358:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:15799:2702":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7453:5672":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"30:8861:3833":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"24:6659:6383":{"crate_id":24,"path":["tokio","runtime","handle","HandleInner"],"kind":"struct"},"1:12049:3714":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6124:9647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"30:11865:3810":{"crate_id":30,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"6:3966:9146":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"12:0:2659":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"18:774:6922":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:3145:5945":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"29:4219:9239":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:3767:3865":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:4304:7988":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:50996:4943":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13497:7814":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5580:5908":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"30:13103:6508":{"crate_id":30,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"1:11514:3864":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:4511:9352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6620:5962":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12168:7240":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"30:8836:71381":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:4566:2836":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"29:4185:9236":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"30:6737:3801":{"crate_id":30,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"1:15774:2680":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:45774:188":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:7119:5663":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"24:6649:6409":{"crate_id":24,"path":["tokio","runtime","driver","Driver"],"kind":"struct"},"17:9799:7198":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5436:9520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:50203:3062":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:3506:5942":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:157:42080":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"24:6502:6387":{"crate_id":24,"path":["tokio","runtime","handle","TryCurrentErrorKind"],"kind":"enum"},"24:11849:6286":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU32Le"],"kind":"struct"},"30:12602:3825":{"crate_id":30,"path":["futures_util","stream","select","Select"],"kind":"struct"},"30:8148:3813":{"crate_id":30,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"2:11203:5078":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:3172:5936":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"30:12046:6520":{"crate_id":30,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"1:7571:4535":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:49603:5122":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9162:6080":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:4623:224":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:1554:8947":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:46502:4863":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:3039:10212":{"crate_id":24,"path":["tokio","io","util","copy_bidirectional","CopyBidirectional"],"kind":"struct"},"2:49202:5095":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11081:4456":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"27:1033:6126":{"crate_id":27,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:8447:5332":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:9543:68517":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"30:506:2974":{"crate_id":30,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"1:15790:2693":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:3324:4828":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:11108:4461":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:9971:71255":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"24:990:6456":{"crate_id":24,"path":["tokio","util","wake_list","WakeList"],"kind":"struct"},"30:11547:3077":{"crate_id":30,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"1:6617:9616":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6087:5669":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:5560:3930":{"crate_id":24,"path":["tokio","runtime","task","Task"],"kind":"struct"},"6:4431:9319":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"27:137:55227":{"crate_id":27,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9769:71250":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"7:38:46908":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13554:7830":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:2945:5955":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"30:12544:71381":{"crate_id":30,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"20:2602:6153":{"crate_id":20,"path":["http","header","map","RawLinks"],"kind":"struct"},"29:4298:9264":{"crate_id":29,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:3543:4906":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:3034:70169":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"30:8174:3815":{"crate_id":30,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"2:51618:4938":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:8830:1916":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:51855:4978":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:1665:9024":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"30:9895:3796":{"crate_id":30,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"30:10218:6555":{"crate_id":30,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:47389:3864":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:4060:9189":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5548:9554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:10403:6024":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:46286:5268":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10481:2487":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"30:10169:6554":{"crate_id":30,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"6:4013:9169":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"22:1242:3463":{"crate_id":22,"path":["bytes","buf","iter","IntoIter"],"kind":"struct"},"17:10081:5997":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13810:7914":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7514:5692":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:12581:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"24:12811:2843":{"crate_id":24,"path":["tokio","io","util","take","Take"],"kind":"struct"},"6:3905:9105":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:12088:3010":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"24:14119:6313":{"crate_id":24,"path":["tokio","io","util","read_int","ReadU32"],"kind":"struct"},"0:483:2445":{"crate_id":0,"path":["hyper","rt","Executor"],"kind":"trait"},"24:9855:3935":{"crate_id":24,"path":["tokio","sync","watch","error","RecvError"],"kind":"struct"},"30:10745:71381":{"crate_id":30,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"17:12632:7554":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:13617:4548":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11640:7353":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:10503:1819":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"30:12304:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"20:544:2487":{"crate_id":20,"path":["http","header","map","as_header_name","Sealed"],"kind":"trait"},"16:7205:5765":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"24:9714:1843":{"crate_id":24,"path":["tokio","sync","oneshot","Sender"],"kind":"struct"},"2:5118:5061":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:3889:5416":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11255:4718":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"30:11231:3803":{"crate_id":30,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"29:4125:9224":{"crate_id":29,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4023:9175":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11328:7298":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"20:0:1580":{"crate_id":20,"path":["http"],"kind":"module"},"6:624:8925":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:5927:5735":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:8321:4909":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:3972:9148":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:9759:7197":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"25:0:1614":{"crate_id":25,"path":["pin_project_lite"],"kind":"module"},"24:13384:6307":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI64Le"],"kind":"struct"},"20:2751:4030":{"crate_id":20,"path":["http","header","name","CONTENT_SECURITY_POLICY"],"kind":"constant"},"9:927:47012":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"29:4493:9347":{"crate_id":29,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"20:2733:4012":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_METHODS"],"kind":"constant"},"6:4241:9240":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"29:6060:9626":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"30:11909:6517":{"crate_id":30,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"2:10271:3544":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:7571:5668":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"30:11325:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"24:12851:2844":{"crate_id":24,"path":["tokio","io","util","split","Split"],"kind":"struct"},"2:48702:8407":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4282:4655":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12598:7541":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:3743:6065":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12118:7450":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:7216:5766":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:5736:5729":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:2196:1036":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:3313:4821":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:45728:184":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:8187:3463":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"24:5514:2989":{"crate_id":24,"path":["tokio","runtime","task","waker","WakerRef"],"kind":"struct"},"29:4379:9301":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"29:1736:9066":{"crate_id":29,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7761:5772":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:7849:3739":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"5:4510:5381":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:47466:178":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"20:2745:4024":{"crate_id":20,"path":["http","header","name","CONTENT_DISPOSITION"],"kind":"constant"},"16:7843:5773":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:9740:3716":{"crate_id":24,"path":["tokio","sync","oneshot","error","TryRecvError"],"kind":"enum"},"2:48647:4488":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"25:55:6705":{"crate_id":25,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"24:1808:4626":{"crate_id":24,"path":["tokio","fs","read_dir","DirEntry"],"kind":"struct"},"2:48655:8401":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10001:48987":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:4883:3112":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:2543:2648":{"crate_id":20,"path":["http","header","map","Cursor"],"kind":"enum"},"17:13394:7786":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:10526:3529":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:23977:5028":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:1463:4000":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4341:9279":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:547:5910":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"24:11355:10217":{"crate_id":24,"path":["tokio","task","task_local","TaskLocalFuture"],"kind":"struct"},"6:3862:9077":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"30:10199:71381":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:5522:5722":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"36:0:1616":{"crate_id":36,"path":["tower_service"],"kind":"module"},"20:2797:4076":{"crate_id":20,"path":["http","header","name","VARY"],"kind":"constant"},"2:47347:166":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"30:11958:6518":{"crate_id":30,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"17:11100:6083":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:8105:5306":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"23:39:2487":{"crate_id":23,"path":["itoa","private","Sealed"],"kind":"trait"},"29:0:783":{"crate_id":29,"path":["libc"],"kind":"module"},"24:2323:2920":{"crate_id":24,"path":["tokio","io","split","WriteHalf"],"kind":"struct"},"29:5945:9577":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12741:7565":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10149:7199":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:25114:5002":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:10892:203":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:2166:3992":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:4438:3864":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:5882:6740":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:11856:171":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:2399:8497":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:7654:4539":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"30:12847:6591":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"5:1091:6731":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6152:5671":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:46226:5264":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:56020:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1501:4474":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"30:11106:6562":{"crate_id":30,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"17:12142:7452":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:52012:4973":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:1021:4614":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:1442:3463":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"27:1061:6128":{"crate_id":27,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"30:6812:71381":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:4614:7996":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:3397:4759":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"24:9526:3006":{"crate_id":24,"path":["tokio","sync","barrier","Barrier"],"kind":"struct"},"16:7549:5680":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11199:7294":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:6100:9636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:4008:7113":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:10200:7214":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8847:4700":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"6:5191:9403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"30:10043:4865":{"crate_id":30,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"17:11378:6007":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"35:461:192":{"crate_id":35,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"1:15775:2681":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"30:12172:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"2:51395:4972":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"29:6092:9636":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:9771:3103":{"crate_id":24,"path":["tokio","sync","batch_semaphore","AcquireError"],"kind":"struct"},"1:4314:2862":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"30:5199:3066":{"crate_id":30,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"24:1038:6155":{"crate_id":24,"path":["tokio","util","linked_list","Link"],"kind":"trait"},"20:2778:4057":{"crate_id":20,"path":["http","header","name","RANGE"],"kind":"constant"},"2:48401:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"24:9689:4699":{"crate_id":24,"path":["tokio","sync","notify","Waiter"],"kind":"struct"},"1:2181:4496":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"29:6020:9623":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"22:526:1736":{"crate_id":22,"path":["bytes","bytes","Bytes"],"kind":"struct"},"20:2768:4047":{"crate_id":20,"path":["http","header","name","LAST_MODIFIED"],"kind":"constant"},"20:2793:4072":{"crate_id":20,"path":["http","header","name","TRANSFER_ENCODING"],"kind":"constant"},"1:10482:4595":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:5975:5736":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5414:9513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11970:7422":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:50948:4963":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:49628:5124":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:744:71260":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:10206:6466":{"crate_id":24,"path":["tokio","task","local","LocalSet"],"kind":"struct"},"17:13963:7955":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"30:12067:6521":{"crate_id":30,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"30:9294:4862":{"crate_id":30,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"5:1669:4474":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12507:7525":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:49515:5117":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:3939:7986":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:15525:6782":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:5228:9415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:3213:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"30:11840:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"2:37479:168":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"24:4102:5625":{"crate_id":24,"path":["tokio","io","util","async_buf_read_ext","AsyncBufReadExt","lines"],"kind":"foreign_type"},"6:1744:9066":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:24710:5163":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:5386:9499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"25:65:6706":{"crate_id":25,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"29:1546:8947":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:13253:4681":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:1717:9056":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"29:4052:9189":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6870:9725":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:15245:8594":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"0:202:1589":{"crate_id":0,"path":["hyper","body"],"kind":"module"},"6:5459:9526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:1528:4478":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"33:407:2989":{"crate_id":33,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"22:374:6195":{"crate_id":22,"path":["bytes","buf","uninit_slice","UninitSlice"],"kind":"struct"},"29:4441:9330":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:48471:3538":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:12098:3018":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:2437:8499":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:46272:5266":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:45904:1839":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:4702:4903":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"30:7140:3800":{"crate_id":30,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"24:7067:6707":{"crate_id":24,"path":["tokio","runtime","thread_pool","worker","block_in_place","Reset"],"kind":"struct"},"1:10860:2856":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:3241:5939":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:12093:3011":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:11342:71381":{"crate_id":24,"path":["tokio","task","unconstrained","_","__Origin"],"kind":"struct"},"29:5339:9485":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:14411:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"20:2732:4011":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_HEADERS"],"kind":"constant"},"5:1639:4000":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5469:9528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11159:7291":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"29:81:42014":{"crate_id":29,"path":["libc","unix","DIR"],"kind":"enum"},"30:12894:71381":{"crate_id":30,"path":["futures_util","stream","select_all","_","__Origin"],"kind":"struct"},"29:6168:9686":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"30:9173:107":{"crate_id":30,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"1:8410:4589":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7185:5763":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:10071:6108":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:12327:7479":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"30:8792:3832":{"crate_id":30,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"16:5505:5721":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4317:9269":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7823:5683":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6518:5750":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"30:8078:3812":{"crate_id":30,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"30:12932:3840":{"crate_id":30,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"1:11260:4721":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:53314:8477":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:7366:3463":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"14:56:7318":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4419:9315":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:46634:2843":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:11186:8563":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:8346:9815":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"29:5304:9465":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:3217:2375":{"crate_id":20,"path":["http","uri","scheme","Protocol"],"kind":"enum"},"17:10599:7230":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"20:2421:3463":{"crate_id":20,"path":["http","header","map","IntoIter"],"kind":"struct"},"20:1580:2351":{"crate_id":20,"path":["http","status","InvalidStatusCode"],"kind":"struct"},"24:11322:10218":{"crate_id":24,"path":["tokio","task","unconstrained","Unconstrained"],"kind":"struct"},"29:6177:9689":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11358:6008":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"30:11458:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"24:9647:6432":{"crate_id":24,"path":["tokio","sync","mpsc","error","SendTimeoutError"],"kind":"enum"},"18:837:4785":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:52221:4950":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"12:469:71243":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:13011:4785":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:4594:6734":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:786:6774":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"20:2673:4561":{"crate_id":20,"path":["http","header","name","Repr"],"kind":"enum"},"2:11121:2844":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11555:7338":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10855:4559":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:15170:4668":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11726:7370":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:1419:3864":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:10926:7277":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9729:71248":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6391:5747":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"12:2032:4496":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13609:7844":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:2733:5920":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:14977:4565":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"29:530:8872":{"crate_id":29,"path":["libc","unix","rlimit"],"kind":"struct"},"29:4451:9331":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:10618:2842":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:15269:5606":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:2866:5931":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"30:9658:6549":{"crate_id":30,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"6:1522:8934":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:32205:3893":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"24:12437:6280":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI8"],"kind":"struct"},"12:812:4474":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:10883:2487":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"27:1013:4785":{"crate_id":27,"path":["memchr","memmem","Searcher"],"kind":"struct"},"30:10962:6561":{"crate_id":30,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"24:13874:6306":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI64"],"kind":"struct"},"24:12339:6285":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU32"],"kind":"struct"},"17:13842:7929":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:49835:4796":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7406:5675":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"29:5514:9539":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"30:9923:71381":{"crate_id":30,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"11:0:2658":{"crate_id":11,"path":["adler"],"kind":"module"},"2:8845:4842":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"22:1233:2842":{"crate_id":22,"path":["bytes","buf","chain","Chain"],"kind":"struct"},"20:2746:4025":{"crate_id":20,"path":["http","header","name","CONTENT_ENCODING"],"kind":"constant"},"29:4285:9260":{"crate_id":29,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10211:7215":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"9:157:5461":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:6768:5971":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:8302:4614":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:3406:4779":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"30:10112:71381":{"crate_id":30,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:45963:5044":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10887:7271":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"12:2018:4472":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:50879:8414":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"9:603:8739":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:5832:3820":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"24:11040:6337":{"crate_id":24,"path":["tokio","time","interval","MissedTickBehavior"],"kind":"enum"},"24:9635:3935":{"crate_id":24,"path":["tokio","sync","mpsc","error","RecvError"],"kind":"struct"},"24:9800:3113":{"crate_id":24,"path":["tokio","sync","once_cell","SetError"],"kind":"enum"},"27:987:6122":{"crate_id":27,"path":["memchr","memmem","Finder"],"kind":"struct"},"30:6621:71381":{"crate_id":30,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"2:49760:4794":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:15776:2682":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:49254:5196":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4193:9236":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:8122:5307":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"15:0:2661":{"crate_id":15,"path":["addr2line"],"kind":"module"},"0:770:2596":{"crate_id":0,"path":["hyper","upgrade","OnUpgrade"],"kind":"struct"},"27:958:6922":{"crate_id":27,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:5231:8010":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:15778:2683":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12343:7484":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:10221:4595":{"crate_id":24,"path":["tokio","task","task_local","AccessError"],"kind":"struct"},"5:7626:5336":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:9019:3019":{"crate_id":24,"path":["tokio","sync","rwlock","write_guard","RwLockWriteGuard"],"kind":"struct"},"20:2761:4040":{"crate_id":20,"path":["http","header","name","FROM"],"kind":"constant"},"1:5296:4668":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4066:9191":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10673:49125":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:5828:5292":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"24:14491:71381":{"crate_id":24,"path":["tokio","io","util","lines","_","__Origin"],"kind":"struct"},"1:4630:2841":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"20:2649:2344":{"crate_id":20,"path":["http","header","name","HeaderName"],"kind":"struct"},"1:6783:4410":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:2401:8498":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:10279:5997":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:11970:4588":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:3365:5918":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"20:2804:4083":{"crate_id":20,"path":["http","header","name","X_XSS_PROTECTION"],"kind":"constant"},"6:591:8907":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"24:9792:3017":{"crate_id":24,"path":["tokio","sync","rwlock","RwLock"],"kind":"struct"},"17:681:7109":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:46338:5192":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6051:9624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"35:467:3712":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"24:8796:3108":{"crate_id":24,"path":["tokio","sync","rwlock","owned_read_guard","OwnedRwLockReadGuard"],"kind":"struct"},"20:2639:6156":{"crate_id":20,"path":["http","header","map","Danger"],"kind":"enum"},"30:11718:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"2:52438:4959":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"30:12990:3841":{"crate_id":30,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"5:8160:5291":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:4704:7999":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5185:9400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5282:9442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:3264:5940":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"12:1253:4480":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:4995:8008":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:801:6121":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"29:1576:8967":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:5707:5727":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"5:2548:5405":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7420:5693":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"33:22:2983":{"crate_id":33,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"18:766:6933":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:11211:2200":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"34:606:71381":{"crate_id":34,"path":["http_body","limited","_","__Origin"],"kind":"struct"},"24:7642:1843":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","Sender"],"kind":"struct"},"1:14152:3529":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:10508:4613":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4501:9347":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:616:8920":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:3355:4760":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"30:12867:3463":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"2:46164:5013":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:1235:5400":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"20:490:2487":{"crate_id":20,"path":["http","header","map","into_header_name","Sealed"],"kind":"trait"},"1:11984:3713":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4040:9181":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6110:5710":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:10303:6983":{"crate_id":24,"path":["tokio","time","driver","entry","StateCell"],"kind":"struct"},"17:12537:7530":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:53367:8480":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:46151:5012":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"29:5990:9601":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"29:6844:9722":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:3370:5347":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:923:5304":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13205:7744":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6554:5751":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"30:8161:3814":{"crate_id":30,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"20:2799:4078":{"crate_id":20,"path":["http","header","name","WARNING"],"kind":"constant"},"1:8660:3020":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:5569:4444":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5941:179":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:8616:3105":{"crate_id":24,"path":["tokio","sync","batch_semaphore","Semaphore"],"kind":"struct"},"17:11519:7333":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"24:7836:1917":{"crate_id":24,"path":["tokio","sync","mpsc","chan","Chan"],"kind":"struct"},"5:5088:646":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"30:12515:2030":{"crate_id":30,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"24:1928:1734":{"crate_id":24,"path":["tokio","io","blocking","Buf"],"kind":"struct"},"1:6607:4424":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"30:10923:6916":{"crate_id":30,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"30:12466:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"27:836:6134":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:11203:6700":{"crate_id":24,"path":["tokio","util","try_lock","TryLock"],"kind":"struct"},"2:24744:5164":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13402:7788":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"35:43:1895":{"crate_id":35,"path":["futures_channel","mpsc"],"kind":"module"},"16:3287:5941":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"22:42:1734":{"crate_id":22,"path":["bytes","buf","buf_impl","Buf"],"kind":"trait"},"17:9600:71253":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:4112:9215":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:10253:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:8310:3719":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:47474:195":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:5663:4424":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:46859:6917":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:4867:2205":{"crate_id":24,"path":["tokio","runtime","task","core","Header"],"kind":"struct"},"2:6851:4877":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:46572:4865":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6807:5757":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:712:3383":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"27:820:6133":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13331:7771":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:3892:9095":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"30:13127:6584":{"crate_id":30,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"1:15800:2703":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:3393:4773":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:2163:3463":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:45664:3064":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"29:6891:9732":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:620:7097":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:3997:9164":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"27:905:71259":{"crate_id":27,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:14445:64426":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"0:486:1595":{"crate_id":0,"path":["hyper","service"],"kind":"module"},"6:4347:9282":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:1497:4473":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"24:1789:4625":{"crate_id":24,"path":["tokio","fs","read_dir","ReadDir"],"kind":"struct"},"2:50031:5133":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:1079:4468":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:52095:4958":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"29:598:8915":{"crate_id":29,"path":["libc","unix","sigval"],"kind":"struct"},"6:5969:9589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4272:9248":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:6781:4408":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:9545:3713":{"crate_id":24,"path":["tokio","sync","broadcast","error","SendError"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"30:7968:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"9:27:5493":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"30:13115:6507":{"crate_id":30,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"20:2756:4035":{"crate_id":20,"path":["http","header","name","DATE"],"kind":"constant"},"2:10263:3541":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:11096:3865":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7378:5676":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1527:8936":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:49311:2844":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7342:5705":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"20:2737:4016":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_REQUEST_HEADERS"],"kind":"constant"},"16:6126:5739":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"24:1746:118":{"crate_id":24,"path":["tokio","fs","dir_builder","DirBuilder"],"kind":"struct"},"17:10095:6102":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13221:7747":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10988:7282":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:10282:7109":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"24:442:4452":{"crate_id":24,"path":["tokio","net","addr","ToSocketAddrs"],"kind":"trait"},"17:13799:7913":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:49269:4982":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:4306:2928":{"crate_id":24,"path":["tokio","io","util","mem","DuplexStream"],"kind":"struct"},"2:3389:4771":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:4182:1790":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"6:4183:9235":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:5029:8009":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:9404:7100":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:2213:5349":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"30:6346:72637":{"crate_id":30,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"24:8056:3712":{"crate_id":24,"path":["tokio","sync","mpsc","unbounded","UnboundedReceiver"],"kind":"struct"},"30:7724:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"24:6786:4620":{"crate_id":24,"path":["tokio","runtime","thread_pool","park","Parker"],"kind":"struct"},"2:9932:5063":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"29:4515:9357":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:15746:13312":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:46279:5267":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3117:1820":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"29:1682:9043":{"crate_id":29,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"14:189:8258":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:3144:217":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"29:5220:9415":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:13788:7909":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"24:14634:71381":{"crate_id":24,"path":["tokio","io","util","buf_writer","_","__Origin"],"kind":"struct"},"1:14385:4434":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"22:140:1735":{"crate_id":22,"path":["bytes","buf","buf_mut","BufMut"],"kind":"trait"},"2:5073:3554":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:10592:14316":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:13127:6327":{"crate_id":24,"path":["tokio","io","util","fill_buf","FillBuf"],"kind":"struct"},"1:10724:4435":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"29:4417:9316":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:6681:5363":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:12478:6289":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU8"],"kind":"struct"},"17:510:7106":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"9:0:2656":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:4377:9298":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"30:12521:1916":{"crate_id":30,"path":["futures_util","stream","once","Once"],"kind":"struct"},"2:48487:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:5632:5725":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"24:520:86":{"crate_id":24,"path":["tokio","loom","std","atomic_ptr","AtomicPtr"],"kind":"struct"},"1:7363:175":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"24:10097:4594":{"crate_id":24,"path":["tokio","task","task_local","LocalKey"],"kind":"struct"},"20:2774:4053":{"crate_id":20,"path":["http","header","name","PROXY_AUTHENTICATE"],"kind":"constant"},"18:857:6126":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:903:4599":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"37:287:3878":{"crate_id":37,"path":["httparse","ParserConfig"],"kind":"struct"},"27:942:6933":{"crate_id":27,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:2857:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:48131:3542":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11254:6079":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:24676:5162":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11794:7389":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12783:7572":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:7024:5978":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:5346:5670":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13386:7784":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"20:2248:127":{"crate_id":20,"path":["http","error","Error"],"kind":"struct"},"24:1280:128":{"crate_id":24,"path":["tokio","fs","file","File"],"kind":"struct"},"2:8138:3000":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:9682:6772":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:53151:4954":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"20:2500:3996":{"crate_id":20,"path":["http","header","map","OccupiedEntry"],"kind":"struct"},"16:4762:8001":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"30:8942:3835":{"crate_id":30,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"30:11682:6514":{"crate_id":30,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"24:9619:3716":{"crate_id":24,"path":["tokio","sync","mpsc","error","TryRecvError"],"kind":"enum"},"2:48350:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:3069:2487":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11884:4541":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:7714:4543":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:49619:4471":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"27:1042:6127":{"crate_id":27,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:6893:9731":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"24:7823:6718":{"crate_id":24,"path":["tokio","sync","mpsc","chan","Rx"],"kind":"struct"},"2:45753:185":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:2968:5933":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:8211:4614":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"29:6850:9723":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:57303:8489":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"29:3854:9077":{"crate_id":29,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5295:47360":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"20:2989:4004":{"crate_id":20,"path":["http","header","value","ToStrError"],"kind":"struct"},"30:6757:71381":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:9245:6004":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:13217:8352":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"20:2794:4075":{"crate_id":20,"path":["http","header","name","USER_AGENT"],"kind":"constant"},"30:8252:191":{"crate_id":30,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"2:11397:5086":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"29:5183:9403":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:4489:2868":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"20:2730:4009":{"crate_id":20,"path":["http","header","name","ACCEPT_RANGES"],"kind":"constant"},"9:722:5445":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"30:825:3066":{"crate_id":30,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"24:13237:6299":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF64Le"],"kind":"struct"},"30:13042:6921":{"crate_id":30,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"20:2754:4033":{"crate_id":20,"path":["http","header","name","COOKIE"],"kind":"constant"},"17:11822:7399":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:22577:69400":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"24:2116:2864":{"crate_id":24,"path":["tokio","io","stdout","Stdout"],"kind":"struct"},"35:433:3708":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"18:660:6134":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:23906:5032":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"24:6049:6714":{"crate_id":24,"path":["tokio","runtime","basic_scheduler","CoreGuard"],"kind":"struct"},"30:5897:6589":{"crate_id":30,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:23813:5154":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7360:184":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7295:5689":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"24:11555:6273":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI128Le"],"kind":"struct"},"1:10613:2207":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"34:738:71381":{"crate_id":34,"path":["http_body","combinators","map_err","_","__Origin"],"kind":"struct"},"1:3543:6758":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:9848:3713":{"crate_id":24,"path":["tokio","sync","watch","error","SendError"],"kind":"struct"},"35:519:3717":{"crate_id":35,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"17:11738:7371":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11082:6014":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"24:5733:6713":{"crate_id":24,"path":["tokio","runtime","task","inject","Inject"],"kind":"struct"},"17:9896:71256":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"30:5875:6593":{"crate_id":30,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"16:4890:8005":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46554:3796":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"30:11804:6516":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"1:11078:4455":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"29:6098:9637":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:2802:4081":{"crate_id":20,"path":["http","header","name","X_DNS_PREFETCH_CONTROL"],"kind":"constant"},"6:519:8867":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:14398:8589":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"24:6566:6366":{"crate_id":24,"path":["tokio","runtime","blocking","pool","Spawner"],"kind":"struct"},"6:6858:9723":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5428:9518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"24:4505:2868":{"crate_id":24,"path":["tokio","io","util","repeat","Repeat"],"kind":"struct"},"21:0:2780":{"crate_id":21,"path":["fnv"],"kind":"module"},"20:1973:3926":{"crate_id":20,"path":["http","uri","port","Port"],"kind":"struct"},"17:299:7105":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"24:13009:6320":{"crate_id":24,"path":["tokio","io","util","read_to_string","ReadToString"],"kind":"struct"},"30:10668:5088":{"crate_id":30,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"17:11653:7355":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:4671:7998":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4325:9272":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10635:7233":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"30:10611:4871":{"crate_id":30,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"1:5420:4674":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:6214:9705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"30:239:2972":{"crate_id":30,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"1:7949:4614":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:1161:13310":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:50035:5137":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:5170:3557":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:7551:4534":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7158:5761":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"30:9359:4863":{"crate_id":30,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"29:4309:9269":{"crate_id":29,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:50019:5129":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"12:2045:4498":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:3241:2886":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6269:5745":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5407:5715":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5528:9540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46644:4870":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:10267:179":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:3331:4496":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"45:0:6613":{"crate_id":45,"path":["try_lock"],"kind":"module"},"20:2744:4023":{"crate_id":20,"path":["http","header","name","CONNECTION"],"kind":"constant"},"24:4497:6954":{"crate_id":24,"path":["tokio","io","util","vec_with_initialized","VecWithInitialized"],"kind":"struct"},"5:6404:212":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:6665:3004":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:537:8872":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3239:4630":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11696:7366":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"30:12360:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"17:10656:7235":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:3391:4498":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:51134:4956":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:4605:2837":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"12:1667:5589":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:13620:7845":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"30:7821:3804":{"crate_id":30,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"30:12631:71381":{"crate_id":30,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"2:47610:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:47414:3197":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:6910:9736":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10584:6071":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:51083:4968":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:8170:3010":{"crate_id":24,"path":["tokio","sync","mutex","MutexGuard"],"kind":"struct"},"30:6336:6604":{"crate_id":30,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"17:10266:6060":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:1450:3995":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"34:633:3074":{"crate_id":34,"path":["http_body","next","Trailers"],"kind":"struct"},"2:46433:4872":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:4548:2834":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"12:853:4000":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"29:4333:9279":{"crate_id":29,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:2543:6019":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"12:1159:5575":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4395:9305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:9943:71249":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"30:6787:3796":{"crate_id":30,"path":["futures_util","future","future","Map"],"kind":"struct"},"24:188:2917":{"crate_id":24,"path":["tokio","io","async_buf_read","AsyncBufRead"],"kind":"trait"},"29:4032:9181":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:5711:4427":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"30:12193:6523":{"crate_id":30,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"30:8950:3836":{"crate_id":30,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"34:620:3072":{"crate_id":34,"path":["http_body","limited","LengthLimitError"],"kind":"struct"},"29:4025:9178":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:24056:41325":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"29:4369:9298":{"crate_id":29,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9280:7188":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2171:4396":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:27925:4913":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"20:2776:4055":{"crate_id":20,"path":["http","header","name","PUBLIC_KEY_PINS"],"kind":"constant"},"1:10717:4434":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"30:9829:3794":{"crate_id":30,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"17:9088:48938":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:8363:5299":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"20:2762:4041":{"crate_id":20,"path":["http","header","name","HOST"],"kind":"constant"},"16:6718:5967":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9210:48940":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"29:5261:9436":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:12033:4590":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:3621:2855":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:11461:4518":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:50193:191":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"29:6885:9731":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"20:2437:4000":{"crate_id":20,"path":["http","header","map","Values"],"kind":"struct"},"24:7849:6969":{"crate_id":24,"path":["tokio","sync","mpsc","chan","RxFields"],"kind":"struct"},"34:250:3078":{"crate_id":34,"path":["http_body","combinators","box_body","UnsyncBoxBody"],"kind":"struct"},"5:7205:3992":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:10265:3542":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"33:380:72911":{"crate_id":33,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"2:46464:4875":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:1584:8967":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"30:12235:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"24:9877:6982":{"crate_id":24,"path":["tokio","sync","watch","state","StateSnapshot"],"kind":"struct"},"2:45876:4747":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6569:5964":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"29:5284:9449":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:3774:3069":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"24:9824:1843":{"crate_id":24,"path":["tokio","sync","watch","Sender"],"kind":"struct"},"2:2923:167":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"22:1248:6194":{"crate_id":22,"path":["bytes","buf","limit","Limit"],"kind":"struct"},"24:6906:71963":{"crate_id":24,"path":["tokio","runtime","thread_pool","queue","push_overflow","BatchTaskIter"],"kind":"struct"},"2:4745:4850":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10801:7269":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:14735:2838":{"crate_id":24,"path":["tokio","io","seek","Seek"],"kind":"struct"},"17:9034:48936":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4101:9210":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:2376:3065":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:11299:4441":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12275:7471":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5274:9437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"30:9054:71381":{"crate_id":30,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:24108:5178":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:53303:8476":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"15:230:5597":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"24:7652:192":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","Receiver"],"kind":"struct"},"2:51227:4933":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10611:7231":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:15773:2679":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"30:6989:71381":{"crate_id":30,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"18:896:6129":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:12749:5116":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:5874:4719":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"24:7166:6410":{"crate_id":24,"path":["tokio","runtime","thread_pool","ThreadPool"],"kind":"struct"},"1:14816:4541":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"20:2742:4021":{"crate_id":20,"path":["http","header","name","AUTHORIZATION"],"kind":"constant"},"30:12262:6524":{"crate_id":30,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"17:13446:7799":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:14176:4504":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"32:0:2962":{"crate_id":32,"path":["pin_utils"],"kind":"module"},"29:1700:9050":{"crate_id":29,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"30:12975:3839":{"crate_id":30,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"20:2777:4056":{"crate_id":20,"path":["http","header","name","PUBLIC_KEY_PINS_REPORT_ONLY"],"kind":"constant"},"37:298:1583":{"crate_id":37,"path":["httparse","Request"],"kind":"struct"},"2:48684:3719":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"30:9159:71381":{"crate_id":30,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"2:49714:4787":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"24:9761:3104":{"crate_id":24,"path":["tokio","sync","batch_semaphore","TryAcquireError"],"kind":"enum"},"6:6085:9631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10106:6103":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"24:7228:6365":{"crate_id":24,"path":["tokio","runtime","Runtime"],"kind":"struct"},"1:14071:2862":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:3244:206":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"20:2790:4069":{"crate_id":20,"path":["http","header","name","STRICT_TRANSPORT_SECURITY"],"kind":"constant"},"6:3951:9139":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:53329:8478":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"24:8857:3109":{"crate_id":24,"path":["tokio","sync","rwlock","owned_write_guard","OwnedRwLockWriteGuard"],"kind":"struct"},"24:12143:6276":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI32"],"kind":"struct"},"6:5563:9565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:3336:5346":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:6712:4402":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"24:11058:6338":{"crate_id":24,"path":["tokio","time","interval","Interval"],"kind":"struct"},"6:6864:9724":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"24:10960:6409":{"crate_id":24,"path":["tokio","time","driver","Driver"],"kind":"struct"},"2:50900:8415":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"12:925:4001":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"30:8213:3816":{"crate_id":30,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"24:269:2918":{"crate_id":24,"path":["tokio","io","async_seek","AsyncSeek"],"kind":"trait"},"30:7092:3798":{"crate_id":30,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"20:1361:1583":{"crate_id":20,"path":["http","request","Request"],"kind":"struct"},"16:7073:5759":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"30:7699:3808":{"crate_id":30,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"29:5399:9512":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"40:0:6611":{"crate_id":40,"path":["tracing_core"],"kind":"module"},"17:4157:6072":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:2769:2948":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"29:4273:9253":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"24:12045:6272":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI128"],"kind":"struct"},"24:4696:162":{"crate_id":24,"path":["tokio","loom","std","mutex","Mutex"],"kind":"struct"},"30:10035:6553":{"crate_id":30,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"29:5202:9405":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:50247:2957":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13429:7792":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"24:5789:6360":{"crate_id":24,"path":["tokio","runtime","task","Id"],"kind":"struct"},"24:12948:6330":{"crate_id":24,"path":["tokio","io","util","read_until","ReadUntil"],"kind":"struct"},"29:5247:9435":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13590:7839":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:14104:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:7429:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:48672:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:5882:4720":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"27:915:6929":{"crate_id":27,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"30:8142:177":{"crate_id":30,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"16:4417:7991":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:6106:9637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:8375:5300":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:15793:2696":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"0:475:1593":{"crate_id":0,"path":["hyper","ext"],"kind":"module"},"2:46413:8393":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:24404:3917":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:569:8895":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4145:9233":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:13022:4786":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:5456:5718":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7236:5768":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"24:9755:3719":{"crate_id":24,"path":["tokio","sync","oneshot","State"],"kind":"struct"},"29:3910:9115":{"crate_id":29,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:51981:4970":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"30:11778:71381":{"crate_id":30,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"30:12961:71381":{"crate_id":30,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"20:2663:6173":{"crate_id":20,"path":["http","header","name","HdrName"],"kind":"struct"},"16:6424:5748":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"24:7649:6430":{"crate_id":24,"path":["tokio","sync","mpsc","bounded","OwnedPermit"],"kind":"struct"},"16:7174:5762":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"26:0:2893":{"crate_id":26,"path":["tokio_macros"],"kind":"module"},"17:12010:7430":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:605:8915":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"20:2521:3999":{"crate_id":20,"path":["http","header","map","ValueIterMut"],"kind":"struct"},"24:9590:3713":{"crate_id":24,"path":["tokio","sync","mpsc","error","SendError"],"kind":"struct"},"18:820:6123":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:49297:1736":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:56033:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:8234:2814":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5359:9490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"29:4156:9234":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"21:20:8721":{"crate_id":21,"path":["fnv","FnvHasher"],"kind":"struct"},"17:12480:7522":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6923:9737":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"24:11152:6475":{"crate_id":24,"path":["tokio","util","vec_deque_cell","VecDequeCell"],"kind":"struct"},"35:0:1607":{"crate_id":35,"path":["futures_channel"],"kind":"module"},"2:3132:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"24:7248:6968":{"crate_id":24,"path":["tokio","coop","Budget"],"kind":"struct"},"17:10788:7267":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"30:9719:6550":{"crate_id":30,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"1:8115:3728":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"18:0:2664":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:3392:5947":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"29:3989:9164":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"22:1040:7011":{"crate_id":22,"path":["bytes","fmt","BytesRef"],"kind":"struct"},"24:12696:6291":{"crate_id":24,"path":["tokio","io","util","write_vectored","WriteVectored"],"kind":"struct"},"16:6636:5688":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:3338:5917":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"20:3102:1585":{"crate_id":20,"path":["http","status","StatusCode"],"kind":"struct"},"24:13727:6298":{"crate_id":24,"path":["tokio","io","util","read_int","ReadF64"],"kind":"struct"},"10:0:2657":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6780:5756":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"29:6927:9739":{"crate_id":29,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"31:127:2976":{"crate_id":31,"path":["futures_core","stream","TryStream"],"kind":"trait"},"30:7595:71381":{"crate_id":30,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:10533:4487":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:14720:6707":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"24:13335:6301":{"crate_id":24,"path":["tokio","io","util","read_int","ReadI128Le"],"kind":"struct"},"1:10609:8514":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:46525:3793":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:88:42014":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11337:6009":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:47380:1929":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:10179:7213":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:48694:8406":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"30:12488:3864":{"crate_id":30,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"29:5351:9490":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"12:1762:6729":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:152:55228":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:13901:10220":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:11866:5099":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:11206:4670":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"24:6684:6366":{"crate_id":24,"path":["tokio","runtime","spawner","Spawner"],"kind":"enum"},"2:49379:5111":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:1630:8996":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"27:888:3383":{"crate_id":27,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"20:2620:6155":{"crate_id":20,"path":["http","header","map","Link"],"kind":"enum"},"24:9538:3007":{"crate_id":24,"path":["tokio","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4262:9241":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:2466:3994":{"crate_id":20,"path":["http","header","map","GetAll"],"kind":"struct"},"23:24:6244":{"crate_id":23,"path":["itoa","Buffer"],"kind":"struct"},"2:10498:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"24:9669:3015":{"crate_id":24,"path":["tokio","sync","mutex","TryLockError"],"kind":"struct"},"1:15191:4674":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"3:300:195":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"20:3184:3924":{"crate_id":20,"path":["http","uri","authority","Authority"],"kind":"struct"},"17:10061:7209":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12221:7463":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4459:9331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"30:9276:71381":{"crate_id":30,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"6:4470:9337":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:525:8870":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"29:4233:9240":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"29:512:8867":{"crate_id":29,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:7039:3189":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:49533:5118":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:10199:195":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"5:3965:6731":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:10949:6997":{"crate_id":24,"path":["tokio","time","driver","wheel","Wheel"],"kind":"struct"},"2:11899:5100":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10448:6023":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:51522:4949":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"24:14406:2834":{"crate_id":24,"path":["tokio","io","util","read","Read"],"kind":"struct"},"9:234:5469":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:10827:6069":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:6677:6386":{"crate_id":24,"path":["tokio","runtime","handle","TryCurrentError"],"kind":"struct"},"17:13258:7756":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:3737:3068":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:1613:3463":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"29:4356:9293":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:169:55229":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:9332:6005":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"30:12828:6590":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"30:12136:6522":{"crate_id":30,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"24:11021:4577":{"crate_id":24,"path":["tokio","time","instant","Instant"],"kind":"struct"},"6:6005:9605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"24:10916:6992":{"crate_id":24,"path":["tokio","time","driver","entry","TimerHandle"],"kind":"struct"},"17:12456:7519":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7477:5694":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:3253:2542":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13062:7693":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"30:10424:4870":{"crate_id":30,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:11383:5085":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:51060:4964":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:11276:5080":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12645:7555":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:783:211":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:1655:4480":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:3338:4581":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:6072:5690":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"0:939:2600":{"crate_id":0,"path":["hyper","upgrade","Parts"],"kind":"struct"},"17:10253:6057":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"30:3424:6702":{"crate_id":30,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"0:297:1590":{"crate_id":0,"path":["hyper","body","Body"],"kind":"struct"},"1:12073:3009":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13884:7935":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:12710:5112":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"37:261:2206":{"crate_id":37,"path":["httparse","Status"],"kind":"enum"},"2:50051:5131":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:294:7104":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"23:37:6242":{"crate_id":23,"path":["itoa","Integer"],"kind":"trait"},"2:12931:3903":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"20:3247:2354":{"crate_id":20,"path":["http","uri","InvalidUriParts"],"kind":"struct"},"34:651:3076":{"crate_id":34,"path":["http_body","combinators","map_data","MapData"],"kind":"struct"},"17:13180:7734":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:15780:2685":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:4210:3992":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"29:4431:9324":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:1658:9020":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8561:3006":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"20:2716:6176":{"crate_id":20,"path":["http","header","name","MaybeLower"],"kind":"struct"},"30:10527:71381":{"crate_id":30,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"24:11751:6282":{"crate_id":24,"path":["tokio","io","util","write_int","WriteU128Le"],"kind":"struct"},"20:2795:4073":{"crate_id":20,"path":["http","header","name","UPGRADE"],"kind":"constant"},"2:47988:3005":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12373:7503":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:51934:4966":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"20:2748:4027":{"crate_id":20,"path":["http","header","name","CONTENT_LENGTH"],"kind":"constant"},"29:5266:9437":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"30:11998:6519":{"crate_id":30,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"1:1156:8492":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"30:7319:3810":{"crate_id":30,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"16:6744:5969":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4306:9264":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"24:7416:6418":{"crate_id":24,"path":["tokio","sync","broadcast","Recv"],"kind":"struct"},"1:7177:8505":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"30:9802:71381":{"crate_id":30,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"34:470:1590":{"crate_id":34,"path":["http_body","Body"],"kind":"trait"},"1:15254:64270":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:6999:5758":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"29:609:8920":{"crate_id":29,"path":["libc","unix","tms"],"kind":"struct"},"1:13938:6779":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"34:703:3077":{"crate_id":34,"path":["http_body","combinators","map_err","MapErr"],"kind":"struct"},"2:24438:5158":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"11:54:5565":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"20:2755:4034":{"crate_id":20,"path":["http","header","name","DNT"],"kind":"constant"},"17:10516:6027":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:47397:3865":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:50043:5136":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:15011:4573":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5292:9449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:10368:6704":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:13720:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:790:6120":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11045:48941":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"24:7565:4000":{"crate_id":24,"path":["tokio","sync","mpsc","block","Values"],"kind":"struct"},"29:3982:9160":{"crate_id":29,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:14848:8822":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"29:5274:9442":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:3227:1586":{"crate_id":20,"path":["http","uri","Uri"],"kind":"struct"},"17:11604:7346":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:22947:2487":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"29:6915:9737":{"crate_id":29,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:49743:4793":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11277:7295":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"24:2320:2919":{"crate_id":24,"path":["tokio","io","split","ReadHalf"],"kind":"struct"},"2:53190:4974":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:12588:4625":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"30:8382:71381":{"crate_id":30,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:823:6774":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"34:624:1876":{"crate_id":34,"path":["http_body","next","Data"],"kind":"struct"},"30:12557:177":{"crate_id":30,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"30:12858:3864":{"crate_id":30,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"1:2187:4497":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"30:1080:3824":{"crate_id":30,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"20:2734:4013":{"crate_id":20,"path":["http","header","name","ACCESS_CONTROL_ALLOW_ORIGIN"],"kind":"constant"},"6:5953:9577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"30:7565:3809":{"crate_id":30,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"16:5488:5720":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"28:0:2894":{"crate_id":28,"path":["num_cpus"],"kind":"module"},"17:9933:7200":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:11352:3190":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"22:1261:2843":{"crate_id":22,"path":["bytes","buf","take","Take"],"kind":"struct"},"17:13819:7916":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:51372:4969":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:9937:5064":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:3401:4776":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"29:3997:9166":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:53104:4936":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:45712:186":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:24506:5159":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:15796:2699":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"24:6653:5404":{"crate_id":24,"path":["tokio","runtime","handle","Handle"],"kind":"struct"},"17:12467:7520":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:1505:4475":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:2164:565":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:3367:4500":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:53288:8475":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:3881:9087":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"29:6116:9647":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:644:6133":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:8430:4472":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:4203:9237":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4425:9316":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:53444:8483":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:10897:6989":{"crate_id":24,"path":["tokio","time","clock","Clock"],"kind":"struct"},"20:2429:3995":{"crate_id":20,"path":["http","header","map","Keys"],"kind":"struct"},"2:49140:5091":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:3114:4626":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"29:4038:9182":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:2766:4045":{"crate_id":20,"path":["http","header","name","IF_RANGE"],"kind":"constant"},"17:9574:6016":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5159:9385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:3094:1819":{"crate_id":20,"path":["http","request","Builder"],"kind":"struct"},"24:8622:65":{"crate_id":24,"path":["tokio","sync","batch_semaphore","Acquire"],"kind":"struct"},"2:3138:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:48374:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:46136:4471":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"24:1044:6940":{"crate_id":24,"path":["tokio","util","linked_list","Pointers"],"kind":"struct"},"17:13574:7836":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:4908:4452":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"24:11291:6340":{"crate_id":24,"path":["tokio","time","driver","sleep","Sleep"],"kind":"struct"},"5:7764:223":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:3679:5186":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:3362:4499":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:14961:4564":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:3135:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"30:11478:3806":{"crate_id":30,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"20:2803:4082":{"crate_id":20,"path":["http","header","name","X_FRAME_OPTIONS"],"kind":"constant"},"2:46543:4876":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"27:966:6120":{"crate_id":27,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:51165:4944":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4095:9207":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4494:9344":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:3018:5934":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:47526:3865":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10435:7218":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:1623:3993":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"29:4387:9305":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"29:562:8895":{"crate_id":29,"path":["libc","unix","hostent"],"kind":"struct"},"35:349:1843":{"crate_id":35,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"14:194:47284":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6238:5674":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:22596:69399":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:49176:5093":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:9674:3102":{"crate_id":24,"path":["tokio","sync","notify","Notify"],"kind":"struct"},"1:9634:4662":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:2569:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"24:80:6707":{"crate_id":24,"path":["tokio","macros","scoped_tls","set","Reset"],"kind":"struct"},"17:10052:7208":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11458:7317":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:23992:8361":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:46195:5269":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"12:949:4477":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"24:1576:2835":{"crate_id":24,"path":["tokio","fs","read_to_string","read_to_string"],"kind":"function"},"2:3308:4502":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"24:9340:3112":{"crate_id":24,"path":["tokio","sync","once_cell","OnceCell"],"kind":"struct"},"6:6812:9721":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"35:412:3741":{"crate_id":35,"path":["futures_channel","lock","Lock"],"kind":"struct"},"24:4750:6956":{"crate_id":24,"path":["tokio","park","thread","ParkThread"],"kind":"struct"},"1:4392:2860":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"24:11702:6275":{"crate_id":24,"path":["tokio","io","util","write_int","WriteI16Le"],"kind":"struct"},"2:46455:4873":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"39:0:1617":{"crate_id":39,"path":["tracing"],"kind":"module"},"2:50925:4975":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"30:8913:71381":{"crate_id":30,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"6:4164:9234":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:4301:3865":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:4847:5053":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"20:2808:6178":{"crate_id":20,"path":["http","header","name","StandardHeader"],"kind":"enum"},"34:246:3075":{"crate_id":34,"path":["http_body","combinators","box_body","BoxBody"],"kind":"struct"},"2:22999:4932":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"33:19:2981":{"crate_id":33,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"futures_util","html_root_url":null},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"39":{"name":"tracing","html_root_url":"https://docs.rs/tracing/0.1.35/"},"22":{"name":"bytes","html_root_url":null},"41":{"name":"once_cell","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"43":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"34":{"name":"http_body","html_root_url":"https://docs.rs/http-body/0.4.5/"},"24":{"name":"tokio","html_root_url":null},"28":{"name":"num_cpus","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"36":{"name":"tower_service","html_root_url":null},"40":{"name":"tracing_core","html_root_url":"https://docs.rs/tracing-core/0.1.22/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"http","html_root_url":"https://docs.rs/http/0.2.8/"},"45":{"name":"try_lock","html_root_url":"https://docs.rs/try-lock/0.2.3/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"37":{"name":"httparse","html_root_url":null},"35":{"name":"futures_channel","html_root_url":null},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"44":{"name":"want","html_root_url":"https://docs.rs/want/0.3.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"38":{"name":"httpdate","html_root_url":null},"23":{"name":"itoa","html_root_url":"https://docs.rs/itoa/1.0.2/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"futures_task","html_root_url":null},"29":{"name":"libc","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"25":{"name":"pin_project_lite","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"42":{"name":"log","html_root_url":"https://docs.rs/log/0.4.17/"},"27":{"name":"memchr","html_root_url":null},"21":{"name":"fnv","html_root_url":null},"26":{"name":"tokio_macros","html_root_url":null},"31":{"name":"futures_core","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}