{"root":"0:0:1865","crate_version":"4.5.0","includes_private":false,"index":{"2:12915:21029":{"id":"2:12915:21029","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44098:2521","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12891:29405":{"id":"2:12891:29405","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12889:29404"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:25306":{"id":"2:12898:25306","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:29403":{"id":"2:12888:29403","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:25308":{"id":"2:12902:25308","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:29412":{"id":"2:12968:29412","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12579:8076","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::matches":"2:12965:2089"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44334:8094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:25352":{"id":"2:12994:25352","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1857":{"id":"0:3-20:0:1857","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,0],"end":[101,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1857","glob":true}}},"2:12984:29419":{"id":"2:12984:29419","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13015:25114":{"id":"2:13015:25114","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:34564"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:24585":{"id":"2:12918:24585","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44366:2518","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:29416":{"id":"2:12979:29416","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:22651":{"id":"2:13010:22651","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:20830":{"id":"2:12934:20830","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42231:191","prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:29426":{"id":"2:13016:29426","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4758:29426"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44411:8087","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12983:29418":{"id":"2:12983:29418","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885":{"id":"2:12885","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12886:878","2:12887:21399","2:12888:29403","2:12889:29404","2:12891:29405","2:12894:21341","2:12895:29406","2:12896:333","2:12897:25310","2:12898:25306","2:12900:25307","2:12902:25308","2:12904:25309","2:12906:29407","2:12907:29408","2:12908:25332","2:12909:25333","2:12910:25336","2:12911:25337","2:12913:27327","2:12914:27156","2:12915:21029","2:12916:27534","2:12917:27300","2:12918:24585","2:12919:29409","2:12920:27328","2:12921:25349","2:12924:25350","2:12927:25351","2:12930:20829","2:12934:20830","2:12938:24584","2:12941:25339","2:12944:25341","2:12947:29410","2:12950:29411","2:12953:25343","2:12956:25345","2:12959:25347","2:12962:25348","2:12965:2089","2:12968:29412","2:12971:29413","2:12974:29414","2:12977:29415","2:12979:29416","2:12981:29417","2:12983:29418","2:12984:29419","2:12985:29420","2:12988:29421","2:12991:21040","2:12994:25352","2:12997:29422","2:13000:29423","2:13003:29424","2:13006:29425","2:13008:22647","2:13009:25109","2:13010:22651","2:13011:22652","2:13012:22653","2:13013:25112","2:13014:25113","2:13015:25114","2:13016:29426","2:13018:2310","2:13019:29427"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12919:29409":{"id":"2:12919:29409","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44376:8090","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:25349":{"id":"2:12921:25349","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:29420":{"id":"2:12985:29420","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12604:8071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:25348":{"id":"2:12962:25348","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:24584":{"id":"2:12938:24584","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12579:8076","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::split_whitespace":"2:12916:27534","str::rsplit":"2:12944:25341"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44112:2522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:29422":{"id":"2:12997:29422","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13003:29424":{"id":"2:13003:29424","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:25112":{"id":"2:13013:25112","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:34564"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12916:27534":{"id":"2:12916:27534","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12917:27300"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44386:8079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:25309":{"id":"2:12904:25309","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:25336":{"id":"2:12910:25336","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12911:25337"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12911:25337":{"id":"2:12911:25337","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12910:25336"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12965:2089":{"id":"2:12965:2089","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12579:8076","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::rmatches":"2:12968:29412"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44316:8093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:29411":{"id":"2:12950:29411","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12579:8076","str::split":"2:12938:24584","prim@char":"1:12072:453","str::split_terminator":"2:12947:29410"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44180:8095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:29427":{"id":"2:13019:29427","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4756:29427"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44429:8088","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:333":{"id":"2:12896:333","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12897:25310","`u8`":"1:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5567:30117":{"id":"5:5567:30117","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12959:25347":{"id":"2:12959:25347","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:21341":{"id":"2:12894:21341","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12127:8080"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5559":{"id":"5:5559","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5560:30115","5:5561:8429","5:5564:30116","5:5567:30117","5:5575:30118","5:5576:30119","5:5577:2546","5:5578:22649","5:5579:22650"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5576:30119":{"id":"5:5576:30119","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:282:2176","`String`":"5:7597:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2176","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12988:29421":{"id":"2:12988:29421","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5561:8429":{"id":"5:5561:8429","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:25307":{"id":"2:12900:25307","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:29408":{"id":"2:12907:29408","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12078:1544","crate::ops::IndexMut":"2:3240:2396","str::slice_unchecked":"2:12906:29407"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:25339":{"id":"2:12941:25339","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12395:8067","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:25345":{"id":"2:12956:25345","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12072:453","str::splitn":"2:12953:25343","self::pattern":"2:12579:8076"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44234:8063","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:878":{"id":"2:12886:878","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:29413":{"id":"2:12971:29413","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12579:8076","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::rmatch_indices":"2:12974:29414"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44262:8091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:29407":{"id":"2:12906:29407","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12078:1544","str::slice_mut_unchecked":"2:12907:29408","crate::ops::Index":"2:39848:2395"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:29417":{"id":"2:12981:29417","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:22652":{"id":"2:13011:22652","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13012:22653":{"id":"2:13012:22653","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13009:25109":{"id":"2:13009:25109","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40202:25243","Self::is_ascii":"2:13008:22647"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40202:25243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:21399":{"id":"2:12887:21399","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5564:30116":{"id":"5:5564:30116","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5560:30115":{"id":"5:5560:30115","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2176","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:282:2176","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5577:2546":{"id":"5:5577:2546","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13006:29425":{"id":"2:13006:29425","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12540:137","`FromStr`":"2:12539:2697"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12539:2697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12539:2697","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:25332":{"id":"2:12908:25332","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12910:25336","str::split_at_mut":"2:12909:25333"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:29406":{"id":"2:12895:29406","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:27327":{"id":"2:12913:27327","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44082:8083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:21040":{"id":"2:12991:21040","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:25333":{"id":"2:12909:25333","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12908:25332","str::split_at_mut_checked":"2:12911:25337"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13000:29423":{"id":"2:13000:29423","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5578:22649":{"id":"5:5578:22649","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13011:22652"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5579:22650":{"id":"5:5579:22650","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13012:22653"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:29410":{"id":"2:12947:29410","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12579:8076","str::split":"2:12938:24584","prim@char":"1:12072:453","`DoubleEndedIterator`":"2:7960:131","str::rsplit_terminator":"2:12950:29411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44162:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:25341":{"id":"2:12944:25341","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12579:8076","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::split":"2:12938:24584"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44130:8061","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:25351":{"id":"2:12927:25351","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:29404":{"id":"2:12889:29404","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:20829":{"id":"2:12930:20829","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42231:191","prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13014:25113":{"id":"2:13014:25113","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:34564"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:2310":{"id":"2:13018:2310","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4759:2310"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44420:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:22647":{"id":"2:13008:22647","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1865":{"id":"0:0:1865","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[115,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.0/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.74)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy::single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy::single_component_path_imports)]","#![allow(clippy::branches_sharing_code)]","#![allow(clippy::if_same_then_else)]","#![allow(clippy::collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1857"],"is_stripped":false}}},"2:12897:25310":{"id":"2:12897:25310","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:27300":{"id":"2:12917:27300","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12916:27534"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44395:8078","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:25343":{"id":"2:12953:25343","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076","str::rsplitn":"2:12956:25345"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44216:8065","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5575:30118":{"id":"5:5575:30118","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:29415":{"id":"2:12977:29415","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:27328":{"id":"2:12920:27328","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44404:8077","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:29414":{"id":"2:12974:29414","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12579:8076","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::match_indices":"2:12971:29413"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44280:8092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:27156":{"id":"2:12914:27156","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44088:8082","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:25350":{"id":"2:12924:25350","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:8076"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:559:9214":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:4040:2345":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"20:4137:20908":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"2:3436:28765":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:10855:2706":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:7565:16224":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:5984:8392":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:22662:27303":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13946:19810":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"9:423:15004":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:8387:8386":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"8:0:1974":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:6438:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:5581:13245":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:42958:8008":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:3240:2396":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:13260:8225":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:9970:2433":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:15426:20605":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12077:1511":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:13581:19315":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5283:13212":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:47347:2821":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:4572:15797":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:2588:2531":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9235:21162":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:7881:8388":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:5502:13238":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:40777:2442":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:12088:797":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:6721:13964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"20:3988:20927":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"11:2383:2340":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:14235:19828":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:2593:15226":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"11:883:2354":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12949:16347":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:9155:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:44559:8110":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6689:13960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"11:2403:2341":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:5630:13250":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:8012:14760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:8006:14759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5083:13193":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:32648:2714":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:5476:2703":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:2439:15219":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:5331:16138":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:42303:2342":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"23:480:20951":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"6:4787:13163":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:14147:19824":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13272:19294":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:4864:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"25:88:2138":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"1:12090:1645":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:42965:8015":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:1098:16372":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:1699:10122":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:3946:20933":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"2:47737:2838":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:11624:8049":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:10317:16328":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:10719:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:2175:16445":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:774:2343":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:7869:16231":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:42287:2340":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"20:1374:20889":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"2:9817:8005":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:10847:2421":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:6417:13938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8268:2519":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"25:53:2691":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"1:1975:708":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:1723:10124":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:8097:16242":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:30930:8356":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:13457:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:3208:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:3029:2782":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8315:2559":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:32805:7994":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:5696:16151":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:7667:21413":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5329:13218":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"11:1160:2358":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:8306:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42295:2341":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:15010:20571":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:880:2344":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:8328:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:46078:2840":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12189:16561":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:3786:2313":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"2:39959:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5306:13215":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11495:21402":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:11688:16429":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:6244:16172":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:4112:2341":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:14560:19851":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:2469:2346":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:46124:2806":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:11125:8066":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:15596:20614":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:5555:16143":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6462:16186":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12127:16485":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:15473:20610":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6759:16195":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:41021:8393":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:8923:2754":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:1578:2342":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:7437:2342":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:38610:8455":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:5827:2731":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6849:16199":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:536:31982":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5370:13223":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3024:2780":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:6227:2932":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:3749:2566":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:44071:8086":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:7914:16233":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:12044:2322":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:42656:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:7366:2663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:279:20899":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"1:10870:21148":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:2162:2279":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11755:16468":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:5043:2551":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:9168:8072":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:10028:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:15206:20584":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:557:2286":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10044:16324":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:40843:2456":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12264:16533":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:3411:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13399:19302":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"20:4151:33235":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"16:6908:32007":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:4592:8173":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:5462:2702":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:1501:2347":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:2284:15184":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"18:689:20837":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7306:16207":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"9:391:15003":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:3216:30239":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12724:16340":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9472:21408":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"21:209:20897":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"6:8271:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:39189:8456":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"20:3550:20877":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"11:2124:2355":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:5794:16154":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:1581:2345":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"20:3876:33361":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"1:9041:2283":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:47381:2870":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:6068:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:12408:16559":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:13899:19808":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:6629:13953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:39848:2395":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6724:16193":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:4109:2598":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"20:3822:20924":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"11:364:31816":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6362:16180":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:1939:2431":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6268:16174":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:5726:16152":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10088:21217":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:9030:21277":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:6052:2745":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12362:16567":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:43912:8052":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:22495:2917":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:22:735":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:3472:2503":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:5527:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:12072:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"22:125:20946":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"20:3625:20870":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"2:40863:2482":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:40772:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:15646:20619":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:688:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:30945:8004":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:908:2340":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:15445:20607":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:4034:20926":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"1:10090:21329":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:10069:2412":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:8378:2369":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5536:13241":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:10013:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:6409:13937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:7584:14389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"0:0:1865":{"crate_id":0,"path":["clap"],"kind":"module"},"2:9988:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:41218:2520":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"7:78:14980":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11089:16370":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"20:4122:20909":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"17:15039:20573":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5031:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2032:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3504:2485":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:1292:2357":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:4232:2624":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:6763:13969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:7412:10230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:46208:2847":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:22480:2488":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:7348:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:14402:19840":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:7889:16232":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:11056:8062":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:34347:8447":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:32684:22878":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:43693:8576":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:2529:15223":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:42734:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:1517:10105":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:40707:8087":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:42372:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:5499:16140":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5630:16148":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8614:2340":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:14489:19846":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:507:33091":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:7337:2342":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:22887:2576":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:3317:2544":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5865:16157":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:7414:16216":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:8285:2521":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5181:13200":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:6768:13970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:6062:32289":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6657:13956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:8402:2661":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13844:19805":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:1585:10112":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11595:16461":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:43708:27501":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:44852:8584":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:31467:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:44082:8083":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:3579:20887":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"1:1574:2340":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:5581:2706":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:8197:14920":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:32807:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"20:3715:2535":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"1:6624:2740":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:43191:27299":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:7697:2724":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"20:3637:20915":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"2:40899:2519":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:6447:13941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8604:2694":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:44737:8098":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:22529:2916":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:2730:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11497:16404":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:44386:8079":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:7367:2367":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:15266:20588":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:44022:8060":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:15:2092":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:12076:16477":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:1887:2418":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:867:2343":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:4907:15902":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5296:13214":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:12584:8072":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:5601:16146":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:22449:8472":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"20:3371:2283":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"2:4825:8188":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:6507:2735":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:44844:8589":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:41044:8407":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:9755:16288":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:48360:7965":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:697:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:10838:2341":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:2835:15237":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:2729:15232":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:3579:2486":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:40631:8200":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:8341:14956":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11661:16433":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:8259:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:4399:15762":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9916:16321":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:15058:20557":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:8894:2712":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:2079:2382":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:6221:16170":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"20:3101:2131":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"5:6575:30257":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"9:237:2691":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:6519:13945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:2355:15215":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12530:16580":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:11583:16431":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:44528:8108":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:11230:21297":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:10887:33071":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7816:2321":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2769:15234":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"23:0:2116":{"crate_id":23,"path":["anstream"],"kind":"module"},"16:7482:16219":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:7960:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3589:2513":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6201:16168":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5064:13192":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6292:16176":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:2733:2534":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6811:13972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:40959:8401":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:10671:22642":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:16259:19301":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:22911:2588":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:9677:28700":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:533:2284":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:12597:16585":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:7620:8119":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:4909:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:213:8003":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:3245:2359":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:7551:16223":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11166:16373":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:5163:21334":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:96:20972":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"18:718:20831":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:44180:8095":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:7445:2342":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:479:9204":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5445:13231":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:40991:8404":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:42420:2341":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:5662:16150":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:12079:1629":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:16121:20794":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:15463:20609":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5014:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:504:2279":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5134:13197":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:11430:22639":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6788:31165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"15:288:15161":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:10024:8015":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:1968:2432":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:4017:2592":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:0:1978":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:42617:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"20:3306:20866":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"2:2736:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:5175:2729":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6441:13940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"9:501:15005":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7270:16205":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:33919:8444":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"21:127:33549":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"1:1590:2359":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:10020:8008":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:4256:8160":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:3271:2362":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"13:0:1972":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:13235:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10997:16357":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"20:0:1857":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"17:11153:16336":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:16032:19293":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"11:1883:2340":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:14271:19831":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"14:160:15137":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:43508:27505":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"23:486:33620":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:46327:2819":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:10481:27789":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12422:16569":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:15356:20597":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:4649:15851":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:9150:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:4537:8171":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11313:16397":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:42500:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5122:13196":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:1885:2135":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:4468:8163":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"20:3453:20880":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:2569:2336":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8461:2672":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:1862:2412":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13766:16524":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5653:13253":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:8369:2622":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:22395:8472":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:3561:2433":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"20:3834:20930":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"2:44860:8603":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:44334:8094":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"20:3843:2344":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"6:5665:13254":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:928:2351":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:4464:2623":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:1087:31826":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3399:2528":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"23:61:20972":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"20:3267:197":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"14:7:15137":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11051:16385":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:791:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:14436:19842":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"11:1107:15125":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:3814:2569":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:102:31810":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11518:2570":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:48331:7962":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:4401:30266":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12557:16375":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:12371:16346":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8358:2630":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:3211:2360":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:22609:27310":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10439:16330":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:2657:2532":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"20:3533:20874":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"16:2859:15238":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12929:16346":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:8012:16239":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:6602:8394":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"20:3937:33345":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"2:44824:8583":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13526:19311":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:40:2397":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:465:9202":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5346:32297":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:15992:20789":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:6471:13943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5112:13195":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10747:21071":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:1492:2344":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:12087:801":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:903:2346":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:44848:8590":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4942:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13986:19813":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:16050:19294":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"11:2554:31812":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13375:19300":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"20:4199:2702":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"7:0:1693":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:3333:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:945:2353":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4837:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4987:2658":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:39804:7998":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"11:2231:15120":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:8282:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12399:16568":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:48527:7974":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:8937:2751":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10155:16137":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"11:2151:2357":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:14246:19829":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:5674:8140":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:3576:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5436:13230":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:15616:20616":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"20:4074:21289":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"17:13211:19291":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:45021:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:497:9207":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:6142:2503":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:3406:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:12593:8074":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:10700:2481":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:7574:2439":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:12055:21067":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:909:2347":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:41228:8411":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:5146:13198":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:8291:2522":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"20:3956:20923":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"6:1680:10120":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:4462:15779":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:42814:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:48351:7964":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:4825:2612":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:15190:20582":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:31494:8217":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:7467:22371":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:14414:19841":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:7467:14382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5320:13217":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:4601:8174":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"11:0:1977":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:46287:2807":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"23:181:2488":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"2:2733:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"18:581:8217":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:44366:2518":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6610:16189":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"26:40:20986":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"18:651:33091":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"20:4004:33303":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"11:2562:31805":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11621:16434":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:47317:2815":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:34520:8448":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8310:2567":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:46509:2854":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"20:1689:25142":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"2:41242:8412":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11715:16465":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:7822:2420":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:5713:32174":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:1054:2356":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5244:13207":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:46633:2814":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:7976:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:46957:2837":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:10647:2662":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:41083:8410":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:15376:20599":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:5485:16139":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:8870:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6320:16177":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:6435:13939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8526:2691":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:13568:19314":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:44832:8588":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:43461:27323":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3601:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:40657:8199":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12993:16348":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:10272:2494":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:7020:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"20:3543:20878":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"17:13814:19803":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8304:2568":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:2982:21255":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11045:2711":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6609:13951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:7452:14380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:43272:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12201:16562":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:7749:2290":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"22:97:20944":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"17:14325:19835":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:10444:2543":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:3570:22601":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"22:28:2488":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"11:1917:2361":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:434:31822":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:2001:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:914:2348":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:6636:13954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:7387:30229":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:10156:2716":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"18:589:27239":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13877:19807":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"20:4206:33388":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"17:13437:19305":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:43230:27526":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:12082:695":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:22853:27375":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:4545:15793":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:14876:20565":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:2617:15227":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:259:20898":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"2:46854:27306":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"20:49:2136":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"2:43987:8040":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"20:52:2137":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"13:226:31828":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:10669:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:7602:14390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6116:16164":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2859:2436":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:40202:25243":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8385:2632":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13325:19297":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:22258:2921":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:10026:8016":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:636:30217":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:7918:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:21633:2790":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15023:20572":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:4353:8179":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12150:16483":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:4648:8175":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"20:3601:27526":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"17:13116:16619":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"13:109:31875":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:8253:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:7561:14387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:22794:27305":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11102:16369":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4069:2596":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12584:16336":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:7324:16208":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:4261:2627":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:4113:2503":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"20:3501:20883":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"16:5521:16141":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:12621:16583":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:12863:16343":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6941:16201":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:3838:2346":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:21388:28939":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:2201:30696":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7328:2377":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:48488:7973":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6729:13965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:5759:16153":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6811:16198":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:1007:2355":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"25:0:2118":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"2:3039:8441":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:5336:13219":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"11:710:2348":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:3856:15311":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:513:16316":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:16105:20793":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:7948:2478":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:4355:15741":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12516:16589":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:10350:16329":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:1547:10108":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:12357:8596":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:15281:20590":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:1603:15129":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5361:13222":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10622:33075":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10534:33086":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:4781:2660":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:39852:8460":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"20:2955:2128":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"17:16235:20803":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:44404:8077":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:2276:2460":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:44429:8088":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10661:16333":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:12604:8071":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:1692:2619":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13538:19312":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"3:0:480":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13064:16301":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:1566:15127":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:7401:2342":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:21371:28929":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"25:23:15041":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"17:13424:19304":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:3614:2340":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:14038:19817":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:30668:2573":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11493:16417":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:15151:20579":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:15301:20592":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:12095:8547":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:9671:16292":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:891:2365":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:173:33550":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"1:7996:21292":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:5580:16145":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:48237:2822":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4047:2594":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:7984:9162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:1535:10107":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11635:7980":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:21561:2794":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:11647:16462":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:44878:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:15138:20578":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"11:687:2341":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:6677:2743":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:357:2306":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:1580:10111":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5598:13247":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:22524:2918":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:22715:27256":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:46186:2841":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:44098:2521":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"9:329:15058":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11841:16518":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:396:31818":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6379:13872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1461:2342":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:1496:10102":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:1445:2341":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:5174:2591":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3201:2171":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:3627:2341":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6542:13948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:4706:2597":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:21349:8217":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:2665:15229":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"20:1711:138":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"11:1582:15128":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:45075:2930":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:16069:20790":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5407:1108":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:2037:16411":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"23:359:20957":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"16:5238:16118":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:7415:27157":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"10:0:1976":{"crate_id":10,"path":["adler"],"kind":"module"},"2:44542:8109":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5160:13199":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:22769:2574":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:32709:8510":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:3773:15274":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:4823:2611":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:45083:2931":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:4844:15885":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:9984:16323":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5212:13203":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:1804:637":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11367:16375":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:15836:20632":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:32775:2175":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:22381:2926":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13594:19316":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"18:623:33110":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:41484:8385":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11661:15170":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"20:4086:33309":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"5:6657:2342":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12238:16535":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:2516:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4891:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:3003:30748":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"11:2369:15130":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"10:44:15112":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:4202:2503":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:5002:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:15748:20625":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:33567:8442":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:15931:19290":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:12464:16571":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:5825:16155":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:3190:2376":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:3709:15256":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5200:13202":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5225:13205":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"20:34:2138":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"2:42343:2677":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:2995:15242":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"20:3119:20864":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"2:4473:8164":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:15635:20618":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"23:322:20960":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:15701:20622":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6929:32284":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:40833:2457":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"15:0:1980":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5466:13233":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:5132:21334":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:41012:8405":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10915:33087":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9737:16290":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"18:0:1983":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:5052:13191":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6394:16182":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:698:20838":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6882:32316":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:2459:15220":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:13753:19801":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:6678:13959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6773:16196":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:11128:16367":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13387:19301":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7951:16235":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"28:0:2121":{"crate_id":28,"path":["strsim"],"kind":"module"},"6:5483:13236":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:2521:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"20:2979:33219":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"2:41034:8406":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:4821:2608":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:34174:8446":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:7754:2292":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"21:309:20900":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:4984:421":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:3417:8158":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:33381:8439":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:31013:27532":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:40726:8196":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"20:3376:20869":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"1:12039:22379":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13774:16522":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:11018:8061":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4952:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:46457:2842":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:1142:15126":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:2336:15214":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:7330:9085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:9490:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:39879:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"20:4100:33182":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"16:7345:16210":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:21731:2488":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14599:19853":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:38500:8453":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:2443:2345":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:6821:13973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:7429:10228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:6413:8414":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:1653:10117":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:43201:8004":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:42229:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:22818:27497":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"20:3797:20935":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"5:7695:8137":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:47081:2849":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"20:4145:33344":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"2:22435:2927":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:10905:16338":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6915:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:15822:20631":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13485:19308":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:48435:7970":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7998:16238":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:4937:15909":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13235:19292":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:3250:30251":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"28:112:21017":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"2:44706:8116":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6030:16161":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:6377:2934":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:11385:21078":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:8294:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:491:9206":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:6511:2736":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:15418:20604":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"20:3904:33342":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"2:2740:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:21417:28932":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:9145:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:42355:8532":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"20:3520:20873":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"1:3273:2541":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:41442:2735":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:42023:2562":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:42191:2564":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:1526:10106":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12056:16481":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"20:755:33356":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"6:8029:14761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:13186:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5878:16158":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:40815:2443":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:12083:697":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6505:13901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:5720:2746":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:1824:2401":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:11764:16469":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:5565:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:9122:21037":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:613:33103":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:2352:2357":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:30924:8136":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"21:341:20941":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"2:47193:2803":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10769:33070":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:7960:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"18:706:8074":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4131:2602":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:14386:19839":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13785:16523":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:13422:2929":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:7595:16225":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:42364:2298":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"9:177:15107":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12030:16482":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:10887:2713":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:1934:8482":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:3237:2361":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:2274:30731":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11825:16497":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:40670:8201":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:43921:8051":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:2509:15222":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11392:16407":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:41969:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10230:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:13363:19299":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:13402:2932":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12851:16342":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:48465:7972":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:8215:2548":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:7359:14378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6460:13942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"28:69:21010":{"crate_id":28,"path":["strsim","GrowingHashmapChar"],"kind":"struct"},"16:7335:16209":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:1717:2503":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:14994:20558":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:8564:2693":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:5236:13206":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:12341:8594":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:7774:2289":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"24:131:2691":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"11:856:2352":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13089:16618":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12572:16335":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:15383:20600":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:7118:2676":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:3275:2542":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:15289:20591":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:6739:30257":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:6396:2935":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"23:244:22601":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"17:15333:20595":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:15249:20587":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:32695:28923":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:10449:27783":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"11:123:31809":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:5316:16137":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:7616:16317":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:4821:16584":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"20:3482:20882":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"6:7546:14386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:12318:8597":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:3967:20934":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"5:7064:30275":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5636:13251":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:1596:2360":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:40912:8390":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12318:16347":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:2548:31799":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:9035:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:7537:14385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:44262:8091":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:22303:2922":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:10671:33082":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"9:481:15001":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6348:16179":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:4202:29097":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:44719:8097":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"20:61:2139":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"2:46487:2848":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11324:16423":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:44671:8113":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:43469:2497":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:42695:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"9:446:15002":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:7339:14376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:6547:2742":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:2536:31801":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4011:2593":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:42135:27494":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:6691:2744":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:2818:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:5713:2745":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5376:13224":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:742:2349":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:12094:853":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:8298:2518":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:16187:20799":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:1559:10109":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5512:2705":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:1565:10110":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:482:21417":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12454:16570":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:48371:7966":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:22170:2488":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:645:2317":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13553:19313":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:7885:8387":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6282:16175":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:2419:15218":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:43712:8043":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:42412:2340":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2727:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:4070:30257":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:32688:16241":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:2553:15224":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13509:19310":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12353:16566":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:2671:21384":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:6929:8142":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:14847:20562":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10877:16337":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12225:16536":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:11095:2492":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:6664:13957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:6892:2785":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:4491:15785":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:6775:13971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"11:351:31813":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"27:0:2120":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"16:3260:15245":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:41476:8383":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:11605:16456":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:2450:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:41053:8408":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:608:33125":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:521:20841":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:22048:2786":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:5959:15183":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:835:2364":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"20:4232:2133":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"2:22342:2923":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:46557:2802":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:44685:8114":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11214:16366":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:15582:20613":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:15410:20603":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:2492:30211":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:3017:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:40870:8040":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:3685:2345":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:2172:30253":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:7417:30198":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7523:16221":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:6431:16184":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:48397:7968":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:44112:2522":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12289:16529":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:2319:15213":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:14177:19825":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:46823:27529":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:2254:30782":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:14503:19847":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:48450:7971":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:10945:8056":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:7446:14379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12969:16293":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:14723:20559":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:2469:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:9102:21026":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:6275:21311":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:11424:22646":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:3204:2340":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:5897:16159":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11358:2717":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:4433:15773":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:10487:2289":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:5413:8034":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:15368:20598":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13723:19799":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:44607:8111":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:10863:2522":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:4572:2634":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:2068:2381":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:9938:16322":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:2304:2355":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:1911:8483":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:12070:403":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:1923:2362":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:44234:8063":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:4902:2607":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:43490:2691":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:3597:16502":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:7982:2339":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:8247:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:1593:10113":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:12127:8080":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:39768:8156":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:6562:13949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:14012:19815":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5568:16144":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:9081:21265":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:40714:8195":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:6038:8805":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"14:31:15137":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:10247:22389":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"11:837:2350":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:15168:20580":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:11419:16335":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5846:16156":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:6725:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:7931:2477":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:9069:21325":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:22023:2796":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:6491:13900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:12093:1644":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"20:3474:20881":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"1:12076:332":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"24:26:20978":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"16:6803:16197":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13024:16349":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15102:20575":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:4237:7993":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"20:3447:20879":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"17:10185:16294":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:12095:1703":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:1691:30257":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:15197:20583":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:9858:16319":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8864:2710":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14968:20568":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:1585:2346":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:4787:15874":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:21405:28936":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:11730:16466":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"28:130:21019":{"crate_id":28,"path":["strsim","GrowingHashmapMapElemChar"],"kind":"struct"},"24:252:2138":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"2:12810:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11865:16520":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13308:19296":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1522:2349":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:4386:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:96:20817":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:621:2313":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:10022:8007":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6745:16194":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:5834:2732":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13738:19800":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:15078:16374":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7684:16229":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:7516:14384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5314:13216":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10092:16325":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10251:16326":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:256:33074":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:32718:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:597:16317":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:8966:2752":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:301:29110":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"6:5643:13252":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6408:16183":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:9672:29112":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"11:1896:2346":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:9781:16318":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11399:21054":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12213:16563":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:38445:8452":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:43255:8004":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:7653:16228":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"20:4182:33307":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"16:6965:16202":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11042:16360":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:22393:28072":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:14111:19822":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:7306:9255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3205:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:2266:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:1072:2358":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:149:15189":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:6613:20953":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"20:4048:20925":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"2:2724:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:44058:8089":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:9886:16320":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:5038:15941":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11341:16409":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:22838:27263":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:1430:2340":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:5415:13228":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:14977:20569":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:3354:2539":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:14341:19836":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"26:21:2133":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"1:3315:2543":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:22730:27506":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:726:20839":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"15:394:15173":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:3056:8458":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:8915:2340":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"20:3440:20884":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"2:48129:2850":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46679:2869":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12433:16305":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:33195:8440":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:586:9218":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:5423:13229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:918:2349":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2365:8473":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:5541:16142":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"20:3916:33352":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"2:32719:2174":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:11915:16521":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11256:16394":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:10018:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"11:1025:2356":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:10710:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:7837:2421":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10828:33081":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12671:16613":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:8931:2342":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11537:16424":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:4075:2597":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4924:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11547:16458":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:16151:20796":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"11:700:2342":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:4232:2503":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:12092:1647":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:11142:16335":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5102:13194":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6230:16171":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:11654:15170":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13797:19802":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:363:2307":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:4811:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11026:16359":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:3819:2342":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:80:20816":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:8085:21248":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:3177:15244":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:5290:13213":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11443:16412":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:4720:21455":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11743:16467":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"26:0:2119":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:10032:8014":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:42169:2563":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:14189:19826":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:9057:2678":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:10935:20902":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:15222:20586":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:1841:1195":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8631:2696":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"20:2774:2340":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"16:4518:15789":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8881:2711":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:2789:15235":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:11111:8063":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:6151:21392":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:10339:2710":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:44216:8065":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:9076:21291":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:1639:10116":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"23:144:20966":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"16:4761:15871":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:42951:8007":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:1826:2402":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:10982:16356":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:10137:16289":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:1795:2346":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:532:9210":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:45132:7984":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2121:8000":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:3790:20922":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"1:11352:21211":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:10229:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12707:16339":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15092:20574":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:41435:8379":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:8381:2373":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11269:16395":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:6532:13947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:22172:2792":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:1663:20913":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"16:6099:16163":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"20:1375:2138":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"1:8428:2610":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:7922:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:11701:8048":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:15769:20627":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:7802:2320":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:21620:2793":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"20:936:20867":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"2:8069:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:43861:28059":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12792:16299":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:12097:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:6650:13955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:7932:16234":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11016:16358":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:7485:14383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:9467:2480":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:5489:13237":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:7730:2488":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5677:13256":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:3177:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12278:16564":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:1925:27360":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:285:20974":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"17:10068:16303":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:46102:2800":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:12084:802":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:538:9211":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:47035:2843":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:538:20846":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:2723:30207":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:353:20902":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"17:12659:16577":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"24:113:20977":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2:2558:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:44856:8585":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13187:19290":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:40029:8153":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12175:16549":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4800:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13922:19809":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:4886:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:4119:2599":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6546:16187":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:8406:2663":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"24:0:2117":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"6:564:9215":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:22900:2575":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12683:16582":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:12508:16574":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7429:31996":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12251:16534":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:6608:27231":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:5870:8402":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7452:16218":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5457:13232":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:4674:15853":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:43930:8055":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:12073:1664":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"20:2796:2341":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"17:13173:16621":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:1503:10103":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8907:2713":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:11293:16396":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:47271:2809":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10524:16331":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:374:20903":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"17:12443:16560":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:12281:8595":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:4464:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:43218:27307":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:2819:15236":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:328:31807":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14284:19832":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:41451:8381":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:14079:19820":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:15569:20612":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:8288:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12808:16300":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:8363:2631":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:21740:2791":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5382:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12342:16532":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10170:16138":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5266:13210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:15678:20621":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:44316:8093":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:34693:8450":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:44032:8058":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7152:16203":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:45121:7986":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4979:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:0:1973":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13959:19811":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:3586:20871":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"1:9460:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:8981:2750":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:44042:8059":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:8055:16241":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:951:2354":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:2749:15233":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:12091:1646":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:9964:22268":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:14868:20564":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:7223:24498":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:8425:29110":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:1809:661":{"crate_id":1,"path":["std","env"],"kind":"module"},"18:643:33091":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13455:19306":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:15434:20606":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:3600:15248":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"14:0:1979":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10284:16327":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"22:5:2592":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"6:8300:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:15608:20615":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:46776:27498":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:0:535":{"crate_id":2,"path":["core"],"kind":"module"},"2:2447:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:11097:8065":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:3993:15425":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:10466:21384":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:11189:16371":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"20:4213:2134":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"1:5861:2733":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:40940:8399":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:43293:8006":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:11579:2571":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:26344:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:2693:2524":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:3442:2549":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:16249:20804":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:22746:27232":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11290:21218":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:39919:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:9160:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:46603:2808":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:6621:13952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4916:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:40890:2393":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:2552:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:4392:2629":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:7444:16217":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:2304:15212":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:1602:2361":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:2973:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5046:13190":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4932:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:12599:8073":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:12023:21057":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:7409:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:1136:30743":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46226:2853":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:836:2340":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:570:9216":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11773:16515":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:16093:20792":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:14449:19843":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"20:3285:2283":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"23:432:33609":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"16:3406:15246":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:42461:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:8004:2533":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"20:1670:20917":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"2:5794:2503":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:5919:16160":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4870:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13146:16620":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5250:13208":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:46156:2836":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:14529:19849":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:5649:2707":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13412:19303":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:4547:8172":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:3061:8459":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:42051:27347":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:673:2340":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:2883:15239":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:473:9203":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:42354:2679":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:41093:8395":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:32720:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:6737:32287":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:7351:8397":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:3175:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:45144:27280":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:48067:2816":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:22366:2488":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:10030:8013":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:4968:15917":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:6376:16181":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:8954:2749":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:787:2344":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:41428:27257":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:7366:16212":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:7089:30264":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"20:1665:20914":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"2:44420:2311":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:4248:2626":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:4431:2503":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"20:2994:33292":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"2:2978:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:40733:8197":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:46701:2875":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:46655:2820":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:553:9213":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7103:32299":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:2489:15221":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:15400:20602":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:8351:2563":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:40699:2311":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2688:8221":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:7938:2481":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"20:4065:33349":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"2:22018:2488":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"28:120:21018":{"crate_id":28,"path":["strsim","RowId"],"kind":"struct"},"17:14912:20566":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:1621:10114":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:2363:8472":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:22802:27282":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8248:2487":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7294:16206":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:5278:16135":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:48275:2856":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5219:13204":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"23:288:20962":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"2:44376:8090":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:7467:8377":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13292:19295":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:9089:16202":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"23:497:20952":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"17:13832:19804":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:2573:15225":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:10666:22308":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:12543:16579":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:12085:799":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:14298:19833":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:41457:2549":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6445:16185":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4992:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"23:337:20961":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"17:16223:20802":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:8224:2550":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:7619:16227":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7491:16220":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:13208:28225":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:12395:8067":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6698:13961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:47111:2855":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:5005:27811":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11354:16408":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:43478:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:48313:2877":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:44280:8092":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:7637:2548":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:563:20847":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43961:8042":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:939:2352":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:34037:8445":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:30892:2375":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4985:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:3763:20905":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"16:7400:16215":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:7355:16211":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40740:8198":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:7609:16226":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:6746:13967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:13512:2368":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:485:9205":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:40620:8161":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:46012:2834":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:261:33090":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:2450:2474":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7176:32315":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:3758:2380":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:5389:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:3262:33358":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"1:12071:1040":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:2234:16430":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:14752:20560":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:922:2350":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:13384:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:8080:21228":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:4:1121":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:5209:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:0:2114":{"crate_id":21,"path":["anstyle"],"kind":"module"},"14:214:15146":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5557:13243":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:47989:2844":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:42853:2730":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2983:2295":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7971:16236":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6895:32267":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3811:2570":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:726:2577":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:13999:19814":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:2992:7988":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"24:298:20975":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"17:12887:16344":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5352:13221":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:14545:19850":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:5298:16136":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:2995:30213":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:11558:2569":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12485:16573":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:588:2309":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:33978:8443":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"20:65:2140":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"5:1321:2358":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:12650:8100":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:44492:8106":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:14516:19848":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:40759:8194":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3237:22248":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:3916:2571":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15390:20601":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:31118:27482":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:41000:8413":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4824:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11160:21150":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:45034:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:4214:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:45105:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:1029:30257":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:680:20836":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:43950:8054":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:16138:20795":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:7377:2383":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:11524:16457":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:14356:19837":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:7627:21221":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:113:20818":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:46725:2876":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"20:3188:115":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"5:7586:8028":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:7518:2294":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:10382:21390":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:44013:8057":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:48412:7969":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:8013:2172":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11510:16403":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:40009:8462":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:10383:8559":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"18:531:20845":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5617:13248":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:7686:21410":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:491:33107":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:2971:7995":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:1542:2379":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:0:1981":{"crate_id":16,"path":["gimli"],"kind":"module"},"15:306:15162":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6880:13078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"19:0:1138":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:15957:20788":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:14066:19819":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12695:16581":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:15944:19291":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:5084:859":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12388:16558":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:6529:2345":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4716:21451":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:12075:1158":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:6478:13944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:5706:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:1307:2356":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:14025:19816":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:6243:21398":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"11:1066:15124":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:32702:8172":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:15624:20617":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:14260:19830":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:9213:21289":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"2:12111:8549":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:6254:16173":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:7492:2336":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:42539:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"7:31:14973":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:578:9217":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:2203:16405":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:2709:15231":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:6896:8140":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:4123:2600":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:735:20832":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:15521:20611":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:1903:2359":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8236:2483":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6756:13968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:11405:16406":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11075:16375":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"20:3685:20916":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"17:403:16315":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13606:19317":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6579:16188":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:10237:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12768:16297":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:7987:2338":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:4396:8029":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"20:3526:20876":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"1:8377:2568":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12478:16572":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:43500:27289":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8549:2692":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10710:16334":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"21:113:33551":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"11:800:2345":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:8996:2753":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6692:16192":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:3020:8419":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13252:19293":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"20:3149:20894":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"1:7731:2308":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13046:16302":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:2422:2463":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:42578:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:2687:2488":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:640:2316":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:7926:2480":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:16165:20797":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:7194:32260":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"28:34:21000":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"6:8317:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:11139:8064":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"11:1051:2357":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:6378:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:2917:15240":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"15:327:15166":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:2353:638":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:46257:2801":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:44913:8604":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:40982:8403":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:40016:8145":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:30956:27429":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:1628:10115":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11069:21095":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:21614:2789":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:33860:2783":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1485:10100":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:44828:8586":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4876:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:859:2342":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"11:1910:2360":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:2641:15228":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:43940:8053":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10218:16295":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:5616:16147":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:6738:13966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:7314:10059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11858:21401":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:10946:21409":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"20:3249:33359":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"18:670:20835":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3356:2540":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:3211:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15324:20594":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:5496:2704":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:3830:15308":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:8351:14957":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5260:13209":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:44513:8107":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10399:2521":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:4871:15889":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13972:19812":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11702:16464":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:8620:2695":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:10954:16355":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:299:31802":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5039:13189":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:2035:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"9:0:1975":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13344:19298":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"11:844:2351":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:42775:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:40921:8391":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"20:3775:20906":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"24:89:20970":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"16:7225:16204":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:42157:2572":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:11788:16516":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:45042:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6141:32230":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:40691:8088":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:10814:2340":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11567:16460":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"11:811:2346":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7113:21406":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:44836:8587":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:10277:2496":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:4464:30266":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:3707:30257":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5191:13201":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"21:182:20896":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"6:4971:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"10:36:31795":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:6188:16167":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:3423:8157":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5515:13239":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"11:2326:2356":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:725:2488":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:4986:16590":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"14:187:15145":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:43453:2495":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5546:13242":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11130:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:14587:19852":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6331:16178":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:14372:19838":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10612:16332":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47879:2810":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:40968:27110":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:795:2363":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:1510:10104":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"14:165:15138":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:9048:21074":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"23:447:2691":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"21:329:20901":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"17:13473:19307":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:1891:2345":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11634:16432":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:573:33091":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12107:16335":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:875:2353":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:15720:20623":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11877:16476":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:12539:2697":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:10659:2488":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:15655:20620":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:5699:2503":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:0:1982":{"crate_id":17,"path":["object"],"kind":"module"},"2:41466:8382":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12494:16537":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:10441:2541":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:46032:2799":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:267:30257":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:3051:8457":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:5624:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:22060:28937":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12043:16480":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:7597:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:5365:30257":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:7345:2366":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"20:3886:33347":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"2:12579:8076":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:8478:2690":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:44696:8115":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:15456:20608":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:3100:8449":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:5901:2345":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:5277:13211":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:15760:20626":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:6714:13963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:7537:16222":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:3010:15243":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4312:2628":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:5006:15932":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:6017:2729":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:11058:2712":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:1676:31797":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:46056:2835":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:44840:8591":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:22780:27500":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:5321:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:5985:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:7921:2479":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:5020:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:46346:2868":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:21386:28924":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:8265:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6599:15155":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:3451:7996":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:2399:15217":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:11112:21047":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:14986:20570":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:11657:8050":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"20:3928:33346":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"16:6788:32173":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:40930:8398":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:9196:2779":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"23:114:2528":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"5:5025:2503":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10419:16291":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:2438:2468":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12078:1544":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:5671:13255":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6215:16169":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"14:202:8117":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:5652:2709":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2689:15230":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:15342:20596":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:47531:2804":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11574:15120":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:1483:2343":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"20:4157:8402":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"2:21559:2488":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:21359:28929":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"18:515:20844":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"23:466:20953":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"5:3363:2346":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:15126:20577":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:545:9212":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11467:16410":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:7931:2173":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"20:3353:20863":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"16:3545:15247":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:3234:24979":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:1107:20888":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"16:2979:15241":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:39979:2330":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:40680:8202":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11115:16368":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10759:16335":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"20:3320:20868":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"11:2140:2356":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:3773:2381":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"20:3866:20931":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"16:8022:16240":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12900:16345":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:5409:8033":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:48386:7967":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:2542:28109":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5344:13220":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:15116:20576":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:1182:20886":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"2:39901:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12824:16341":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:6919:8141":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:7357:2345":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:14212:19827":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:42437:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:15313:20593":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"23:402:20963":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"1:11077:8603":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:16269:19303":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:12089:16478":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:10689:21085":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:1120:30854":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:42353:2323":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13015:16305":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6874:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:4621:2293":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:45024:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:3134:20893":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"16:6858:16200":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:40788:27346":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:40:19292":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"23:373:20958":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"17:14475:19845":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"14:220:15147":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:44902:2784":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:6077:16162":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:5645:16149":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:33801:2781":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11853:16519":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:11647:21209":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:7706:16230":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:7245:8389":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:44395:8078":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:3240:22237":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:15778:20628":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6706:13962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:0:883":{"crate_id":6,"path":["libc"],"kind":"module"},"2:10983:8068":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46411:2788":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:5400:13227":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"20:3239:33353":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"16:6669:16191":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:12096:1254":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13855:19806":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11413:21028":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:41069:8409":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:5390:13226":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:15176:20581":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:4813:15877":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:3522:2484":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"22:110:20945":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"20:3067:2130":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"23:99:20965":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"2:21742:2790":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:42278:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:7461:14381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4965:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4897:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4959:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10676:2477":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"18:754:20840":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:6670:13958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:48340:7963":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"20:3459:20875":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"2:44634:8112":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"20:3229:33351":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"20:57:2135":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"5:7547:27346":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:42209:2565":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:48191:2871":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:32776:8420":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:15273:20589":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7534:2440":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:10952:21419":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:16212:20801":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:4702:15858":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:36569:8451":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:3396:8461":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:635:33093":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:765:20833":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44130:8061":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10720:33076":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:5472:13234":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"20:3593:20890":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"6:1490:10101":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:5045:2668":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:41991:2560":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:4210:24497":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:40614:2311":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:6900:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:6134:16165":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:6597:13950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:7389:10245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:44088:8082":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1156:30855":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:2807:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:4272:2340":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:42428:2342":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11242:16393":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:637:2315":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:849:2341":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"23:389:20975":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"1:1040:2355":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5528:13240":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:12086:800":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11799:16517":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:46309:2813":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:1276:2355":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:3264:16479":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"20:3394:2129":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"1:2268:2458":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:7610:8118":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:1207:16380":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"22:152:20947":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"6:5588:13246":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"22:30:2522":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"6:7575:14388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11898:16496":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:21403:28927":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:1811:8365":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"11:832:2347":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:16176:20798":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"9:356:15018":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11335:21387":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:16079:20791":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:2271:2459":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:2054:2380":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:40950:8400":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:437:15186":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"22:0:2115":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"17:15734:20624":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:3853:20932":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"2:42007:2561":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:13674:19798":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:2423:2342":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:7376:16213":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:517:9208":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:3015:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:4322:8178":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"20:3563:20885":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"1:8012:2380":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:45096:2928":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:14131:19823":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:4550:2633":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10818:16336":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"23:416:20964":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"5:5831:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"11:430:31821":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3488:7999":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:14051:19818":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:44162:8096":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4885:13171":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:39864:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6422:32270":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:7350:8396":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"11:1887:2342":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:44000:8041":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:893:2345":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:4879:2613":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:10729:2483":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:46364:2874":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:6646:16190":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:40803:2441":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"20:3895:33372":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"1:4996:2659":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:4283:15692":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:1063:2357":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"18:481:20842":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:14855:20563":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8090:2535":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7386:16214":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:8278:2520":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:7070:22539":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:1686:10121":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10018:16296":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:1707:10123":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:46877:27531":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:3159:7997":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:9299:2135":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:12647:16578":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:12328:16530":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:10906:8067":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:0:1536":{"crate_id":1,"path":["std"],"kind":"module"},"5:2999:30747":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:6152:16166":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:3473:16484":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6555:15156":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14575:16305":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:42312:2676":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:42972:8016":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12300:16565":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:14463:19844":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2375:15216":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:7503:2337":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:39939:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:4718:21453":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:12089:1648":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:9017:2734":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:3741:15265":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:7679:2346":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:5906:2324":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:4733:15866":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10573:33079":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:1607:2362":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:6621:2739":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:21612:2488":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:15799:20629":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:7562:2438":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:1511:2348":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:2440:2469":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:4061:2595":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:9807:16304":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1533:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:523:9209":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14091:19821":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:1393:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:15214:20585":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:2993:30755":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:1671:10119":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:38555:8454":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"20:3257:33362":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"17:14788:20561":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"9:52:15021":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:6524:13946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:14311:19834":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"20:3806:2132":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"17:11674:16463":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:10738:21073":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11227:16365":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:659:20834":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:2424:2464":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:2496:1990":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:16198:20800":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:11557:16459":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:44411:8087":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:9178:2492":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:7984:16237":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"28:87:21011":{"crate_id":28,"path":["strsim","HybridGrowingHashmapChar"],"kind":"struct"},"2:9485:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:282:2176":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4240:2625":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:10447:2539":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:40642:27537":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:4190:29098":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:6330:2745":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:4650:2651":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:22880:27356":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13497:19309":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:4784:2633":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11063:16379":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:43246:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5477:13235":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"23:309:20959":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"17:11812:16475":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:23944:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:14933:20567":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:598:33106":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:6979:21396":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"24:190:15041":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"6:1663:10118":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"20:3290:20865":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"17:15814:20630":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}