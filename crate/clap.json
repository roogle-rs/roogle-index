{"root":"0:0:1679","crate_version":"4.2.1","includes_private":false,"index":{"2:11976:34166":{"id":"2:11976:34166","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11595:7782","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::rmatch_indices":"2:11979:34167"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42784:7797","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11979:34167":{"id":"2:11979:34167","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11595:7782","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::match_indices":"2:11976:34166"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42802:7798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:34174":{"id":"2:11993:34174","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11999:27149":{"id":"2:11999:27149","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:27104":{"id":"2:11910:27104","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:30905":{"id":"2:11918:30905","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42604:7789","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:34169":{"id":"2:11984:34169","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12017:34179":{"id":"2:12017:34179","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4541:34179"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42933:7793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12011:34178":{"id":"2:12011:34178","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11557:126","`FromStr`":"2:11556:2458"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11556:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11556:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:1895":{"id":"2:11970:1895","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11595:7782","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:1895"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42838:7799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5353:34834":{"id":"5:5353:34834","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1990","`String`":"5:7210:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1990","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:34158":{"id":"2:11914:34158","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11870:1374","str::slice_mut_unchecked":"2:11915:34159","crate::ops::Index":"2:3016:2167"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5337:34830":{"id":"5:5337:34830","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1990","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1990","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:2309":{"id":"5:5354:2309","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5338:2286":{"id":"5:5338:2286","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:26810":{"id":"2:12016:26810","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:22980":{"id":"2:11902:22980","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11163:7786"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:19637":{"id":"2:11906:19637","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3-20:0:1669":{"id":"0:3-20:0:1669","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[98,0],"end":[98,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"clap_builder","name":"clap_builder","id":"20:0:1669","glob":true}},"2:11949:27140":{"id":"2:11949:27140","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11595:7782","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split":"2:11943:27136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42652:7765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:22926":{"id":"2:11920:22926","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42620:2282","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:27105":{"id":"2:11912:27105","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:34160":{"id":"2:11924:34160","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42898:7796","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11982:34168":{"id":"2:11982:34168","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:30797":{"id":"2:11921:30797","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11922:30808"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42908:7785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11955:34162":{"id":"2:11955:34162","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11595:7782","str::split":"2:11943:27136","prim@char":"1:11864:410","str::split_terminator":"2:11952:34161"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42702:7801","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:34173":{"id":"2:11990:34173","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11620:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12014:26808":{"id":"2:12014:26808","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5344:34832":{"id":"5:5344:34832","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12005:34176":{"id":"2:12005:34176","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:310":{"id":"2:11904:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11905:27106","`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12008:34177":{"id":"2:12008:34177","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:799":{"id":"2:11894:799","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1679":{"id":"0:0:1679","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[119,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3-20:0:1669"],"is_stripped":false}},"2:11925:30906":{"id":"2:11925:30906","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42926:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:34172":{"id":"2:11989:34172","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5356:26807":{"id":"5:5356:26807","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12016:26810"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:27136":{"id":"2:11943:27136","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11595:7782","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split_whitespace":"2:11921:30797","str::rsplit":"2:11949:27140"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42634:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:34159":{"id":"2:11915:34159","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11870:1374","crate::ops::IndexMut":"2:3020:2168","str::slice_unchecked":"2:11914:34158"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12015:26809":{"id":"2:12015:26809","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:23485":{"id":"2:11996:23485","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:19496":{"id":"2:11935:19496","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:34161":{"id":"2:11952:34161","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11595:7782","str::split":"2:11943:27136","prim@char":"1:11864:410","`DoubleEndedIterator`":"2:7203:120","str::rsplit_terminator":"2:11955:34162"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42684:7802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11988:34171":{"id":"2:11988:34171","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5336":{"id":"5:5336","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5247:1374","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5337:34830","5:5338:2286","5:5341:34831","5:5344:34832","5:5352:34833","5:5353:34834","5:5354:2309","5:5355:26806","5:5356:26807"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11895:24652":{"id":"2:11895:24652","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:34155":{"id":"2:11897:34155","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11961:27144":{"id":"2:11961:27144","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11864:410","str::splitn":"2:11958:27142","self::pattern":"2:11595:7782"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42756:7767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:34164":{"id":"2:11967:34164","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:34165":{"id":"2:11973:34165","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11595:7782","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:1895"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42856:7800","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:29934":{"id":"2:11923:29934","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42888:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:34170":{"id":"2:11986:34170","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:27129":{"id":"2:11917:27129","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11916:27128"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:27128":{"id":"2:11916:27128","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11917:27129"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:19497":{"id":"2:11939:19497","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:27147":{"id":"2:11929:27147","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:27138":{"id":"2:11946:27138","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11419:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12020:34180":{"id":"2:12020:34180","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4539:34180"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42951:7794","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5355:26806":{"id":"5:5355:26806","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12015:26809"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:34154":{"id":"2:11896:34154","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:27106":{"id":"2:11905:27106","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:34831":{"id":"5:5341:34831","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:26805":{"id":"2:12013:26805","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893":{"id":"2:11893","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11158:1374","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11894:799","2:11895:24652","2:11896:34154","2:11897:34155","2:11899:34156","2:11902:22980","2:11903:34157","2:11904:310","2:11905:27106","2:11906:19637","2:11908:27103","2:11910:27104","2:11912:27105","2:11914:34158","2:11915:34159","2:11916:27128","2:11917:27129","2:11918:30905","2:11919:30811","2:11920:22926","2:11921:30797","2:11922:30808","2:11923:29934","2:11924:34160","2:11925:30906","2:11926:27146","2:11929:27147","2:11932:27148","2:11935:19496","2:11939:19497","2:11943:27136","2:11946:27138","2:11949:27140","2:11952:34161","2:11955:34162","2:11958:27142","2:11961:27144","2:11964:34163","2:11967:34164","2:11970:1895","2:11973:34165","2:11976:34166","2:11979:34167","2:11982:34168","2:11984:34169","2:11986:34170","2:11988:34171","2:11989:34172","2:11990:34173","2:11993:34174","2:11996:23485","2:11999:27149","2:12002:34175","2:12005:34176","2:12008:34177","2:12011:34178","2:12013:26805","2:12014:26808","2:12015:26809","2:12016:26810","2:12017:34179","2:12019:2088","2:12020:34180"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11899:34156":{"id":"2:11899:34156","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11897:34155"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:27142":{"id":"2:11958:27142","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782","str::rsplitn":"2:11961:27144"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42738:7769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:30808":{"id":"2:11922:30808","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11921:30797"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42917:7784","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:27146":{"id":"2:11926:27146","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:27148":{"id":"2:11932:27148","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:27103":{"id":"2:11908:27103","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12002:34175":{"id":"2:12002:34175","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:7782"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5352:34833":{"id":"5:5352:34833","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:34157":{"id":"2:11903:34157","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:30811":{"id":"2:11919:30811","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42610:7788","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:34163":{"id":"2:11964:34163","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:2088":{"id":"2:12019:2088","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4542:2088"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42942:2089","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"6:6059:12239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:3448:2258":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"32:4588:20839":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"1:3667:2333":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:2367:14373":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:3123:29912":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:891:2117":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8926:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:4868:2270":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13039:19295":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:6053:13090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:6528:2504":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"30:1781:9860":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4583:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:46606:7675":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7890:15383":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"30:5033:12345":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:10704:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:41074:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3973:2355":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13557:19430":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8256:2389":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:42461:7746":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"32:4615:20841":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"17:9061:15477":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:614:37018":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:42838:7799":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"31:3380:19704":{"crate_id":31,"path":["rustix","backend","io","types","PipeFlags"],"kind":"struct"},"2:2831:8149":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11070:15874":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"32:4957:9857":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreqn"],"kind":"struct"},"9:827:14186":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13100:19303":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:4385:7891":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:6171:15322":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:3519:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"30:712:8956":{"crate_id":30,"path":["libc","unix","sigval"],"kind":"struct"},"6:1541:9860":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5878:14340":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:1628:35863":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7298:15360":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:4155:19584":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"32:7338:21198":{"crate_id":32,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"6:4751:12377":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:22141:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"9:896:14088":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:40486:2324":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:13148:19311":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8174:2331":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:4888:15085":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:4781:12381":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:7521:14043":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:39716:8117":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"12:2190:35851":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:10506:15658":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:9968:2284":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"30:5945:12399":{"crate_id":30,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"32:4575:20838":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"17:9885:15640":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:6542:2505":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"32:5626:20993":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"2:3352:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:9274:15505":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"32:6677:21092":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"17:12148:18498":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11684:18408":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13327:19348":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9738:15563":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:2727:14388":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:641:2095":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:20733:2564":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6594:9796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5752:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2946:2149":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:7522:24633":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:7203:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"30:5633:12372":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12860:18860":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:96:19625":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"1:6926:24642":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:42532:7762":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:10762:7760":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:5712:2494":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"20:1108:19549":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"1:1571:2118":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"12:300:35852":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:11468:7683":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:22075:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:45751:2618":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:21141:2589":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:1422:2120":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6816:36316":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6496:9795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:39498:2280":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"29:47:19663":{"crate_id":29,"path":["io_lifetimes","portability","FromFilelike"],"kind":"trait"},"2:11133:8271":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7872:15382":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:10385:15686":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6463:15336":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:4635:15024":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4945:12398":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:7943:28913":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:40914:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11536:15643":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4890:12393":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4248:12326":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:21727:30925":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:8339:15463":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:8234:2388":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:507:37019":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:42412:7754":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"32:7138:21184":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe_op"],"kind":"struct"},"5:2116:33907":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:5541:15299":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:7948:26791":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"30:8017:13471":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2255:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"31:2530:37968":{"crate_id":31,"path":["rustix","process","uname","Uname"],"kind":"struct"},"1:3199:2306":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"30:4884:12337":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:950:2125":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:2916:15600":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:43212:7817":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9909:15597":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:21748:30657":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"20:4367:24635":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"18:538:19513":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"20:4235:19586":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"16:4297:14926":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:3632:14429":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"12:1866:2136":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12251:18566":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:7059:2433":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"20:3764:19545":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"1:1927:2208":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"20:4442:8108":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"2:42784:7797":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9712:15588":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"30:5513:12366":{"crate_id":30,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:9100:7719":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:12177:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:22108:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:8796:15472":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:6324:2115":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12896:18926":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:4795:783":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:6472:2499":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:10088:7772":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:11884:1469":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:38699:7877":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"32:6325:21070":{"crate_id":32,"path":["linux_raw_sys","general","tcp_zerocopy_receive"],"kind":"struct"},"2:42421:7753":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7511:15373":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"32:7148:21185":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe"],"kind":"struct"},"18:719:19503":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:3217:31319":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9031:36996":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:41988:30868":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11661:18407":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:2784:8126":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:653:9008":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6611:9799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:9358:7946":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:9766:2365":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"10:0:1780":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:9030:2209":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"30:764:8959":{"crate_id":30,"path":["libc","unix","servent"],"kind":"struct"},"6:4795:12383":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"30:5893:12394":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7909:15384":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"14:215:14302":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3929:2353":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11748:18470":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:1962:15558":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2886:8161":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:20696:2560":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:41699:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"34:32:22653":{"crate_id":34,"path":["strsim","StringWrapper"],"kind":"struct"},"2:4119:7895":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"12:1044:14288":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"20:4245:19576":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"16:2930:14396":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8483:2451":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"30:809:8628":{"crate_id":30,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:13492:19420":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4322:12332":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"32:5658:8957":{"crate_id":32,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"2:44777:2616":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8806:2506":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11518:14325":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9681:15587":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:3871:2348":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4720:12373":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:8393:15465":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:41636:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:7543:15374":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:39206:30909":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"30:2052:9872":{"crate_id":30,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6146:15320":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"32:7298:9796":{"crate_id":32,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"30:4945:12340":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:1290:1948":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"17:13168:19334":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6541:13471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"32:5814:21006":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:7173:8905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2530:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"9:977:14092":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:40994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"32:7278:9795":{"crate_id":32,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"27:125:37684":{"crate_id":27,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"12:1852:2134":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"30:4558:10018":{"crate_id":30,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:9098:7718":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"32:4975:20869":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:42856:7800":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:5664:15303":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"30:1869:9864":{"crate_id":30,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:6555:7852":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:9092:2263":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"30:676:8954":{"crate_id":30,"path":["libc","unix","winsize"],"kind":"struct"},"1:3238:2302":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6079:13091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"30:728:8957":{"crate_id":30,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9671:15553":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"32:5674:8949":{"crate_id":32,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"1:11835:2098":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11327:24263":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:7847:15381":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:4357:14938":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4379:12338":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10875:15496":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"20:3791:19547":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"17:12934:18929":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:5780:15307":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"32:5880:9879":{"crate_id":32,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"2:43040:7806":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:4604:7905":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:41941:30889":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:10216:7767":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:5563:2508":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:2636:33375":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9382:15521":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:42652:7765":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:4269:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:11821:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13214:19344":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"30:2113:9875":{"crate_id":30,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11813:18475":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"30:4749:12331":{"crate_id":30,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"12:632:2113":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:1921:7707":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:10419:2306":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"32:5642:8946":{"crate_id":32,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"20:4325:19579":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"5:3995:2114":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8790:2471":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:781:2138":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:7434:12549":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:2549:24656":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:3089:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:43568:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"32:5896:21015":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:2759:1983":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12609:18705":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:11885:1466":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:43134:7814":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:7832:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:4440:7893":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12781:18813":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"30:9104:14014":{"crate_id":30,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"0:0:1679":{"crate_id":0,"path":["clap"],"kind":"module"},"27:139:37685":{"crate_id":27,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"17:9778:15562":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"30:641:8952":{"crate_id":30,"path":["libc","unix","iovec"],"kind":"struct"},"30:1726:9857":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"12:751:2118":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:10221:15681":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:599:37043":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5910:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"30:5685:12375":{"crate_id":30,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"20:3869:19535":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"17:8774:15440":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1559:9862":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:9318:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8229:2387":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:1677:9872":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"9:956:14090":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"32:6343:13046":{"crate_id":32,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"2:4330:7889":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:6136:33789":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:8907:2495":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:12387:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:8105:2255":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:30011:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:3865:2349":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4775:12380":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:531:8951":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:7282:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"32:4806:20859":{"crate_id":32,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"2:41403:7712":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:3188:14400":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:7127:8094":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"30:9158:12548":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12748:18768":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:40697:2113":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:6730:8084":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:481:8945":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:2282:14369":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"31:4686:37924":{"crate_id":31,"path":["rustix","process","prctl","EndianMode"],"kind":"enum"},"2:6546:8096":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10455:15680":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6472:14314":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"31:4360:37813":{"crate_id":31,"path":["rustix","process","prctl","UnalignedAccessControl"],"kind":"struct"},"2:38926:2105":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:7511:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10283:15655":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9488:15537":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:2967:1987":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:5060:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:7052:2115":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:2916:33344":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:3164:34912":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12237:18565":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"27:205:19645":{"crate_id":27,"path":["anstyle","color","Color"],"kind":"enum"},"24:304:19624":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"17:11300:16096":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:6123:15318":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:2703:7702":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:2906:33774":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:6345:15333":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"20:4165:37197":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"32:6660:21090":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"20:4039:19557":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"30:4979:12342":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6619:15341":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:679:2097":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:8643:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:7802:2233":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6517:14313":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:2535:14380":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:8884:2513":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:11887:1523":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9764:15589":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:38800:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"32:4762:20854":{"crate_id":32,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"30:4675:12328":{"crate_id":30,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:1753:30686":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"30:5922:12397":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11559:18296":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:3667:2115":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5759:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:7235:7826":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"11:0:1781":{"crate_id":11,"path":["adler"],"kind":"module"},"2:2809:8148":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10476:15690":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5990:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7497:15372":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"30:6961:13009":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:8441:15467":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:43018:7805":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:3959:2270":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:534:2067":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"31:4668:37853":{"crate_id":31,"path":["rustix","process","prctl","TimingMethod"],"kind":"enum"},"30:4962:12341":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:42620:2282":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:43611:2640":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:10050:7758":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:41721:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:8776:2470":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4328:12174":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:7481:12556":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:1710:9876":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9873:15639":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:12211:31462":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:861:2140":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:7275:26792":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:13404:19389":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"32:5079:20879":{"crate_id":32,"path":["linux_raw_sys","general","ip_esp_hdr"],"kind":"struct"},"32:6590:21082":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"30:8181:13473":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2772:7701":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"30:9297:14043":{"crate_id":30,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:44875:2611":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:3263:14401":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:8323:7778":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13393:19388":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10682:15488":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:38860:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"30:5536:12367":{"crate_id":30,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:3747:33776":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"32:7387:9875":{"crate_id":32,"path":["linux_raw_sys","general","mmsghdr"],"kind":"struct"},"5:6970:2115":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:7688:2183":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:505:2060":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12337:15494":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"32:5560:20986":{"crate_id":32,"path":["linux_raw_sys","general","prctl_mm_map"],"kind":"struct"},"16:6690:15344":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:4394:7892":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:9073:2516":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:7857:28954":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:1509:9855":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:44547:30682":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:481:19509":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:1366:2114":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10350:15492":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:3283:2291":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:38992:31557":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"32:6632:21087":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"12:1859:2135":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:4750:2363":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"30:1693:9855":{"crate_id":30,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:4268:7884":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:2359:2245":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:2087:34924":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10845:15494":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:44298:2622":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:7180:2211":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:6359:2100":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:9982:2188":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:5753:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:1565:127":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"17:8981:15475":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"20:3581:19533":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"2:42917:7784":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:9776:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:5014:28943":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:20479:31015":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:41933:7948":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:10774:15492":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"30:5594:12370":{"crate_id":30,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"30:5344:12359":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"12:861:2127":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:9063:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:929:2122":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:2169:34986":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"32:5263:12365":{"crate_id":32,"path":["linux_raw_sys","general","in6_pktinfo"],"kind":"struct"},"5:4989:2490":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4334:12333":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:9353:7945":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8762:2469":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"23:383:2448":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"32:7097:21180":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_files_update"],"kind":"struct"},"16:4749:15042":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"30:5611:12371":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"29:67:19659":{"crate_id":29,"path":["io_lifetimes","traits","IntoFd"],"kind":"trait"},"2:4149:7896":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"32:6597:21083":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1:878:2116":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"14:187:14309":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:42926:7783":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"32:5799:21004":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"2:2852:8153":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:40575:2335":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2882:8160":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:5862:2270":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"32:4674:20849":{"crate_id":32,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"18:531:19512":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:493:8947":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4733:12375":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:30189:30776":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4457:12348":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:8218:2435":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"20:1537:19569":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"6:4307:12330":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"12:738:2117":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"30:8856:8905":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:6178:2507":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"32:5551:8953":{"crate_id":32,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"30:5194:12353":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:8596:15468":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6735:15346":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"27:370:19651":{"crate_id":27,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"1:8820:2509":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:4568:23263":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:45177:2636":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:1638:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"12:60:35869":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2878:8159":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"7:32:14059":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:5432:2468":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:3159:2304":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40637:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"2:30083:30786":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:5447:15293":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:40722:2433":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2709:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12265:18567":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"32:5888:21014":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"27:336:19649":{"crate_id":27,"path":["anstyle","effect","Effects"],"kind":"struct"},"6:4346:12334":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13007:19292":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:5663:2118":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:39969:8092":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:5773:2490":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"31:3873:37843":{"crate_id":31,"path":["rustix","backend","time","types","ClockId"],"kind":"enum"},"9:863:14087":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:5839:15310":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10583:15483":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:11875:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:4284:33775":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:4564:23259":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:4574:15011":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4237:12325":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"32:6980:21154":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_params"],"kind":"struct"},"17:10270:15656":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"30:8105:9796":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"32:4635:20844":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"6:4618:12361":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:8014:15390":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:42430:7757":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"23:418:19602":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"30:2136:2376":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2521:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:3457:14403":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"31:4868:37811":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureControl"],"kind":"struct"},"20:4434:19560":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"20:4061:2090":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"17:11106:15882":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7117:36329":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6593:15340":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:39942:2312":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:2156:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:10051:28944":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4952:12399":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:29763:2338":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:4327:14932":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:3439:29347":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:5815:15309":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"32:4988:20870":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"32:6310:21069":{"crate_id":32,"path":["linux_raw_sys","general","tcp_diag_md5sig"],"kind":"struct"},"31:2854:19708":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFlags"],"kind":"struct"},"31:3909:37861":{"crate_id":31,"path":["rustix","backend","time","types","DynamicClockId"],"kind":"enum"},"6:4656:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:46495:2633":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:1716:2119":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:20774:2565":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:2862:8156":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:40552:30711":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:1723:9877":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:41396:7711":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:9943:2114":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:1899:10018":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:21651:30812":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:8475:15438":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7825:15380":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"32:5314:20925":{"crate_id":32,"path":["linux_raw_sys","general","ipv6hdr"],"kind":"struct"},"17:9155:15479":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:42756:7767":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"30:7228:13057":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:7396:15367":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:5916:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:5772:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:43550:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:1083:2131":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"32:6431:21073":{"crate_id":32,"path":["linux_raw_sys","general","oldold_utsname"],"kind":"struct"},"2:20671:2571":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:8424:2449":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:2702:1982":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:10434:15688":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:11871:1452":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:42500:7745":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:5981:36289":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12176:18513":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:6565:7853":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"30:5094:12348":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:21399:2365":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:39529:8104":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4841:12387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:3118:2113":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"15:0:1784":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:5900:2507":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"32:5282:20920":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_rt_hdr"],"kind":"struct"},"9:622:14110":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"5:3728:2119":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:1731:9878":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:39667:8115":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"22:30:2365":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"2:44344:2602":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:3240:2303":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:5313:2463":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:9293:15523":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"32:5094:20881":{"crate_id":32,"path":["linux_raw_sys","general","ip_beet_phdr"],"kind":"struct"},"2:38958:8165":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:9119:24435":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"17:10466:15689":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13518:19427":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:3161:2305":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:2345:2241":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"30:9246:12555":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:2411:14375":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"12:1840:2118":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10721:15490":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11511:14325":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:7452:12552":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:3599:14420":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:41660:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:2815:8147":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4468:12349":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:5948:8120":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4681:12368":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11315:16099":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"32:4467:19743":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"1:7484:28939":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4408:12342":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:3716:14465":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:9118:37000":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"30:7185:13055":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:1432:2121":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:3026:14399":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:4191:7733":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"18:755:19506":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"32:6606:21084":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"2:39619:8100":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"12:119:35849":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:8638:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"30:4927:12339":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:11308:8322":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:7953:2298":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7637:15378":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:6722:33831":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:39511:8097":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:7498:12558":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:7584:2365":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:2613:2297":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:660:19498":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:5597:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:1564:2113":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"32:6711:21095":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_2"],"kind":"union"},"16:6270:15328":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:8798:2113":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"20:2620:2114":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"32:6578:21080":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:5698:13040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8240:2379":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"30:6911:13046":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7343:15364":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10608:15484":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9475:15538":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:652:37019":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:39194:7918":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"22:5:2348":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"32:6452:21074":{"crate_id":32,"path":["linux_raw_sys","general","old_utsname"],"kind":"struct"},"32:6640:21088":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"2:12429:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:6403:33776":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"29:147:19675":{"crate_id":29,"path":["io_lifetimes","raw","FromRawFilelike"],"kind":"trait"},"32:5300:20923":{"crate_id":32,"path":["linux_raw_sys","general","rt2_hdr"],"kind":"struct"},"2:6939:2485":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"30:7282:13060":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7483:15371":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:10422:2302":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:43365:8313":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"20:3659:19653":{"crate_id":20,"path":["clap_builder","builder","styled_str","Style"],"kind":"enum"},"1:9022:23538":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:0:1366":{"crate_id":1,"path":["std"],"kind":"module"},"1:558:2069":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7929:15385":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"30:4581:12324":{"crate_id":30,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:3125:2135":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"19:0:1015":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:8871:15473":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:39920:30949":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:5722:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:4256:19587":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"5:5193:7738":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11841:18477":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:766:19507":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:11093:2516":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"12:2080:2130":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"32:4996:20871":{"crate_id":32,"path":["linux_raw_sys","general","group_req"],"kind":"struct"},"18:624:37037":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:40705:2114":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:11391:2332":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"32:4796:20858":{"crate_id":32,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"32:5825:21007":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"6:5945:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"32:6081:21037":{"crate_id":32,"path":["linux_raw_sys","general","tcp_fastopen_client_fail"],"kind":"enum"},"30:1845:9863":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"12:1534:14292":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:3772:2334":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:43233:7819":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"32:5788:21003":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"31:4024:37810":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdTimerFlags"],"kind":"struct"},"2:31737:2475":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:40764:8247":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:42898:7796":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:22273:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"30:4714:12329":{"crate_id":30,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:45097:30796":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"20:2795:37071":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"32:4742:20852":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"6:6571:9822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13366:19385":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:42188:30829":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12836:18857":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11005:2469":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"30:9252:12557":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8493:2113":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11576:18299":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5716:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:6976:2141":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:0:1777":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:5556:2507":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"29:69:19658":{"crate_id":29,"path":["io_lifetimes","traits","FromFd"],"kind":"trait"},"16:5163:15288":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"15:214:14321":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:736:19505":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"30:1822:9862":{"crate_id":30,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:1597:2137":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:2053:2128":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11515:18291":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"30:8035:2420":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"32:5009:20875":{"crate_id":32,"path":["linux_raw_sys","general","group_filter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"23:287:19610":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"2:1762:8190":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:44406:2623":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:40832:2114":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:42173:8300":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:4369:12337":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"30:5369:12360":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:2714:2073":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12349:18639":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"30:6986:13047":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3977:2356":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:2793:2553":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:4606:15019":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13527:19428":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"20:4087:19575":{"crate_id":20,"path":["clap_builder","parser","matches","any_value","AnyValueId"],"kind":"struct"},"17:10497:15692":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"12:815:2123":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:7193:2212":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"12:669:2121":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"20:1533:19566":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"32:6737:21097":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_4"],"kind":"union"},"2:40532:30795":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:8744:2467":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:39681:8116":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:10997:15700":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6186:15323":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:12198:18562":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11828:18476":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"32:5251:20918":{"crate_id":32,"path":["linux_raw_sys","general","in6_flowlabel_req"],"kind":"struct"},"1:9877:22743":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:2343:2240":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:22240:2074":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:1898:2207":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12514:18703":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:2771:14390":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"29:183:19679":{"crate_id":29,"path":["io_lifetimes","views","FilelikeView"],"kind":"struct"},"17:13231:19346":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:10654:30247":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:473:8944":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:6399:2503":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4929:12397":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"30:5412:12361":{"crate_id":30,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:2341:14372":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7237:15355":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:6829:36283":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:630:34923":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:20853:2365":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6790:15349":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7093:15352":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:44252:30820":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:11870:1374":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:10123:7765":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"20:4380:37159":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"16:4817:15062":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:4545:15006":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"32:4558:14042":{"crate_id":32,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"5:1612:33776":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:6879:2311":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"20:3884:36227":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"9:586:14122":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"18:690:19501":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:10161:7766":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:45413:2617":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4812:986":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:42942:2089":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"30:8134:9799":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"32:7356:13044":{"crate_id":32,"path":["linux_raw_sys","general","msghdr"],"kind":"struct"},"2:43381:8317":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"31:4196:37906":{"crate_id":31,"path":["rustix","process","id","Cpuid"],"kind":"struct"},"2:45074:30777":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"30:5454:12363":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"32:4621:20842":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"16:4786:15055":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"32:6717:21096":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_3"],"kind":"union"},"1:9111:2549":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:39266:7911":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"32:6669:21091":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"6:5660:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1747:9879":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"23:403:19606":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"5:271:33776":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:4441:14950":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:5686:2493":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"14:202:7828":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6284:15329":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:4554:2353":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:3990:2298":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"16:5596:15301":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:21814:2340":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"20:3823:19538":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"16:6241:15326":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"32:6298:21068":{"crate_id":32,"path":["linux_raw_sys","general","tcp_md5sig"],"kind":"struct"},"5:6653:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:41194:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11939:18484":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:43377:8316":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"30:7042:13050":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"31:3933:37807":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdFlags"],"kind":"struct"},"17:10394:15687":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:7034:26312":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:4389:12339":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:594:8960":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:43441:8332":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"31:2713:19717":{"crate_id":31,"path":["rustix","backend","io","epoll","EventFlags"],"kind":"struct"},"5:5189:7737":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:5494:15296":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:3249:15623":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:540:8952":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5938:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:20608:2569":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:1021:15524":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5472:15295":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:46411:2595":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"32:4833:20864":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:44529:2607":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"32:5618:20992":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"5:5789:8547":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:1687:9873":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"23:334:19616":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"16:4413:14946":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10528:15481":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:4004:31561":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:6698:13477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:4358:37122":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"6:4520:12354":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"22:130:19595":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"2:21826:2343":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"32:6649:21089":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"6:553:8954":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"31:498:19720":{"crate_id":31,"path":["rustix","backend","io","epoll","Epoll"],"kind":"struct"},"2:50283:30945":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:3185:2137":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"32:6373:21071":{"crate_id":32,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"2:42702:7801":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6773:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:39179:2089":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"32:6749:21106":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_7"],"kind":"enum"},"31:457:106":{"crate_id":31,"path":["rustix","backend","io","epoll","Context"],"kind":"trait"},"32:4628:20843":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"30:8295:13477":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:46685:7680":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:9422:15514":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:5728:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:9068:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:4115:2384":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:6628:13472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:7942:15386":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"30:9234:12553":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:41274:2491":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"32:5860:21011":{"crate_id":32,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"20:4470:37104":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"30:1802:9861":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:8822:37009":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:5525:15298":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:2803:8145":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13413:19392":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:6649:13475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5878:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1786:2176":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4422:12344":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:6743:15347":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"22:114:19594":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"1:6363:2496":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:39319:7914":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:20456:31017":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12909:18927":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:4259:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"12:777:14286":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"20:3549:19530":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"12:1836:2115":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:1981:2152":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:46708:7681":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:10933:19652":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:2657:14385":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:39359:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:42542:7763":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"31:5306:37850":{"crate_id":31,"path":["rustix","process","wait","WaitStatus"],"kind":"struct"},"6:4805:12384":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13279:19347":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1589:9865":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:11600:7778":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"32:5739:12248":{"crate_id":32,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"17:13071:19300":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:39702:2281":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"31:3572:37933":{"crate_id":31,"path":["rustix","backend","process","types","MembarrierCommand"],"kind":"enum"},"2:9088:7712":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"30:6783:13040":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:574:37019":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"30:7302:13061":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:6791:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"12:393:35865":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:20645:2570":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"32:4547:13469":{"crate_id":32,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"16:5184:14339":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4501:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:8951:36992":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:45537:2609":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:39520:8098":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"30:5054:12346":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6704:15345":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:7440:12550":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8248:2331":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12485:18702":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:1847:1945":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"9:382:14195":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"28:0:1924":{"crate_id":28,"path":["is_terminal"],"kind":"module"},"30:5117:12349":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"12:1138:2131":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:3403:7857":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"23:0:1919":{"crate_id":23,"path":["anstream"],"kind":"module"},"32:5634:8947":{"crate_id":32,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"2:40469:2323":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:3125:15605":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:5378:1938":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:42933:7793":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9631:15533":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:46571:7672":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:9362:15477":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:4844:2416":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:44853:2608":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"20:3296:37049":{"crate_id":20,"path":["clap_builder","builder","arg_settings","Flags"],"kind":"struct"},"2:2788:2551":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:4340:7890":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"30:7425:13090":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2891:8162":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:2465:14377":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:9001:23493":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"20:4217:37124":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"20:3525:181":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"25:0:1921":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"20:3174:1940":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"20:4132:2117":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"17:9805:15636":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:41980:30821":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:20725:2365":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:20886:2565":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"31:4213:37817":{"crate_id":31,"path":["rustix","process","membarrier","MembarrierQuery"],"kind":"struct"},"1:7473:15456":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"23:367:37553":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"6:4649:12364":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:1571:9863":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"30:5572:12369":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:21764:30799":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10360:15651":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"30:8203:13474":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"30:658:8953":{"crate_id":30,"path":["libc","unix","pollfd"],"kind":"struct"},"1:11029:23536":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"13:0:1776":{"crate_id":13,"path":["std_detect"],"kind":"module"},"30:7355:13063":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:7596:2054":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:10159:15606":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:8272:15461":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46457:2613":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10088:15602":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:3204:7878":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:7210:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:9930:15617":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:2957:1984":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:9644:15532":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"12:810:2120":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:6576:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:6536:7851":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7557:15375":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6252:15327":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:4835:2415":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"32:5521:20985":{"crate_id":32,"path":["linux_raw_sys","general","socket_state"],"kind":"enum"},"30:5225:12354":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:42522:7764":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"30:5817:12382":{"crate_id":30,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7980:15389":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"20:858:19532":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"1:962:2127":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4476:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:44729:2631":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6137:15319":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:6548:2420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:41654:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:11774:18472":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:621:2090":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"23:209:19615":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"20:67:1950":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"20:4523:1943":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"6:7218:13855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2868:14394":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"30:4865:12336":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:4418:19561":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"32:6542:21077":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"17:1931:15534":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:7704:2190":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"32:7369:13045":{"crate_id":32,"path":["linux_raw_sys","general","cmsghdr"],"kind":"struct"},"1:2213:2236":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:6611:28942":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:2798:8146":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4549:12356":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"25:23:14212":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:2847:8152":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"32:6054:21036":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_5"],"kind":"enum"},"1:588:2086":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:40849:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"30:5496:12365":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9458:15552":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:13126:19308":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"31:3671:37896":{"crate_id":31,"path":["rustix","backend","process","types","Signal"],"kind":"enum"},"26:40:19639":{"crate_id":26,"path":["concolor_override","AtomicChoice"],"kind":"struct"},"30:604:8950":{"crate_id":30,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10108:15598":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:9193:37007":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:21545:30592":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:925:2121":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"30:621:8951":{"crate_id":30,"path":["libc","unix","hostent"],"kind":"struct"},"6:1520:9857":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5959:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:39222:7917":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"32:5041:12367":{"crate_id":32,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"17:12964:19262":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7469:15370":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11547:15644":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"29:42:19666":{"crate_id":29,"path":["io_lifetimes","portability","IntoSocketlike"],"kind":"trait"},"6:0:804":{"crate_id":6,"path":["libc"],"kind":"module"},"5:7307:7848":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"32:4536:8828":{"crate_id":32,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"17:9553:15477":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:7849:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"30:505:8945":{"crate_id":30,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13203:19338":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3126:29911":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:562:15456":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:3671:2153":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:1583:9864":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2261:14341":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:62:8573":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:534:36149":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:878:2113":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11706:24649":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"20:4184:37108":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"17:8137:15457":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:41949:7947":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:42513:7761":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:42592:7792":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:4016:31564":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:484:24664":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:43560:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:36:35844":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:5558:15300":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:8561:15443":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"30:5800:12381":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:9387:24259":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"32:5221:14043":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr"],"kind":"struct"},"31:0:1926":{"crate_id":31,"path":["rustix"],"kind":"module"},"30:5914:12396":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:21793:30875":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:38904:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4396:12340":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:7446:12551":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:1554:2270":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:9094:7721":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:1586:2135":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:44376:2635":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"30:1887:9865":{"crate_id":30,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:9382:2231":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"32:6785:21148":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_8"],"kind":"enum"},"17:11149:15919":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:8089:2311":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:847:2113":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:3455:2279":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:42951:7794":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:578:8958":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:6643:13474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:10138:2477":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4662:12366":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"30:7925:9795":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11880:729":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"30:8221:13475":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7357:15365":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"32:5696:8948":{"crate_id":32,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"16:5411:15291":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8117:2259":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"18:707:7780":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:2908:33343":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:11245:26302":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4877:12391":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"30:5136:12350":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13024:19293":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:20458:31013":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6070:15316":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:43246:7803":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"31:479:19719":{"crate_id":31,"path":["rustix","backend","io","epoll","Owning"],"kind":"struct"},"30:7021:13049":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:11889:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"31:4145:37922":{"crate_id":31,"path":["rustix","process","id","Uid"],"kind":"struct"},"2:38738:7706":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:5902:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:8241:15460":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:4629:2418":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:1575:2119":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:39730:8118":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"32:4567:9876":{"crate_id":32,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"20:4065:19573":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"16:6059:36351":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5219:14335":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"30:7502:13092":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:10837:2468":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:6322:28942":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:40755:2434":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:914:2119":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13158:19333":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"20:4295:37212":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"20:3743:19544":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"15:193:14317":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"32:5712:13854":{"crate_id":32,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"5:1040:33837":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:46533:2598":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"31:3779:37954":{"crate_id":31,"path":["rustix","backend","process","types","RawCpuSet"],"kind":"struct"},"20:0:1669":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"6:4714:12372":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:43624:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:4743:12376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:42487:7744":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:11864:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:1695:9874":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:3901:2350":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"32:5049:20877":{"crate_id":32,"path":["linux_raw_sys","general","iphdr"],"kind":"struct"},"6:1514:9856":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"30:4788:12174":{"crate_id":30,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"20:59:1945":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"6:5690:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:2366:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:6884:29734":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13176:19335":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:10546:15482":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10894:15497":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:967:15520":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"20:63:1949":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"6:4559:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:42908:7785":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:3959:19568":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"6:1716:2376":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"27:357:19650":{"crate_id":27,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2:2252:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:3208:1941":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"30:5938:12398":{"crate_id":30,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"32:5275:12384":{"crate_id":32,"path":["linux_raw_sys","general","in6_ifreq"],"kind":"struct"},"32:5020:9869":{"crate_id":32,"path":["linux_raw_sys","general","in_pktinfo"],"kind":"struct"},"17:13047:19298":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"15:175:14316":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:3130:34920":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:681:19500":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6161:15321":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"22:0:1918":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"1:5492:2472":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:29989:8138":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11951:18485":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:21492:30602":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"24:192:14212":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"30:0:804":{"crate_id":30,"path":["libc"],"kind":"module"},"30:6721:12980":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:7469:12554":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4539:12355":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"32:5964:21017":{"crate_id":32,"path":["linux_raw_sys","general","tcphdr"],"kind":"struct"},"31:466:19718":{"crate_id":31,"path":["rustix","backend","io","epoll","Borrowing"],"kind":"struct"},"5:1463:2151":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:4085:2270":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"20:3484:1938":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"1:933:2123":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:39469:7744":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4571:12358":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"20:3853:37112":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"1:11877:731":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"9:0:1779":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10403:15491":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"32:6389:8954":{"crate_id":32,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"31:3294:19689":{"crate_id":31,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"16:8056:15391":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"12:320:35860":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:10649:23878":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"30:5836:12383":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:6728:13479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:9086:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:43069:7812":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:44631:2559":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:10824:2190":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"32:7318:21197":{"crate_id":32,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"16:2557:14381":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4828:12386":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:50262:30944":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"12:1065:35862":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"9:592:14109":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:12630:18758":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11639:18401":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6298:15330":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"13:226:35870":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"22:34:2284":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"2:21293:2557":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"30:4770:12332":{"crate_id":30,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12103:18495":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:5554:8099":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"23:163:19604":{"crate_id":23,"path":["anstream","raw","RawStream"],"kind":"trait"},"30:8163:13472":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:904:2118":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11259:16085":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:638:2093":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"31:4542:37815":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointExceptionMode"],"kind":"struct"},"30:9212:12552":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:3985:2358":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:45331:2632":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:1074:2130":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"9:19:14160":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:43385:8318":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:21635:30897":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:9092:7720":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10321:15650":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"32:4949:9856":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq"],"kind":"struct"},"2:2961:1985":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:44322:2614":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:40588:2326":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:3532:2118":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:7123:8095":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10921:15697":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:46591:7674":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:41417:7721":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:42802:7798":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"30:806:8627":{"crate_id":30,"path":["libc","unix","FILE"],"kind":"enum"},"17:247:37008":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4673:12367":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12695:18762":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9165:36995":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:21305:30569":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:3016:2167":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:36:2172":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:22339:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:44677:2624":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:42192:7747":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"14:0:1783":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:4166:2385":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:38816:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"32:6569:21079":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"32:6932:21151":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_9"],"kind":"enum"},"30:7345:13062":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"12:725:2116":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"32:6623:21086":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"2:11595:7782":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:1051:2128":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"30:7993:13470":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6330:15332":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4787:12382":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"32:4843:20866":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_1"],"kind":"enum"},"2:40874:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"32:0:1927":{"crate_id":32,"path":["linux_raw_sys"],"kind":"module"},"2:22306:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"18:727:19504":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:8631:15469":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:5549:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"32:6560:21078":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"17:10121:15599":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11368:16115":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:3402:14402":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6210:15325":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:3566:14411":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"32:5245:8950":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_mreq"],"kind":"struct"},"2:20424:30572":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"12:353:35858":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"12:387:35868":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:10694:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:14:1898":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:2481:2365":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12550:18704":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:153:14346":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:9250:15503":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6094:13092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:9601:15539":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"12:853:2126":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"23:263:19614":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"30:4564:12323":{"crate_id":30,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7309:15361":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:7105:2111":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:6697:33789":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"31:4179:37953":{"crate_id":31,"path":["rustix","process","id","Pid"],"kind":"struct"},"17:11734:18469":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"14:40:15700":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:2749:14389":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"30:4846:12335":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7603:15377":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:4:998":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6676:15343":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:46617:7676":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"33:0:1928":{"crate_id":33,"path":["concolor_query"],"kind":"module"},"32:4942:9855":{"crate_id":32,"path":["linux_raw_sys","general","in_addr"],"kind":"struct"},"30:4998:12343":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:8701:15471":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:8526:15442":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:7809:2234":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10332:15685":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"32:7204:21194":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_getevents_arg"],"kind":"struct"},"1:8979:26788":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"30:4905:12338":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"29:189:19680":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeView"],"kind":"struct"},"1:3051:2314":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:10230:7770":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:9857:15618":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:5477:8108":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:9328:15517":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"12:0:1782":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:2964:1986":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"20:3810:19537":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"17:11217:15924":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"30:5015:12344":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"32:5070:20878":{"crate_id":32,"path":["linux_raw_sys","general","ip_auth_hdr"],"kind":"struct"},"30:5725:12377":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12617:18706":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13374:19386":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"32:5104:20916":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_2"],"kind":"enum"},"1:4318:2380":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"31:2839:19691":{"crate_id":31,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"2:8217:2436":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:1527:9858":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4893:2425":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"32:5843:21009":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"2:2329:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"25:53:2448":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"2:43161:7815":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:45043:30648":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"20:4340:19578":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"2:2835:8151":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:7681:2133":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:12263:7943":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:48935:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"30:7002:13048":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:20477:31018":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:6635:8103":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5800:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"31:4339:37952":{"crate_id":31,"path":["rustix","process","prctl","DumpableBehavior"],"kind":"enum"},"16:7435:15369":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:3953:33776":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11247:15976":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:2706:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:46560:7671":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:1903:15574":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"30:7322:35362":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:96:19484":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:564:19514":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"12:2205:2111":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"27:196:37683":{"crate_id":27,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"16:6359:15334":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11125:15883":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:7463:12553":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"30:1913:9866":{"crate_id":30,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"32:4771:20855":{"crate_id":32,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"2:38840:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2371:2251":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:2933:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:7819:2235":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:920:2120":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:2793:14391":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12008:18488":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:8911:37001":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:11251:26316":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"28:5:2291":{"crate_id":28,"path":["is_terminal","IsTerminal"],"kind":"trait"},"6:4353:12335":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11846:23431":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:4748:2099":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:2695:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"20:4496:37280":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"2:20684:2365":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:22438:2342":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"30:522:8946":{"crate_id":30,"path":["libc","unix","timeval"],"kind":"struct"},"20:4175:37101":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"2:2827:8150":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"20:3685:1939":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"2:3114:2169":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:43357:8311":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"30:8070:9822":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"30:6763:13039":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"21:0:1917":{"crate_id":21,"path":["bitflags"],"kind":"module"},"2:43198:7816":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:8991:36999":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"30:5875:12392":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"32:4599:20840":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"17:242:36993":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"14:221:14308":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:521:19508":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:45957:2637":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:1674:1071":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:119:8627":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:42440:7755":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:8494:14337":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"30:5993:12404":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:45567:2612":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12278:18568":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11761:18471":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:9577:15541":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:10867:2471":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"30:539:8947":{"crate_id":30,"path":["libc","unix","timespec"],"kind":"struct"},"2:40954:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:39236:7919":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:4094:2382":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1663:9871":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:5495:2474":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:8295:15462":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"20:3772:19546":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"30:8896:13854":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:39364:2214":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13221:19345":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13478:19402":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"32:6357:14014":{"crate_id":32,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"6:5931:13057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5843:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"32:6923:21149":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_cqe"],"kind":"struct"},"2:10729:7759":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:3151:2136":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3198:7879":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:41234:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"25:89:1948":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"5:1995:2153":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4727:12374":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"32:7235:2420":{"crate_id":32,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"17:11873:18479":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"31:3476:19692":{"crate_id":31,"path":["rustix","backend","io","types","EventfdFlags"],"kind":"struct"},"6:4862:12389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6034:15314":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:123:8628":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:39632:8112":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4900:12394":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4451:12347":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10445:15494":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:7117:2112":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"32:6998:21176":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_10"],"kind":"enum"},"23:435:19605":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"1:11830:26799":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"30:5478:12364":{"crate_id":30,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"30:5974:12401":{"crate_id":30,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"23:424:37570":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:41154:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6530:13470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"32:6473:21075":{"crate_id":32,"path":["linux_raw_sys","general","new_utsname"],"kind":"struct"},"6:572:8957":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:4404:2392":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:11888:1108":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:8852:2511":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"31:3087:19709":{"crate_id":31,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"2:11620:7777":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:39642:8113":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:3616:19528":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"30:6813:13041":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:7173:1989":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9539:15535":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:2705:14387":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:2389:14374":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"20:4110:19577":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"17:13436:19393":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:1351:2113":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:4028:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"20:1289:19551":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"17:11343:16101":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:45301:2629":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11087:15881":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"30:7246:13058":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"12:1085:14289":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"26:0:1922":{"crate_id":26,"path":["concolor_override"],"kind":"module"},"16:4262:14915":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11174:15921":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4402:12341":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10310:15684":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12730:18766":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12134:18497":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"24:290:19623":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"17:9021:15476":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:11218:23489":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4962:12400":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"12:1832:2113":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9700:15559":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:11886:777":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:286:1990":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"32:4651:20847":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"2:25647:2337":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"30:5987:12403":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10659:2233":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:4503:1944":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"30:5171:12352":{"crate_id":30,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"32:6202:21067":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_6"],"kind":"enum"},"2:39185:7881":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2524:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:5823:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"32:5781:21002":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"20:3566:19531":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"32:7219:8955":{"crate_id":32,"path":["linux_raw_sys","general","linger"],"kind":"struct"},"17:9401:15519":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:1592:2136":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:11556:2458":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:10011:7771":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12322:18576":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"30:7074:13051":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"30:695:8955":{"crate_id":30,"path":["libc","unix","linger"],"kind":"struct"},"30:5783:12380":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:939:2124":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"32:4713:20850":{"crate_id":32,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"1:7601:2064":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5786:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"32:5236:9861":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in6"],"kind":"struct"},"18:636:37039":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:39951:8089":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12768:18812":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:11017:2470":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:44232:30695":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:13354:19350":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"30:2167:9879":{"crate_id":30,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:4123:19583":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"2:39489:2165":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"20:3635:2065":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"16:2993:14397":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:39590:8110":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5000:12404":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:5703:15304":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:2527:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:5628:15302":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:7195:13853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:2998:7705":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"31:4746:37830":{"crate_id":31,"path":["rustix","process","prctl","VirtualMemoryMapAddress"],"kind":"enum"},"29:0:1925":{"crate_id":29,"path":["io_lifetimes"],"kind":"module"},"6:4882:12392":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"20:3833:19542":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"1:5172:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:10944:24641":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6376:15335":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:40840:2115":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"31:4969:37816":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureState"],"kind":"struct"},"16:7267:15357":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:8368:15464":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"30:8458:13484":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:39961:8090":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:39312:7913":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:5755:2502":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10854:15495":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:4347:33775":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:487:8946":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:6204:2118":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:44945:2597":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:21619:30867":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:113:19485":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:7596:32119":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13459:19396":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"30:486:8944":{"crate_id":30,"path":["libc","unix","group"],"kind":"struct"},"30:7143:13053":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:42888:2285":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:217:7710":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"32:6399:21072":{"crate_id":32,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"2:11368:8321":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:6993:2142":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"20:1037:19550":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"2:39599:8119":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:10714:2255":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:3659:2152":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:860:2114":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12756:18810":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:2539:2295":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:7023:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:4689:15030":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6865:36282":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10822:15493":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"30:1744:9858":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11879:733":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11787:18473":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7659:15379":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:43266:7804":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:10630:2419":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"34:72:22648":{"crate_id":34,"path":["strsim","StrSimError"],"kind":"enum"},"6:4637:12363":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:30025:30932":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:11868:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11054:15873":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11909:18481":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"30:783:8960":{"crate_id":30,"path":["libc","unix","protoent"],"kind":"struct"},"20:4193:37067":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"5:7015:2115":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"29:182:19678":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeViewType"],"kind":"trait"},"1:10001:24270":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"31:4451:37812":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointEmulationControl"],"kind":"struct"},"17:13141:19310":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:6985:2118":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:8811:32822":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:39581:8109":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12874:18862":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12674:18761":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:1404:2116":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10209:1938":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"12:834:2125":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7865:2296":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:6719:13478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8180:2330":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10182:15604":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"32:4782:20856":{"crate_id":32,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"31:5210:37808":{"crate_id":31,"path":["rustix","process","wait","WaitOptions"],"kind":"struct"},"2:48948:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11997:18487":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11164:26777":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:10672:23417":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:7665:2094":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:8161:2284":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:7873:2152":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"30:8890:13853":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:38999:7890":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:1550:9861":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"32:5872:21013":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"20:2598:2113":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"16:4849:15070":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:10207:15670":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"30:9176:12549":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2857:8154":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:1413:2117":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"27:284:19647":{"crate_id":27,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"2:39326:7915":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"32:5835:21008":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"6:6488:8996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6017:15313":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"31:5194:37907":{"crate_id":31,"path":["rustix","process","sched","CpuSet"],"kind":"struct"},"16:6719:35999":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:2840:8155":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13506:19426":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4301:12329":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9339:15516":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"30:5981:12402":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:2573:2287":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:10075:15601":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:21:670":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:2189:33925":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11881:1470":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"27:0:1923":{"crate_id":27,"path":["anstyle"],"kind":"module"},"17:12816:18816":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:8278:2420":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:6051:2643":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:9691:15560":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"29:132:19672":{"crate_id":29,"path":["io_lifetimes","raw","AsRawSocketlike"],"kind":"trait"},"2:10202:7769":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:31786:8123":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:5724:31142":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:44446:30922":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"14:7:14299":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:2077:2060":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:3192:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:11486:24438":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"14:31:14299":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:43429:2555":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:2217:2237":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:5363:2466":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9831:15638":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:40781:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6496:15337":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:5737:15305":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:42361:31392":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:41114:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:3316:2312":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:2320:14371":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:4498:2408":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:2386:1794":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:40773:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:41757:8256":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"30:5256:12355":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:7585:2084":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"30:5668:12374":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:48974:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:42450:7756":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:5967:35362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:4673:2369":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:45491:2605":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2360:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:10752:15491":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"32:5773:21001":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"2:39549:8106":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11074:23515":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"20:3257:19556":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"30:5394:2347":{"crate_id":30,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13572:19435":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8155:2282":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:8967:28959":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:43055:7809":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:4314:2270":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7426:15368":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:3963:2354":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11882:1467":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:13134:19309":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:5951:13060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:1056:33768":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10420:15679":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:9844:15596":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"32:5085:20880":{"crate_id":32,"path":["linux_raw_sys","general","ip_comp_hdr"],"kind":"struct"},"1:7650:2091":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"31:534:2113":{"crate_id":31,"path":["rustix","backend","io","epoll","Iter"],"kind":"struct"},"1:4064:26315":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:5999:24644":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2324:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:46747:7682":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:10416:2304":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:46655:7678":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:6747:2556":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:20877:2365":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"29:56:19664":{"crate_id":29,"path":["io_lifetimes","portability","FromSocketlike"],"kind":"trait"},"17:10490:15691":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:7001:34913":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:5374:15289":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"30:8377:13480":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:42684:7802":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"12:98:35854":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:11419:7771":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:9304:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6764:13482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4820:12385":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11235:15975":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13382:19387":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4994:12403":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:582:7926":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11606:18399":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:12190:7942":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5235:36315":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:44921:2596":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"20:3840:19541":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"2:39305:7793":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4483:12351":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:5679:2492":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"8:0:1778":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:1704:9875":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"32:4528:20837":{"crate_id":32,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"16:5996:15312":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"30:9263:12558":{"crate_id":30,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2615:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"30:556:8948":{"crate_id":30,"path":["libc","unix","rlimit"],"kind":"struct"},"32:7117:21182":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update"],"kind":"struct"},"2:40611:2327":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"32:5666:9008":{"crate_id":32,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"16:6200:15324":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"20:3544:2065":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"30:2151:9878":{"crate_id":30,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:5240:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:51:1946":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"2:22837:2336":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"9:800:14222":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:7671:2132":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"31:4847:37866":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeature"],"kind":"enum"},"6:4224:12324":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"30:7973:13469":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4597:12360":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5890:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4921:12396":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"30:9240:12554":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:961:33776":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:813:2139":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"27:405:19653":{"crate_id":27,"path":["anstyle","style","Style"],"kind":"struct"},"6:4489:12352":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"32:6585:21081":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"16:4721:15038":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:5203:14337":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13340:19349":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"31:4791:37910":{"crate_id":31,"path":["rustix","process","prctl","PrctlMmMap"],"kind":"struct"},"20:4050:19558":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"17:9108:15478":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"30:2093:9874":{"crate_id":30,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2683:14386":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:5805:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"27:233:19646":{"crate_id":27,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"6:4766:12379":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"22:100:19593":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"20:4278:19580":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"2:2601:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11330:16100":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7166:15353":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8096:2313":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:9090:7711":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"30:4805:12333":{"crate_id":30,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:3730:19548":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"6:4274:12328":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:8056:2254":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:8418:15466":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"20:3749:19539":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"6:586:8959":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:5949:15311":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:10724:23487":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:7555:2146":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:1604:9866":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7956:15387":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:2831:24261":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:6000:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6521:13469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5741:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"30:2130:9876":{"crate_id":30,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"32:4733:20851":{"crate_id":32,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"16:3010:14398":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4313:12331":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"29:28:19660":{"crate_id":29,"path":["io_lifetimes","portability","AsSocketlike"],"kind":"trait"},"17:12046:18491":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9897:15641":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"30:5321:12358":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8974:26796":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:42578:7795":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"30:6936:13008":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"30:7265:13059":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8499:2453":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"9:920:14089":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6528:15338":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"32:7076:21179":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_11"],"kind":"enum"},"5:7058:2115":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7388:15366":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"32:5754:20999":{"crate_id":32,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"16:6781:15348":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:590:30923":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"30:6893:13045":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:39006:7867":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"12:2184:30281":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"20:4093:1942":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"17:12022:18489":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:3373:2257":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12955:18942":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11893:18480":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"31:3798:19735":{"crate_id":31,"path":["rustix","backend","termios","types","OptionalActions"],"kind":"enum"},"1:8921:26734":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:11170:2478":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11161:15920":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"31:4707:37901":{"crate_id":31,"path":["rustix","process","prctl","TimeStampCounterReadability"],"kind":"enum"},"2:3232:7703":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:7797:2231":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:10357:24637":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:5145:33776":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4727:2370":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13114:19305":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11147:24661":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"32:6743:21098":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5"],"kind":"union"},"1:8333:2426":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4429:12345":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12211:18563":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"12:2198:35855":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9350:15515":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"20:3816:19540":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"17:12361:18642":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:3530:2113":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"30:1987:9869":{"crate_id":30,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"32:5748:8956":{"crate_id":32,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"32:4519:20816":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"32:4660:20848":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"17:12850:18859":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9223:15502":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:4669:2364":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"12:762:2119":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"30:5298:12357":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:39449:2228":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:11149:8273":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"32:6035:21030":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_opt"],"kind":"struct"},"17:12980:19290":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:11412:2334":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"30:480:8573":{"crate_id":30,"path":["libc","unix","DIR"],"kind":"enum"},"17:13091:19302":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13031:19294":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"20:3640:19534":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"18:515:19511":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:20439:30572":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:39246:7920":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"31:4162:37831":{"crate_id":31,"path":["rustix","process","id","Gid"],"kind":"struct"},"17:9371:15478":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:2823:2554":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:9919:2113":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:5122:15271":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:40446:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:46632:7677":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"30:5857:12384":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10708:15489":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:361:2083":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:7201:13854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"7:79:14066":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:671:19499":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:9283:15525":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:39610:8111":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:9071:37011":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:3854:14579":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:3020:2168":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:44823:2604":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"31:3001:19696":{"crate_id":31,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"16:6877:15350":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:7970:15388":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:2605:14383":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12060:18492":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:3605:2329":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"32:5913:12980":{"crate_id":32,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"2:41410:7720":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:48922:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9751:15561":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"32:6686:21093":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe"],"kind":"struct"},"17:12797:18814":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:3346:2270":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"13:110:35917":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:2631:14384":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:1827:2156":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"31:3611:37948":{"crate_id":31,"path":["rustix","backend","process","types","Resource"],"kind":"enum"},"32:5610:20991":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"1:10462:2066":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:3120:24863":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"32:6614:21085":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"2:39558:8107":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:0:1920":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"16:5460:15294":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11617:18400":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:8212:15459":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:9375:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"12:1555:14293":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"30:2143:9877":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"32:5704:12323":{"crate_id":32,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"17:9263:15504":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:3277:2119":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:12118:18496":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"32:5292:20921":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_opt_hdr"],"kind":"struct"},"1:11350:2333":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:39283:2089":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6654:15342":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"30:7203:13056":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:1617:9868":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"32:5332:20984":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_3"],"kind":"enum"},"30:2005:9870":{"crate_id":30,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:43408:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:46670:7679":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12972:19263":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"12:1029:2130":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"32:4813:20860":{"crate_id":32,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"1:4671:2368":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:255:1948":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"32:5729:8996":{"crate_id":32,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"17:10796:15441":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:8138:2280":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"32:5269:20919":{"crate_id":32,"path":["linux_raw_sys","general","ip6_mtuinfo"],"kind":"struct"},"34:0:1929":{"crate_id":34,"path":["strsim"],"kind":"module"},"17:10625:15485":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6567:15339":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"32:5851:21010":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"16:7044:36323":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12926:18928":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"12:1845:2119":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:11014:15812":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"32:5594:20989":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"27:328:32119":{"crate_id":27,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"30:1687:9008":{"crate_id":30,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"20:4489:2463":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"2:21687:30934":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:2518:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:4051:7700":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:44:14276":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"32:4753:20853":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"30:9194:12550":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4988:12402":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:4086:2381":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13594:19471":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:2407:33378":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:9081:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8351:2438":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"32:7174:21193":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_12"],"kind":"enum"},"1:3391:2256":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:4217:14894":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10973:15699":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11708:18467":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:39927:2100":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"30:5706:12376":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:48987:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:3227:19529":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"6:4261:12327":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4850:12388":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"32:4822:20862":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage"],"kind":"struct"},"30:8351:13479":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11594:18343":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:2868:8157":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"20:3243:19555":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"2:44566:2592":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:6123:26798":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:12291:18574":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:10244:7768":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:11609:7780":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9627:15546":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:4263:7883":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"31:4115:37905":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdClockId"],"kind":"enum"},"30:5650:12373":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"23:302:19611":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"6:4703:12371":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:46551:7670":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:46099:2606":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:1443:2122":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:41958:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:4115:2270":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"24:89:19621":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"12:274:35846":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:21401:2563":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11137:15884":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:1568:2115":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:9096:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:39651:8114":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:42604:7789":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4416:12343":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2534:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:39392:8241":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"20:3737:19543":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"2:1645:8072":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:43361:8312":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"9:649:14111":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:11721:18468":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12033:18490":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13082:19301":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"30:1948:9868":{"crate_id":30,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11500:18290":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11867:1033":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:31773:28934":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:1739:8191":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:39258:7794":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:11037:8330":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:12398:2641":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:43223:7818":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:1534:9859":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:12510:2170":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:41669:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:4414:2072":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:2912:33345":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:9574:24656":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"27:305:19648":{"crate_id":27,"path":["anstyle","color","RgbColor"],"kind":"struct"},"1:8222:2326":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11356:16114":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:12238:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:39345:7916":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"32:5226:20917":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr__bindgen_ty_1"],"kind":"union"},"1:8441:2450":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8300:2367":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:491:37040":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"31:4725:37904":{"crate_id":31,"path":["rustix","process","prctl","MachineCheckMemoryCorruptionKillPolicy"],"kind":"enum"},"1:6286:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11199:15923":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:8868:2512":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4519:15004":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:9791:15590":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13580:19437":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:2825:14392":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:38785:8163":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"30:2074:9873":{"crate_id":30,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"30:5903:12395":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:386:15454":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:20884:2567":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"30:6830:13042":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43369:8314":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:8752:2282":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:6475:2500":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:48961:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4439:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:9446:15526":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:4921:15094":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"20:54:1947":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"23:349:19617":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"5:4772:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:8162:15458":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:956:2126":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10642:15486":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:44584:30920":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:41034:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"32:4827:20863":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1"],"kind":"union"},"16:6842:35942":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6109:15317":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:43086:7813":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8987:15351":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:29949:2148":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:42634:2284":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:1228:2129":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"32:6138:21039":{"crate_id":32,"path":["linux_raw_sys","general","tcp_info"],"kind":"struct"},"32:5990:21029":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_4"],"kind":"enum"},"17:8055:15439":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:6961:2171":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"12:697:2122":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:2300:14370":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:3159:2134":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9526:15536":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"30:6871:13044":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11876:734":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:2819:2552":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:45601:2594":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"31:4810:37855":{"crate_id":31,"path":["rustix","process","prctl","PTracer"],"kind":"enum"},"30:7443:12239":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10245:15683":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:10849:23514":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:567:8956":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:39913:8086":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:48552:2638":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"23:232:19612":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"17:11974:18486":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:6757:13481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:499:8948":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11271:16088":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:2894:14395":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:5347:2465":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:1382:2115":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"32:5002:20872":{"crate_id":32,"path":["linux_raw_sys","general","group_source_req"],"kind":"struct"},"1:8510:2454":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:39567:30946":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"31:3846:14212":{"crate_id":31,"path":["rustix","backend","termios","types","Action"],"kind":"enum"},"6:7428:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:7150:2213":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:39439:2229":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10062:15603":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:546:8953":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:7211:15354":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:48909:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2210:2232":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:8881:36994":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"31:2625:19716":{"crate_id":31,"path":["rustix","backend","io","epoll","CreateFlags"],"kind":"struct"},"17:11485:18289":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"32:7261:21196":{"crate_id":32,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"32:7106:21181":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_register"],"kind":"struct"},"16:5614:36191":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:44707:2628":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"30:4731:12330":{"crate_id":30,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:1652:9870":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"30:6847:13043":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:21136:2566":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:13536:19429":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:355:2082":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:561:8955":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"30:4828:12334":{"crate_id":30,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:44996:30692":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"29:127:19671":{"crate_id":29,"path":["io_lifetimes","raw","AsRawFilelike"],"kind":"trait"},"2:30564:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6668:36271":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11186:15922":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12948:18930":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"20:4205:37068":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"1:8401:2448":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:3415:7861":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:11666:7808":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12225:18564":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:7290:2119":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"20:36:1948":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"31:5181:37862":{"crate_id":31,"path":["rustix","process","rlimit","Rlimit"],"kind":"struct"},"2:9040:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11528:15645":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12307:18575":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:44428:2627":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:44477:2615":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:41773:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"32:6497:21076":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"5:4155:2113":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12739:18767":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"32:5029:9860":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in"],"kind":"struct"},"12:2178:35857":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:10828:23880":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:11862:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"12:1872:2137":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8274:2417":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:2705:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:8806:32121":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"30:7476:13091":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"24:113:19628":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"1:1824:2188":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:40503:2325":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"30:4605:12325":{"crate_id":30,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"31:4829:37846":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointMode"],"kind":"enum"},"6:4687:12369":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:11865:1486":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:1213:2130":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:7708:28934":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:44507:2603":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"32:5904:13039":{"crate_id":32,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"17:8666:15470":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"30:7953:8828":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:1849:2195":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:22405:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"29:152:19676":{"crate_id":29,"path":["io_lifetimes","raw","FromRawSocketlike"],"kind":"trait"},"16:5761:15306":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:45255:2625":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:9052:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"12:1120:14290":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:0:1786":{"crate_id":17,"path":["object"],"kind":"module"},"2:40688:8169":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"18:699:19502":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"29:37:19665":{"crate_id":29,"path":["io_lifetimes","portability","IntoFilelike"],"kind":"trait"},"29:137:19673":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawFilelike"],"kind":"trait"},"32:6421:2376":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_un"],"kind":"struct"},"23:170:2365":{"crate_id":23,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"30:573:8949":{"crate_id":30,"path":["libc","unix","rusage"],"kind":"struct"},"30:5433:12362":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:3610:33776":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:2487:14378":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:6682:31386":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11800:18474":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"32:7214:9859":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr"],"kind":"struct"},"32:5805:21005":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"30:1929:9867":{"crate_id":30,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8168:2285":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4697:12370":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"20:2880:37049":{"crate_id":20,"path":["clap_builder","builder","app_settings","Flags"],"kind":"struct"},"1:11874:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:7288:15359":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:8216:2437":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:1580:2134":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"32:5580:20987":{"crate_id":32,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"31:356:37958":{"crate_id":31,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"30:8440:13483":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:10226:24260":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:12073:18493":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:1788:2177":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:3177:8164":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13192:19337":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5813:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7135:36337":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11853:18478":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:4981:12401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"12:985:2128":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:38985:15390":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"31:3193:19706":{"crate_id":31,"path":["rustix","backend","io","types","SpliceFlags"],"kind":"struct"},"30:4627:12326":{"crate_id":30,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:6316:15331":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:46209:2626":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:43353:8309":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:8185:2321":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7319:15362":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:4983:28943":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:39289:7912":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"12:659:2115":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:11203:23533":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"32:5946:12239":{"crate_id":32,"path":["linux_raw_sys","general","sysinfo"],"kind":"struct"},"6:5917:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"23:63:19625":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"1:2361:2246":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"9:709:2448":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"30:7120:13052":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:12455:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"9:676:14097":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:7386:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:505:8949":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11863:923":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:2275:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:2842:14393":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:1197:2128":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:3187:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11288:16095":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:40623:2328":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:41970:2448":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:9234:31572":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:7329:15363":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6512:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"31:3822:19736":{"crate_id":31,"path":["rustix","backend","termios","types","QueueSelector"],"kind":"enum"},"1:8750:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:39539:8105":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:39406:2215":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"32:4966:9858":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq_source"],"kind":"struct"},"2:20727:2562":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:9185:1945":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:3923:2352":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10257:15657":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13059:19299":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"20:4142:19585":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"32:5865:21012":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"2:21675:2339":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"9:111:14104":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:6250:33776":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"23:320:19624":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"1:6091:24651":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:2905:7696":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:10314:2467":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:21702:30886":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:10950:24639":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:6667:13476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:9589:30453":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"27:383:19652":{"crate_id":27,"path":["anstyle","reset","Reset"],"kind":"struct"},"32:5650:12329":{"crate_id":32,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"2:20858:2561":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:1609:9867":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"22:159:19596":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"16:7567:15376":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"23:246:19613":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:10233:15682":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8814:2115":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"32:5602:20990":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"16:2579:14382":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10520:15693":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:30581:7926":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:6743:13480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:46349:2630":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"32:4645:20845":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"1:3670:2332":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2707:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:9475:8283":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"30:745:8958":{"crate_id":30,"path":["libc","unix","tms"],"kind":"struct"},"23:153:19603":{"crate_id":23,"path":["anstream","lockable","Lockable"],"kind":"trait"},"20:4395:37107":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"14:160:14299":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"20:4081:19574":{"crate_id":20,"path":["clap_builder","parser","matches","any_value","AnyValue"],"kind":"struct"},"17:12087:18494":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:4385:14942":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:4246:2386":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"30:5883:12393":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:38976:7855":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:525:8950":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:1242:2131":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:38882:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"32:176:19745":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenUnionField"],"kind":"struct"},"18:0:1787":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:7031:33374":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:43653:7692":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:8510:14335":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8839:2510":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"30:5763:12379":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:3689:14462":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:3915:2351":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7278:15358":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"32:7126:21183":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update2"],"kind":"struct"},"17:12884:18924":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:7475:12555":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:29983:7847":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:42610:7788":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:4632:2392":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:2874:8158":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:3269:7704":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:4769:30635":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:609:37022":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:5793:15308":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"12:822:2124":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:7487:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:4226:37202":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"1:3201:2307":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13184:19336":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10374:15653":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"32:6043:21031":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_window"],"kind":"struct"},"1:6226:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:4218:12323":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:6075:2641":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:11869:1344":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:9722:15585":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:11163:7786":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:11056:2263":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:46287:2610":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10949:15698":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3430:2209":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:2476:2294":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:22372:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9820:15637":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"20:3910:19567":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"17:10670:15487":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:43389:8330":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:646:2096":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:44276:2634":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"31:5075:37809":{"crate_id":31,"path":["rustix","process","prctl","PointerAuthenticationKeys"],"kind":"struct"},"30:4651:12327":{"crate_id":30,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:40713:2115":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"30:5154:12351":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:8941:15474":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10296:15654":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:7164:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"9:505:14271":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7249:15356":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"30:7166:13054":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"30:8924:13855":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"32:6705:21094":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1"],"kind":"union"},"2:40824:2113":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"32:7157:21186":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction"],"kind":"struct"},"30:8329:13478":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:6903:15351":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"32:5586:20988":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"9:33:14161":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"20:3876:19552":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"17:9433:15513":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"32:5307:20924":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_destopt_hao"],"kind":"struct"},"2:46580:7673":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9501:15522":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"31:438:7890":{"crate_id":31,"path":["rustix","backend","io","epoll","Ref"],"kind":"struct"},"31:2990:19707":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFd"],"kind":"struct"},"17:10139:15477":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:11883:1468":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6052:15315":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:1003:2129":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"9:188:14140":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"29:19:19654":{"crate_id":29,"path":["io_lifetimes","portability","AsFilelike"],"kind":"trait"},"17:420:14343":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:39376:30794":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10684:2234":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:4102:2383":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:7160:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:7559:8093":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12164:18499":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:9557:30440":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:43373:8315":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:9317:15518":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:4426:2393":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:4662:15027":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:7541:24666":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"20:4072:19588":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"17:1771:15540":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:21800:2341":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11436:18288":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:31777:8219":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"14:165:14300":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:5441:7851":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5433:15292":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"32:6950:21152":{"crate_id":32,"path":["linux_raw_sys","general","io_sqring_offsets"],"kind":"struct"},"29:181:19677":{"crate_id":29,"path":["io_lifetimes","views","FilelikeViewType"],"kind":"trait"},"30:8253:13476":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:132:2448":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"17:9658:15586":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:7224:7825":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:5327:2464":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"12:2069:2129":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"20:2809:37100":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"26:20:1943":{"crate_id":26,"path":["concolor_override","ColorChoice"],"kind":"enum"},"32:7378:2347":{"crate_id":32,"path":["linux_raw_sys","general","ucred"],"kind":"struct"},"32:4723:12382":{"crate_id":32,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"1:870:2115":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:7622:2066":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4628:12362":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:3923:2118":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11267:24635":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:6634:13473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:4144:14845":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"7:0:1513":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:0:1785":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:43641:7694":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:7133:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7372:35936":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"30:5555:12368":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:1065:2129":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:41687:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"30:7906:8996":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:487:15455":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"18:644:37019":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:2433:14376":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:7164:30794":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4566:23261":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:11345:8324":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8944:23422":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"30:2027:9871":{"crate_id":30,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:1076:33833":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:11384:8323":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:11615:7779":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"32:7227:21195":{"crate_id":32,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"32:6108:21038":{"crate_id":32,"path":["linux_raw_sys","general","tcp_ca_state"],"kind":"enum"},"2:2482:7936":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:44899:2593":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:6827:24635":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:43603:2639":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:1645:9869":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"12:646:2114":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"20:2775:1937":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"17:9183:15480":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"30:5277:12356":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:21598:30787":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"18:80:19483":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"32:4510:20794":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"16:5388:15290":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"32:6413:8952":{"crate_id":32,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"30:8402:13481":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:20411:7926":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"30:1762:9859":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9303:15522":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"32:4501:19744":{"crate_id":32,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"30:5742:12378":{"crate_id":30,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:26:19629":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"16:2509:14379":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"30:5955:12400":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:7226:1988":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"32:6965:21153":{"crate_id":32,"path":["linux_raw_sys","general","io_cqring_offsets"],"kind":"struct"},"2:21710:30935":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11034:15813":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"30:8420:13482":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4757:12378":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:39691:8101":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"29:142:19674":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawSocketlike"],"kind":"trait"},"17:12638:18760":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4910:12395":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"32:7167:21187":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction__bindgen_ty_1"],"kind":"union"},"6:4361:12336":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:39936:8088":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"32:5765:21000":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"6:4611:2347":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9947:15642":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"32:5983:21018":{"crate_id":32,"path":["linux_raw_sys","general","tcp_word_hdr"],"kind":"union"},"30:9276:14042":{"crate_id":30,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"31:549:19722":{"crate_id":31,"path":["rustix","backend","io","epoll","EventVec"],"kind":"struct"},"2:7552:2143":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11233:22925":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8932:2065":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:42738:7769":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"30:1709:9856":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:8148:2281":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:11878:732":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"20:1531:19565":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"6:4871:12390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"30:5077:12347":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:5510:15297":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:7792:2230":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:3543:2114":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:22174:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:8110:15437":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"12:1518:14291":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"}},"external_crates":{"34":{"name":"strsim","html_root_url":null},"31":{"name":"rustix","html_root_url":null},"28":{"name":"is_terminal","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"linux_raw_sys","html_root_url":null},"29":{"name":"io_lifetimes","html_root_url":null},"26":{"name":"concolor_override","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"concolor_query","html_root_url":null},"30":{"name":"libc","html_root_url":null},"27":{"name":"anstyle","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}