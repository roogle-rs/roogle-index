{"root":"0:0:1732","crate_version":"4.3.19","includes_private":false,"index":{"2:12122:23399":{"id":"2:12122:23399","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:30656":{"id":"2:12177:30656","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5513:8231":{"id":"5:5513:8231","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1732":{"id":"0:0:1732","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[120,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1722"],"is_stripped":false}}},"2:12110:23381":{"id":"2:12110:23381","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12109:23380"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:31327":{"id":"5:5527:31327","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:1957":{"id":"2:12163:1957","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11788:7887","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::rmatches":"2:12166:30652"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43764:7904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12209:23154":{"id":"2:12209:23154","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:23400":{"id":"2:12125:23400","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:23356":{"id":"2:12105:23356","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:23354":{"id":"2:12101:23354","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41601:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:23353":{"id":"2:12099:23353","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41601:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:26098":{"id":"2:12116:26098","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43814:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:30654":{"id":"2:12172:30654","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11788:7887","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::match_indices":"2:12169:30653"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43728:7903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:30657":{"id":"2:12179:30657","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12195:30662":{"id":"2:12195:30662","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:30665":{"id":"2:12204:30665","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11749:127","`FromStr`":"2:11748:2516"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41743:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11748:2516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11748:2516","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12211:30666":{"id":"2:12211:30666","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:30666"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43859:7898","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:23390":{"id":"2:12139:23390","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11604:7878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12157:30650":{"id":"2:12157:30650","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:30659":{"id":"2:12182:30659","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:24631":{"id":"5:5531:24631","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12210:23155"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:23380":{"id":"2:12109:23380","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12110:23381"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12175:30655":{"id":"2:12175:30655","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12181:30658":{"id":"2:12181:30658","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086":{"id":"2:12086","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12087:820","2:12088:23337","2:12089:30641","2:12090:30642","2:12092:30643","2:12095:24545","2:12096:30644","2:12097:315","2:12098:314","2:12099:23353","2:12101:23354","2:12103:23355","2:12105:23356","2:12107:30645","2:12108:30646","2:12109:23380","2:12110:23381","2:12111:29007","2:12112:28932","2:12113:22698","2:12114:29082","2:12115:29028","2:12116:26098","2:12117:30647","2:12118:29008","2:12119:23398","2:12122:23399","2:12125:23400","2:12128:19784","2:12132:19785","2:12136:23388","2:12139:23390","2:12142:23392","2:12145:30648","2:12148:30649","2:12151:23394","2:12154:23396","2:12157:30650","2:12160:30651","2:12163:1957","2:12166:30652","2:12169:30653","2:12172:30654","2:12175:30655","2:12177:30656","2:12179:30657","2:12181:30658","2:12182:30659","2:12183:30660","2:12186:30661","2:12189:22646","2:12192:23401","2:12195:30662","2:12198:30663","2:12201:30664","2:12204:30665","2:12206:23150","2:12207:23151","2:12208:23153","2:12209:23154","2:12210:23155","2:12211:30666","2:12213:2148","2:12214:30667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12107:30645":{"id":"2:12107:30645","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11997:1417","str::slice_mut_unchecked":"2:12108:30646","crate::ops::Index":"2:2980:2231"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12118:29008":{"id":"2:12118:29008","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43852:7888","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:30653":{"id":"2:12169:30653","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11788:7887","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::rmatch_indices":"2:12172:30654"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43710:7902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:30641":{"id":"2:12089:30641","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:31326":{"id":"5:5519:31326","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12166:30652":{"id":"2:12166:30652","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11788:7887","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::matches":"2:12163:1957"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43782:7905","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12117:30647":{"id":"2:12117:30647","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43824:7901","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:24545":{"id":"2:12095:24545","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11348:7891"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:30651":{"id":"2:12160:30651","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:2373":{"id":"5:5529:2373","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12210:23155":{"id":"2:12210:23155","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:22646":{"id":"2:12189:22646","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:30663":{"id":"2:12198:30663","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:314":{"id":"2:12098:314","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12008:1520"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511":{"id":"5:5511","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5512:31324","5:5513:8231","5:5516:31325","5:5519:31326","5:5527:31327","5:5528:31328","5:5529:2373","5:5530:24630","5:5531:24631"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12192:23401":{"id":"2:12192:23401","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12214:30667":{"id":"2:12214:30667","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:30667"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43877:7899","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12092:30643":{"id":"2:12092:30643","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12090:30642"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:30661":{"id":"2:12186:30661","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12090:30642":{"id":"2:12090:30642","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:31328":{"id":"5:5528:31328","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2050","`String`":"5:7451:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2050","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:23394":{"id":"2:12151:23394","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887","str::rsplitn":"2:12154:23396"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43664:7876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12213:2148":{"id":"2:12213:2148","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:2148"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43868:2149","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:30664":{"id":"2:12201:30664","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:30644":{"id":"2:12096:30644","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:23355":{"id":"2:12103:23355","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1722":{"id":"0:3-20:0:1722","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1722","glob":true}}},"2:12119:23398":{"id":"2:12119:23398","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:22698":{"id":"2:12113:22698","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43546:2348","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12111:29007":{"id":"2:12111:29007","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11991:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43530:7894","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:23388":{"id":"2:12136:23388","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11788:7887","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::split_whitespace":"2:12114:29082","str::rsplit":"2:12142:23392"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43560:2349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:315":{"id":"2:12097:315","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12098:314","`u8`":"1:12008:1520"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12145:30648":{"id":"2:12145:30648","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11788:7887","str::split":"2:12136:23388","prim@char":"1:11991:419","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12148:30649"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43610:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12207:23151":{"id":"2:12207:23151","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39638:23291","Self::is_ascii":"2:12206:23150"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39638:23291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:23150":{"id":"2:12206:23150","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12208:23153":{"id":"2:12208:23153","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516:31325":{"id":"5:5516:31325","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:24630":{"id":"5:5530:24630","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12209:23154"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:30646":{"id":"2:12108:30646","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11997:1417","crate::ops::IndexMut":"2:2984:2232","str::slice_unchecked":"2:12107:30645"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:19785":{"id":"2:12132:19785","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41601:179","prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:23396":{"id":"2:12154:23396","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11991:419","str::splitn":"2:12151:23394","self::pattern":"2:11788:7887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43682:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:28932":{"id":"2:12112:28932","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11991:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43536:7893","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:23392":{"id":"2:12142:23392","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11788:7887","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::split":"2:12136:23388"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43578:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5512:31324":{"id":"5:5512:31324","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2050","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2050","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:30660":{"id":"2:12183:30660","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11813:7882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:29028":{"id":"2:12115:29028","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12114:29082"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43843:7889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:23337":{"id":"2:12088:23337","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12148:30649":{"id":"2:12148:30649","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11788:7887","str::split":"2:12136:23388","prim@char":"1:11991:419","str::split_terminator":"2:12145:30648"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43628:7906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12114:29082":{"id":"2:12114:29082","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12115:29028"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43834:7890","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:820":{"id":"2:12087:820","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11991:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12128:19784":{"id":"2:12128:19784","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41601:179","prim@char":"1:11991:419","self::pattern":"2:11788:7887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:44299:8392":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4483:12475":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13707:19703":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:1103:14345":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:2715:14446":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:42350:7817":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6250:15381":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:5618:2564":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"19:0:1040":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11753:15792":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12757:18956":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:9153:15534":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:22628:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:11973:25300":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"29:4276:13112":{"crate_id":29,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"8:0:1841":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"29:3775:20957":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"6:554:9016":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:46047:2684":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"22:112:19896":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"17:11542:15506":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:21116:2611":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40143:8011":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:6332:15386":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"29:4238:20992":{"crate_id":29,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"2:46193:2650":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:2186:32986":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12013:796":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:6156:13226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5737:15365":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8156:2318":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:44579:7798":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11642:15562":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:8322:2498":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8857:2573":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:1611:32979":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10509:2368":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:14301:19749":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:2203:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:4973:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:2970:31624":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:624:34198":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1911:10089":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12424:18936":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:6740:8198":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"12:0:1845":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:10512:2370":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4810:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11578:14387":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:43578:7872":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:1500:9903":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:41735:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:35:2234":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4535:12481":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:2541:14439":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:10840:7866":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"11:2180:32984":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:4965:15117":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4436:12469":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:43710:7902":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9966:15542":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:5959:15372":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6815:15407":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:7847:2315":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"18:515:19799":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:43995:7920":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"23:423:34696":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"16:6571:15401":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:7656:2133":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:11348:7891":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11264:15784":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:2523:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:1464:2178":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"25:89:2009":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"2:2821:8250":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11250:15747":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"14:215:14363":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:365:32977":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:4396:14956":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"29:4638:21015":{"crate_id":29,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"6:6573:9862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:4:1023":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:22364:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:3294:2366":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:43536:7893":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:10873:7867":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:2857:14452":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:10966:2532":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:20647:28511":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:5940:15371":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:22727:2406":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:6243:2564":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42590:29071":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:21070:2609":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:1975:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:7250:8967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:4695:12494":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:3435:19835":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"2:46025:2678":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"29:0:1987":{"crate_id":29,"path":["linux_raw_sys"],"kind":"module"},"17:256:33933":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:43868:2149":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13427:19688":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:13683:19701":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"28:1308:19953":{"crate_id":28,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"20:66:2011":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"1:10923:2258":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"29:3728:20956":{"crate_id":29,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"2:3196:7810":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:1917:2221":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:2779:8243":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"20:3220:184":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"6:587:9021":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:2787:2603":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"20:923:19822":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"29:4151:20982":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"6:7463:14149":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:22562:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:42880:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:45865:2649":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7362:15419":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6820:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:3722:19849":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"16:3025:14457":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"20:3877:34412":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"2:10199:7879":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:47667:2680":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:630:2175":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11416:15552":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:6064:28434":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:657:2177":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"28:1113:19952":{"crate_id":28,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"1:3966:2413":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:6639:30502":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:43376:7863":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:43628:7906":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:10110:15617":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6886:15410":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:9098:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12552:18943":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"20:3642:19860":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"1:10319:25313":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11832:18424":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:1550:2175":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:6156:28439":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:2825:14451":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"27:0:1985":{"crate_id":27,"path":["is_terminal"],"kind":"module"},"16:5972:15373":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"20:4090:19853":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"5:6560:2177":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11128:27941":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10417:15643":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:1569:9911":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"29:3647:20948":{"crate_id":29,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"2:41537:2399":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:8236:2386":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:6939:15413":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:11998:1501":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:10763:25296":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"29:4687:21017":{"crate_id":29,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"2:12681:2205":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:13155:15559":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12566:18944":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10786:15692":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:1513:9905":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:2960:31625":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:8452:2510":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:5987:13190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:5748:2551":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:14037:19734":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13456:19691":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:671:19790":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:9215:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:9477:25314":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:8771:15526":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:5589:8194":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:4004:2180":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:8307:2451":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:488:9008":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:8958:2553":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:4389:7991":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"23:319:19927":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"20:3827:19875":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"2:30925:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:1411:2175":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:1702:2438":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12769:18957":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:5383:2334":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:11997:1417":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"20:3782:19868":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"16:6372:15389":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:2589:14441":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:2168:32987":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:3456:2319":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:8086:15449":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"20:3420:19829":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"2:41684:2495":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:43366:7862":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4650:12491":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"30:177:22516":{"crate_id":30,"path":["bitflags","parser","ParseErrorKind"],"kind":"enum"},"1:2205:2293":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12618:18948":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:6834:8179":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"29:4053:12461":{"crate_id":29,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"2:20677:28862":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:32149:8307":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"7:32:14194":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:40898:8183":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:44367:8407":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:10313:15669":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:4723:12497":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7474:15424":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:9220:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:9180:2271":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:10450:28432":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:5068:12536":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11265:26304":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:5409:2523":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13368:19687":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:12631:18949":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:48026:7787":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"29:4132:9057":{"crate_id":29,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:2060:2192":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11178:15779":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:9472:2315":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:47889:7778":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4770:12503":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6057:14400":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:4678:2410":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:40312:7851":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:2352:14431":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10280:15667":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"23:231:19913":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"6:482:9007":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12333:18932":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:12457:18938":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"25:0:1983":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"2:44012:7921":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9899:15588":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:7539:15430":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"20:3907:19877":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"11:1845:2197":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"21:261:19887":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"29:3867:12514":{"crate_id":29,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"16:3635:14464":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12435:18937":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7515:15428":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:6396:15391":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2162:8273":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:4441:14977":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:7631:15435":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:8899:15530":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:46809:2639":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:40249:2278":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:47909:7780":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:8841:2532":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:4263:7983":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4818:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:6028:13195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"20:1655:23190":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"20:3487:19830":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"2:44060:7922":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:21964:2403":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:43448:7871":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"18:681:19791":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6977:15414":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:4868:15092":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"29:4404:20999":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"6:653:9069":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:43439:7868":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12017:18436":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:9025:26275":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:10302:1999":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:1184:15593":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8280:2449":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:3810:14490":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6744:13611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:14227:19745":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"29:4629:21014":{"crate_id":29,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"23:208:19916":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"6:1545:9909":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4616:12488":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:2049:2217":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:42070:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:47069:2634":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"15:327:14383":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:8325:2480":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:40494:8209":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:6460:2561":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:43682:7874":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:5234:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:14054:19736":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7494:15426":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:4028:2417":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:10141:26330":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"29:3656:19980":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"17:10568:15685":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"20:3462:19837":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"5:6888:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:3722:2216":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:43504:7900":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10671:15731":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:7015:22702":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6713:14372":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:41794:2176":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"11:1852:2198":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:20815:2616":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"20:3756:19879":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"1:8329:2482":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:9185:25870":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:45795:2631":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:2421:14434":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:40068:28679":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:42357:7818":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:12592:18946":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5414:33239":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14205:19743":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:11802:7885":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11371:15550":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:7240:33483":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:12433:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8534:2513":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:7440:7839":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:8977:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:477:28421":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:1426:2176":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:4144:7995":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:877:2179":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:352:2144":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:5673:15361":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:5651:15360":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:20632:28511":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:4038:2418":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"22:28:2323":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"6:4685:12493":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:43859:7898":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"9:450:14223":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:9232:7824":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"18:481:19797":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13566:19696":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:10407:2529":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:2962:31622":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:47950:7783":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:7505:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5829:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:3581:19848":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"5:276:2050":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9032:15353":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6214:15379":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"28:1922:19965":{"crate_id":28,"path":["rustix","termios","types","OutputModes"],"kind":"struct"},"23:382:2510":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"6:4895:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:3495:2271":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:4166:2334":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:4955:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12161:18446":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:10555:2130":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12186:18448":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10621:15730":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10361:15666":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:7529:26327":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6915:33402":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:4792:2432":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"11:403:32996":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:49871:2627":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"23:163:19905":{"crate_id":23,"path":["anstream","raw","RawStream"],"kind":"trait"},"20:3017:2001":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"17:10832:15687":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:507:34177":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:1121:2193":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:12458:8038":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4328:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:1161:19839":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"17:10293:15633":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:1422:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:2516:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:1833:2006":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:11989:372":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:42855:8043":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44287:8391":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:41811:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:12371:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:5611:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5843:15368":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:568:9018":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:14026:19733":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"29:3665:20949":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"1:9068:22701":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"10:36:32974":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:42902:29004":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12994:18972":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:9226:7826":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:10914:7859":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:8935:2572":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:1527:9907":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:55:14398":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:20813:2323":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:9665:33995":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6289:15382":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:2373:2304":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:9661:28496":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:20660:28866":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:7223:2204":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"20:4052:34467":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"30:25:22510":{"crate_id":30,"path":["bitflags","iter","IterNames"],"kind":"struct"},"1:10740:25699":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:7763:15442":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:3395:15694":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:4564:15004":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:5990:8215":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:4476:14988":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"20:3261:19821":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"1:1884:2269":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:3217:32134":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"20:3311:19818":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"1:0:1409":{"crate_id":1,"path":["std"],"kind":"module"},"13:226:33048":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5967:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:3520:2343":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:42673:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:8872:15529":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:915:2184":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:766:19788":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12952:18969":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"21:127:34642":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"16:6692:15403":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:11334:8351":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:10091:25317":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4917:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10330:15641":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:40120:7899":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"20:3102:19846":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"6:1638:9917":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:40485:8208":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:11328:23019":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"20:3330:2124":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"16:6303:15383":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:7289:15418":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"7:79:14201":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:1523:2215":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"11:1826:2180":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:12008:1520":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"29:4107:12524":{"crate_id":29,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"2:7329:2048":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"31:0:1989":{"crate_id":31,"path":["anstyle_query"],"kind":"module"},"17:13140:18982":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:22529:2136":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:7523:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:30321:2211":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:21683:2323":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:6424:2555":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:41494:29017":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"20:3210:34323":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"1:11571:14387":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"20:3408:19833":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"6:6589:8891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:9163:28340":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:45764:2683":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"29:4366:20996":{"crate_id":29,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"6:5863:13141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13604:19698":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:736:19787":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12346:15734":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13332:19686":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:30953:8030":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10161:15615":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:44295:8394":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13905:19720":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:42910:29070":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11354:15549":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8225:2395":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4862:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10223:15619":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"28:2589:19964":{"crate_id":28,"path":["rustix","termios","types","OptionalActions"],"kind":"enum"},"20:3765:2003":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"1:12003:751":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4781:12504":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:1543:2334":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:42150:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:10814:27946":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:2811:8248":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:7529:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:846:2176":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"15:0:1847":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:9103:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"29:4115:13989":{"crate_id":29,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"5:1011:30502":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"22:5:2411":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"2:47417:2640":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"23:333:19917":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"2:40534:8196":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:21054:2323":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:21136:2614":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:7398:28781":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"29:4811:21025":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"2:43981:7919":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:7427:2274":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:46263:2706":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:1772:2238":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:13854:19715":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8865:2177":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:6771:7951":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:39305:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:10458:15674":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:2689:14445":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11155:2327":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"11:749:2180":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:9442:33982":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"23:286:19911":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:4619:2416":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:7511:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:8351:2429":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:5531:8203":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:1629:589":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:2627:2361":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6171:13227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:3183:32129":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:44567:7800":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:11552:7794":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:1774:2239":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:7339:2173":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:2921:2044":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6986:15415":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"28:2637:14262":{"crate_id":28,"path":["rustix","termios","types","Action"],"kind":"enum"},"2:9222:7818":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:6900:15411":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:46392:28988":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:10805:2318":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10051:15578":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12106:18442":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6705:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:4380:7990":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:7731:2195":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:9118:15533":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:6671:10032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:2208:2294":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8550:2514":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:667:2183":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13069:18977":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:798:2185":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"29:3613:20947":{"crate_id":29,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"29:3682:20951":{"crate_id":29,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"6:4420:12467":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"20:4180:34437":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"1:1557:2180":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4638:12490":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13981:19728":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"20:3182:34322":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"2:10355:7875":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:113:19773":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:13882:19718":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"29:3767:9923":{"crate_id":29,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"1:5774:2552":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7407:15420":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"29:3906:20969":{"crate_id":29,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"17:10390:15642":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11136:8406":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12089:18441":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:40155:8012":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:8428:7883":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:44192:7909":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:7213:2180":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:4563:2470":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13673:19700":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5074:12537":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:2959:7802":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"28:1751:34761":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"29:4045:9008":{"crate_id":29,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"2:42618:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:11940:25290":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:46217:2699":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:10845:15688":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:14189:19741":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:5925:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"14:160:14354":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4304:12457":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:2265:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:8402:2509":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:10072:2249":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:582:2147":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:10231:2535":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:5008:12530":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:4694:2479":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:21246:2620":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:8125:15451":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:6932:30567":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"20:3414:19834":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"2:9474:8040":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:21248:2614":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"28:1531:34761":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"2:1746:29041":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"29:4770:9018":{"crate_id":29,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"16:8210:15456":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:43728:7903":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:44476:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"29:4820:21026":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"29:3857:20965":{"crate_id":29,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"1:6351:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10597:15728":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"29:3691:20952":{"crate_id":29,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"2:42646:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:45640:2630":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6323:15385":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"20:4114:34420":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"1:4167:2445":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8384:2491":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:7367:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:8748:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40372:8199":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:45825:2637":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"23:402:19907":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"5:3178:2197":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2152:590":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"24:26:19930":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"2:39458:7989":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"29:4611:21013":{"crate_id":29,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"20:1629:19857":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"5:1482:2182":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4842:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:1442:2177":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:9048:15507":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:400:15519":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:1755:8284":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:47729:2701":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7584:15432":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:96:19772":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9866:15573":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:3295:14461":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:1838:2196":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:6850:13618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5080:12538":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"29:4356:9016":{"crate_id":29,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"1:8475:2511":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"20:3481:19827":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"29:3788:20958":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"2:45902:2704":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:4323:14907":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:574:34177":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:4698:15066":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:1631:9916":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:43843:7889":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:40128:2149":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:21685:2612":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:3540:19825":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"5:3802:2181":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:43518:7897":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:8492:2512":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:9806:15569":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11726:15791":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:6022:13194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:2551:2359":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10957:15772":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:8997:15503":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:2611:14442":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:46239:2705":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12526:18941":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:45662:2636":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"29:4760:21020":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13757:19707":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:14395:19756":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8795:2529":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:9439:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8136:2375":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:4587:12486":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:22397:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"20:4207:2004":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"17:9777:15568":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:7558:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:3837:2398":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:9882:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:4764:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:40931:8187":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11696:15790":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:7445:15422":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:8219:2345":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"14:40:18423":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:2826:8252":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4496:12477":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"20:4126:8203":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"29:3834:20963":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"17:11272:15546":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:4620:15012":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:538:19801":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"20:4120:34269":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"5:7465:7929":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:1012:2192":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10013:15584":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:474:9006":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4887:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:41667:2176":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8544:2175":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:6598:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6470:15395":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"28:2354:19963":{"crate_id":28,"path":["rustix","termios","types","LocalModes"],"kind":"struct"},"2:2925:2045":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:10785:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:2105:15655":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:2690:31633":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:7705:2158":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14329:19751":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8299:2395":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"20:3070:19819":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"5:7384:2275":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10253:15613":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:2874:14453":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"29:3966:12499":{"crate_id":29,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"2:1636:8170":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:8949:15532":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:6347:15387":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:6140:2747":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"21:182:19885":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"5:261:30502":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:13029:18974":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5553:15354":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:47605:2646":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:11313:22697":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"29:4251:9926":{"crate_id":29,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"2:41675:2177":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2795:8245":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5767:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:45724:2671":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:11298:23023":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"11:97:32995":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:123:8690":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:4436:7992":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12579:18945":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"30:124:22492":{"crate_id":30,"path":["bitflags","traits","Bits"],"kind":"trait"},"6:7546:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:5028:15132":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:4785:28660":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"29:4159:20983":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"5:6957:30528":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:43287:29564":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:5130:2548":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7665:15436":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:6516:15398":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:40433:8205":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:46731:2633":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:6018:15375":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:14197:19742":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"20:3202:34401":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"23:417:19903":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"1:3106:2378":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:6651:8191":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6232:15380":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:5301:15333":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"20:3593:19859":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"2:47878:7777":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:3042:14458":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:2243:31704":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:12009:1517":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6160:33353":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2443:14435":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:10030:2175":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6796:13613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:2637:14443":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10883:15695":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5979:13189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:45694:2666":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"20:1343:2009":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"20:3795:19874":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"17:10377:15644":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:4395:2334":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:22694:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4446:12470":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:1858:2199":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"20:4067:34463":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"13:0:1839":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:12004:18435":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"30:11:2175":{"crate_id":30,"path":["bitflags","iter","Iter"],"kind":"struct"},"24:96:19924":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:42892:2510":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12065:18439":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10097:15618":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4380:12463":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:45746:2677":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:822:2201":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:7531:2181":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:11808:7884":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:7233:32116":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"28:1097:19950":{"crate_id":28,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"6:4389:12464":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:21114:2323":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:2141:32098":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"20:1636:19861":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"29:4388:20997":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"2:4113:7994":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9518:15540":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11388:15551":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:3217:2369":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:494:9009":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:11049:28440":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:10341:7877":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"28:1701:19968":{"crate_id":28,"path":["rustix","termios","types","Termios"],"kind":"struct"},"17:9990:15586":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"22:157:19898":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"17:9399:15538":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:14:1960":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:2565:28426":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:21215:2323":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:4928:15104":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:14177:19740":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:3182:26041":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:836:2188":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:10323:15670":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13574:19684":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"13:110:33047":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13749:19706":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:9840:15571":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3385:7960":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:500:9010":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:4129:27920":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:40354:8192":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:6603:2563":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11084:15740":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9344:33970":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:6565:9057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"29:3974:9015":{"crate_id":29,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"29:3897:20968":{"crate_id":29,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"17:13964:19726":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:2313:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4664:12492":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:636:34200":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:9230:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:8166:15454":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:9013:28343":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:9678:28426":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:2910:2212":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:7609:14178":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:44149:7926":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"29:3915:20970":{"crate_id":29,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"2:45616:2670":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:11991:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11109:15776":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6931:15412":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:47813:2686":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:1717:9925":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7099:15417":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:14015:19732":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:40162:8013":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:5639:15359":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:3382:2376":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:45594:2665":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:47851:2707":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12377:18933":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"21:113:34641":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"6:1595:9914":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:6688:10030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11020:15743":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:8323:2497":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:12011:1519":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"20:3734:19850":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"6:5849:13140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:43468:7870":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:1681:9921":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46855:2645":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:11888:18427":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:1913:2270":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:149:14406":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:22496:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:4428:30522":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"24:0:1982":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"29:3997:20977":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"11:1831:2181":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:4848:12513":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:2984:2232":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6067:13197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6427:15392":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12035:18437":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11434:2397":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11234:15782":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"30:51:22512":{"crate_id":30,"path":["bitflags","parser","AsDisplay"],"kind":"struct"},"17:11955:18431":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:2737:14447":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:4154:34468":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"1:864:2178":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"29:4324:14149":{"crate_id":29,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"2:21:686":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:6130:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10249:15626":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"14:165:14355":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:1048:32983":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:2465:14436":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5805:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:8605:15502":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:634:2154":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14282:19748":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:3058:14459":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:1501:14346":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:44486:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7739:15440":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:1776:2181":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:332:32981":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:5557:2528":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11992:1536":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4456:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4413:12466":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:40524:8211":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:40692:8213":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:8659:15523":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:1972:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:21908:28795":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:261:33968":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:5375:2521":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:14163:19739":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:6889:28416":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:39430:7964":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:11155:15778":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:12365:15733":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11210:15780":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13659:15587":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:1492:2183":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7833:15444":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13697:19702":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:12626:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10515:2366":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"29:4428:21002":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"1:8813:2530":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11189:15559":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11568:15558":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:968:2190":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13795:19711":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13862:19716":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"20:3898:34446":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7331:33259":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5807:15367":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:12014:1574":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:8903:2571":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:1810:2249":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:8632:15522":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:47988:7785":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:41875:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"11:805:2186":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:40424:8204":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:1732:8285":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10609:15729":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:3580:14463":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6317:15384":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:631:2153":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11591:15559":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:7184:2213":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:9127:2327":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:7726:2194":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:3994:2416":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:3220:14460":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:11411:25318":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2783:2601":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:7720:2159":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:498:2120":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:10339:15640":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13083:18978":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10775:2316":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:13971:19727":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:40363:8193":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:4506:14994":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:530:33092":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:2962:7812":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:0:1848":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13923:19722":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:2915:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:32236:8222":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:9485:33775":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:39423:8261":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:10066:15606":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:639:2155":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:40904:2376":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3438:2320":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:11340:27929":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8273:2390":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"20:62:2010":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"6:4463:12472":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:1673:9920":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:6763:15405":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:12010:1518":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:40332:2229":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:10313:7876":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:5590:15356":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"28:2664:34762":{"crate_id":28,"path":["rustix","pid","Pid"],"kind":"struct"},"2:11793:7883":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:20951:2624":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:43338:7861":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4374:12462":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12840:18961":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:21037:2615":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:10038:15579":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:9821:15570":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:895:2175":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11098:15742":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"10:44:14333":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:8321:2161":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4929:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:531:19800":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4291:12456":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4568:12485":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:8542:15504":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13949:19724":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"29:3957:20974":{"crate_id":29,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"2:4258:7982":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"29:4221:20990":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"5:2035:2216":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:13513:19693":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:1920:658":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:40442:8214":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:7842:2314":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"20:3051:2002":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"1:10927:25708":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:2980:2231":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:10823:27944":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:3339:2355":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:22016:28712":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13448:19690":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:41743:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:6136:12373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11290:15547":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8003:2362":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"29:4551:9862":{"crate_id":29,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"16:6239:33221":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:40282:2292":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:9744:33816":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:723:2178":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2510:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:41659:2175":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:2931:2047":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2762:8242":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"9:330:14279":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"21:360:19892":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"6:5737:13112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:8252:15457":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:0:1844":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"20:3804:2179":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"17:12605:18947":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7855:15445":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:41599:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"23:262:19915":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:41431:2387":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:21464:2617":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:9188:15535":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:1666:1096":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13125:18981":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12921:18967":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:1027:14343":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10486:15676":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"29:4591:21012":{"crate_id":29,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"5:6441:2180":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:1051:2191":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4629:28176":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:4738:2431":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:695:2184":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10529:15725":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:878:2202":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:207:7816":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:10199:15621":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12815:18959":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10175:15542":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:3204:2198":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:46314:28987":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:4724:15068":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"20:3749:19866":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"20:3401:19838":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"1:890:2180":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11199:15770":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10555:15727":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:5720:15364":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:8199:2347":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"20:2930:34422":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"6:4764:12502":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:2690:2042":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:2816:8249":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4550:12483":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:1672:30502":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:6850:15408":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13830:19713":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:5965:2564":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"29:4212:20989":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"20:3524:34419":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"17:12318:18931":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:3192:34400":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"1:4151:2443":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:5775:15366":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"29:4061:9019":{"crate_id":29,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"1:12004:748":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:44291:8390":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2799:8247":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:40292:2291":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:3078:2233":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5877:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:8145:2377":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4854:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:41953:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:43546:2348":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:21991:29079":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:11346:26057":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"29:4142:12381":{"crate_id":29,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"16:6658:15402":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:720:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:30361:8234":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"11:817:2187":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:7295:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:5625:2565":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:4841:15089":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4704:12495":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:1068:14344":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:358:2145":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:7247:2177":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13179:18984":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12671:18952":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:4734:2427":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"22:32:2349":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"21:334:19890":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"16:8152:15453":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:9020:26289":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5994:13191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:40207:2277":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6357:15388":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11220:15781":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:4076:2176":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:39265:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"22:128:19897":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"1:615:2151":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:42364:7826":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:7201:2203":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11600:15560":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"20:1090:19840":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"18:564:19802":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:40098:8017":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:6872:15409":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:40913:8184":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"20:3950:19871":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:4909:2478":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:8827:2531":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13557:19695":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"29:3843:20964":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"2:2773:8244":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2804:8251":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:11104:2530":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:45847:2643":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:12006:750":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"20:35:2009":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"16:5916:15370":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:43110:28937":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:1075:15585":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:948:2189":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5775:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:5471:2334":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:11173:22966":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:40453:8206":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"20:4012:19869":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"17:9913:15583":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:4900:15100":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"29:3674:20950":{"crate_id":29,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"2:32145:22579":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:11241:15783":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:844:2189":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:7632:2146":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11774:24643":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:40401:8202":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:1302:2193":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:2471:8034":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:44315:8406":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:3212:2196":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:9431:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:1138:32032":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"20:3967:34459":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"18:707:7885":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"29:4483:21008":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"1:2371:2303":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:7588:28419":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:6648:10047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4984:12528":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13096:18979":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"30:90:22493":{"crate_id":30,"path":["bitflags","traits","Flag"],"kind":"struct"},"17:9528:33872":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13778:19709":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11045:15739":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:10351:15671":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13719:19704":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"10:0:1843":{"crate_id":10,"path":["adler"],"kind":"module"},"17:12539:18942":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3504:25815":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"30:64:22514":{"crate_id":30,"path":["bitflags","parser","WriteHex"],"kind":"trait"},"6:6868:13619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4395:12307":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13109:18980":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:2900:14454":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:7693:15438":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11127:15556":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:2757:2602":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:793:2182":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4794:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"20:3547:19842":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"11:986:2191":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12905:18966":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"21:210:19886":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"6:4949:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:6081:2334":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:2470:2323":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:521:19796":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:42600:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"29:4259:20994":{"crate_id":29,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:44307:8387":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:9693:28502":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:4045:7807":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6128:15376":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:9318:15537":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:12891:18965":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4754:12501":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:7564:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42109:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:9296:15505":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"9:486:14222":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:41650:8264":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"20:3354:2000":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"1:6536:2559":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12077:18440":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:5302:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10520:15679":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:11996:1387":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"30:67:22515":{"crate_id":30,"path":["bitflags","parser","ParseHex"],"kind":"trait"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"29:4648:21016":{"crate_id":29,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"18:590:29027":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"29:4340:20995":{"crate_id":29,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"6:7599:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:43560:2349":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:3162:7978":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4341:12460":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"29:4787:21022":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"2:7654:2206":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:3647:2177":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:43764:7904":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10266:15612":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:7231:8189":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:2243:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:43530:7894":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:10161:7865":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:3373:7956":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:6775:13612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:46495:2667":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10994:15745":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:2767:8241":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10799:15690":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"28:303:34760":{"crate_id":28,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"2:45550:2664":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14359:19754":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:652:34177":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:660:19789":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:8021:15446":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3930:2412":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:4236:2175":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:255:2009":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"16:5626:15358":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"20:3745:2151":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"17:9475:15539":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:44279:8386":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"20:3335:19824":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"1:8212:2349":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:6625:2482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12646:18950":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11623:15561":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:8890:2568":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4556:12484":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:10272:7873":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"28:1713:19962":{"crate_id":28,"path":["rustix","termios","types","InputModes"],"kind":"struct"},"2:45570:2629":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:12589:2747":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"24:290:19926":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"1:527:2125":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"21:347:19891":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"16:5067:15147":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:12479:18939":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:47924:7781":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:7552:12703":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11032:19892":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:11553:8397":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:3596:2176":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"14:187:14362":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:39465:7973":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"20:3239:2124":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"17:10471:15675":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:40235:2276":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:7657:2209":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:43877:7899":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4180:2446":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:526:9012":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:7677:2130":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:6618:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:43944:7917":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4824:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:9872:2323":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:46141:2638":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:20865:8273":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12826:18960":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:7575:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:9146:2599":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11164:15769":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:4736:2430":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:46649:2685":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"20:1631:19858":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"17:10403:15672":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:5614:7951":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13043:18975":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"29:4753:21019":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"2:4409:2134":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10936:2525":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"29:4167:20984":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"1:10750:2312":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:20984:2619":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:22661:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:8841:15528":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"24:192:14262":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"6:4879:1010":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10981:15746":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:5363:15351":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10581:15707":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:7451:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:40136:7898":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:0:1850":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:39164:7976":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:43824:7901":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:10633:15686":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"20:2946:34393":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"6:573:9019":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5836:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:6487:30502":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:30130:2402":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"11:285:32992":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2507:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"27:5:2355":{"crate_id":27,"path":["is_terminal","IsTerminal"],"kind":"trait"},"11:760:2181":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:12354:15732":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"29:4397:20998":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"5:7263:30578":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:44087:7923":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:40202:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12148:18445":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13591:19697":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:579:9020":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"29:3758:14177":{"crate_id":29,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"5:6308:2749":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46415:28991":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"25:23:14262":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:22430:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:2759:14448":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11967:18432":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"20:2906:1998":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"4:0:1840":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:4231:2447":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:12012:1516":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7998:26294":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:6787:29222":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"22:98:19895":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"1:8206:2348":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:80:19771":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:2838:8254":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:2332:14430":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:2488:2358":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:11748:2516":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:1557:9910":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:10721:2481":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13787:19710":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:3296:2367":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:11329:15548":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"14:221:14364":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:582:15521":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:2355:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:2399:14433":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11118:15777":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"11:2194:32988":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:7414:2273":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:5819:2162":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:43852:7888":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:6291:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:2383:2309":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"30:172:7928":{"crate_id":30,"path":["bitflags","parser","ParseError"],"kind":"struct"},"17:11852:18425":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:7651:2131":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:6554:15400":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13999:19730":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:42630:22493":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:599:34181":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"20:3917:19867":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"1:925:2186":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:40056:8016":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5955:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4908:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:40923:8185":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:4785:15081":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8189:2346":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:45995:2672":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"23:301:19912":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2:43426:7852":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:2357:2299":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:5398:15353":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"28:2563:19974":{"crate_id":28,"path":["rustix","termios","types","SpecialCodes"],"kind":"struct"},"16:3894:14526":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5793:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:41514:28787":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:44355:2604":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:21855:28776":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:4811:802":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:595:9022":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"14:202:7928":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:39369:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"20:4173:2521":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"17:14216:19744":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"32:0:1990":{"crate_id":32,"path":["strsim"],"kind":"module"},"16:6502:15397":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:7915:2360":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:21239:2323":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:3732:2397":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8108:2317":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:13771:19708":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10430:15673":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:10303:15668":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:3934:2334":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:2926:14455":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"20:3889:34361":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"6:6834:13616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:47527:2674":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:5612:15357":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:7859:2316":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:7073:15416":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2962:14456":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:2748:8221":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4401:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:4032:14640":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:9939:15581":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:3777:14481":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"20:4187:2005":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"6:4543:12482":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6175:15377":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:6420:2554":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:46919:2700":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7525:15429":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:3441:14462":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11248:28423":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:9275:2006":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:41585:2392":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"29:4437:21003":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"2:7661:8188":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9875:15598":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:4010:28483":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:5741:2550":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:21940:28802":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6864:33485":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:5389:2522":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2246:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:7923:2216":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13055:18976":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12982:18971":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:46619:2679":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11271:2536":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11767:18421":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3670:2393":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"29:4571:10032":{"crate_id":29,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"2:40475:8207":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"9:507:14226":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13870:19717":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:5076:28327":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:48065:7788":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:690:19792":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:10948:25283":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:20907:2623":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:6804:2605":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7553:15431":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:39203:7813":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"20:2725:2175":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"2:43814:2345":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10511:15678":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:9952:15580":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:1757:612":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:12016:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"20:3856:34410":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"1:8231:2394":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5799:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:1973:15620":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:5994:15374":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:20662:28864":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:9190:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:22082:29057":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:45949:2608":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:5342:15350":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:3233:7811":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:4196:2334":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:4186:7840":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2928:2046":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4489:12476":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"29:3720:20955":{"crate_id":29,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"2:44550:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"29:4735:21018":{"crate_id":29,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"17:8711:15524":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:8105:15450":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:399:33001":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"23:434:19906":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"2:21561:2606":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10969:15773":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:562:9017":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11074:15557":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"29:4454:21005":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"6:1663:9919":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:541:9014":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"28:0:1986":{"crate_id":28,"path":["rustix"],"kind":"module"},"29:4463:21006":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"6:6036:13196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44283:8389":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:2850:8257":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6456:15394":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:8801:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:46573:2673":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:736:2179":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3936:2411":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8983:2124":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4315:12458":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:4050:2421":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:62:8635":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:43782:7905":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:44529:2745":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:547:9015":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:3513:2180":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:2705:2135":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12133:18444":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:40882:29018":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:3737:2217":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7061:33336":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:43095:8379":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:7517:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:1538:14348":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:2513:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"29:4077:9011":{"crate_id":29,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"16:6438:15393":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"23:245:19914":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"2:40047:7980":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12727:18955":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13016:18973":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1102:32034":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:7882:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:42863:29061":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"9:52:14242":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:47275:2668":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:47935:7782":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:41550:2390":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:1578:2198":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:1820:2220":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2318:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:1037:2190":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:1818:2175":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:6983:2375":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4800:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10654:15706":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:20679:28867":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:782:2200":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10148:15616":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10080:15632":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:9033:15417":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:22115:2407":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:0:1849":{"crate_id":17,"path":["object"],"kind":"module"},"17:11467:15555":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:9228:7827":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:40510:8210":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:7284:2177":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:6711:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"28:1336:34761":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"6:506:9011":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:40678:8212":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"29:3828:20962":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"1:11192:2574":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4626:12489":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:10812:15691":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"28:2147:19961":{"crate_id":28,"path":["rustix","termios","types","ControlModes"],"kind":"struct"},"17:11669:15789":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:4633:28180":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:7227:8190":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:727:19794":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4491:2453":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:5956:2548":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:11475:2396":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"14:31:14354":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:614:34195":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14350:19753":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"29:4005:20978":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"17:10499:15677":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"29:4411:21000":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1:7367:26295":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:45884:2698":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4944:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:8911:28471":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"20:3086:19845":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"2:7043:2543":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:40382:8200":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:5554:2526":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:7255:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7255:2495":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:13167:18983":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"29:3886:20967":{"crate_id":29,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"20:3997:19870":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"6:4524:12480":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:8924:15531":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:40664:2347":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:3186:15689":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11791:18422":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:9977:15543":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:7012:33072":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13937:19723":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"20:3837:34394":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"23:348:19918":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"29:4021:20980":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"16:2519:14438":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:2461:31614":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"26:21:2004":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"1:8291:2441":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11992:18434":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:21802:28680":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:14007:19731":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:9716:33915":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:11859:7911":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:39638:23291":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"9:237:2510":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1603:9915":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9083:15508":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"29:3747:13604":{"crate_id":29,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"2:2752:2600":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:0:825":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11995:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"20:3504:19832":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"11:2201:2173":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:40875:8181":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44311:8388":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5689:15362":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:7907:26042":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:30449:28794":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:4987:2334":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:41836:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:3513:2321":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"29:4446:21004":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"9:426:14225":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11990:945":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"29:4029:20981":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"16:6386:15390":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:2587:2351":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:44592:29039":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:2223:32115":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13639:19683":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:40410:29083":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6197:15378":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:119:8689":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:7038:33334":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:7698:28469":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:582:8030":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:282:19888":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"24:89:19922":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"17:13303:19685":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:11493:8398":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:11318:8349":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:11569:8399":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:10054:2176":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:5364:7844":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:40462:8195":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:41448:2388":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:7277:2049":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4996:15124":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:1257:2190":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:3735:2396":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:1520:9906":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"28:2613:19966":{"crate_id":28,"path":["rustix","termios","types","QueueSelector"],"kind":"enum"},"0:0:1732":{"crate_id":0,"path":["clap"],"kind":"module"},"16:7592:15433":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"21:173:34640":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"2:23174:2400":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"23:170:2323":{"crate_id":23,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"2:21573:28516":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:14102:19737":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"28:2183:34761":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"5:1118:31613":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:7313:33137":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12711:18954":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:1342:19841":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"1:7754:2258":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"11:311:32990":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14403:19757":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:4042:2419":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"29:3709:20954":{"crate_id":29,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"16:2663:14444":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:8176:15455":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:21469:2625":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:8740:15525":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:2174:30185":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"23:153:19904":{"crate_id":23,"path":["anstream","lockable","Lockable"],"kind":"trait"},"20:3494:19828":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"30:0:1988":{"crate_id":30,"path":["bitflags"],"kind":"module"},"17:12303:18930":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:4034:30502":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13991:19729":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:4311:2448":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"20:3555:22493":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"17:11428:15553":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:9224:7817":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:7753:15441":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:5425:2524":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:6800:7953":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:12691:18953":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"25:53:2510":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"6:4963:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:3257:2371":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:39281:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:12007:746":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:14150:19738":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12502:18940":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:21220:2610":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:10122:7878":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:7586:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:6008:13192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:2349:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:9595:8362":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:8043:15447":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:2740:2043":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"29:4500:21010":{"crate_id":29,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"17:10863:15542":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:40084:8015":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:1566:2196":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13620:19699":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:11604:7878":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"29:4796:21023":{"crate_id":29,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"2:47869:7776":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:21924:29074":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:44303:8393":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:5920:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:2398:1857":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:9561:15541":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"29:4202:20988":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"29:3701:20953":{"crate_id":29,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"1:7899:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:3179:26031":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"21:313:19889":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:46095:2632":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11905:18428":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:119:32976":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:6607:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:42695:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10745:28271":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"9:0:1842":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12254:18929":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:2791:8246":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:46885:2651":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9409:33800":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:20851:2618":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6805:13614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10544:15726":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:5122:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:22037:28716":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"14:0:1846":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:14341:19752":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:41573:2391":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"11:1517:14347":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:3865:34421":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"29:3983:20975":{"crate_id":29,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"1:4159:2444":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:40169:8014":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"30:132:22495":{"crate_id":30,"path":["bitflags","traits","BitFlags"],"kind":"trait"},"6:6077:13198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13914:19721":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:833:2175":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:20998:8273":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:4697:2452":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:12014:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"24:132:2510":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"2:30355:7947":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:43966:7918":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:7622:15434":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:42031:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:7993:28328":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2743:7808":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:4631:28178":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:40041:2149":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:5368:7845":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:755:19795":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:856:2177":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"29:4803:21024":{"crate_id":29,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"2:10327:7874":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"20:50:2007":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"17:12394:18934":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:3988:2415":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:6188:26288":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:6637:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"24:113:19929":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"1:8990:22633":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:10123:15588":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3181:29268":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:1709:9924":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12851:18962":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:3671:30502":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"29:4267:13174":{"crate_id":29,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"1:7569:28437":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"29:4069:9069":{"crate_id":29,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"29:4191:20987":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"5:1288:2191":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:4992:12529":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"29:4474:21007":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"29:4491:21009":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"29:3877:20966":{"crate_id":29,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"1:2913:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8561:2515":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"9:177:14328":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"20:3814:19876":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"24:304:19927":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"5:7193:2177":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:12406:29144":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9926:15582":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:40392:8201":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:936:2187":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4729:12498":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4958:2487":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8919:2569":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:39325:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:14236:19746":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:2832:8253":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:6841:13617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"11:1822:2177":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9887:15592":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"29:4776:21021":{"crate_id":29,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"2:9479:8041":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:41992:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:7799:15443":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:32109:2533":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:47898:7779":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:7540:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5704:15363":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:14380:19755":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3330:2181":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:42371:7827":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"20:3673:2362":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"17:9274:2348":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1575:9912":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3171:2175":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"29:3950:20973":{"crate_id":29,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"17:3519:15712":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:5771:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"29:4310:13181":{"crate_id":29,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:1069:2193":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:5320:30502":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:6720:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7278:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:7292:2177":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7025:33492":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"23:0:1981":{"crate_id":23,"path":["anstream"],"kind":"module"},"17:12118:18443":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:2966:31623":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:609:34206":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:8168:2322":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:4368:12461":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:41914:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:7631:2323":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7679:15437":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:44494:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9016:15352":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"20:1677:128":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"2:2164:8274":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:2519:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"32:72:22544":{"crate_id":32,"path":["strsim","StrSimError"],"kind":"enum"},"16:6531:33088":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:22595:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:44537:2746":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:8743:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:3928:19878":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"16:5567:15355":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"23:63:19924":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"30:99:22494":{"crate_id":30,"path":["bitflags","traits","Flags"],"kind":"trait"},"17:13847:19714":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"32:32:22530":{"crate_id":32,"path":["strsim","StringWrapper"],"kind":"struct"},"6:4606:12487":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12174:18447":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:6589:2562":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:5841:2180":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12966:18970":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4787:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:47973:7784":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:14315:19750":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:46361:28989":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6540:15399":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:942:2188":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:9047:23100":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:1060:2192":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"28:2393:34761":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"15:394:14390":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:1835:2255":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:3255:2370":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13732:19705":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:4365:30522":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:2293:14401":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:9108:2574":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:9223:15536":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"29:4508:2482":{"crate_id":29,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"26:0:1984":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"16:4536:15000":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"20:3443:19836":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"15:306:14379":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5100:15156":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11034:15774":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11498:15556":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"18:699:19793":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:41726:8335":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:12384:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:7123:27924":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:44159:7927":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1503:2184":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:2170:31717":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:39391:2167":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:8138:15452":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:1690:9922":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9850:15572":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:9195:25872":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:30377:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"20:3847:34438":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"2:48003:7786":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:25984:2401":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:5494:2525":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:42228:2549":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13548:19694":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5044:12533":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"20:3276:19823":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"2:41717:2496":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:3980:2414":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:11564:28335":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:11454:15554":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:11530:8400":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:2747:2176":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"2:20863:29229":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:6667:14373":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:900:2181":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"29:3926:20971":{"crate_id":29,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"17:8794:15527":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:8068:15448":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:9614:33774":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:3867:14523":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5900:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:3215:34276":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"21:0:1979":{"crate_id":21,"path":["anstyle"],"kind":"module"},"17:12053:18438":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:1649:9918":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:5977:8609":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:44124:7924":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:4753:15073":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:9968:22691":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:2590:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:13492:19692":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7484:15425":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:1572:2197":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:3998:28510":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:12002:647":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:42655:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:3583:2175":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:4605:8004":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:12015:1140":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:3176:22916":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:44138:7925":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"30:141:34966":{"crate_id":30,"path":["bitflags","traits","ImplementedByBitFlagsMacro"],"kind":"trait"},"1:9093:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:14417:19758":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11815:18423":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4469:12473":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2567:14440":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:906:2182":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:42871:8042":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12659:18951":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11924:18429":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1473:2179":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:7272:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10906:15693":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"20:4039:28340":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"20:58:2006":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"21:382:19893":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"16:3744:14472":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:12578:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4518:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"29:3736:8891":{"crate_id":29,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"16:2781:14449":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"20:0:1722":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"17:11520:15557":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:11496:2398":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"29:4037:9009":{"crate_id":29,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"2:39444:15456":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:43387:7853":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:40219:28781":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:42189:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:629:30494":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11943:18430":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:9706:15544":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"29:3940:20972":{"crate_id":29,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"18:644:34177":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:5045:28327":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47775:2652":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"29:4099:9010":{"crate_id":29,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"2:46171:2644":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10931:15759":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:1733:9926":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:10234:7872":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:11962:2160":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9604:15542":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:40889:2554":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:21976:28720":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"29:3815:20960":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"1:551:2127":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:22053:28722":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"18:719:19786":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:5981:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:8916:29655":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13894:19719":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:2497:14437":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:504:15520":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10444:15638":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:5793:33495":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"14:7:14354":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:43347:7860":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:7758:22579":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:21999:28796":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4428:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:6973:26335":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12412:18935":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:12792:18958":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:43610:7907":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"20:3244:19820":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"16:2803:14450":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:4900:2477":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:43458:7869":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10945:15771":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:2212:2295":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5058:12535":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:4815:2426":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:12001:645":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:1506:9904":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:919:2185":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:41408:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:39347:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:30555:28775":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:43356:7864":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"28:1137:34761":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"6:6726:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:6044:32664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:7869:2313":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:10795:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"7:0:1564":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:1590:9913":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:20619:8030":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:11116:2531":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:2164:15639":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"5:7476:7930":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:4475:12474":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4740:12499":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:4592:15008":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:532:9013":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:1561:2181":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:11043:28415":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:2355:2298":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:7738:2257":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"22:0:1980":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"2:43114:7854":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:2373:14432":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"20:4106:19852":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"17:11056:15775":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"28:1076:19967":{"crate_id":28,"path":["rustix","termios","types","SpecialCodeIndex"],"kind":"struct"},"1:8972:26297":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:7707:15439":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4833:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:305:28469":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"16:7568:33391":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:2846:8256":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9734:15545":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"9:393:14224":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:1273:2192":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:43664:7876":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"29:4229:20991":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"2:4325:7988":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:39451:29565":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:6724:15404":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:2878:25315":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:491:34189":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5051:12534":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"23:366:34686":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"2:11813:7882":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"29:4534:21011":{"crate_id":29,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"29:4420:21001":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"11:2049:2191":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:5882:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:40188:8010":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:44334:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8849:2175":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:4335:7989":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:7547:7948":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:1696:9923":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:2314:14429":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:1554:2177":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6484:15396":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:41465:2389":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"20:3141:1999":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"2:22463:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"20:4030:34450":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"16:5382:15352":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:40341:2346":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"28:1976:34761":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"17:12878:18964":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"29:4174:20985":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"6:5818:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"26:41:19939":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"6:6015:13193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:11788:7887":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:3215:2368":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:43834:7890":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:6790:7952":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9571:33993":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:4814:15086":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:1536:9908":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"29:4013:20979":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"1:4383:2442":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2855:8258":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"20:53:2008":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"1:911:2183":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11979:18433":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:5440:1999":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"11:2033:2190":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11144:15768":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:21122:2613":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5890:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:742:34472":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"1:9465:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"15:288:14378":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:2691:7809":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:434:14403":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:10079:2349":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:2131:2120":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8871:2570":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4748:12500":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"29:3821:20961":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"2:43413:7851":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:9655:15543":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"29:4243:20993":{"crate_id":29,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"16:7433:15421":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:4716:12496":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4938:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:7505:15427":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"9:357:14239":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:5882:15369":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4872:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:3238:2199":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:14044:19735":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:7351:2174":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12864:18963":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13803:19712":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:1583:2199":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:3141:8260":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:4469:2452":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13435:19689":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:644:2176":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:39250:8259":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:22089:2405":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11007:15744":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"29:3989:20976":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"6:4506:12478":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"29:4185:20986":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"28:1507:19951":{"crate_id":28,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"1:11994:1058":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:9234:7825":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"20:3511:19831":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"6:5015:12531":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:1495:9902":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:41802:2177":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:22103:2404":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5025:12532":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:40108:8018":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:44172:7908":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:14259:19747":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:30391:28697":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:2133:15614":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:12005:749":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13957:19725":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:6533:2558":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:7518:15521":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:41786:2175":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:12936:18968":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"29:4380:9014":{"crate_id":29,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"1:11957:26278":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:3410:2334":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2842:8255":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:3168:7977":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6789:15406":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:7463:15423":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:7852:2312":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8285:2450":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:11872:18426":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"29:3799:20959":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"}},"external_crates":{"31":{"name":"anstyle_query","html_root_url":null},"28":{"name":"rustix","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"strsim","html_root_url":null},"29":{"name":"linux_raw_sys","html_root_url":null},"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/2.3.3/"},"27":{"name":"is_terminal","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}