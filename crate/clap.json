{"root":"0:0:1685","crate_version":"4.2.4","includes_private":false,"index":{"2:11867:24677":{"id":"2:11867:24677","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:30368":{"id":"2:11882:30368","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42943:7781","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:24717":{"id":"2:11915:24717","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780","str::rsplitn":"2:11918:24719"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42755:7769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:33784":{"id":"2:11941:33784","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5330:34447":{"id":"5:5330:34447","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:2314":{"id":"5:5332:2314","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5314":{"id":"5:5314","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5315:34444","5:5316:8127","5:5319:34445","5:5322:34446","5:5330:34447","5:5331:34448","5:5332:2314","5:5333:25931","5:5334:25932"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11903:24713":{"id":"2:11903:24713","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11376:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:34448":{"id":"5:5331:34448","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:1996","`String`":"5:7179:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1996","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:8127":{"id":"5:5316:8127","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5322:34446":{"id":"5:5322:34446","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:30370":{"id":"2:11879:30370","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11878:30350"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42934:7782","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:25931":{"id":"5:5333:25931","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11972:24622"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:24722":{"id":"2:11886:24722","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11959:33790":{"id":"2:11959:33790","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:33772":{"id":"2:11860:33772","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11933:33781":{"id":"2:11933:33781","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11552:7780","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::rmatch_indices":"2:11936:33782"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42801:7795","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:33774":{"id":"2:11872:33774","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11916:1379","crate::ops::IndexMut":"2:2993:2173","str::slice_unchecked":"2:11871:33773"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11977:33795":{"id":"2:11977:33795","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:33795"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42968:7792","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:24715":{"id":"2:11906:24715","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11552:7780","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::split":"2:11900:24711"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42669:7765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:30350":{"id":"2:11878:30350","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11879:30370"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42925:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11950:33789":{"id":"2:11950:33789","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:33777":{"id":"2:11912:33777","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11552:7780","str::split":"2:11900:24711","prim@char":"1:11910:412","str::split_terminator":"2:11909:33776"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42719:7799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:24623":{"id":"2:11973:24623","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871:33773":{"id":"2:11871:33773","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11916:1379","str::slice_mut_unchecked":"2:11872:33774","crate::ops::Index":"2:2989:2172"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11850":{"id":"2:11850","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11851:802","2:11852:22848","2:11853:33769","2:11854:33770","2:11856:33771","2:11859:24225","2:11860:33772","2:11861:312","2:11862:24679","2:11863:24675","2:11865:24676","2:11867:24677","2:11869:24678","2:11871:33773","2:11872:33774","2:11873:24703","2:11874:24704","2:11875:30367","2:11876:31348","2:11877:22790","2:11878:30350","2:11879:30370","2:11880:30075","2:11881:33775","2:11882:30368","2:11883:24721","2:11886:24722","2:11889:24723","2:11892:19486","2:11896:19487","2:11900:24711","2:11903:24713","2:11906:24715","2:11909:33776","2:11912:33777","2:11915:24717","2:11918:24719","2:11921:33778","2:11924:33779","2:11927:1901","2:11930:33780","2:11933:33781","2:11936:33782","2:11939:33783","2:11941:33784","2:11943:33785","2:11945:33786","2:11946:33787","2:11947:33788","2:11950:33789","2:11953:23269","2:11956:24724","2:11959:33790","2:11962:33791","2:11965:33792","2:11968:33793","2:11970:24620","2:11971:24621","2:11972:24622","2:11973:24623","2:11974:33794","2:11976:2093","2:11977:33795"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11859:24225":{"id":"2:11859:24225","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11120:7784"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11862:24679":{"id":"2:11862:24679","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:33787":{"id":"2:11946:33787","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11956:24724":{"id":"2:11956:24724","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:24704":{"id":"2:11874:24704","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11873:24703"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11930:33780":{"id":"2:11930:33780","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11552:7780","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::matches":"2:11927:1901"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42873:7798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:33776":{"id":"2:11909:33776","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11552:7780","str::split":"2:11900:24711","prim@char":"1:11910:412","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11912:33777"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42701:7800","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11889:24723":{"id":"2:11889:24723","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:24678":{"id":"2:11869:24678","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11953:23269":{"id":"2:11953:23269","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11974:33794":{"id":"2:11974:33794","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:33794"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42950:7791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:2093":{"id":"2:11976:2093","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:2093"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42959:2094","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:30075":{"id":"2:11880:30075","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42905:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:312":{"id":"2:11861:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11862:24679","`u8`":"1:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:33775":{"id":"2:11881:33775","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42915:7794","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11971:24621":{"id":"2:11971:24621","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:22790":{"id":"2:11877:22790","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42637:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11883:24721":{"id":"2:11883:24721","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:33786":{"id":"2:11945:33786","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:33782":{"id":"2:11936:33782","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11552:7780","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::match_indices":"2:11933:33781"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42819:7796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11965:33792":{"id":"2:11965:33792","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:30367":{"id":"2:11875:30367","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42621:7787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:33783":{"id":"2:11939:33783","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:24719":{"id":"2:11918:24719","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11910:412","str::splitn":"2:11915:24717","self::pattern":"2:11552:7780"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42773:7767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:24676":{"id":"2:11865:24676","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:22848":{"id":"2:11852:22848","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:33785":{"id":"2:11943:33785","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:19487":{"id":"2:11896:19487","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40661:177","prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:802":{"id":"2:11851:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11910:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11863:24675":{"id":"2:11863:24675","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:24703":{"id":"2:11873:24703","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11874:24704"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:24711":{"id":"2:11900:24711","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11552:7780","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::split_whitespace":"2:11878:30350","str::rsplit":"2:11906:24715"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42651:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11962:33791":{"id":"2:11962:33791","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11947:33788":{"id":"2:11947:33788","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11577:7775","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315:34444":{"id":"5:5315:34444","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1996","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1996","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:25932":{"id":"5:5334:25932","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11973:24623"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1685":{"id":"0:0:1685","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[119,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3-20:0:1675"],"is_stripped":false}},"2:11972:24622":{"id":"2:11972:24622","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:19486":{"id":"2:11892:19486","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40661:177","prim@char":"1:11910:412","self::pattern":"2:11552:7780"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11968:33793":{"id":"2:11968:33793","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11514:126","`FromStr`":"2:11513:2460"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11513:2460","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11513:2460","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5319:34445":{"id":"5:5319:34445","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11853:33769":{"id":"2:11853:33769","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:33778":{"id":"2:11921:33778","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:31348":{"id":"2:11876:31348","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42627:7786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:33779":{"id":"2:11924:33779","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3-20:0:1675":{"id":"0:3-20:0:1675","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[98,0],"end":[98,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"clap_builder","name":"clap_builder","id":"20:0:1675","glob":true}},"2:11854:33770":{"id":"2:11854:33770","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11856:33771":{"id":"2:11856:33771","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11854:33770"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:1901":{"id":"2:11927:1901","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11552:7780","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::matches":"2:11927:1901"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42855:7797","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:24620":{"id":"2:11970:24620","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"31:4213:37791":{"crate_id":31,"path":["rustix","process","membarrier","MembarrierQuery"],"kind":"struct"},"30:7476:13053":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8797:2476":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:31795:29249":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"32:6138:21133":{"crate_id":32,"path":["linux_raw_sys","general","tcp_info"],"kind":"struct"},"2:11376:7771":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"22:34:2290":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"2:39983:8081":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:3779:2339":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:44269:31590":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4714:12334":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"18:582:7925":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9853:15469":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:7498:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:41698:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"25:0:1927":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"16:7743:15258":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4583:12321":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12388:18669":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:39752:8109":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"32:6298:21135":{"crate_id":32,"path":["linux_raw_sys","general","tcp_md5sig"],"kind":"struct"},"1:4325:2384":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:9443:15389":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:39603:8100":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:4248:12288":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"32:5983:21126":{"crate_id":32,"path":["linux_raw_sys","general","tcp_word_hdr"],"kind":"union"},"32:6569:21146":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"2:12134:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:7136:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46764:7682":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:21662:31727":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4637:12325":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:2209:2235":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"30:4749:12293":{"crate_id":30,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:2830:23611":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:46512:2633":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:42438:7753":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:38822:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"20:1109:19541":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"30:2167:9841":{"crate_id":30,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:44494:2615":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"32:5618:21106":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"2:7095:8086":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:44601:31696":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13233:19411":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6293:15200":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1420:2126":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:646:2099":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"30:7302:13023":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"32:5251:21091":{"crate_id":32,"path":["linux_raw_sys","general","in6_flowlabel_req"],"kind":"struct"},"16:5741:15183":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12483:18675":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12461:18674":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"31:2839:19681":{"crate_id":31,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"2:1728:32934":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"32:6357:13976":{"crate_id":32,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"2:39021:7884":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:11434:18134":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"20:3644:37420":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"32:7219:8917":{"crate_id":32,"path":["linux_raw_sys","general","linger"],"kind":"struct"},"5:1401:2122":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7449:15240":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:38838:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:7434:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:387:35814":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:11923:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:11274:26659":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:11109:15380":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:11876:29949":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"27:313:19639":{"crate_id":27,"path":["anstyle","effect","Effects"],"kind":"struct"},"16:2448:14257":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4396:12302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"30:806:8589":{"crate_id":30,"path":["libc","unix","FILE"],"kind":"enum"},"2:42447:7757":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:2742:14269":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:586:8921":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"31:2625:19711":{"crate_id":31,"path":["rustix","backend","io","epoll","CreateFlags"],"kind":"struct"},"2:2675:1988":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:43386:8294":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"32:5085:21087":{"crate_id":32,"path":["linux_raw_sys","general","ip_comp_hdr"],"kind":"struct"},"2:39471:2233":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"32:5282:21093":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_rt_hdr"],"kind":"struct"},"5:1339:2118":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:515:19501":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"20:2875:1943":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"32:5079:21086":{"crate_id":32,"path":["linux_raw_sys","general","ip_esp_hdr"],"kind":"struct"},"16:7767:15260":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3398:2261":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:8187:2335":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:262:34722":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:7878:2157":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:870:2120":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:562:15339":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:4268:34739":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:2788:8139":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:505:8911":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:35:2177":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"9:481:14049":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:2820:8144":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8751:2473":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"30:505:8907":{"crate_id":30,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:4470:37416":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"20:4033:19560":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"6:546:8915":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:771:2143":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:7119:2218":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:44361:2602":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:1431:2127":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"30:7042:13012":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4945:12360":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"32:5314:21097":{"crate_id":32,"path":["linux_raw_sys","general","ipv6hdr"],"kind":"struct"},"17:9478:15408":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:7074:2116":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:4702:14887":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:46588:7672":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:1600:34722":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"28:5:2296":{"crate_id":28,"path":["is_terminal","IsTerminal"],"kind":"trait"},"2:45554:2609":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4877:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:9959:15472":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"30:7425:13052":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:4253:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:904:2123":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"27:210:19636":{"crate_id":27,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"1:8263:2393":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:10187:7770":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"30:4998:12305":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"32:5009:21083":{"crate_id":32,"path":["linux_raw_sys","general","group_filter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:40508:2329":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:39958:8079":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:43283:7802":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"32:6578:21147":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"5:3713:2124":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:10580:15570":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"30:556:8910":{"crate_id":30,"path":["libc","unix","rlimit"],"kind":"struct"},"30:5478:12326":{"crate_id":30,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:6984:2120":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13024:19396":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2930:1990":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4549:12318":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12634:18685":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:8214:15274":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"34:72:22656":{"crate_id":34,"path":["strsim","StrSimError"],"kind":"enum"},"17:1787:15423":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:4480:14809":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8757:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"31:3779:37919":{"crate_id":31,"path":["rustix","backend","process","types","RawCpuSet"],"kind":"struct"},"2:20640:2369":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:9566:15361":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5571:15173":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:39334:7908":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:2212:2236":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:11106:8250":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"26:21:1949":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"23:319:19617":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"17:9973:15445":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:3504:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8933:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:39398:31657":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:38926:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:719:19488":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:67:1956":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"30:7322:35502":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"32:7369:13007":{"crate_id":32,"path":["linux_raw_sys","general","cmsghdr"],"kind":"struct"},"0:0:1685":{"crate_id":0,"path":["clap"],"kind":"module"},"31:4969:37785":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureState"],"kind":"struct"},"5:6505:7846":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"30:1709:9818":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:43215:7817":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:505:2065":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"9:52:14069":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"30:5171:12314":{"crate_id":30,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5797:35974":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:40491:2328":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:8307:2371":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"32:5292:21094":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_opt_hdr"],"kind":"struct"},"16:3815:14312":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10731:23275":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:41425:7712":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"32:4733:21066":{"crate_id":32,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"1:6096:26642":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:11265:8298":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"30:7443:12201":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12085:18650":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"32:6081:21131":{"crate_id":32,"path":["linux_raw_sys","general","tcp_fastopen_client_fail"],"kind":"enum"},"11:1840:2123":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:39589:31712":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8145:2287":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:3127:27189":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:42773:7767":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:9617:15397":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13777:19453":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"32:5041:12329":{"crate_id":32,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"16:2879:14275":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"30:8134:9761":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8500:2118":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:5000:14945":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:11914:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"32:7174:21183":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_12"],"kind":"enum"},"30:9176:12511":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:3677:2337":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:6004:26647":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:39724:2288":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"20:4368:19579":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"32:5586:21102":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"32:5904:13001":{"crate_id":32,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"2:40786:8232":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:9201:31622":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:48965:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"30:9246:12517":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"32:6108:21132":{"crate_id":32,"path":["linux_raw_sys","general","tcp_ca_state"],"kind":"enum"},"20:4530:19554":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"16:7103:15235":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12072:18649":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:2825:8145":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10527:15569":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"21:0:1923":{"crate_id":21,"path":["bitflags"],"kind":"module"},"30:4828:12296":{"crate_id":30,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6671:14196":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"20:4317:37039":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"2:4358:7885":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"22:114:19586":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"1:6128:29276":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"14:215:14189":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:46116:2606":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:9531:26549":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:5368:2468":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"20:3624:37045":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"5:1370:2120":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"30:5993:12366":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4662:12328":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:10656:23194":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:8939:2069":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:7814:2258":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:5437:2469":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:4241:7878":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6053:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:1978:15441":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:8517:2459":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"20:4235:19575":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"1:4411:2394":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"20:2909:37077":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"32:6452:21141":{"crate_id":32,"path":["linux_raw_sys","general","old_utsname"],"kind":"struct"},"16:6935:15230":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"26:0:1928":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"17:11258:18124":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:21249:2557":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:8651:14219":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3242:7704":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13332:19420":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"30:5277:12318":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:96:19474":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:11557:7776":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:6534:7848":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"32:6542:21144":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"2:45013:31635":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:8195:15322":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:8124:2264":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"20:2980:37040":{"crate_id":20,"path":["clap_builder","builder","app_settings","Flags"],"kind":"struct"},"2:40597:2340":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2782:8140":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2993:2173":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"31:4179:37889":{"crate_id":31,"path":["rustix","process","id","Pid"],"kind":"struct"},"17:9512:15401":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:6059:12201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:41439:7721":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10478:15538":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:9075:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:6655:32368":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"32:7227:21185":{"crate_id":32,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"32:5245:8912":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_mreq"],"kind":"struct"},"11:1852:2139":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"30:7203:13018":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"23:208:19606":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"6:4743:12338":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7669:15254":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:3922:2355":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:2678:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"32:5754:21108":{"crate_id":32,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"2:40659:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:3047:14280":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"32:7157:21181":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction"],"kind":"struct"},"30:4605:12287":{"crate_id":30,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:7525:2151":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:5708:15181":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"29:67:19649":{"crate_id":29,"path":["io_lifetimes","traits","IntoFd"],"kind":"trait"},"30:9263:12520":{"crate_id":30,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:5332:2466":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11946:18641":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:9907:15471":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:9099:2268":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:39367:7905":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4559:12319":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:6911:2487":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"31:479:19707":{"crate_id":31,"path":["rustix","backend","io","epoll","Owning"],"kind":"struct"},"17:8521:15347":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"32:5307:21096":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_destopt_hao"],"kind":"struct"},"2:44423:2623":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:4305:37033":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"32:4813:21074":{"crate_id":32,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"2:41418:7711":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4307:12292":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:9138:15358":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:9734:15418":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:39551:8095":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"30:8163:13434":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:42669:7765":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:4932:14925":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"31:4810:37918":{"crate_id":31,"path":["rustix","process","prctl","PTracer"],"kind":"enum"},"2:8187:2439":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4483:12313":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:1451:2156":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"18:0:1793":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:9192:1951":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:48939:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:39007:15274":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:39561:8096":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4820:12347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"29:142:19664":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawSocketlike"],"kind":"trait"},"32:5748:8918":{"crate_id":32,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"1:6364:2105":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:6608:8094":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"32:4723:12344":{"crate_id":32,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"16:6390:15208":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6327:15203":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9424:15388":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:1988:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"30:5154:12313":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:5697:32890":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"32:4547:13431":{"crate_id":32,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"17:10569:15536":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:41975:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"30:5344:12321":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:3976:37316":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"1:10233:23627":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4346:12296":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:41966:7939":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:40846:2118":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:42915:7794":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10897:15371":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9596:15402":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12282:18661":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:2616:14264":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:3782:14303":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4828:12348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:11909:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:42621:7787":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11069:15378":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"31:3193:19696":{"crate_id":31,"path":["rustix","backend","io","types","SpliceFlags"],"kind":"struct"},"2:21570:31069":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:20681:2369":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:41096:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:208:7710":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:7452:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"32:4528:21053":{"crate_id":32,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"2:20840:2567":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4981:12363":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:481:19499":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"20:4205:1948":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"2:10201:7768":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:20627:2571":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:39949:2105":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"23:63:19614":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"2:45618:2594":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:13399:19426":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"20:3872:19530":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"6:594:8922":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13135:19403":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13516:19439":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"30:7345:13024":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7711:15257":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"31:466:19706":{"crate_id":31,"path":["rustix","backend","io","epoll","Borrowing"],"kind":"struct"},"1:11225:22805":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5728:13005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13121:19402":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4673:12329":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:21645:31715":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"32:5835:21117":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1:621:2095":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:9670:15421":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"30:6783:13002":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"20:4277:37035":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"2:20814:2561":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"32:6923:21168":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_cqe"],"kind":"struct"},"27:282:19638":{"crate_id":27,"path":["anstyle","color","RgbColor"],"kind":"struct"},"29:127:19661":{"crate_id":29,"path":["io_lifetimes","raw","AsRawFilelike"],"kind":"trait"},"32:5020:9831":{"crate_id":32,"path":["linux_raw_sys","general","in_pktinfo"],"kind":"struct"},"17:8420:15344":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:7162:2217":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"32:6686:21160":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe"],"kind":"struct"},"17:13698:19449":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:40727:2119":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"27:261:19637":{"crate_id":27,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"2:46702:7680":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12113:18652":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:20652:2560":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:3166:2309":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:43378:8291":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:42651:2290":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:6667:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:20414:32293":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"32:5964:21125":{"crate_id":32,"path":["linux_raw_sys","general","tcphdr"],"kind":"struct"},"32:6585:21148":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"6:5959:13023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11372:18130":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:9382:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:7529:8084":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:5000:12366":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11628:18148":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:7386:13976":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:4173:2389":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:7039:29073":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10666:2254":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:1074:2135":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:6611:9761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2851:8151":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10545:15375":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8255:2336":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12194:18657":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:3732:34722":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"11:2080:2135":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:2470:14258":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:3992:2362":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:5944:15189":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:1947:15417":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:9885:23193":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"29:137:19663":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawFilelike"],"kind":"trait"},"2:49004:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6541:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11902:18639":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:1604:9828":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:6992:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11917:1458":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:8103:2318":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:42190:8279":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"32:6737:21164":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_4"],"kind":"union"},"20:3634:37109":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"30:4627:12288":{"crate_id":30,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:6931:26432":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:40854:2119":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4727:12336":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:2546:14261":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"30:2143:9839":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"32:5263:12327":{"crate_id":32,"path":["linux_raw_sys","general","in6_pktinfo"],"kind":"struct"},"18:755:19497":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10039:15479":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"27:305:32295":{"crate_id":27,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"1:6477:2501":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4900:12356":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:10835:23196":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"30:7993:13432":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11220:15586":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"30:480:8535":{"crate_id":30,"path":["libc","unix","DIR"],"kind":"enum"},"16:8025:15264":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:9028:15356":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:2720:14268":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:11210:22787":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:355:2088":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:558:2072":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:7145:1995":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10270:15484":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:951:34722":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:847:2118":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"13:226:35833":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:699:19495":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:7201:13816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"20:4627:1950":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"26:41:19629":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"6:4402:12303":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:38980:8157":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"32:5226:21090":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr__bindgen_ty_1"],"kind":"union"},"11:861:2132":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"30:4651:12289":{"crate_id":30,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"32:4806:21073":{"crate_id":32,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"17:13667:19446":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:11416:2339":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"30:7246:13020":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:652:37010":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:21097:2589":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:30027:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:6939:2120":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:60:35808":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"20:3686:19521":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"17:10735:15578":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:9409:15387":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"31:3671:37862":{"crate_id":31,"path":["rustix","backend","process","types","Signal"],"kind":"enum"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11282:18125":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:7529:15247":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"9:502:14053":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"30:5513:12328":{"crate_id":30,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"30:4714:12291":{"crate_id":30,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9989:2192":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"20:1631:37275":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"6:123:8590":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:46474:2613":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"20:4287:37038":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"20:1607:19558":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"32:5610:21105":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12449:18673":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:11922:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"30:6813:13003":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:2940:1993":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:1230:2136":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"30:695:8917":{"crate_id":30,"path":["libc","unix","linger"],"kind":"struct"},"14:202:7821":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"32:5236:9823":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in6"],"kind":"struct"},"2:38862:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:736:19489":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11770:18632":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:7259:2124":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"11:738:2122":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:8142:15270":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:484:26644":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6243:36307":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"32:6310:21136":{"crate_id":32,"path":["linux_raw_sys","general","tcp_diag_md5sig"],"kind":"struct"},"2:2971:7705":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"14:7:14180":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:8047:15265":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13159:19405":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:41016:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:43035:7810":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:300:35820":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:20564:2569":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:12372:18668":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:44249:31552":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:11252:24378":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5032:14953":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12576:18682":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"23:333:19607":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"17:10598:15374":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:6519:8087":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"12:0:1788":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"30:5817:12344":{"crate_id":30,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:8096:2316":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"20:2718:2119":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"16:6662:15220":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:6634:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"23:286:19601":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"2:39280:7792":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"29:19:19644":{"crate_id":29,"path":["io_lifetimes","portability","AsFilelike"],"kind":"trait"},"2:2813:8147":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"32:7214:9821":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr"],"kind":"struct"},"2:43406:8306":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"32:7235:2424":{"crate_id":32,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"2:2745:7701":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"30:8896:13816":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:22208:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4451:12309":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4952:12361":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"9:445:14050":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:9432:8260":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"24:132:2454":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"30:7228:13019":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:669:2126":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"31:4829:37799":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointMode"],"kind":"enum"},"17:12138:18654":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"32:5002:21082":{"crate_id":32,"path":["linux_raw_sys","general","group_source_req"],"kind":"struct"},"5:5573:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"30:5496:12327":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:1649:1074":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4734:2374":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12403:18670":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4728:14889":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6854:15226":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:119:35829":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13194:19408":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7509:15245":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:42517:7745":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:6930:2176":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5722:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:10712:15577":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"31:2854:19698":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFlags"],"kind":"struct"},"5:1216:2134":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"32:7076:21174":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_11"],"kind":"enum"},"31:3798:19725":{"crate_id":31,"path":["rustix","backend","termios","types","OptionalActions"],"kind":"enum"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11921:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:38807:8155":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:43263:7801":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:1550:9823":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"32:6399:21139":{"crate_id":32,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"1:7589:2369":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:7204:7823":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:20683:2562":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10660:15377":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6431:15210":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"30:1948:9830":{"crate_id":30,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1559:9824":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:8185:2441":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:1969:2157":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"32:6932:21169":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_9"],"kind":"enum"},"17:487:15338":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:45974:2637":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:3446:14284":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:40610:2331":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:10216:1944":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:3087:2174":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:113:19475":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:6666:34743":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"32:4510:21051":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"25:89:1954":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"30:641:8914":{"crate_id":30,"path":["libc","unix","iovec"],"kind":"struct"},"15:0:1790":{"crate_id":15,"path":["addr2line"],"kind":"module"},"11:1555:14174":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:10940:19642":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11339:18128":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"32:6980:21172":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_params"],"kind":"struct"},"20:3396:37040":{"crate_id":20,"path":["clap_builder","builder","arg_settings","Flags"],"kind":"struct"},"17:13763:19452":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:2676:7702":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"32:6497:21143":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"17:9772:15424":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:1442:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:8573:15349":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11556:18143":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:20412:32288":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"15:180:14198":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:9839:15415":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"11:822:2129":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"32:4966:9820":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq_source"],"kind":"struct"},"16:7803:15261":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2230:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"20:4244:2122":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"17:10705:15576":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"30:8221:13437":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"30:4770:12294":{"crate_id":30,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:21448:31551":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10761:15365":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"32:4674:21064":{"crate_id":32,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"6:4468:12311":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4681:12330":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:3266:15506":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:2339:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"32:5626:21107":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"1:1898:2212":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:4253:2390":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"27:382:19643":{"crate_id":27,"path":["anstyle","style","Style"],"kind":"struct"},"6:7469:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:8548:15348":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4489:12314":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"30:7185:13017":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:8753:15351":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:2757:8117":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:11935:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:7488:15243":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6876:15227":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:41950:7940":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:2855:8152":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:40871:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:43398:8287":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:11522:14207":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:2931:14277":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13015:19395":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"30:5298:12319":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"20:4329:37032":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"2:42209:7747":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:12147:7934":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:6594:9758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"29:181:19667":{"crate_id":29,"path":["io_lifetimes","views","FilelikeViewType"],"kind":"trait"},"2:39268:7914":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:1704:2124":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:11171:24353":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:660:19491":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11933:1529":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:44962:2597":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:8229:2331":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4611:2351":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:43567:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6488:8958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:614:37009":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:320:35815":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:39288:7906":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:21261:32229":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:8506:2458":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:11258:24346":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"32:6054:21130":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_5"],"kind":"enum"},"17:12835:19388":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:11925:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"32:6431:21140":{"crate_id":32,"path":["linux_raw_sys","general","oldold_utsname"],"kind":"struct"},"1:11154:26656":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12318:18664":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13506:19438":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:40554:31076":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"18:671:19492":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:5691:2495":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12592:18683":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:5245:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13721:19450":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:45508:2605":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"30:5555:12330":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5759:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:9080:2518":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:7686:2138":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:6220:34722":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:40633:2332":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"30:5369:12322":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"30:7502:13054":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:7626:15252":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10635:15563":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:6990:15233":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:2475:2299":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:42905:2286":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"30:2093:9836":{"crate_id":30,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"32:4753:21068":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"32:5781:21111":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"32:6965:21171":{"crate_id":32,"path":["linux_raw_sys","general","io_cqring_offsets"],"kind":"struct"},"32:4575:21054":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"17:9545:15398":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:10007:7758":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"25:23:14089":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"11:1859:2140":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:45060:31575":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:641:2098":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"32:7204:21184":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_getevents_arg"],"kind":"struct"},"6:5752:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:3796:19549":{"crate_id":20,"path":["clap_builder","builder","styled_str","Styles"],"kind":"struct"},"6:6512:8790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5945:13021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:7697:15256":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:42925:7783":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:39207:7875":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:5568:2509":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:5677:15179":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:5905:2508":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"30:1929:9829":{"crate_id":30,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5071:14968":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:1872:2142":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"30:2130:9838":{"crate_id":30,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:42609:7790":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:12344:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:9063:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"30:5742:12340":{"crate_id":30,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12158:18655":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12923:19392":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"30:5974:12363":{"crate_id":30,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:12386:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"27:360:19642":{"crate_id":27,"path":["anstyle","reset","Reset"],"kind":"struct"},"1:7862:29281":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:20367:7925":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:3640:2120":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12358:18667":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8813:2517":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:7173:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"22:0:1924":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"2:43658:7694":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"32:4536:8790":{"crate_id":32,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"32:7138:21179":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe_op"],"kind":"struct"},"20:3860:19534":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"2:8774:32294":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"32:6669:21158":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"1:878:2121":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:39703:8107":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:2205:2116":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:10967:15374":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13181:19407":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"32:6473:21142":{"crate_id":32,"path":["linux_raw_sys","general","new_utsname"],"kind":"struct"},"32:5029:9822":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in"],"kind":"struct"},"17:11422:18133":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"30:5321:12320":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4597:12322":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"31:4746:37880":{"crate_id":31,"path":["rustix","process","prctl","VirtualMemoryMapAddress"],"kind":"enum"},"17:13033:19397":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:2679:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:7411:15238":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:42595:7793":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"11:1085:14170":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:6752:2556":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"20:3777:19525":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"30:9212:12514":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:42637:2289":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:43250:7820":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2919:2154":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:42467:7756":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:7317:36321":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:9696:15405":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:4639:2394":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"20:3327:19520":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"2:7522:2148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:39014:31665":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"18:507:37010":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11060:15377":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:7197:1994":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:31799:8204":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:44546:2607":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:4267:19576":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"1:8981:29283":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4218:12285":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"30:4675:12290":{"crate_id":30,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4757:2367":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:3323:2317":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:39641:8091":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"32:5729:8958":{"crate_id":32,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"1:10691:2258":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:9380:15386":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:7601:2076":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:7824:2255":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:2333:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:38904:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"24:26:19620":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"1:11915:1349":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"32:5872:21122":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"1:10856:23301":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"20:54:1953":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"17:13689:19448":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"20:4357:19568":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"1:925:2126":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:6530:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"31:534:2118":{"crate_id":31,"path":["rustix","backend","io","epoll","Iter"],"kind":"struct"},"17:12770:19386":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"32:7167:21182":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction__bindgen_ty_1"],"kind":"union"},"6:653:8970":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:10159:7769":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:1575:2124":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"32:4822:21075":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage"],"kind":"struct"},"20:63:1955":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"30:8070:9784":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:2342:2240":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13651:19444":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:9350:36995":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:10423:2309":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:43382:8290":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:39381:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:9275:36982":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"32:6632:21154":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"6:4429:12307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:41658:32933":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:8109:15268":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:4:1001":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:2830:14273":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:22043:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:43240:7819":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"32:6749:21166":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_7"],"kind":"enum"},"32:5765:21109":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"2:41790:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:9061:7721":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:7366:15237":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4389:12301":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"23:170:2369":{"crate_id":23,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"17:13744:19451":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:6079:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"31:3001:19686":{"crate_id":31,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"1:9394:23524":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:7606:2077":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5938:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"30:5015:12306":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:39533:8088":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:2497:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:3462:2284":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"30:2005:9832":{"crate_id":30,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:2642:14265":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:939:2129":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"32:6649:21156":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"2:39216:7912":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:41256:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:1046:33667":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"32:4628:21059":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"20:4189:19567":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"2:12355:2641":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:4846:2275":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46428:2595":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:0:1791":{"crate_id":16,"path":["gimli"],"kind":"module"},"20:3956:19533":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"1:10321:2473":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:39028:7868":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4573:24372":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"9:234:2454":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:20689:2564":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"32:4567:9838":{"crate_id":32,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"32:6597:21150":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"18:538:19503":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:3937:34722":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:10721:2260":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:10701:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"11:2190:35828":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:20842:2565":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11641:18149":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4921:12358":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:39673:8105":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:9925:2290":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:7519:15246":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:2344:2241":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"14:40:18125":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:39341:7909":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"30:9276:14004":{"crate_id":30,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:20601:2570":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:21683:31643":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:39327:7791":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:29782:2343":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"20:734:37418":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"31:457:106":{"crate_id":31,"path":["rustix","backend","io","epoll","Context"],"kind":"trait"},"6:119:8589":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"20:3343:19546":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"30:5611:12333":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:43374:8289":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"31:4115:37886":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdClockId"],"kind":"enum"},"2:22340:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:4164:7733":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:4628:12324":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"9:352:14066":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"31:4196:37890":{"crate_id":31,"path":["rustix","process","id","Cpuid"],"kind":"struct"},"20:51:1952":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"20:4560:37080":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"32:5269:21092":{"crate_id":32,"path":["linux_raw_sys","general","ip6_mtuinfo"],"kind":"struct"},"1:11927:1476":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:11932:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:42755:7769":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:7655:2101":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:21092:2566":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:13488:19436":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"30:6936:12970":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"30:5054:12308":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:2378:14254":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2249:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5910:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:5383:1944":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12522:18678":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:4768:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:43057:7811":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:2624:33693":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:5450:8099":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6442:15211":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11821:15526":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"20:2696:2118":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"2:22808:2341":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12894:19389":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"31:4686:37796":{"crate_id":31,"path":["rustix","process","prctl","EndianMode"],"kind":"enum"},"2:44870:2608":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:4842:2419":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6544:15217":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:9148:36992":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:7837:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:38721:7871":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:2455:7929":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11319:18127":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:6889:27235":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5716:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10465:15539":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"14:160:14180":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:11566:7778":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:21637:31728":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13639:19443":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:7948:29262":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:3749:14294":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"20:2895:37079":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"1:1586:2140":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:7797:2256":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"32:6413:8914":{"crate_id":32,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"24:255:1954":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"16:5963:15190":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:4678:2372":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:1520:9819":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12959:19393":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7065:36267":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:8986:29265":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:2904:33637":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:7102:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"10:0:1786":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13411:19427":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:762:2124":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"30:2027:9833":{"crate_id":30,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:22307:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"20:1361:19542":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"5:5639:2123":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"30:4945:12302":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:39386:2219":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3380:2262":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"31:5194:37881":{"crate_id":31,"path":["rustix","process","sched","CpuSet"],"kind":"struct"},"32:6743:21165":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5"],"kind":"union"},"16:6890:15228":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10015:15520":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:10951:26654":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12433:18672":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:1065:35832":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:4122:7890":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"30:7120:13014":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13292:19416":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:933:2128":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:21749:2345":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:39580:8098":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:8788:15352":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:4093:2385":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:43390:8292":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12098:18651":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:2503:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"30:8329:13440":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"20:3963:19532":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"16:4872:14913":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:39414:8223":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6793:15224":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:7837:15262":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:1564:2118":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:9188:36986":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"23:423:37560":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"18:609:37030":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13145:19404":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:9796:15422":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:11934:1111":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:1580:2139":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13265:19415":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:4433:2395":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"30:9104:13976":{"crate_id":30,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:6080:2641":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:3455:2263":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"20:4594:37041":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"17:12915:19391":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"30:2074:9835":{"crate_id":30,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"31:3822:19726":{"crate_id":31,"path":["rustix","backend","termios","types","QueueSelector"],"kind":"enum"},"2:44746:2631":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"30:764:8921":{"crate_id":30,"path":["libc","unix","servent"],"kind":"struct"},"2:43670:7692":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"20:3652:37419":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"20:4162:19550":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"25:53:2454":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"2:46649:7677":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10008:23525":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:6327:29277":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:45584:2612":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"20:4479:26659":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"16:4540:14821":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13842:19458":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:3585:14285":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"20:3933:19528":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"17:13309:19417":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:22241:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:5660:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"32:4501:21050":{"crate_id":32,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"17:10377:15487":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:11459:18136":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9895:15442":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"24:96:19614":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"5:851:2145":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:39542:8089":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"32:4957:9819":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreqn"],"kind":"struct"},"6:4703:12333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11484:18138":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:8858:15354":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:2933:15483":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12059:18648":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:8072:15266":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:38882:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"32:5560:21100":{"crate_id":32,"path":["linux_raw_sys","general","prctl_mm_map"],"kind":"struct"},"32:6660:21157":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"30:1781:9822":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:4101:2386":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:98:35822":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:10045:7772":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11924:18640":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:914:2124":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:7099:8085":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:22142:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"11:1518:14172":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11615:18147":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:8490:2457":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:9866:15436":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12331:18665":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:9067:7719":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:45318:2629":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"32:4771:21070":{"crate_id":32,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"1:11024:2475":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:3656:2158":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:42801:7795":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:1509:9817":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:20833:2369":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"32:6640:21155":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"2:20433:32290":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"32:6705:21161":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1"],"kind":"union"},"1:8285:2424":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"9:174:14153":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:9523:15400":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"30:4731:12292":{"crate_id":30,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:5761:8509":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:6773:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:43178:7816":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:1704:9837":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7259:2437":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4890:12355":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:2319:14251":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"22:100:19585":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"20:3999:19543":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"5:3172:2142":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"9:0:1785":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"23:382:2454":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"29:183:19669":{"crate_id":29,"path":["io_lifetimes","views","FilelikeView"],"kind":"struct"},"17:11410:18132":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:5990:13024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"30:7166:13016":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:7854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:1003:2134":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:41668:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:44564:31652":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"30:8856:8867":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:8256:15275":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"32:5880:9841":{"crate_id":32,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"17:13803:19455":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"30:5136:12312":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"32:6421:2380":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_un"],"kind":"struct"},"6:1571:9825":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:2184:32070":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:3376:7851":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:9453:15390":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:43151:7815":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:2937:1992":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4322:12294":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10257:15486":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"30:6911:13008":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:1824:2192":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:43577:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:39632:8102":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:5171:7738":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:668:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"23:262:19605":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"11:2178:35826":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:2404:14255":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13344:19421":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:920:2125":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:6851:2316":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"30:2151:9840":{"crate_id":30,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:572:8919":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"32:4942:9817":{"crate_id":32,"path":["linux_raw_sys","general","in_addr"],"kind":"struct"},"32:7298:9758":{"crate_id":32,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"1:11926:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:3205:7703":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:42959:2094":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"20:3681:2069":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"1:5352:2467":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:7713:29249":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:44916:2593":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:4232:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:11036:23272":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"30:5945:12361":{"crate_id":30,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:6000:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"32:4833:21077":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"16:6943:15231":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10626:15572":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:6061:14222":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:40719:2118":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"32:5300:21095":{"crate_id":32,"path":["linux_raw_sys","general","rt2_hdr"],"kind":"struct"},"2:48952:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6376:15207":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:6616:29277":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"32:5658:8919":{"crate_id":32,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"32:4713:21065":{"crate_id":32,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"2:40735:2120":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"11:1044:14169":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:1652:9832":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3908:2354":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:42950:7791":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:1832:2118":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9683:15420":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:39311:7907":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:5690:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:8875:2513":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:2732:1989":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:7566:32295":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3612:2334":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"31:3294:19679":{"crate_id":31,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"6:4720:12335":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"30:4805:12295":{"crate_id":30,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:531:8913":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"30:6830:13004":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:42819:7796":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:9057:7711":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:1723:9839":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:7133:31657":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9029:23234":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:44794:2616":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"30:8420:13444":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11544:18142":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:38987:7859":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:9068:36984":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"23:163:19595":{"crate_id":23,"path":["anstream","raw","RawStream"],"kind":"trait"},"2:39654:8103":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:10145:2479":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"20:4113:2303":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"2:43229:7818":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4439:12308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:45430:2617":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"30:6986:13009":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13066:19400":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:8931:15323":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10711:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13324:19419":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:11513:2460":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4697:12332":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4313:12293":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:5745:2492":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"23:417:19593":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"2:9065:7718":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:2808:14272":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:2227:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12510:18677":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:11325:8297":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:6480:2502":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"30:5077:12309":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2859:8153":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4571:12320":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"22:5:2352":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"17:11993:18643":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13169:19406":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"30:7953:8790":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"31:4542:37787":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointExceptionMode"],"kind":"struct"},"18:531:19502":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:274:35809":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13625:19442":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"30:522:8908":{"crate_id":30,"path":["libc","unix","timeval"],"kind":"struct"},"6:1663:9833":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:473:8906":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:8443:15345":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"30:2052:9834":{"crate_id":30,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:22076:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:8821:2120":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:681:19493":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10068:15522":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6919:36065":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"32:5666:8970":{"crate_id":32,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"1:3984:2360":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:8718:15326":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:44938:2596":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:22109:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:3970:2358":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:1527:9820":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:8632:15321":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:8256:15320":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:3063:14281":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:2776:8137":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:44694:2624":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"30:8295:13439":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:20395:32226":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:10874:2476":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"30:1869:9826":{"crate_id":30,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"32:5642:8908":{"crate_id":32,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"32:4843:21078":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_1"],"kind":"enum"},"17:9946:15444":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:5760:2504":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:1731:9840":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"30:8402:13443":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:9126:24343":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:41136:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12236:18659":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:7179:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:3151:34866":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:7280:29948":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:10661:24379":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:491:37014":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"32:5580:21101":{"crate_id":32,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"1:8181:2336":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:48926:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1927:2213":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:7027:2120":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"32:4660:21063":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"30:4865:12298":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7588:15250":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11520:18140":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7335:36300":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:5717:2496":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"32:7278:9757":{"crate_id":32,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"6:5698:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"30:676:8916":{"crate_id":30,"path":["libc","unix","winsize"],"kind":"struct"},"5:6293:2120":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:42539:7764":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:39713:8092":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6520:15216":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"30:5981:12364":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3872:2353":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3446:26835":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:1609:9829":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:38948:2110":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"20:4082:19561":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"20:4507:37227":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:41176:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:1597:2142":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12046:18647":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"11:985:2133":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"30:7265:13021":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"31:3611:37913":{"crate_id":31,"path":["rustix","backend","process","types","Resource"],"kind":"enum"},"16:6868:36232":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:9316:7938":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6460:15212":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:5594:15174":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:9098:15357":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11391:18131":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"13:110:35880":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:1849:2198":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:7511:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:1034:15407":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"32:7126:21178":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update2"],"kind":"struct"},"2:2687:2079":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"32:7378:2351":{"crate_id":32,"path":["linux_raw_sys","general","ucred"],"kind":"struct"},"11:1836:2120":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"31:4668:37809":{"crate_id":31,"path":["rustix","process","prctl","TimingMethod"],"kind":"enum"},"2:21554:31020":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:6643:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:4750:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:3899:14348":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"30:5893:12356":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"31:4339:37816":{"crate_id":31,"path":["rustix","process","prctl","DumpableBehavior"],"kind":"enum"},"20:4185:2095":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"31:3909:37868":{"crate_id":31,"path":["rustix","backend","time","types","DynamicClockId"],"kind":"enum"},"32:4827:21076":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1"],"kind":"union"},"17:10505:15568":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"34:32:22642":{"crate_id":34,"path":["strsim","StringWrapper"],"kind":"struct"},"6:553:8916":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:21728:33317":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46725:7681":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:8283:15340":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:2572:14262":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:43425:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:3290:2296":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:6832:26659":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:22175:2080":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"18:521:19498":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:4413:7887":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:39428:2220":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:860:2119":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"9:421:14052":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:751:2123":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:1613:580":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:975:15403":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:2538:2300":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:2862:14274":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:5886:15187":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:1529:2275":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:7498:15244":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:2896:33636":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"30:5033:12307":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"30:728:8919":{"crate_id":30,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1899:9980":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:6691:34761":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"20:3308:1947":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"2:21610:2344":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4416:12305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6728:15222":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:3208:2312":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"30:7906:8958":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11892:23256":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"20:3939:19531":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"2:44524:2603":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:11552:7780":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:3644:2157":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:3190:32506":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:11090:8248":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:46304:2610":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"32:4782:21071":{"crate_id":32,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"20:4254:19577":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"1:8192:2327":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"30:1744:9820":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:9038:36980":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3353:2275":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:2360:2246":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5813:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:40710:8160":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:8598:15350":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:766:19490":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"31:3933:37789":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdFlags"],"kind":"struct"},"1:8175:2286":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"32:6606:21151":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"1:4988:29252":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"7:0:1519":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:6231:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:8241:2392":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"10:36:35807":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"23:0:1925":{"crate_id":23,"path":["anstream"],"kind":"module"},"2:8186:2440":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:1677:9834":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"30:1687:8970":{"crate_id":30,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:46577:7671":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:5920:15188":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:1185:2133":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:41774:8241":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:588:2092":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5847:15186":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"31:4707:37812":{"crate_id":31,"path":["rustix","process","prctl","TimeStampCounterReadability"],"kind":"enum"},"1:7958:2303":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:12195:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:39935:8077":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12496:18676":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11710:25985":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"32:7148:21180":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe"],"kind":"struct"},"17:11037:15376":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:6164:36243":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:11302:8300":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6179:15195":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13316:19418":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:80:19473":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:8156:15271":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2668:14266":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:7293:15236":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"22:30:2369":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"2:2761:2551":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8281:2422":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10516:15533":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:1866:2141":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:3245:2307":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:7757:15259":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:44840:2604":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:624:37027":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:39571:8097":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"32:6560:21145":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"17:8979:36977":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"31:5306:37832":{"crate_id":31,"path":["rustix","process","wait","WaitStatus"],"kind":"struct"},"17:10923:15372":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"32:6998:21173":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_10"],"kind":"enum"},"2:41216:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"30:1693:9817":{"crate_id":30,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"30:1762:9821":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:4862:12351":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"20:4407:37270":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"1:11331:23620":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:4331:34739":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"30:8203:13436":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:10719:7760":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11585:18145":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:3058:2319":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:6174:2123":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11299:18126":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:7676:2137":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:6728:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40896:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"20:4338:37037":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"16:7859:15263":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:44648:2559":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:2682:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:2847:8150":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:5693:15180":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:4139:2118":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10303:15481":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"32:5275:12346":{"crate_id":32,"path":["linux_raw_sys","general","in6_ifreq"],"kind":"struct"},"1:3936:2357":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:39991:8083":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:42701:7800":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:3932:2275":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:39511:2170":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:4676:2368":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"32:5594:21103":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"17:10691:15575":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:4845:14910":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"23:402:19597":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"6:4328:12136":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:5177:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:2297:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:2385:1800":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:3640:14286":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"30:9158:12510":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"30:5800:12343":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6218:15197":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:11081:22781":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"32:5221:14005":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr"],"kind":"struct"},"1:11354:2338":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6698:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:1695:9836":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:7276:7843":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:1985:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:242:36985":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8063:2259":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:12220:7935":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:45348:2632":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46366:2630":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:646:2119":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:6094:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:5367:14221":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"20:4554:37422":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"16:6819:15225":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:30205:31805":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:10989:15375":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:43072:7812":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4910:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9653:15435":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:44393:2635":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6628:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:4566:8099":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"1:4505:2412":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:48978:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8340:2433":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:2395:33661":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"32:5650:12291":{"crate_id":32,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"2:1896:7707":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:3247:2308":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:590:31682":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:39491:7744":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:5417:7846":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:11881:2103":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:487:8908":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:10173:7767":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6201:15196":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6649:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:42934:7782":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:7428:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:277:1996":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10452:15540":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:1051:2133":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13659:19445":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12799:19387":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"23:301:19602":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"30:8351:13441":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4871:12352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:7807:2254":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:3138:2141":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:192:14089":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"17:9641:15409":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"30:8253:13438":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:7709:2201":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:9218:15360":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"32:5946:12201":{"crate_id":32,"path":["linux_raw_sys","general","sysinfo"],"kind":"struct"},"6:6791:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5967:35502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6558:15218":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:22373:2347":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:2771:8138":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:41056:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"32:4558:14004":{"crate_id":32,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"32:5602:21104":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"17:9228:36981":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12622:15377":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6236:15198":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:697:2127":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13865:19460":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"31:3572:37827":{"crate_id":31,"path":["rustix","backend","process","types","MembarrierCommand"],"kind":"enum"},"15:198:14199":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"31:549:19710":{"crate_id":31,"path":["rustix","backend","io","epoll","EventVec"],"kind":"struct"},"1:4575:24374":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:9900:2119":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:9986:15473":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12126:18653":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"33:0:1934":{"crate_id":33,"path":["anstyle_query"],"kind":"module"},"30:5454:12325":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"30:8105:9758":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12646:18686":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"30:4788:12136":{"crate_id":30,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:1786:2181":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:5630:15176":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:1541:9822":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:39664:8104":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:3718:19524":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"16:8090:15267":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"32:7106:21176":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_register"],"kind":"struct"},"6:4224:12286":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"30:5987:12365":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"30:8924:13817":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:1716:2380":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"31:3087:19699":{"crate_id":31,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"5:6524:7847":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:21501:31557":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8162:2289":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6981:15232":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4781:12343":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:574:37010":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"30:4979:12304":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4361:12298":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:0:1371":{"crate_id":1,"path":["std"],"kind":"module"},"1:8783:2475":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"32:6717:21163":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_3"],"kind":"union"},"32:4621:21058":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"34:0:1935":{"crate_id":34,"path":["strsim"],"kind":"module"},"5:1354:2119":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"11:1120:14171":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:1919:15457":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"30:9297:14005":{"crate_id":30,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:891:2122":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4237:12287":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:42378:31698":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:636:37024":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"32:4645:21061":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"14:31:14180":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:3150:8156":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11234:18123":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4408:12304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:44892:2611":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"31:5181:37930":{"crate_id":31,"path":["rustix","process","rlimit","Rlimit"],"kind":"struct"},"2:12168:32068":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11924:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:46550:2598":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4301:12291":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:46568:7670":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12259:18660":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13443:19431":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"20:3866:19535":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"2:45091:31628":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6496:9757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:690:19494":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10125:15500":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:4561:2357":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:6581:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:48569:2638":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10857:15369":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10092:15524":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:39738:8108":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5724:15182":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"8:0:1784":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11844:18635":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:3264:2124":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:10118:7766":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"30:5117:12311":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"32:6785:21167":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_8"],"kind":"enum"},"6:1617:9830":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"32:4762:21069":{"crate_id":32,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"30:8890:13815":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:638:2097":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"32:6677:21159":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"2:42968:7792":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:481:8907":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"31:3380:19694":{"crate_id":31,"path":["rustix","backend","io","types","PipeFlags"],"kind":"struct"},"6:5878:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:20809:2369":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:11341:8299":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:11908:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40574:31672":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:2900:33635":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"32:5990:21127":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_4"],"kind":"enum"},"2:8997:2214":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:39689:8106":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:7193:7822":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5890:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:2766:2553":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12345:18666":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10316:15482":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:4099:2275":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8859:2515":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:42873:7798":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:2668:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:9886:15443":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:9721:15419":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"30:4962:12303":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9876:15470":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:1201:2135":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:10364:26640":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:11916:1379":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:4577:7899":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"30:8377:13442":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:561:8917":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11515:14207":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:6533:2506":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:6106:34743":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:3437:2214":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"30:5668:12336":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:7487:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42559:7763":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:5318:2465":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:45194:2636":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:2524:14260":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"30:6847:13005":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:44724:2628":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"30:658:8915":{"crate_id":30,"path":["libc","unix","pollfd"],"kind":"struct"},"30:8017:13433":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8408:2454":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:3674:2338":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"29:42:19656":{"crate_id":29,"path":["io_lifetimes","portability","IntoSocketlike"],"kind":"trait"},"2:2800:8142":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"23:245:19604":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"32:5049:21084":{"crate_id":32,"path":["linux_raw_sys","general","iphdr"],"kind":"struct"},"6:4751:12339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:10080:7765":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:8129:15269":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"30:7925:9757":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"30:5194:12315":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"30:2113:9837":{"crate_id":30,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13461:19433":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"14:0:1789":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:413:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"30:7355:13025":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:41716:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:6023:2643":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10354:15489":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:42457:7755":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:2298:14223":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:42549:7762":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"14:165:14181":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"30:809:8590":{"crate_id":30,"path":["libc","unix","fpos_t"],"kind":"enum"},"32:0:1933":{"crate_id":32,"path":["linux_raw_sys"],"kind":"module"},"6:5823:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:3980:2359":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:1065:2134":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:40645:2333":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:2967:14278":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5811:15185":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:8310:15341":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:44463:31660":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:5643:15177":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"11:725:2121":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:9389:2257":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"20:1362:1954":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"2:43394:8293":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:8667:14217":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:9557:15360":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:45768:2618":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"30:5536:12329":{"crate_id":30,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"30:539:8909":{"crate_id":30,"path":["libc","unix","timespec"],"kind":"struct"},"1:11044:8306":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:10402:15553":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:4680:2373":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"30:1726:9819":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"11:1029:2135":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40976:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"30:1845:9825":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:11472:7688":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"18:707:7778":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6767:15223":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:1771:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11911:1492":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:3142:15488":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"20:4222:19569":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"16:2764:14270":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11910:412":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:41997:30316":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:3105:2118":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:5998:15192":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"20:1609:19559":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"32:5799:21113":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"16:3872:14345":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"32:5773:21110":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"2:12412:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:30005:7842":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"27:334:19640":{"crate_id":27,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"6:493:8909":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:853:2131":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:6962:2147":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12902:19390":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6022:15193":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:8112:2260":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:5976:15191":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:2572:2292":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:11573:18144":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"20:3662:182":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"11:632:2118":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:9053:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:5931:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:5921:8111":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:4900:2429":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:5902:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:40777:2438":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4274:12290":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"30:1822:9824":{"crate_id":30,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3388:7855":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:10000:15519":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"30:5256:12317":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8974:29292":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"23:348:19608":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"16:5386:14219":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7077:15234":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:868:2118":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:41432:7720":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:9514:31931":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11395:2337":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:7481:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:30041:31756":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:11969:18642":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:6945:2146":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"30:5875:12354":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:1845:2124":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:6336:15204":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:43402:8288":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5655:15178":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:9876:2118":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:1392:2121":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"20:4452:19570":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"6:5805:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41958:31089":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4766:12341":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:4298:2275":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"32:4599:21056":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"2:21761:2348":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:46226:2626":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"32:4519:21052":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"30:9240:12516":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"30:4558:9980":{"crate_id":30,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:7489:27232":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"20:3753:19519":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"32:5704:12285":{"crate_id":32,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"32:5913:12942":{"crate_id":32,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"16:6535:36237":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:10469:2075":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:39244:7911":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"27:113:37657":{"crate_id":27,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"1:5500:2472":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6575:15219":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"32:5843:21118":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"1:4071:29080":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:4303:7883":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"31:498:19708":{"crate_id":31,"path":["rustix","backend","io","epoll","Epoll"],"kind":"struct"},"2:39973:8080":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:4994:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"32:5094:21088":{"crate_id":32,"path":["linux_raw_sys","general","ip_beet_phdr"],"kind":"struct"},"2:42719:7799":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:1747:9841":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"7:32:14021":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"30:8440:13445":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:40795:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:3528:2119":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:4327:14728":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11193:15585":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"20:36:1954":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"23:366:37542":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"6:4775:12342":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:43585:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:11920:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:3595:34722":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:525:8912":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:1410:2125":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:9059:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11600:18146":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:3206:2311":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:679:2100":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"30:8458:13446":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:7016:36223":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:2894:34802":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:3171:7873":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13211:19409":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6696:15221":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:361:2089":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"22:130:19587":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"17:12033:18646":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:727:19496":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:393:35817":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"30:486:8906":{"crate_id":30,"path":["libc","unix","group"],"kind":"struct"},"30:5883:12355":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:4967:2492":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"30:573:8911":{"crate_id":30,"path":["libc","unix","rusage"],"kind":"struct"},"20:916:19523":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"20:3914:19538":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"17:13612:19441":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"20:4647:1949":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"2:1737:8181":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"30:783:8922":{"crate_id":30,"path":["libc","unix","protoent"],"kind":"struct"},"17:247:36975":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13477:19435":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13812:19456":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"11:353:35812":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13101:19385":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:4109:2387":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6488:15214":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:956:2131":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"20:1614:19562":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"17:12536:18679":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:6548:2424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13419:19428":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"30:9194:12512":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:5497:2470":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"32:5070:21085":{"crate_id":32,"path":["linux_raw_sys","general","ip_auth_hdr"],"kind":"struct"},"24:89:19612":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"17:11163:15584":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"32:5521:21099":{"crate_id":32,"path":["linux_raw_sys","general","socket_state"],"kind":"enum"},"30:9252:12519":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:30011:8130":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"32:5739:12210":{"crate_id":32,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"6:5786:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:6547:2507":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"32:7318:21187":{"crate_id":32,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"17:13356:19422":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:9469:15391":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12006:18644":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"30:4846:12297":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2357:14253":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:42005:30315":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:41296:2493":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4501:12315":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13469:19434":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"31:4024:37783":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdTimerFlags"],"kind":"struct"},"16:5346:15171":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"30:4564:12285":{"crate_id":30,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"30:5783:12342":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:5772:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:42943:7781":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:4313:7884":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:1983:2158":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6571:9784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:9311:7937":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"32:7356:13006":{"crate_id":32,"path":["linux_raw_sys","general","msghdr"],"kind":"struct"},"30:7282:13022":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6307:15201":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"32:5634:8909":{"crate_id":32,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"32:6614:21152":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"30:1802:9823":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:5557:15172":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"32:7387:9837":{"crate_id":32,"path":["linux_raw_sys","general","mmsghdr"],"kind":"struct"},"1:11929:1474":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:12980:19394":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"32:6202:21134":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_6"],"kind":"enum"},"6:4379:12300":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:6702:8075":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:44293:2634":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"32:4975:21079":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:5951:13022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"30:5857:12346":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"30:712:8918":{"crate_id":30,"path":["libc","unix","sigval"],"kind":"struct"},"1:8827:2514":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"20:4347:19578":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"30:6961:12971":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10649:15573":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"32:5865:21121":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"30:5836:12345":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4261:12289":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:4367:7886":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"30:0:807":{"crate_id":30,"path":["libc"],"kind":"module"},"20:3992:19526":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"30:5706:12338":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:22274:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"28:0:1930":{"crate_id":28,"path":["is_terminal"],"kind":"module"},"2:39258:7913":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"32:5332:21098":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_3"],"kind":"enum"},"17:8389:15343":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:6764:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:2065:2065":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:2177:33711":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8431:2455":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8805:2118":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"32:4588:21055":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"17:12419:18671":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6474:15213":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10555:15534":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:13821:19457":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"32:5674:8911":{"crate_id":32,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"13:0:1782":{"crate_id":13,"path":["std_detect"],"kind":"module"},"29:37:19655":{"crate_id":29,"path":["io_lifetimes","portability","IntoFilelike"],"kind":"trait"},"27:347:19641":{"crate_id":27,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"17:11136:15583":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11090:15379":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13453:19432":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:11063:2268":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:9007:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:12467:2175":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:1687:9835":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"31:0:1932":{"crate_id":31,"path":["rustix"],"kind":"module"},"30:8181:13435":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:2157:33696":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:40525:2330":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"30:5922:12359":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:2548:26549":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"32:7338:21188":{"crate_id":32,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"29:0:1931":{"crate_id":29,"path":["io_lifetimes"],"kind":"module"},"1:7802:2257":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:43458:8307":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:386:15337":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:2104:33712":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"31:4162:37887":{"crate_id":31,"path":["rustix","process","id","Gid"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"30:5650:12335":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"20:3357:19547":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"16:6400:15209":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10428:15566":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"32:5696:8910":{"crate_id":32,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"1:3168:2310":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:7252:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8846:2512":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:8779:31030":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"30:5903:12357":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"20:59:1951":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"1:7627:2075":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:9118:2550":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"24:113:19619":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"32:5896:21124":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"11:2198:35824":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10052:15501":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:1847:1951":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:7478:15339":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:43370:8286":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:4929:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"30:5685:12337":{"crate_id":30,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5616:15175":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:4733:12337":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"30:5412:12323":{"crate_id":30,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:8292:7776":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:5527:8090":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4422:12306":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:4795:12345":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:9312:15362":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:1645:9831":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12607:18684":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6321:15202":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:10957:26655":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:599:37017":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:8953:15355":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:21699:31725":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4805:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:21357:2563":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:4636:2421":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"24:304:19617":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"16:6361:15206":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"20:4620:37475":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"17:10334:15360":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"20:3887:19536":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"6:4850:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:6904:15229":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:39942:31589":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"30:4905:12300":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"29:189:19670":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeView"],"kind":"struct"},"2:43103:7814":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:8180:15273":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13857:19459":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:154:14228":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:1714:8182":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:46597:7673":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:62:8535":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"31:4145:37888":{"crate_id":31,"path":["rustix","process","id","Uid"],"kind":"struct"},"2:21622:31654":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:31759:2477":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:1592:2141":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13499:19437":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:1589:9827":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5741:13006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:3225:14282":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"20:4174:19551":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"17:8909:2289":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2808:8143":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:11100:2518":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:31808:8118":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"22:159:19588":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"20:4196:19580":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"1:4122:2388":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12550:18680":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:9268:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:7440:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:40744:2437":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"14:187:14188":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:9822:15429":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:2989:2172":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"32:6325:21137":{"crate_id":32,"path":["linux_raw_sys","general","tcp_zerocopy_receive"],"kind":"struct"},"1:2216:2237":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"20:1180:19540":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"31:3873:37898":{"crate_id":31,"path":["rustix","backend","time","types","ClockId"],"kind":"enum"},"1:6183:2508":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:5779:15184":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"29:28:19650":{"crate_id":29,"path":["io_lifetimes","portability","AsSocketlike"],"kind":"trait"},"2:2792:2552":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9488:15406":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:9322:36989":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11446:18135":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"30:6721:12942":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12293:18662":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"20:3274:1946":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"30:7143:13015":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:8606:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:6521:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"32:7117:21177":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update"],"kind":"struct"},"6:4618:12323":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5843:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:11577:7775":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:2612:2302":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:4721:2104":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:8168:2290":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:46687:7679":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:2796:2554":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:499:8910":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"30:5955:12362":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:40936:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"31:5075:37790":{"crate_id":31,"path":["rustix","process","prctl","PointerAuthenticationKeys"],"kind":"struct"},"9:388:14051":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4649:12326":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:7635:15253":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:7000:33334":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:3300:14283":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:10681:15574":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4656:12327":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:11572:7777":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"30:5725:12339":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:45114:31693":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"11:2053:2133":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:46634:7676":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:2370:2251":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11800:18634":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"30:6893:13007":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"30:604:8912":{"crate_id":30,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:42855:7797":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:41738:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"27:0:1929":{"crate_id":27,"path":["anstyle"],"kind":"module"},"27:182:19635":{"crate_id":27,"path":["anstyle","color","Color"],"kind":"enum"},"1:8928:29289":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"31:4725:37806":{"crate_id":31,"path":["rustix","process","prctl","MachineCheckMemoryCorruptionKillPolicy"],"kind":"enum"},"30:9234:12515":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:3977:31632":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5800:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7478:15242":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:42205:31325":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7596:15251":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:0:1787":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"30:7973:13431":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:3946:19529":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"6:4962:12362":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"32:6043:21129":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_window"],"kind":"struct"},"2:22010:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:43086:7813":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"18:564:19504":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:3117:34862":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"20:3584:1944":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"9:325:14105":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:11120:7784":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"30:5094:12310":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:540:8914":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13367:19423":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:1583:9826":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:4037:14462":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:11813:15528":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11012:2474":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43446:2555":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:6372:34722":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"32:4467:21049":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"32:7261:21186":{"crate_id":32,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"17:9933:15446":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:9577:15404":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:20435:32292":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:1138:2136":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11355:18129":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13082:19401":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:20730:2565":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:7527:26661":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:4818:14907":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:10426:2311":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:8360:15342":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12019:18645":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:5921:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:50300:31633":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:5917:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13879:19461":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"20:3657:37357":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"32:5860:21120":{"crate_id":32,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"30:621:8913":{"crate_id":30,"path":["libc","unix","hostent"],"kind":"struct"},"1:1568:2120":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:4596:14829":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:962:2132":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:3979:2119":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:11623:7804":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:3515:2118":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"30:5594:12332":{"crate_id":30,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:7149:2216":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:55:14218":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:11832:15527":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4457:12310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"11:810:2125":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"20:3853:19539":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"2:2804:8141":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"30:4581:12286":{"crate_id":30,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11502:18139":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8994:15235":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:8769:2474":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:9628:15396":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:8358:2453":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"32:4996:21081":{"crate_id":32,"path":["linux_raw_sys","general","group_req"],"kind":"struct"},"16:7557:15249":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:41686:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:420:14225":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:9048:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:2893:7696":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:4400:14777":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"11:1534:14173":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"30:5763:12341":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:2786:14271":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10885:15370":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"30:5633:12334":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7437:15239":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:8683:15325":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:42478:7746":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:45272:2625":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:4687:12331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13791:19454":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"32:5805:21114":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"2:2830:8146":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10823:15367":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:7446:12513":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:7475:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"30:5225:12316":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"32:6950:21170":{"crate_id":32,"path":["linux_raw_sys","general","io_sqring_offsets"],"kind":"struct"},"17:10936:15373":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:3177:7872":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:3989:31651":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:2594:14263":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:14:1904":{"crate_id":2,"path":["core","write"],"kind":"macro"},"11:1628:35830":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"31:3846:14089":{"crate_id":31,"path":["rustix","backend","termios","types","Action"],"kind":"enum"},"30:2136:2380":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10429:2307":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:5561:2508":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:8823:15353":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:0:1792":{"crate_id":17,"path":["object"],"kind":"module"},"30:745:8920":{"crate_id":30,"path":["libc","unix","tms"],"kind":"struct"},"32:4949:9818":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq"],"kind":"struct"},"17:11532:18141":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:621:34803":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:4789:14902":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"20:4296:37034":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"14:221:14190":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"20:3772:2069":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"6:4841:12349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:25618:2342":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10721:15541":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"30:5433:12324":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:5834:2275":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12307:18663":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:8170:15272":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:6404:2505":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"31:4868:37784":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureControl"],"kind":"struct"},"2:30575:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:2694:14267":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12224:18658":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:11240:22789":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6132:15194":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"20:4007:36179":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"2:4387:2078":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11930:1475":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10679:23191":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:4787:12344":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2131:581":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:5167:7737":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10416:15565":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:7953:29255":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4334:12295":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12178:18656":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"24:290:19616":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"31:438:7884":{"crate_id":31,"path":["rustix","backend","io","epoll","Ref"],"kind":"struct"},"17:13053:19399":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:9826:15416":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:644:37010":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:4969:14938":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"32:5104:21089":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_2"],"kind":"enum"},"17:10670:15564":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:6719:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11859:23282":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"32:5888:21123":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"29:147:19665":{"crate_id":29,"path":["io_lifetimes","raw","FromRawFilelike"],"kind":"trait"},"16:5305:15154":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11177:2480":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:46672:7678":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:2864:8154":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9108:36990":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:39964:2317":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:815:2128":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:4510:14815":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:6368:2498":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:10283:15485":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:10844:2469":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"23:153:19594":{"crate_id":23,"path":["anstream","lockable","Lockable"],"kind":"trait"},"1:7590:2090":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:39612:8101":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:42627:7786":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13376:19424":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:0:1783":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:7467:15241":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10080:15523":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"30:5938:12360":{"crate_id":30,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46608:7674":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"31:4360:37782":{"crate_id":31,"path":["rustix","process","prctl","UnalignedAccessControl"],"kind":"struct"},"27:127:37659":{"crate_id":27,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"1:10637:2423":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:5123:34722":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:3930:2356":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"30:5914:12358":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:4904:14921":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7029:36251":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:535:36249":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:4624:14833":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:40803:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:2934:1991":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10104:15480":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2905:14276":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"31:5210:37788":{"crate_id":31,"path":["rustix","process","wait","WaitOptions"],"kind":"struct"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:38760:7706":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:8611:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"20:4613:2465":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"1:7693:2200":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4539:12317":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"31:4451:37781":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointEmulationControl"],"kind":"struct"},"6:1514:9818":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:1083:2136":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:44445:2627":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"32:6389:8916":{"crate_id":32,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"6:7521:14005":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11490:24333":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:42530:7761":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4812:989":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:5065:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"32:5814:21115":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:13041:19398":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"30:7021:13011":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:659:2120":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:6970:33704":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:8448:2456":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:21355:2369":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"32:5551:8915":{"crate_id":32,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"16:2337:14252":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"20:4390:19572":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"1:929:2127":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"23:231:19603":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"6:6757:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"29:182:19668":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeViewType"],"kind":"trait"},"16:5402:14217":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:3505:2123":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"7:79:14028":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"32:176:19733":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenUnionField"],"kind":"struct"},"2:1802:2161":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:10686:7759":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:2502:14259":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:20380:32226":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4369:12299":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:4571:24370":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:578:8920":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10589:15571":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"20:3808:1945":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"17:9917:15468":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13249:19413":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1710:9838":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:43641:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:7463:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:534:2070":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:13257:19414":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:9748:15360":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:7244:36324":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"30:7074:13013":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"32:5851:21119":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"5:3907:2123":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:9276:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"32:6343:13008":{"crate_id":32,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"31:2530:37959":{"crate_id":31,"path":["rustix","process","uname","Uname"],"kind":"struct"},"32:6711:21162":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_2"],"kind":"union"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:30099:31806":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:2841:8149":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11913:1036":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:9723:2369":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"24:0:1926":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"20:0:1675":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"32:4635:21060":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"1:1571:2123":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:1066:34809":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:803:2144":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"31:4847:37803":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeature"],"kind":"enum"},"2:9968:7771":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:42504:7744":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"20:4492:37271":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"20:3895:19537":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"29:47:19653":{"crate_id":29,"path":["io_lifetimes","portability","FromFilelike"],"kind":"trait"},"1:11931:1472":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"30:8035:2424":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7683:15255":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"20:4437:19571":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:9546:30308":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10798:15366":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13219:19410":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11721:18631":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"32:4651:21062":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"6:4520:12316":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12563:18681":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"32:6035:21128":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_opt"],"kind":"struct"},"11:777:14167":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"32:5712:13816":{"crate_id":32,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"2:4742:32001":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:3146:2139":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10615:15562":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:7670:2102":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:9055:7712":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41987:2454":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"30:1913:9828":{"crate_id":30,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40468:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"29:56:19654":{"crate_id":29,"path":["io_lifetimes","portability","FromSocketlike"],"kind":"trait"},"32:7097:21175":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_files_update"],"kind":"struct"},"1:4851:2420":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"10:44:14158":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"19:0:1018":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"29:132:19662":{"crate_id":29,"path":["io_lifetimes","raw","AsRawSocketlike"],"kind":"trait"},"32:6590:21149":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:43628:2640":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:39201:2094":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:13426:19429":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8891:2516":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:9059:7720":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:5725:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11879:18637":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:39461:2234":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:7546:26547":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"30:7002:13010":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:2069:2134":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:5104:14977":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:3133:29893":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:7870:2301":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:4024:7700":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:44339:2614":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:7086:2117":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"32:5825:21116":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"5:6622:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"31:3476:19682":{"crate_id":31,"path":["rustix","backend","io","types","EventfdFlags"],"kind":"struct"},"6:1534:9821":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:1030:34808":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:950:2130":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:5554:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:5684:2494":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:9178:15359":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"32:5788:21112":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"17:10743:15364":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11928:1473":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:5019:29252":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13564:19440":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:2454:2369":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13678:19447":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:2075:33698":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"27:173:37658":{"crate_id":27,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"1:8236:2391":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:8951:23038":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:44315:2622":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10026:15521":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3878:2352":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:2835:8148":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6254:15199":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"20:1653:127":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"17:9498:15405":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4353:12297":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6351:15205":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:7021:2120":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:4568:14825":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:48991:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"32:6373:21138":{"crate_id":32,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"30:6763:13001":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"30:4884:12299":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:1620:8066":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:30603:7925":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11471:18137":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:9265:15361":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:6291:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"32:4988:21080":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:39520:2287":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:4546:19553":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"2:43620:2639":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:11778:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13385:19425":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:3130:29889":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:10058:27231":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:10831:2201":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:6717:14195":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:2426:14256":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"23:434:19596":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"2:44583:2592":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"32:6623:21153":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"20:3703:19522":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"30:1987:9831":{"crate_id":30,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"32:4742:21067":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"16:7042:35969":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7572:36123":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:21586:31083":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4988:12364":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11891:18638":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:834:2130":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4757:14894":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11861:18636":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"15:219:14203":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:1788:2182":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8914:2497":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:40862:2120":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11653:18150":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:29971:2153":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11011:15324":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:6506:15215":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:10840:15368":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:8155:2288":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:3112:2140":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:9070:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:2865:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8247:2383":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:4445:14798":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:4236:7877":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13433:19430":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:39305:2094":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"31:4791:37933":{"crate_id":31,"path":["rustix","process","prctl","PrctlMmMap"],"kind":"struct"},"17:10142:15525":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"32:4796:21072":{"crate_id":32,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"30:5572:12331":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"30:6871:13006":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:39228:31664":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10491:15537":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:46623:7675":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:4069:2275":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"31:356:37922":{"crate_id":31,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"6:4757:12340":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"31:2990:19697":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFd"],"kind":"struct"},"17:11785:18633":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7195:13815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:39348:7910":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:50279:31629":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:13240:19412":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:6743:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4882:12354":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:6954:2123":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:9340:15363":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4476:12312":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:4092:7889":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"30:5394:2351":{"crate_id":30,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"29:69:19648":{"crate_id":29,"path":["io_lifetimes","traits","FromFd"],"kind":"trait"},"1:9008:23027":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:7543:15248":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3160:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"29:152:19666":{"crate_id":29,"path":["io_lifetimes","raw","FromRawSocketlike"],"kind":"trait"},"17:10440:15567":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:9733:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:7218:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:39621:8110":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"30:4927:12301":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:21735:2346":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:5418:36229":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:567:8918":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"30:1887:9827":{"crate_id":30,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"31:2713:19712":{"crate_id":31,"path":["rustix","backend","io","epoll","EventFlags"],"kind":"struct"},"17:9534:15399":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:42429:7754":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"32:4615:21057":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"17:8490:15346":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:2358:2245":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:3030:14279":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"}},"external_crates":{"34":{"name":"strsim","html_root_url":null},"31":{"name":"rustix","html_root_url":null},"28":{"name":"is_terminal","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"linux_raw_sys","html_root_url":null},"29":{"name":"io_lifetimes","html_root_url":null},"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"anstyle_query","html_root_url":null},"30":{"name":"libc","html_root_url":null},"27":{"name":"anstyle","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}