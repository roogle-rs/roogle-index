{"root":"0:0:1719","crate_version":"4.3.11","includes_private":false,"index":{"2:12132:23617":{"id":"2:12132:23617","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11778:7877","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::split":"2:12126:23613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43576:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1719":{"id":"0:0:1719","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[120,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1709"],"is_stripped":false}}},"2:12093:23579":{"id":"2:12093:23579","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:23605":{"id":"2:12099:23605","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12100:23606"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:31254":{"id":"2:12104:31254","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12105:31259"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43832:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:19775":{"id":"2:12122:19775","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:33649":{"id":"2:12173:33649","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11803:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12185:33651":{"id":"2:12185:33651","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:31323":{"id":"2:12108:31323","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43850:7878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:25084":{"id":"5:5443:25084","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12199:24946"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:33647":{"id":"2:12171:33647","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:33654":{"id":"2:12194:33654","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11739:127","`FromStr`":"2:11738:2499"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11738:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11738:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076":{"id":"2:12076","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12077:816","2:12078:23560","2:12079:33630","2:12080:33631","2:12082:33632","2:12085:24912","2:12086:33633","2:12087:314","2:12088:23581","2:12089:23577","2:12091:23578","2:12093:23579","2:12095:23580","2:12097:33634","2:12098:33635","2:12099:23605","2:12100:23606","2:12101:31322","2:12102:31270","2:12103:22826","2:12104:31254","2:12105:31259","2:12106:25753","2:12107:33636","2:12108:31323","2:12109:23623","2:12112:23624","2:12115:23625","2:12118:19774","2:12122:19775","2:12126:23613","2:12129:23615","2:12132:23617","2:12135:33637","2:12138:33638","2:12141:23619","2:12144:23621","2:12147:33639","2:12150:33640","2:12153:1941","2:12156:33641","2:12159:33642","2:12162:33643","2:12165:33644","2:12167:33645","2:12169:33646","2:12171:33647","2:12172:33648","2:12173:33649","2:12176:33650","2:12179:22663","2:12182:23626","2:12185:33651","2:12188:33652","2:12191:33653","2:12194:33654","2:12196:24942","2:12197:24943","2:12198:24945","2:12199:24946","2:12200:24947","2:12201:33655","2:12203:2132","2:12204:33656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12144:23621":{"id":"2:12144:23621","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11945:418","str::splitn":"2:12141:23619","self::pattern":"2:11778:7877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43680:7864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:24942":{"id":"2:12196:24942","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:34309":{"id":"5:5432:34309","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:23624":{"id":"2:12112:23624","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:23580":{"id":"2:12095:23580","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5442:2355":{"id":"5:5442:2355","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:23581":{"id":"2:12088:23581","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11962:1507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:8221":{"id":"5:5426:8221","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:25085":{"id":"5:5444:25085","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12200:24947"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:33636":{"id":"2:12107:33636","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43822:7891","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:2132":{"id":"2:12203:2132","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:2132"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43866:2133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:33643":{"id":"2:12162:33643","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11778:7877","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::match_indices":"2:12159:33642"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43726:7893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:23619":{"id":"2:12141:23619","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877","str::rsplitn":"2:12144:23621"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43662:7866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1709":{"id":"0:3-20:0:1709","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1709","glob":true}}},"2:12118:19774":{"id":"2:12118:19774","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:33630":{"id":"2:12079:33630","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:25753":{"id":"2:12106:25753","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43812:2327","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:33642":{"id":"2:12159:33642","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11778:7877","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::rmatch_indices":"2:12162:33643"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43708:7892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:33645":{"id":"2:12167:33645","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:23626":{"id":"2:12182:23626","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:24946":{"id":"2:12199:24946","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:314":{"id":"2:12087:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12088:23581","`u8`":"1:11962:1507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:33635":{"id":"2:12098:33635","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11951:1404","crate::ops::IndexMut":"2:2984:2215","str::slice_unchecked":"2:12097:33634"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:1941":{"id":"2:12153:1941","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11778:7877","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::matches":"2:12153:1941"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43762:7894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:31259":{"id":"2:12105:31259","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12104:31254"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43841:7879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:816":{"id":"2:12077:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11945:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:33646":{"id":"2:12169:33646","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:23615":{"id":"2:12129:23615","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11601:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:31322":{"id":"2:12101:31322","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11945:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43528:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:33656":{"id":"2:12204:33656","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:33656"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43875:7889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12191:33653":{"id":"2:12191:33653","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:24945":{"id":"2:12198:24945","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12188:33652":{"id":"2:12188:33652","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:33648":{"id":"2:12172:33648","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:23625":{"id":"2:12115:23625","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:33640":{"id":"2:12150:33640","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:33641":{"id":"2:12156:33641","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11778:7877","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::matches":"2:12153:1941"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43780:7895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:31270":{"id":"2:12102:31270","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11945:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43534:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:34307":{"id":"5:5425:34307","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2034","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2034","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:24943":{"id":"2:12197:24943","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39628:24911","Self::is_ascii":"2:12196:24942"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39628:24911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:34307","5:5426:8221","5:5429:34308","5:5432:34309","5:5440:34310","5:5441:34311","5:5442:2355","5:5443:25084","5:5444:25085"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12147:33639":{"id":"2:12147:33639","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:23578":{"id":"2:12091:23578","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:33644":{"id":"2:12165:33644","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5441:34311":{"id":"5:5441:34311","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2034","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2034","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:34308":{"id":"5:5429:34308","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:33650":{"id":"2:12176:33650","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:33634":{"id":"2:12097:33634","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11951:1404","str::slice_mut_unchecked":"2:12098:33635","crate::ops::Index":"2:2980:2214"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:23623":{"id":"2:12109:23623","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:33655":{"id":"2:12201:33655","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:33655"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43857:7888","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:23613":{"id":"2:12126:23613","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11778:7877","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::split_whitespace":"2:12104:31254","str::rsplit":"2:12132:23617"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43558:2331","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:33632":{"id":"2:12082:33632","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12080:33631"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:33637":{"id":"2:12135:33637","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11778:7877","str::split":"2:12126:23613","prim@char":"1:11945:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12138:33638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43608:7897","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:22663":{"id":"2:12179:22663","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:7877"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:23577":{"id":"2:12089:23577","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:23560":{"id":"2:12078:23560","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:23606":{"id":"2:12100:23606","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12099:23605"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:22826":{"id":"2:12103:22826","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43544:2330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:24947":{"id":"2:12200:24947","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:24912":{"id":"2:12085:24912","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11345:7881"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:33631":{"id":"2:12080:33631","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:33638":{"id":"2:12138:33638","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11778:7877","str::split":"2:12126:23613","prim@char":"1:11945:418","str::split_terminator":"2:12135:33637"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43626:7896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:33633":{"id":"2:12086:33633","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5440:34310":{"id":"5:5440:34310","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"28:1507:19940":{"crate_id":28,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"6:5044:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13719:19694":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:1820:2202":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:40443:8196":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2799:8237":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:20669:32285":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7331:36555":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"28:2637:14252":{"crate_id":28,"path":["rustix","termios","types","Action"],"kind":"enum"},"6:4944:12513":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:41784:2158":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4984:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:43875:7889":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4459:2435":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:9977:15533":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11388:15541":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:7243:2256":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:43385:7843":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:44313:8397":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:5589:8184":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:39295:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:40145:8002":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:8999:15407":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:14380:19745":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:1931:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10199:15611":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:7626:2117":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:2956:7792":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:1911:10080":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:5281:7835":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:1270:2174":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:4724:15058":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12133:18434":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"20:3874:37422":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"2:21205:2305":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:44297:8383":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:1733:9917":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:1844:1990":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:7973:2344":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4469:12463":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:4531:2452":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:5807:15357":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"29:4013:20968":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"29:4776:21010":{"crate_id":29,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"2:44353:2594":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"30:11:2157":{"crate_id":30,"path":["bitflags","iter","Iter"],"kind":"struct"},"25:41:19914":{"crate_id":25,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"1:5716:2534":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:1924:2253":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:2931:2031":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:8956:22661":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:6619:7942":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:46917:2690":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"28:2664:37923":{"crate_id":28,"path":["rustix","pid","Pid"],"kind":"struct"},"9:426:14215":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:40524:8186":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"9:52:14232":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:7227:30878":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:47986:7775":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:5377:2506":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:8632:15512":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"20:3351:19837":{"crate_id":20,"path":["clap_builder","builder","styled_str","Styles"],"kind":"struct"},"1:8500:2496":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:11949:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:9734:15535":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:2364:2285":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"11:817:2169":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:1008:35176":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10161:15605":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7073:15406":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:1636:8160":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"14:165:14345":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6214:15369":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"29:3843:20953":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"17:10223:15609":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6724:15394":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:40452:8185":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:1572:2163":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:43336:7851":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"29:4629:21003":{"crate_id":29,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"1:8837:2553":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:7255:2477":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:892:2157":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11957:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4456:12461":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13303:19675":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:5704:15353":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12539:18932":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:1299:2175":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11034:15764":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:5277:7834":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:10448:2350":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:11963:1504":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"29:4276:13102":{"crate_id":29,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"2:43502:7890":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13854:19705":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:1681:9912":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5673:15351":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:1611:36065":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11832:18414":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10581:15697":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"30:25:22499":{"crate_id":30,"path":["bitflags","iter","IterNames"],"kind":"struct"},"5:2220:34723":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:2984:2215":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:20855:8263":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6470:15385":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"29:4021:20969":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"2:2757:2592":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:9225:7814":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:7231:8179":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5775:15356":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:5882:15359":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:47907:7770":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"23:290:19901":{"crate_id":23,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:7121:2159":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:7701:2177":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:11969:1132":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:46883:2641":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11669:15779":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:5933:2547":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12106:18432":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:4476:14978":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:9909:22858":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:11916:2143":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12769:18947":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:3168:2157":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13069:18967":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:10454:2348":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:7376:7938":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13639:19673":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:46413:31061":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:32139:8297":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:9821:15560":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:11416:15542":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"7:32:14184":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:2469:8024":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:9173:2254":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:638:2138":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:44535:2736":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10714:2298":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:5067:15137":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:8605:15492":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10249:15616":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10906:15683":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:5343:2504":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13757:19697":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:22006:30860":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"29:3674:20939":{"crate_id":29,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"1:9074:2557":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:530:36231":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:39420:7954":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5567:15345":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:7675:2141":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14007:19721":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12631:18939":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"29:4411:20989":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"17:11520:15547":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:7168:2155":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4374:12452":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:2032:2198":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"23:113:19904":{"crate_id":23,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2:3934:2316":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:9899:15578":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:45722:2661":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:11257:23533":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:2060:2174":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"29:3647:20937":{"crate_id":29,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"20:3719:19838":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"5:1423:2158":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12566:18934":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3956:2397":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"28:1076:19956":{"crate_id":28,"path":["rustix","termios","types","SpecialCodeIndex"],"kind":"struct"},"22:63:19899":{"crate_id":22,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"2:21675:2602":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"14:202:7918":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:22093:2386":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12254:18919":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6077:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:1408:2157":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:1594:2181":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:4135:2427":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:9561:15531":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10931:15749":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"22:423:37815":{"crate_id":22,"path":["anstream","auto","StreamInner"],"kind":"enum"},"1:1062:2173":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4018:2403":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:657:2159":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4764:12492":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:45947:2598":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:3792:19863":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"6:4716:12486":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"29:4132:9048":{"crate_id":29,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"17:12792:18948":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13914:19711":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4938:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:11803:7872":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4872:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:7474:15414":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4992:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:7256:2257":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"20:2927:37458":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"1:844:2157":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"29:4077:9002":{"crate_id":29,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"6:500:9001":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11329:15538":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:14:1944":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6598:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:4111:37532":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"1:5357:2505":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:41986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:2690:2026":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6841:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:40282:2273":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:6786:35202":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:44577:7788":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:46023:2668":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1595:9905":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:30439:30886":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"21:128:19872":{"crate_id":21,"path":["clap_lex","ParsedArg"],"kind":"struct"},"5:5948:2316":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:6872:15399":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:43857:7888":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:44305:8378":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:14403:19747":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:2215:2276":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:7631:15425":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10957:15762":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14054:19726":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4550:12473":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"28:2563:19963":{"crate_id":28,"path":["rustix","termios","types","SpecialCodes"],"kind":"struct"},"2:2468:2305":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:40888:8173":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"29:4142:12371":{"crate_id":29,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"1:10494:2114":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13707:19693":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:14395:19746":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:585:2131":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:42362:7816":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:40913:8175":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9032:15343":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"20:3327:2108":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"2:40344:8182":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"29:4454:20994":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"5:6468:35176":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:112:19871":{"crate_id":21,"path":["clap_lex","ArgCursor"],"kind":"struct"},"6:1638:9908":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6720:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"26:347:19926":{"crate_id":26,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"6:7278:13979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:4263:7973":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:4233:2157":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:2663:14434":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11542:15496":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40894:2358":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:2391:1841":{"crate_id":1,"path":["std","io"],"kind":"module"},"20:3471:19826":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"11:760:2163":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:4368:12451":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:5877:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10609:15719":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4483:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"29:4796:21012":{"crate_id":29,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"28:2354:19952":{"crate_id":28,"path":["rustix","termios","types","LocalModes"],"kind":"struct"},"16:4996:15114":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:7042:2162":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:35:2217":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"29:4753:21008":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"2:9215:7808":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"20:53:1992":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"2:39240:8249":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2962:7802":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:1568:2162":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:2293:14391":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:5874:8600":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:39193:7803":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:21060:2599":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:6571:15391":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:3810:14480":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:9879:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"28:1751:37918":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"16:8166:15444":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:1513:9896":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"29:4591:21001":{"crate_id":29,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"5:204:7806":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"20:4170:2504":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"30:132:22484":{"crate_id":30,"path":["bitflags","traits","BitFlags"],"kind":"trait"},"2:47665:2670":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:1545:9900":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8761:2512":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"20:3444:19824":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"6:1649:9909":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13029:18964":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4535:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:41438:2370":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:2352:14421":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:44590:31292":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"29:4534:21000":{"crate_id":29,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"1:8134:2304":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"30:51:22501":{"crate_id":30,"path":["bitflags","parser","AsDisplay"],"kind":"struct"},"16:7012:36191":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6763:15395":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:3186:15679":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2314:14419":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:2943:37500":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"28:1531:37918":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"1:4097:29316":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10361:15656":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:1501:14336":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"20:3199:37536":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"29:4483:20997":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"29:4069:9060":{"crate_id":29,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"2:48001:7776":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13513:19683":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11979:18423":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:599:37274":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:41716:8326":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"14:215:14353":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:5527:7941":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:699:19783":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:9990:15576":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3424:2301":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"20:3853:37421":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"2:11601:7868":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11905:18418":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:7584:15422":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:10974:30329":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:9840:15561":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:1121:2175":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:5775:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:4258:7972":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:2752:2590":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10544:15716":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:21563:31987":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:482:8998":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"29:4820:21015":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"1:8197:2376":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7553:15421":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13683:19691":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:1506:9895":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8986:27225":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:1773:2163":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:3638:2375":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:8938:27259":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"20:1659:24810":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"16:2689:14435":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:44190:7899":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:40465:8197":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:8904:33568":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:643:2139":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:45762:2673":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13803:19702":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10097:15608":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:9034:22824":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:10734:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:10253:15603":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:7708:2240":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"26:0:1968":{"crate_id":26,"path":["anstyle"],"kind":"module"},"6:5900:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:5471:2316":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:8178:2331":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:2715:14436":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:7968:27232":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13957:19715":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11945:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:42671:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4949:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5301:15323":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"30:67:22504":{"crate_id":30,"path":["bitflags","parser","ParseHex"],"kind":"trait"},"5:7180:2156":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:46493:2657":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"29:3665:20938":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"17:9850:15562":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:2046:2199":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"29:3867:12504":{"crate_id":29,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"1:9069:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"28:1976:37918":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"2:12374:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:1663:9910":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:6651:8181":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11045:15729":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"20:3862:37420":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"1:501:2104":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:10323:15660":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:7272:13978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8793:2514":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"29:3966:12489":{"crate_id":29,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"1:1565:2159":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:7433:15411":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"29:4029:20970":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"6:4518:12469":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3180:34704":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"20:4027:37452":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"31:0:1973":{"crate_id":31,"path":["anstyle_query"],"kind":"module"},"18:644:37262":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:7696:2176":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:1690:9913":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8113:2359":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:2589:14431":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:10310:7866":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8185:2327":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:9442:37224":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:10051:2158":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:5522:2509":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"29:3834:20952":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"29:4243:20982":{"crate_id":29,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"20:66:1995":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"29:4760:21009":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"6:6705:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:43964:7908":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"29:4238:20981":{"crate_id":29,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"22:319:19902":{"crate_id":22,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"2:40865:8171":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2846:8246":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:7839:2295":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"20:3824:19864":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"13:226:36087":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9614:37233":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:261:37229":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43112:7844":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:47727:2691":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:7062:34708":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:2850:8247":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:43812:2327":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:21930:30849":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:10724:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:2128:2104":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4428:12458":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:4032:14630":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:8841:15518":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"20:4049:37525":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"2:5383:2316":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:7052:2186":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:46139:2628":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:40432:8204":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:40353:8183":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:43285:32206":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11623:15551":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:30381:30873":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4824:12500":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:532:9004":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10458:15664":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:1517:14337":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:1135:35038":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"20:3207:37531":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"29:4803:21013":{"crate_id":29,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"17:11955:18421":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:43411:7841":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:10027:2157":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"29:4212:20978":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1:5787:2543":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:7250:8958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:6032:30474":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:9418:26167":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:12616:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4475:12464":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:9665:37252":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11967:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"20:3834:37424":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"2:4409:2118":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13427:19678":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:4740:12489":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:40192:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"20:62:1994":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"2:43558:2331":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:1895:2252":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"11:0:1828":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11956:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:42355:7808":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:11532:14377":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"20:3513:19821":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"6:7586:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:6502:15387":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:3083:2360":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"26:173:37894":{"crate_id":26,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"16:4928:15094":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:1783:2221":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4833:12501":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:8740:15515":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:2804:8241":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:9436:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:20622:31984":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:40879:2144":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:3948:2396":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:1080:2175":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"20:742:37629":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"20:3503:19817":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"5:3799:2163":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:43544:2330":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:39628:24911":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:10994:15735":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"20:3014:1985":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"2:42066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"21:28:2305":{"crate_id":21,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"29:4115:13979":{"crate_id":29,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"6:5051:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:5612:15347":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11568:15548":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"29:4380:9005":{"crate_id":29,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"2:21898:30869":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:4436:7982":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:5882:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:42369:7817":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"29:4037:9000":{"crate_id":29,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"23:304:19902":{"crate_id":23,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"5:4941:2316":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:4199:2429":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:11177:30488":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:47867:7766":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4963:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43108:31276":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:6108:2737":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"29:4420:20990":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"16:5639:15349":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:562:9008":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"23:89:19897":{"crate_id":23,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"1:3962:2398":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:2959:34610":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6028:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6008:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6303:15373":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"20:3099:19835":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"17:13971:19717":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:21454:2607":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:8779:2513":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:3779:19857":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"22:208:19891":{"crate_id":22,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"17:10110:15607":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:618:2135":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6015:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:6787:32247":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:21027:2605":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:3155:23380":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"21:5:2393":{"crate_id":21,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"10:44:14323":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:1184:15583":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:9866:15563":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:45793:2621":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:2795:8235":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:361:2129":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:7092:33619":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"23:255:1993":{"crate_id":23,"path":["anstyle_parse","Parser"],"kind":"struct"},"2:4045:7797":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:2842:8245":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8823:2556":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:47603:2636":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4616:12478":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:22453:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8943:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:7013:2195":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5890:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:3406:2302":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:7728:22593":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"15:288:14368":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:1561:2157":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:13456:19681":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"28:1336:37918":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"28:1137:37918":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"20:3496:19819":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"2:43528:7884":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:9655:15533":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"20:3179:37441":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"18:507:37262":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:2925:2029":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11144:15758":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:11200:2519":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"30:64:22503":{"crate_id":30,"path":["bitflags","parser","WriteHex"],"kind":"trait"},"11:403:36082":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"30:99:22483":{"crate_id":30,"path":["bitflags","traits","Flags"],"kind":"trait"},"16:2567:14430":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"25:0:1967":{"crate_id":25,"path":["colorchoice"],"kind":"module"},"6:6834:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:3934:2395":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:5590:15346":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:755:19785":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4506:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12502:18930":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:40031:2133":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4401:12455":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"29:4428:20991":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"16:2637:14433":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:42861:31266":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5015:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6692:15393":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13448:19680":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:888:2161":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:256:37255":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13435:19679":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5382:15342":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"29:4491:20998":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"18:636:37275":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:7505:12686":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:3175:2179":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10486:15666":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:4597:26773":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:11927:25674":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:47273:2658":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"11:2033:2172":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:4810:12498":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44484:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"20:3811:19865":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"1:9413:2297":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12815:18949":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:10684:27439":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:4536:14990":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8265:2377":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12921:18957":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:8165:2329":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:22585:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:953:2170":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:41527:2381":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:39359:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:667:2165":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:2767:8231":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"26:282:19923":{"crate_id":26,"path":["anstyle","color","RgbColor"],"kind":"struct"},"6:1702:2420":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:1048:2172":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:10555:15717":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:47849:2697":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"29:4310:13171":{"crate_id":29,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"17:10654:15696":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:3078:2216":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:7539:30486":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"13:110:36134":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:40152:8003":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6156:13216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"29:4159:20972":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:917:2164":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4973:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:2743:7798":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:4698:15056":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12435:18927":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:1012:2174":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:11272:15536":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14329:19741":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8078:2299":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"32:72:22533":{"crate_id":32,"path":["strsim","StrSimError"],"kind":"enum"},"2:39315:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:7494:15416":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13778:19699":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44365:8398":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:2399:14423":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:9151:26743":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:14216:19734":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4800:12497":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:23164:2382":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:8736:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:6124:30467":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:515:19789":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6057:14390":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9966:15532":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12017:18426":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:582:8020":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"20:3067:19808":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"28:2183:37918":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"1:5393:2507":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:1075:15575":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"11:695:2166":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:11566:8390":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"20:0:1709":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"5:1439:2159":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"11:97:36079":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:2558:30481":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:40209:30878":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44085:7913":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:4811:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:8872:15519":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11600:15550":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10671:15721":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:6347:15377":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"7:79:14191":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:10568:15675":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4695:12484":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:47811:2676":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:43866:2133":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"29:3940:20961":{"crate_id":29,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"32:32:22519":{"crate_id":32,"path":["strsim","StringWrapper"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"20:1681:128":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"17:11371:15540":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13557:19685":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:44136:7915":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:857:2158":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:1520:2197":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11767:18411":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11696:15780":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"29:4463:20995":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"1:11242:22825":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11642:15552":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3996:2399":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:9064:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:7463:14139":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:46215:2689":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:1557:9901":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5994:15364":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:41589:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:4781:12494":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:10170:2518":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:1115:34591":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:7529:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:6018:15365":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:7724:2241":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:1746:31263":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:23:14252":{"crate_id":24,"path":["utf8parse","types","Action"],"kind":"enum"},"2:43822:7891":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:12994:18962":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"22:434:19881":{"crate_id":22,"path":["anstream","strip","StripStream"],"kind":"struct"},"1:8191:2377":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:11331:8342":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"20:3670:2344":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"6:1603:9906":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"29:3957:20963":{"crate_id":29,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"6:6820:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8831:2159":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:2762:8232":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"20:3639:19849":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"20:3886:37417":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"29:3788:20947":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"17:13732:19695":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:80:19761":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:47067:2624":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:44122:7914":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7739:15430":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"28:1113:19941":{"crate_id":28,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"6:4524:12470":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5863:13131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:41826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:9223:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:42693:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:653:9060":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:12361:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"29:4735:21007":{"crate_id":29,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"2:41674:2477":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:626:33574":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4862:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:9406:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"29:4446:20993":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"17:8899:15520":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11127:15546":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:5858:2531":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:1845:2179":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13574:19674":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12905:18956":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:10499:15667":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"23:192:14252":{"crate_id":23,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"2:41504:30831":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:41906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:6355:27231":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:30120:2384":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:676:2140":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"22:245:19889":{"crate_id":22,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"2:45823:2627":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:44293:8385":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:43345:7850":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"22:402:19882":{"crate_id":22,"path":["anstream","buffer","Buffer"],"kind":"struct"},"20:3048:1986":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"6:6573:9853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:10854:2241":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:43662:7866":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:40372:8190":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10377:15634":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"20:4123:8193":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"2:2783:2591":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8122:2300":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:11425:2380":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11952:1488":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:5987:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:12424:18926":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"9:330:14269":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:671:19780":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"11:399:36081":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:7622:15424":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:11340:26168":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:6789:15396":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"27:0:1969":{"crate_id":27,"path":["is_terminal"],"kind":"module"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:5843:15358":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10520:15669":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"11:1838:2178":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2962:14446":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:11849:7901":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:40484:8199":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:1071:2174":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:30943:8020":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:46647:2675":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:11888:18417":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10266:15602":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"24:0:1966":{"crate_id":24,"path":["utf8parse"],"kind":"module"},"1:922:2165":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:3463:2254":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:3488:2325":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"20:3236:2108":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"17:8542:15494":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:44058:7912":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:9059:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:595:9013":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:3647:2159":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:7285:29963":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:3233:7801":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:21126:2604":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:10837:7856":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4650:12481":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10080:15622":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:14359:19744":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12646:18940":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:10444:15628":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:30915:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6232:15370":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5074:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12952:18959":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:6935:22829":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:1852:2180":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:43364:7852":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5058:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:10471:15665":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:32226:8212":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12552:18933":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:14350:19743":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10945:15761":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"14:160:14344":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:5068:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:10032:26180":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:2963:34609":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:9129:27242":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:13673:19690":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:22717:2388":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"20:3731:19839":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"2:11345:7881":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:49869:2617":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:4926:2469":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:22486:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13332:19676":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:47525:2664":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:41398:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:11059:27022":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:8252:15447":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:42878:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:42853:8033":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13795:19701":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"9:357:14229":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"20:4117:37324":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"6:554:9007":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:4113:7984":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13043:18965":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13604:19688":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12346:15724":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11275:27359":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:6644:27231":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"29:4571:10023":{"crate_id":29,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"29:3775:20946":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"20:1640:19850":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"17:10280:15657":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11960:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:21981:31256":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:22420:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"29:4251:9917":{"crate_id":29,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"1:11965:1506":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:9875:15588":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"22:301:19887":{"crate_id":22,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"1:10013:2232":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:40159:8004":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"29:4174:20974":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"6:568:9009":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7693:15428":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:21459:2615":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:8239:2372":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:9227:7815":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:11738:2499":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7568:36443":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8885:2552":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:749:2162":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:5940:15361":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5920:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:96:19762":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13937:19713":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:14417:19748":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:6744:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11967:18422":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:793:2164":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:1569:9902":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:14189:19731":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13787:19700":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"29:3926:20960":{"crate_id":29,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"16:5414:36222":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:44527:2735":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:10196:7869":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:6128:15366":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:20805:2606":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:7817:2297":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:2773:8234":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6900:15401":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8869:2554":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:47948:7773":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:10702:25715":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:48063:7778":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6022:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:3580:14453":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:554:2111":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:47896:7769":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9777:15558":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"29:4638:21004":{"crate_id":29,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"2:44285:8382":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:42226:2532":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6289:15372":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"29:3915:20959":{"crate_id":29,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"22:417:19878":{"crate_id":22,"path":["anstream","auto","AutoStream"],"kind":"struct"},"1:4127:2426":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:40088:8007":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:43708:7892":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"11:285:36076":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13882:19708":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:8021:15436":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4587:12476":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:30367:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:11269:27438":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6815:15397":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:9952:15570":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2855:26177":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:4425:35180":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"20:3746:19855":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"11:630:2157":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:7540:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"20:3895:37418":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"29:4324:14139":{"crate_id":29,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"21:98:19870":{"crate_id":21,"path":["clap_lex","RawArgs"],"kind":"struct"},"1:10679:26759":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:9913:15573":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4678:2392":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:39441:32204":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:11778:7877":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13862:19706":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:7294:7919":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4496:12467":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:10879:25730":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:123:8681":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7592:15423":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:40400:31238":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:42890:2493":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"18:590:31296":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:3519:15702":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4685:12483":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:1973:15610":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:481:19787":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:43762:7894":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:44332:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:2105:15645":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:10754:27018":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:4389:7981":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5829:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:7289:15408":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"20:3429:19818":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"1:10980:30466":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"29:3815:20949":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"20:50:1991":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"5:7213:2258":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"29:4185:20975":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"16:6915:36216":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13923:19712":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:43534:7883":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:635:2137":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5025:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"20:3241:19809":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"6:4895:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10845:15678":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:89:1993":{"crate_id":24,"path":["utf8parse","Parser"],"kind":"struct"},"5:779:2182":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10123:15578":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:8315:2481":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:1500:9894":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10430:15663":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12851:18952":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:5990:8205":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:10269:7863":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6864:36401":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:45845:2633":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:8316:2480":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"2:20803:2305":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:1520:9897":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:4787:12495":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"20:3844:37423":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"20:3590:19848":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"16:55:14388":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"11:836:2170":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:7488:15511":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:8909:31779":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4328:12449":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11199:15760":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:4702:2409":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:4119:2425":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:6688:10021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4006:2400":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"20:3556:19831":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"2:1755:8274":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:43993:7910":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12982:18961":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"29:4053:12451":{"crate_id":29,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"2:22684:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:6780:2595":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"29:3656:19969":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"17:13830:19703":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:9887:15582":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:798:2167":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:7657:2191":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6977:15404":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"20:4177:37434":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"6:5979:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"29:3691:20941":{"crate_id":29,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"1:7893:2198":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4606:12477":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:25974:2383":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:5013:27249":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9013:25718":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:959:2171":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:45592:2655":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9518:15530":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:32099:2516":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"29:4340:20984":{"crate_id":29,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"5:2967:34608":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:40475:8198":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:3564:22482":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:4148:2428":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:21106:2601":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:8368:2492":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:14341:19742":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"20:3332:19813":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"16:6939:15403":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:273:2034":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:44281:8380":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:22618:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"29:3983:20964":{"crate_id":29,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"18:652:37262":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12605:18937":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:44548:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:4436:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:2138:34712":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"14:0:1830":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"18:564:19792":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43726:7893":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:47922:7771":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"15:394:14380":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"29:4099:9001":{"crate_id":29,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"17:9016:15342":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2691:7799":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"20:4009:19858":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"2:44309:8379":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13847:19704":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10451:2352":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:4441:14967":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:6316:35176":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6671:10023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:11726:15781":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"15:306:14369":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:5967:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:2957:34606":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:30311:2193":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12186:18438":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:7463:15413":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:7539:15420":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6323:15375":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:7305:7920":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"12:0:1829":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:1479:2164":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:21914:31324":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:3635:14454":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:47415:2630":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:6156:27276":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"29:3767:9914":{"crate_id":29,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"2:40058:30885":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10293:15623":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:2458:34592":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:11527:8391":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"29:4061:9010":{"crate_id":29,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"1:8251:2432":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"15:0:1831":{"crate_id":15,"path":["addr2line"],"kind":"module"},"20:3762:1987":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"17:12727:18945":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:5398:15343":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"22:170:2305":{"crate_id":22,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"2:21044:2305":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:8317:2479":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"9:0:1826":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:2481:2340":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:22552:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13055:18966":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:39255:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:8807:2515":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:2497:14427":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:9083:15498":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"14:31:14344":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:9112:2589":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:7523:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"18:491:37287":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:48024:7777":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"28:2147:19950":{"crate_id":28,"path":["rustix","termios","types","ControlModes"],"kind":"struct"},"1:10867:2508":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:6761:35181":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:21104:2305":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:42900:31253":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:10389:30470":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:11943:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:11194:27273":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12118:18433":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4395:12298":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"26:313:19924":{"crate_id":26,"path":["anstyle","effect","Effects"],"kind":"struct"},"17:13566:19686":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:8422:7873":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:43354:7854":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:6389:2159":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:2838:8244":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14301:19739":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"13:0:1823":{"crate_id":13,"path":["std_detect"],"kind":"module"},"29:4770:9009":{"crate_id":29,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"2:20667:32281":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3805:2380":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:2926:14445":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"29:3821:20950":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"11:1048:36080":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13548:19684":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:6834:8169":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:41725:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:9592:8353":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:7833:15434":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:4785:31343":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:9344:37251":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"29:3950:20962":{"crate_id":29,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"16:3777:14471":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12936:18958":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:6357:15378":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"18:660:19779":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:14197:19732":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:9216:1990":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:40654:2329":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:5062:2531":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:3395:15684":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"20:3217:184":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"2:2832:8243":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:10082:26341":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:2421:14424":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:44277:8377":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:4868:15082":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"20:3964:37545":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"2:9869:2305":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11924:18419":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8350:2473":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:4335:7979":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:1826:2162":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:40074:8005":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:10076:2331":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"20:3904:19866":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"1:7601:2305":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6171:13217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:47887:7768":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:5651:15350":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:7654:2188":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"14:187:14352":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"29:4356:9007":{"crate_id":29,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"2:42348:7807":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"29:4202:20977":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:3168:7967":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12659:18941":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13697:19692":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:40362:8189":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:6618:13596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:39448:7979":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:21966:30841":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"29:4267:13164":{"crate_id":29,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"1:867:2159":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12377:18923":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"29:4005:20967":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"6:6565:9048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13155:15549":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:4592:14998":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:43446:7861":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:2874:14443":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:8458:2495":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4638:12480":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:113:19763":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2748:8211":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"20:4036:27242":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"2:40178:8000":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12065:18429":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:21792:30730":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"29:4551:9853":{"crate_id":29,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"17:14037:19724":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:11550:8388":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6554:15390":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:3270:2348":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:6137:2739":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:9221:7817":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"28:2613:19955":{"crate_id":28,"path":["rustix","termios","types","QueueSelector"],"kind":"enum"},"2:12579:2737":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:11490:8389":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13981:19718":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:46729:2623":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10051:15568":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6332:15376":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:21210:2600":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:3181:32258":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12035:18427":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:1717:9916":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:10324:7864":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4770:12493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:6392:2144":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"26:360:19927":{"crate_id":26,"path":["anstyle","reset","Reset"],"kind":"struct"},"1:4868:2459":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13167:18973":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:6740:8188":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:1673:9911":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"29:4388:20986":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"22:163:19880":{"crate_id":22,"path":["anstream","raw","RawStream"],"kind":"trait"},"1:1846:2238":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:13096:18969":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:2348:2280":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:6726:13600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:62:8626":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:5008:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"29:4787:21011":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:43841:7879":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"20:3801:2161":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"20:3417:19822":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"2:42106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"29:4107:12514":{"crate_id":29,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"2:42186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:7558:30479":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:12412:18925":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:2825:14441":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:875:2184":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7799:15433":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:582:15511":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:40872:31255":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:12365:15723":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"29:4687:21006":{"crate_id":29,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"2:20941:2614":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:14015:19722":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:39337:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:4437:2434":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:6505:2540":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:8441:2494":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11109:15766":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:10417:15633":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12077:18430":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:6600:7941":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:819:2183":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4463:12462":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:46093:2622":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:1785:2222":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"20:3363:1984":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"2:45660:2626":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:41484:31315":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:11189:15549":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:3867:14513":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:20974:2609":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7061:36272":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"20:3914:19856":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"1:480:30472":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:10660:2463":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:4842:12502":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:4601:26777":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:400:15509":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:2821:8240":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6516:15388":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:9716:37231":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:7277:2033":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:2167:34725":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6607:13595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:547:9006":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18:574:37262":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:40322:2212":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"11:723:2160":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3272:2349":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:6850:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"29:4366:20985":{"crate_id":29,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"20:1185:19828":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"17:11056:15765":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10066:15596":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5586:2547":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:4568:12475":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:4073:2158":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4706:2413":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:42653:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5080:12528":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"29:4191:20976":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:2811:8238":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"20:4064:37323":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:11234:15772":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4748:12490":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12618:18938":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:587:9012":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:3058:14449":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:42869:8032":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12089:18431":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3904:2393":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"20:3533:37549":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"6:7558:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:3214:34695":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:40302:7841":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6372:15379":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:494:9000":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:22105:2389":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:1285:2173":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:5818:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:41776:2157":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:30351:8224":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:3025:14447":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:43780:7895":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6250:15371":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"29:3906:20958":{"crate_id":29,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"29:3997:20966":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"11:1858:2181":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11118:15767":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7313:36539":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"15:327:14373":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13368:19677":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11155:15768":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:1696:9914":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:20988:8263":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:10863:15532":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:7269:7829":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:7812:2296":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12826:18950":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11164:15759":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:7621:2115":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:9219:7816":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"30:141:38133":{"crate_id":30,"path":["bitflags","traits","ImplementedByBitFlagsMacro"],"kind":"trait"},"11:968:2172":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10858:26349":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"29:4259:20983":{"crate_id":29,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"29:4151:20971":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"16:6197:15368":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:1461:2160":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:40046:8006":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:157:19873":{"crate_id":21,"path":["clap_lex","ShortFlags"],"kind":"struct"},"30:90:22482":{"crate_id":30,"path":["bitflags","traits","Flag"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"32:0:1974":{"crate_id":32,"path":["strsim"],"kind":"module"},"2:4605:7994":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:2465:14426":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:12004:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:11500:26748":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:7546:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4887:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:11950:1374":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:2980:2214":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11098:15732":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"29:3682:20940":{"crate_id":29,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"17:11591:15549":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"29:4811:21014":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:2443:14425":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"29:3974:9006":{"crate_id":29,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"1:0:1396":{"crate_id":1,"path":["std"],"kind":"module"},"2:7329:2032":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8106:2357":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6658:15392":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:2373:14422":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:614:37267":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:4362:35180":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:5767:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:9675:30481":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:14150:19728":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6160:36200":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:39413:8251":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:7690:2142":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:10897:2515":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10689:2294":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13083:18968":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:45744:2667":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:1821:2232":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:2910:2194":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"28:2589:19953":{"crate_id":28,"path":["rustix","termios","types","OptionalActions"],"kind":"enum"},"17:13620:19689":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:11964:1505":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:1915:2203":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:1367:1993":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"1:8516:2497":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6484:15386":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"29:4500:20999":{"crate_id":29,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"29:3886:20956":{"crate_id":29,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"16:5689:15352":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8767:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6796:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:5462:2508":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:44474:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:6713:14362":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7407:15410":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10597:15718":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11911:29960":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12333:18922":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:3894:14516":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:9399:15528":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:4785:15071":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6531:36158":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:10241:1983":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:9428:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:6427:15382":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:5044:27249":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4323:14897":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13949:19714":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:39434:15446":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:1583:2179":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:8949:15522":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9409:37227":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:2162:8264":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:45614:2660":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:11363:2379":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:12423:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:7753:15431":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"11:844:2171":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:42616:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:4587:2398":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"30:0:1972":{"crate_id":30,"path":["bitflags"],"kind":"module"},"17:9296:15495":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:2803:14440":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"22:153:19879":{"crate_id":22,"path":["anstream","lockable","Lockable"],"kind":"trait"},"6:4389:12454":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:41665:2159":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"20:4087:19842":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"1:4877:2460":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:12318:18921":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:21673:2305":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:11047:2514":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"28:1701:19957":{"crate_id":28,"path":["rustix","termios","types","Termios"],"kind":"struct"},"2:47933:7772":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:5754:2162":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:2212:2275":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6711:13598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:1631:9907":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:5408:1983":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:3742:2135":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"16:6396:15381":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12966:18960":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:3158:23383":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:3580:2157":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5972:15363":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:736:2161":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"28:1713:19951":{"crate_id":28,"path":["rustix","termios","types","InputModes"],"kind":"struct"},"16:6239:36570":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:11959:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:10969:15763":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:3441:14452":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11104:23530":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12864:18953":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:22354:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:14315:19740":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:43374:7853":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:9048:15497":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"20:3212:37630":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"16:4564:14994":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12174:18437":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:21236:2610":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6589:8882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:7043:2526":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:42146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4664:12482":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:42026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4754:12491":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"26:182:19920":{"crate_id":26,"path":["anstyle","color","Color"],"kind":"enum"},"20:3138:1983":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"6:7609:14168":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:474:8997":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:7564:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"26:305:33566":{"crate_id":26,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"17:11264:15774":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12161:18436":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:8794:15517":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:9571:37225":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:3998:31210":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5737:15355":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"20:3258:19810":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"2:4380:7980":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:11498:15546":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:10744:2300":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"30:124:22481":{"crate_id":30,"path":["bitflags","traits","Bits"],"kind":"trait"},"2:1543:2316":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:4144:7985":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:46359:31060":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:1577:2178":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:3348:2358":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:9217:7807":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:3668:35176":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11958:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:4900:15090":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6540:15389":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:6432:2544":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:11493:27271":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"9:507:14216":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:5342:15340":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:8815:2157":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:8924:15521":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:3295:14451":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"20:1635:19847":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"11:1818:2157":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7855:15435":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:42588:31271":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:5849:13130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"26:127:37896":{"crate_id":26,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"16:2611:14432":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:40414:8194":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:6983:2357":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:3593:2158":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5028:15122":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:6175:15367":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:7763:15432":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:11123:2557":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:1590:9904":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"10:36:36059":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:3191:2350":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"29:4611:21002":{"crate_id":29,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"5:1500:2166":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:40110:7889":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:9208:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4848:12503":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6067:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:21845:30738":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:43456:7859":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:11454:15544":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:2855:8248":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:365:36060":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:11792:7875":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4341:12450":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11220:15771":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:7869:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12053:18428":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:7552:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:1099:35040":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:875:2160":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:8741:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:44010:7911":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6130:13215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:21229:2305":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"29:3728:20945":{"crate_id":29,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"2:42628:22482":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:7575:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:43680:7864":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5805:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:6629:7943":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:11074:15547":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:719:19776":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13964:19716":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13492:19682":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:41563:2373":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12671:18942":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:4620:15002":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:3201:2180":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:10338:7867":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:5593:2548":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:40514:8201":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10330:15631":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:40682:8203":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:40126:7888":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:39154:7966":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4413:12456":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:6865:30484":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:11791:18412":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:46312:31062":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:2687:34620":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:9213:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:3141:8250":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:41801:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:2164:15629":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:3378:2316":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"26:261:19922":{"crate_id":26,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"5:258:35176":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:12396:32626":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:8291:2462":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"29:3799:20948":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"11:2201:2155":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:6396:2537":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:41455:2371":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:20897:2613":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"8:0:1825":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6667:14363":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:43850:7878":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:0:1834":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11241:15773":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:8924:2536":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:5553:15344":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:5742:2535":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13140:18972":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:9318:15527":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:8659:15513":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:930:2167":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:901:2162":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:1831:2163":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:7665:15426":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:11944:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:11961:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"29:3989:20965":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"20:3423:19823":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"14:7:14344":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10351:15661":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:5525:2511":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10812:15681":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:3231:2352":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:3481:2303":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13109:18970":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:22027:30834":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"22:333:19892":{"crate_id":22,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"6:4723:12487":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13894:19709":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:936:2168":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6886:15400":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8949:2108":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"20:1114:19829":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"5:1489:2165":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:5720:15354":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:8152:15443":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:22519:2120":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:2519:14428":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:6893:26336":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"24:53:2493":{"crate_id":24,"path":["utf8parse","types","State"],"kind":"enum"},"6:4818:12499":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:21954:2385":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"11:986:2173":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8510:2157":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:7647:2114":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:1254:2172":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:42598:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"11:2174:33235":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:1527:9898":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:4392:2316":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:43576:7862":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:4010:31145":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"20:58:1990":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"28:303:37936":{"crate_id":28,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"5:4163:2316":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"26:382:19928":{"crate_id":26,"path":["anstyle","style","Style"],"kind":"struct"},"2:44301:8384":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:8068:15438":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"28:2393:37918":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"16:5959:15362":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4929:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4291:12446":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:7877:23381":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:4599:26775":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:3196:7800":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"0:0:1719":{"crate_id":0,"path":["clap"],"kind":"module"},"2:39271:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:2541:14429":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10633:15676":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:681:19781":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13591:19687":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12840:18951":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:7043:29317":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:6136:12363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:8273:2433":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:21989:30862":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:4662:2461":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"29:3897:20957":{"crate_id":29,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"2:2787:2593":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:5737:13102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:11951:1404":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8991:27239":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:21112:2603":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:506:9002":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:40331:2328":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:3189:37445":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"1:11968:1561":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:10158:7855":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6931:15402":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:8246:2431":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40921:8177":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"11:1027:14333":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:3513:2162":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:8176:15445":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11481:7784":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:8125:15441":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"30:177:22505":{"crate_id":30,"path":["bitflags","parser","ParseErrorKind"],"kind":"enum"},"2:2779:8233":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4010:2401":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:7852:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:3162:7968":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11404:2378":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"9:450:14213":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:4704:2412":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:46390:31120":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6850:15398":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2759:14438":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:21551:2596":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:43979:7909":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:40423:8195":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"9:393:14214":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:9658:31155":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:2737:14437":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"29:4221:20979":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:10870:7857":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10403:15662":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12878:18954":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:9361:32195":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:40133:8001":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:43942:7907":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:3233:2353":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:7698:33566":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:6044:35376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:7113:2159":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:6648:10038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:7362:15409":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:30545:30816":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:10258:26172":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:7099:15407":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:42908:31248":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6456:15384":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"11:805:2168":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:4783:2408":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:3734:2199":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11955:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:47876:7767":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"23:26:19905":{"crate_id":23,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:45882:2688":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"29:3613:20936":{"crate_id":29,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"1:11966:1503":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12303:18920":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:4151:37526":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"1:6561:2545":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:3315:2337":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4854:12504":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12354:15722":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"30:172:7918":{"crate_id":30,"path":["bitflags","parser","ParseError"],"kind":"struct"},"2:12671:2187":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:44157:7917":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:9604:15532":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11290:15537":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:2133:15604":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:911:2163":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:2580:2333":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:10231:7862":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"20:3273:19812":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"6:7295:13980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"28:0:1970":{"crate_id":28,"path":["rustix"],"kind":"module"},"17:14044:19725":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:45692:2656":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:3193:2351":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:119:36064":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4955:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4704:12485":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:39455:7963":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:44289:8381":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:40382:8191":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:3385:7950":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:9223:15526":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11948:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:6986:15405":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13125:18971":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:6211:2547":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:40037:7970":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"20:3925:19867":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"18:707:7875":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40118:2133":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:10119:7868":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:119:8680":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:3719:2198":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:14227:19735":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5994:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41657:2158":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"29:4397:20987":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"11:1103:14335":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11872:18416":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:11067:8397":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:7525:15419":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:1538:14338":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:9690:31164":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"29:4437:20992":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"1:3700:2379":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:13179:18974":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:2332:14420":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"28:1097:19939":{"crate_id":28,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"1:3472:29766":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:5233:35176":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:10038:15569":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:0:1963":{"crate_id":21,"path":["clap_lex"],"kind":"module"},"16:6317:15374":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"29:3747:13594":{"crate_id":29,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"17:13999:19720":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:20650:32286":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:9188:15525":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:4760:2414":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11753:15782":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12757:18946":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:40391:8192":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:2921:2028":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:44492:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3898:2394":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"29:3758:14167":{"crate_id":29,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"17:12592:18936":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5626:15348":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:3220:14450":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:11227:23218":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"29:3701:20942":{"crate_id":29,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"18:766:19778":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:624:37261":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:11086:2309":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:46169:2634":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:41421:2369":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:43608:7897":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:10883:15685":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:8210:15446":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:32:2331":{"crate_id":21,"path":["clap_lex","ext","Split"],"kind":"struct"},"16:8043:15437":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"20:3549:19814":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"16:8086:15439":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:4506:14984":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:45568:2619":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"11:644:2158":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11728:23556":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:44147:7916":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"20:3452:19825":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"1:7822:2294":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:9274:2330":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:12448:8028":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13749:19696":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"29:4508:2464":{"crate_id":29,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"1:530:2109":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:0:1833":{"crate_id":17,"path":["object"],"kind":"module"},"1:1589:2180":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:6868:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:2180:36071":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:9118:15523":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:727:19784":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:12568:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:9706:15534":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:7022:2159":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:35:1993":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"1:7499:26346":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"29:4404:20988":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:42644:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:7038:36273":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12579:18935":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:11970:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:736:19777":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:1669:35176":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4917:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2816:8239":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:1633:19846":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"2:2160:8263":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"20:3308:19807":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"18:521:19786":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:40098:8008":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10529:15715":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:8172:2330":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11250:15737":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:46853:2635":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:2168:36068":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"29:3857:20954":{"crate_id":29,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"17:10511:15668":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"28:1308:19942":{"crate_id":28,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"2:40500:8200":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13870:19707":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:41792:2159":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:7599:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6775:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:7076:2159":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:4965:15107":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"9:486:14212":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"29:4229:20980":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"29:4167:20973":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"2:2826:8242":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:2928:2030":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:8295:2464":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:44565:7790":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:11894:25710":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:9939:15571":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"14:40:18413":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:14177:19730":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"11:2194:36072":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:4001:2162":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:20853:31176":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:355:2128":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6575:2546":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:8856:2551":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:39381:2149":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:2350:2281":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"26:210:19921":{"crate_id":26,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"29:3877:20955":{"crate_id":29,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"17:504:15510":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"29:3720:20944":{"crate_id":29,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"6:4556:12474":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:7511:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:10346:2512":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:4841:15079":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:7661:8178":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:7829:2298":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11084:15730":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:5363:15341":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:8771:15516":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:2240:34743":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"22:366:37796":{"crate_id":22,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"20:2726:2157":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"2:43424:7842":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:3042:14448":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:4325:7978":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:1495:9893":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13016:18963":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"22:348:19893":{"crate_id":22,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"17:10799:15680":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:8105:15440":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"20:4103:19841":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"1:2620:2343":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"27:5:2337":{"crate_id":27,"path":["is_terminal","IsTerminal"],"kind":"trait"},"16:8138:15442":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:40197:2259":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8979:27264":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:3703:2378":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4279:2430":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:9093:2309":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:2544:2341":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:2376:2291":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:4420:12457":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:21238:2604":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12004:18425":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:45900:2694":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:43437:7858":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:5100:15146":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:1536:9899":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14163:19729":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:43516:7887":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4351:2424":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:4753:15063":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11467:15545":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:5531:8193":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:11035:2513":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:12479:18929":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11020:15733":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:8527:2498":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10786:15682":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:7360:2163":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:45548:2654":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5836:13171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10148:15606":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:2740:2027":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:40272:2274":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:5709:2533":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11354:15539":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:4031:35176":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"29:3828:20951":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"6:4304:12447":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7240:36567":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:4396:14946":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:1575:9903":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:44170:7898":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:46237:2695":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:45993:2662":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8155:2328":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:40225:8317":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:11798:7874":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:30345:7937":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:1470:2161":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:6270:2162":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:11946:1523":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"29:0:1971":{"crate_id":29,"path":["linux_raw_sys"],"kind":"module"},"11:1822:2159":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6438:15383":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:43832:7880":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:2907:1982":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"1:10963:19927":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:3744:14462":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"14:221:14354":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45638:2620":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:46807:2629":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:311:36074":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14282:19738":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:9471:8030":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:541:9005":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7679:15427":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11815:18413":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:4186:7830":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:41649:2157":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:5916:15360":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12891:18955":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10313:15659":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:7227:8180":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:947:2169":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46617:2669":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5955:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11992:18424":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4908:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:20609:8020":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13771:19698":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:9926:15572":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9475:15529":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"9:237:2493":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:41946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"20:3753:19868":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"2:46191:2640":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:4193:2316":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:41866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9806:15559":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:10981:15736":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11210:15770":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13659:15577":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"23:132:2493":{"crate_id":23,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"1:3152:29621":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:22079:2387":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11178:15769":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"20:4184:1989":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"6:1709:9915":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:2366:2286":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:20652:32283":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:7025:36278":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"18:531:19790":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6805:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11943:18420":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:5793:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13905:19710":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10390:15632":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:2900:14444":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12457:18928":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:7602:2130":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:609:37280":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:41575:2374":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:149:14396":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:10352:7865":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"22:0:1964":{"crate_id":22,"path":["anstream"],"kind":"module"},"5:3209:2178":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"20:4204:1988":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10339:15630":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:4665:2434":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:0:1832":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:2049:2173":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"20:3490:19816":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"1:8257:2423":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"9:177:14318":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:926:2166":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:8901:2555":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12148:18435":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:22043:30839":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:11783:7873":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:14102:19727":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:20637:31984":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:7885:2342":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"20:3410:19827":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"17:434:14393":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4543:12472":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:22072:31288":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:3327:2163":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:11962:1507":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"11:332:36062":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:47773:2642":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"23:0:1965":{"crate_id":23,"path":["anstyle_parse"],"kind":"module"},"2:20841:2608":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12711:18944":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4729:12488":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:538:19791":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"26:334:19925":{"crate_id":26,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2:41733:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"26:113:37895":{"crate_id":26,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"1:11525:14377":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"20:3520:19820":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"18:690:19782":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"22:286:19886":{"crate_id":22,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"17:9744:37223":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"29:3709:20943":{"crate_id":29,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"2:46045:2674":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:5793:36328":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:46571:2663":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:2857:14442":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10013:15574":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5799:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13991:19719":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6386:15380":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:40239:2260":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:11428:15543":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"7:0:1551":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11007:15734":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:7030:2185":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"29:4648:21005":{"crate_id":29,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"17:14205:19733":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"11:1068:14334":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"20:923:19811":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:10303:15658":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12691:18943":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4489:12466":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:4814:15076":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:46261:2696":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"28:1922:19954":{"crate_id":28,"path":["rustix","termios","types","OutputModes"],"kind":"struct"},"16:2781:14439":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12526:18931":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:41540:2372":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:8711:15514":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8202:2368":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:6036:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:40903:8174":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8418:2493":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:8997:15493":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"20:3994:19859":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"20:1366:19830":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"17:11852:18415":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:2186:36070":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:526:9003":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:0:1824":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:2791:8236":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4315:12448":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:1732:8275":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:41707:2478":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"23:96:19899":{"crate_id":23,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"29:3736:8882":{"crate_id":29,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"29:4474:20996":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"1:2219:2277":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:6625:2464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7505:15417":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:14236:19736":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10621:15720":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10175:15532":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:7963:27227":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:7517:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"22:382:2493":{"crate_id":22,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"16:7515:15418":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:4446:12460":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:45863:2639":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"29:4045:8999":{"crate_id":29,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"20:3083:19834":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"5:3235:2181":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4380:12453":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:43626:7896":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:11315:8340":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:6508:2541":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"10:0:1827":{"crate_id":10,"path":["adler"],"kind":"module"},"20:2748:2158":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"17:9485:37256":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:32135:22593":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:488:8999":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10832:15677":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"22:231:19888":{"crate_id":22,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:9476:8031":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:2705:2119":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:3373:7946":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:579:9011":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"22:262:19890":{"crate_id":22,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:43093:8370":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:7484:15415":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12394:18924":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:22651:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:40668:8202":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"20:3947:19860":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"2:22387:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:14026:19723":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:9528:37249":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"25:21:1988":{"crate_id":25,"path":["colorchoice","ColorChoice"],"kind":"enum"},"17:9153:15524":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:4794:12496":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:47971:7774":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4626:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:14259:19737":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:8317:2411":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:41640:8254":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7445:15412":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7707:15429":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:43466:7860":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:9183:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:573:9010":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"}},"external_crates":{"31":{"name":"anstyle_query","html_root_url":null},"28":{"name":"rustix","html_root_url":null},"25":{"name":"colorchoice","html_root_url":null},"22":{"name":"anstream","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"strsim","html_root_url":null},"29":{"name":"linux_raw_sys","html_root_url":null},"26":{"name":"anstyle","html_root_url":null},"23":{"name":"anstyle_parse","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/2.3.3/"},"27":{"name":"is_terminal","html_root_url":null},"24":{"name":"utf8parse","html_root_url":null},"21":{"name":"clap_lex","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}