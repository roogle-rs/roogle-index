{"root":"0:0:2456","crate_version":"4.5.11","includes_private":false,"index":{"2:13811:30688":{"id":"2:13811:30688","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13426:8759","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::match_indices":"2:13809:30687"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44760:8775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13735:30677":{"id":"2:13735:30677","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:22720":{"id":"2:13784:22720","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13215:8750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2456":{"id":"0:0:2456","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[102,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.11/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.74)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name);\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![forbid(unsafe_code)]","#![warn(missing_docs)]","#![warn(clippy::print_stderr)]","#![warn(clippy::print_stdout)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:2449"],"is_stripped":false}}},"2:13820:30692":{"id":"2:13820:30692","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:22729":{"id":"2:13801:22729","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:28418":{"id":"2:13767:28418","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44884:8760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13846:22321":{"id":"2:13846:22321","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762:22023":{"id":"2:13762:22023","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44578:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:22632":{"id":"2:13848:22632","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37735"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13756:22713":{"id":"2:13756:22713","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13755:22712","str::split_at_mut_checked":"2:13758:22717"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13789:30684":{"id":"2:13789:30684","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13426:8759","str::split":"2:13782:22718","prim@char":"1:12599:492","`DoubleEndedIterator`":"2:8387:134","str::rsplit_terminator":"2:13791:30685"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44642:8779","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13843:22628":{"id":"2:13843:22628","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40488:8905","Self::is_ascii":"2:13842:22325"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40488:8905","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13818:30691":{"id":"2:13818:30691","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13732":{"id":"2:13732","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13733:1027","2:13734:22259","2:13735:30677","2:13736:30678","2:13738:30679","2:13741:22624","2:13742:30680","2:13743:352","2:13744:22688","2:13745:22684","2:13747:22685","2:13749:22686","2:13751:22687","2:13753:30681","2:13754:30682","2:13755:22712","2:13756:22713","2:13757:22716","2:13758:22717","2:13760:28417","2:13761:28426","2:13762:22023","2:13763:28415","2:13764:28416","2:13765:27115","2:13766:30683","2:13767:28418","2:13768:22730","2:13770:22731","2:13772:22732","2:13775:21549","2:13778:21550","2:13782:22718","2:13784:22720","2:13786:22722","2:13789:30684","2:13791:30685","2:13794:22724","2:13796:22726","2:13799:22728","2:13801:22729","2:13804:2752","2:13806:30686","2:13809:30687","2:13811:30688","2:13814:30689","2:13816:30690","2:13818:30691","2:13820:30692","2:13821:30693","2:13822:30694","2:13825:30695","2:13827:21929","2:13829:22733","2:13832:30696","2:13835:30697","2:13837:30698","2:13840:30699","2:13842:22325","2:13843:22628","2:13844:22326","2:13845:22322","2:13846:22321","2:13847:22631","2:13848:22632","2:13849:22633","2:13850:30700","2:13852:2984","2:13853:30701","2:13854:23939"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13734:22259":{"id":"2:13734:22259","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13835:30697":{"id":"2:13835:30697","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:22322":{"id":"2:13845:22322","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702":{"id":"5:5702","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5703:31413","5:5704:9109","5:5706:31414","5:5708:31415","5:5716:31416","5:5717:31417","5:5718:3223","5:5719:22324","5:5720:22323"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5716:31416":{"id":"5:5716:31416","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:30683":{"id":"2:13766:30683","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44856:8773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13844:22326":{"id":"2:13844:22326","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:2752":{"id":"2:13804:2752","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13426:8759","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::rmatches":"2:13806:30686"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44796:8776","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13847:22631":{"id":"2:13847:22631","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37735"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5708:31415":{"id":"5:5708:31415","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:3223":{"id":"5:5718:3223","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:27115":{"id":"2:13765:27115","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44846:3194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13799:22728":{"id":"2:13799:22728","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13747:22685":{"id":"2:13747:22685","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13842:22325":{"id":"2:13842:22325","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13738:30679":{"id":"2:13738:30679","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13736:30678"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13782:22718":{"id":"2:13782:22718","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13426:8759","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::split_whitespace":"2:13763:28415","str::rsplit":"2:13786:22722"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44592:3198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13736:30678":{"id":"2:13736:30678","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13809:30687":{"id":"2:13809:30687","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13426:8759","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::rmatch_indices":"2:13811:30688"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44742:8774","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13825:30695":{"id":"2:13825:30695","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:28426":{"id":"2:13761:28426","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12599:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44568:8765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13741:22624":{"id":"2:13741:22624","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12948:8763"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:31413":{"id":"5:5703:31413","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2842","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2842","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:22324":{"id":"5:5719:22324","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13845:22322"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13760:28417":{"id":"2:13760:28417","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12599:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44562:8766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742:30680":{"id":"2:13742:30680","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5706:31414":{"id":"5:5706:31414","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13786:22722":{"id":"2:13786:22722","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13426:8759","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::split":"2:13782:22718"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44610:8744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13837:30698":{"id":"2:13837:30698","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13829:22733":{"id":"2:13829:22733","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:9109":{"id":"5:5704:9109","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13768:22730":{"id":"2:13768:22730","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:30685":{"id":"2:13791:30685","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13426:8759","str::split":"2:13782:22718","prim@char":"1:12599:492","str::split_terminator":"2:13789:30684"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44660:8778","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:22732":{"id":"2:13772:22732","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13796:22726":{"id":"2:13796:22726","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12599:492","str::splitn":"2:13794:22724","self::pattern":"2:13426:8759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44714:8746","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:31417":{"id":"5:5717:31417","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2842","`String`":"5:7759:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2842","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13816:30690":{"id":"2:13816:30690","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:23939":{"id":"2:13854:23939","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13782:22718","`str::find`":"2:13775:21549"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40167:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13849:22633":{"id":"2:13849:22633","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37735"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13753:30681":{"id":"2:13753:30681","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12605:1770","str::slice_mut_unchecked":"2:13754:30682","crate::ops::Index":"2:40135:3068"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:22688":{"id":"2:13744:22688","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12618:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13757:22716":{"id":"2:13757:22716","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13758:22717"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13806:30686":{"id":"2:13806:30686","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13426:8759","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::matches":"2:13804:2752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44814:8777","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13733:1027":{"id":"2:13733:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12599:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13827:21929":{"id":"2:13827:21929","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13758:22717":{"id":"2:13758:22717","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13757:22716"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:22731":{"id":"2:13770:22731","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:2449":{"id":"0:3-20:0:2449","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:2449","glob":true}}},"2:13745:22684":{"id":"2:13745:22684","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13751:22687":{"id":"2:13751:22687","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:22323":{"id":"5:5720:22323","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13846:22321"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13853:30701":{"id":"2:13853:30701","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5057:30701"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44909:8771","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:28416":{"id":"2:13764:28416","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13763:28415"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44875:8761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13852:2984":{"id":"2:13852:2984","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5060:2984"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44900:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13755:22712":{"id":"2:13755:22712","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13757:22716","str::split_at_mut":"2:13756:22713"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13814:30689":{"id":"2:13814:30689","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13821:30693":{"id":"2:13821:30693","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:21550":{"id":"2:13778:21550","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42594:203","prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13832:30696":{"id":"2:13832:30696","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13850:30700":{"id":"2:13850:30700","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5059:30700"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44891:8770","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:28415":{"id":"2:13763:28415","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13764:28416"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44866:8762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13822:30694":{"id":"2:13822:30694","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13454:8754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13749:22686":{"id":"2:13749:22686","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13794:22724":{"id":"2:13794:22724","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8759","str::rsplitn":"2:13796:22726"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44696:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13743:352":{"id":"2:13743:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13744:22688","`u8`":"1:12618:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:30682":{"id":"2:13754:30682","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12605:1770","crate::ops::IndexMut":"2:3621:3069","str::slice_unchecked":"2:13753:30681"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:30699":{"id":"2:13840:30699","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13386:149","`FromStr`":"2:13385:3130"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13385:3130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13385:3130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:21549":{"id":"2:13775:21549","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42594:203","prim@char":"1:12599:492","self::pattern":"2:13426:8759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:4025:3248":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"20:1371:2803":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"assoc_type"},"22:5:3270":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"2:43964:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:46828:3494":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10662:17022":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2618:15913":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"11:2374:3016":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:6792:16865":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:23396:28079":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:38897:9135":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:2504:15908":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:3073:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:36856:9131":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:6586:16856":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:47894:3558":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8555:3163":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:4063:3020":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:4481:28490":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:3858:3243":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:6109:16838":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:15548:21294":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:11023:22090":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"29:0:2786":{"crate_id":29,"path":["strsim"],"kind":"module"},"1:11554:3132":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:4318:26158":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8934:3373":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:1542:15820":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5292:21927":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1621:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:12626:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:10907:3169":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:42370:3238":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6459:14636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:23032:9151":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"5:3444:3021":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:4954:16487":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:16619:21514":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:46811:3488":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:881:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6096:16837":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6835:16868":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:7000:21671":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:8055:16916":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:43065:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:48030:8651":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:3050:21871":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:8264:16927":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:3957:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:45389:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6939:16876":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"20:3244:34352":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"17:13546:17053":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:41384:9078":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:7156:16886":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:22144:29937":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:11804:17124":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5241:13901":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:0:2639":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"11:102:32895":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:15409:21286":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:6617:14646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:4709:3314":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:44428:8736":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"20:4194:3383":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"2:44578:3197":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:1657:10811":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"27:6:3164":{"crate_id":27,"path":["is_terminal_polyfill","sealed","Sealed"],"kind":"trait"},"20:3999:34432":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"6:570:9907":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:7884:22152":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:14030:20029":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:22754:3164":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:45543:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:4842:16467":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:1871:3021":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"22:30:3198":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"17:12224:17184":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:12566:24715":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:4909:3313":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11074:33487":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:786:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:6996:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:686:3023":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:8175:15614":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"20:3129:21612":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"2:44997:8790":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:11138:22011":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:613:34168":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:45547:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:7055:16884":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15889:21319":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"20:3792:21653":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"17:12961:17290":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:906:3016":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:2858:15924":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:16592:20015":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:13360:17044":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:6631:14647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12233:17232":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:14345:17242":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12094:17147":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:12203:17182":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:10486:17017":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:14691:20547":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:9512:3422":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:15694:21302":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:8063:16917":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:7233:30297":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:16152:21338":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:6820:16867":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:11865:3369":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:7996:22280":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4120:3271":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:15732:21305":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:41171:3197":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"16:7956:16909":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:45413:3465":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:22614:3164":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:4758:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:6737:14660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:16262:21347":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:6534:3426":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42908:3016":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:8609:16937":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13756:20012":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:925:3039":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:491:34154":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:2484:15907":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:924:3018":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"11:2394:3017":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"20:3941:21651":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"2:22108:29929":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:14326:17243":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:23510:3164":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:7224:3466":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:11066:29133":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:12625:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:12174:8660":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:47050:3550":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:2040:3178":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:14139:20037":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:41181:3129":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:2728:3209":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:39:3070":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:2770:15920":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"23:472:34681":{"crate_id":23,"path":["anstream","adapter","wincon","ColorTarget"],"kind":"enum"},"2:38842:9134":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:5249:13902":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12647:17200":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:1580:3019":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4957:13873":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:7858:22150":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"6:8231:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:7653:3011":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:5911:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:2021:3103":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12850:17285":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12569:17194":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:9479:3356":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:1727:10818":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:2681:9152":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:42900:3015":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:10661:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:14083:20033":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"24:84:21688":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"17:12748:17253":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4970:13875":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:7534:3042":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:4196:3016":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:2230:9161":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:42840:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"6:5640:13948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:14996:20566":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4816:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:7317:15068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8055:3164":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10273:17010":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5007:13880":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13957:20024":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:12037:8749":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13817:20015":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:4467:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:43445:8697":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"9:0:2637":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:4178:3274":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7209:15847":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:12617:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:3785:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:13432:8755":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:6137:3408":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:8245:3156":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:3533:8680":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:16341:21353":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:46872:3555":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:9278:3430":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:7723:3113":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:11337:29137":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"16:2794:15921":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:16611:21513":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:23416:28082":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:4232:3278":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:10613:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:553:9904":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:6695:14655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:2746:15919":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:544:33019":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:2223:9163":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:2529:3152":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"16:6850:16870":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:45230:8780":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:41814:9065":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:42592:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:4900:16479":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:14572:20539":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:14916:20561":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:3086:30466":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:41331:28366":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:292:32897":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"18:481:21562":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8711:3340":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:5740:16832":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:42991:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:3708:3016":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:41581:3196":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:15350:21285":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:1244:31871":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10166:17007":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:4126:3270":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"14:213:15838":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5420:13923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"23:393:21693":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"6:6523:14640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:3366:2956":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"2:42554:3241":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:42719:2972":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:7788:24714":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:3308:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"9:49:15714":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:10595:3104":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:6187:9084":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:6543:14641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:11930:8744":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:8387:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:16809:20024":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:5925:3427":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:33564:9119":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"7:78:15674":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:41253:3066":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:7735:8885":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:2224:3139":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"2:3320:2970":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12885:17277":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:16364:21355":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12370:17193":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:45557:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"20:3861:21649":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"1:3315:26729":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:23108:3597":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5282:13906":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6203:16844":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:15089:20573":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8402:21830":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:44538:8772":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:722:30447":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:3815:29374":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5139:13892":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:46843:3500":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13944:20023":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:765:21553":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6727:14659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:45335:9269":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:6702:14656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:22619:3477":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:46644:3480":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:14298:20524":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:41159:3111":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:316:33082":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:3788:30224":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6419:16852":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:43703:28393":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"20:3448:21599":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"16:4871:16473":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11578:17083":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7804:33232":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"21:348:34602":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"5:6020:3020":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:10653:8689":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:44900:2985":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"14:7:15829":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:8319:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13348:17043":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:1551:10802":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12536:17197":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6711:16861":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:13177:9282":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:3564:3049":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11431:17068":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:15778:21310":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:2878:15925":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:16716:21521":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"22:110:21663":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"6:6422:14632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12318:17214":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8878:3371":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:2253:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:8011:16914":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:1610:3024":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:41102:8878":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:4896:13698":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:15314:21284":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13305:17041":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"20:2989:34319":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"17:14404:20529":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:8666:16940":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:44592:3198":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:41015:8770":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:3887:15941":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:4692:2967":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:10107:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:1711:10817":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:44179:28403":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"2:23324:28061":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13536:17052":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:1208:31870":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:44884:8760":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:5311:13910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"20:3096:2796":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"1:7442:22269":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:434:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:16001:21331":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6710:14657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:11951:17132":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:5186:13895":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:16661:21517":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:41432:9091":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"20:3528:21593":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"2:40055:8838":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:41345:9085":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:3586:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"23:420:21682":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"1:1651:3035":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"20:3224:34350":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"17:11756:17111":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:12618:1901":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:16172:21340":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13168:17332":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:41211:3115":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"20:3951:21641":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"17:16290:21349":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:10655:8688":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:7518:33175":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:2562:2652":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:11986:22111":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5604:13943":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12982:17292":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:8562:16934":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:15707:21303":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8682:3245":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:3075:8669":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:6066:3351":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:16705:21520":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:15556:21282":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:3802:8839":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:3456:3217":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"20:3680:21634":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"17:12868:17048":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:1589:10806":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:3854:3054":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:4182:15968":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"18:581:8900":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7421:16897":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:45351:9277":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"9:435:15695":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"20:3848:21650":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"17:16012:21332":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:9641:2800":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:10927:17029":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:12622:1877":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:43779:8687":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6610:14645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10777:17025":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:12571:2995":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"14:186:15837":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:14844:20556":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:41236:8721":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"11:1652:32916":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6694:16860":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:9469:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:10331:17012":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:9239:3015":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8585:3196":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:5304:17309":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:16799:20022":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:24126:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:15946:21325":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:893:3015":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:9829:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:5058:16545":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"11:2206:15813":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:15620:21281":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:1599:3023":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:12097:3246":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:47099:28254":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11502:17073":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"2:46790:3482":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:2091:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:212:8684":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:47500:28276":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"16:8623:16938":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:11155:3393":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"11:423:32910":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:7398:33158":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:11750:3016":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:43139:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:13101:9281":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:14071:20032":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6335:16848":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:560:2982":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"2:40304:8827":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:11980:22110":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:2902:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11064:17031":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:3666:3104":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"20:3881:34409":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"2:47720:3525":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:10342:24642":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"18:643:34155":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11538:17090":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"15:0:2642":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:14042:8911":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:5135:3334":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:9290:3433":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:15746:21306":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:1898:3037":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:9497:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:16486:20012":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:23591:28094":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:5696:3385":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:2742:9255":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:15898:21320":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:4576:3302":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:659:21554":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12055:17176":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7027:16882":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:11048:3157":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:523:9900":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14831:20555":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4890:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:7494:15076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:44192:28405":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:15135:17052":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"23:114:3203":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"5:6688:3020":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:7851:9061":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9372:21961":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"20:3062:2795":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"2:8023:3225":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:23657:28100":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:12797:17284":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:15530:21292":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:47255:3530":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:2140:3053":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:2918:15927":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:40962:8887":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:3839:3053":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3394:3463":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15674:21300":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:32804:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:5345:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:3710:3212":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"2:47823:3552":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11290:33490":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:3139:15935":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11394:22094":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"22:0:2779":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"6:8294:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:663:3016":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:42689:3357":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:5568:13940":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:680:21556":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"23:313:21677":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"17:13027:17299":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:6869:3418":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:41313:9082":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:23358:28068":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:8633:16939":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:6729:16862":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:7094:8824":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"11:1579:15822":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:6901:16874":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13780:20013":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:10840:3220":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:8582:16935":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:8225:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:7629:9074":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:6687:14654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:8617:3244":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:14219:20521":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:47388:3502":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:45359:9276":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:12521:8732":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:10872:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:5556:8715":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:3306:15936":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:1643:10810":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6852:14692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:80:21538":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:14395:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:485:9896":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:14932:20562":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11997:17139":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10417:17015":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"24:91:21690":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"17:15932:21323":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:573:34155":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:23646:28099":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:13161:9280":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:403:21622":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"17:14392:20528":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:14315:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6142:16840":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13013:17308":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:14885:20559":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:32893:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"16:7835:16903":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"20:3114:21583":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"17:16499:21511":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:2588:15912":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:3923:3246":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:22953:3164":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:1219:17087":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:754:21560":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:47598:3519":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:505:15877":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:894:33081":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:40975:8880":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3712:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:40091:8681":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:44714:8746":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:41839:9067":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:2682:15916":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:45343:9274":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2838:15923":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:16019:21333":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5387:13920":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:16574:20014":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:42688:2996":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:1629:3015":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:906:33083":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:1120:3032":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:10608:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:7189:16887":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:3285:21584":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"6:5664:13951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:12217:22277":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:7347:33154":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:9556:3460":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:11327:3337":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:7759:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5217:13898":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40936:8879":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:297:2842":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6590:14643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:535:2950":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:32727:3394":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:12598:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11591:17082":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:7258:30301":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:3551:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:23061:3164":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:11877:17033":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:2806:30309":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:2119:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"11:763:3019":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:44909:8771":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:9359:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:5301:13909":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:6438:16853":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:4286:3178":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:3682:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:3830:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:14182:8909":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:44400:8735":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:7473:22271":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:3066:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:15:2755":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:15147:20576":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:8070:2963":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:10140:17006":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:3060:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:40488:8905":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:6555:3616":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:16473:20011":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:13180:17301":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"20:1707:150":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"11:1892:3036":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:531:21565":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:11536:22103":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"25:21:15734":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"17:11719:17109":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:3413:3221":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"23:61:21690":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"6:5658:13950":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:8272:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:7846:22148":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"25:0:2782":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"2:46915:3523":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:11709:22266":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:12786:17248":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:5647:16812":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:3076:30467":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5088:13888":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:7495:3050":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:7539:15079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:3454:3216":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:521:21561":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5127:13891":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:1992:3102":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"21:370:21659":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"2:3474:9129":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:48045:8652":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11901:17127":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8075:2964":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:16789:21527":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:11420:17067":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:5555:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"23:363:21675":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"17:12604:17033":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:15120:20575":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:47521:3485":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:389:32908":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"23:489:21671":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"1:617:2959":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:2803:3211":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:45535:28437":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:15438:21289":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"11:427:32911":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:5406:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:3592:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:8528:3225":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:497:9898":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14626:20543":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:670:21555":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:6263:3178":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:41791:28373":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:1364:3030":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:14506:20534":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11464:17071":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:11025:33486":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:4340:3305":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12121:17148":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:4546:3178":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:47911:8642":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:40900:2985":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:7430:15072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:2702:15917":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4792:13858":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:3627:3160":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:586:9909":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4829:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:3350:9099":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:10548:16832":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3085:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:12602:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:1938:2800":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:15966:21327":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14437:20531":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:11377:3167":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:7344:3340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"8:0:2636":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:5712:3386":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:5853:3390":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"11:2099:3030":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:648:2983":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:3036:3164":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13797:20014":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"20:3596:28393":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"2:23465:3253":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:5130:17303":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:13553:17060":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"16:7935:16907":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:41061:8876":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:15822:21312":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10629:17021":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5585:13942":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:3321:26877":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:44501:8743":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:10912:3171":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:41095:8877":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:9446:22085":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:2804:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:8279:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:23380:28069":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:11094:22124":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:6813:3017":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12815:17049":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:38732:9132":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:8809:9070":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:8040:33255":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:700:2990":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:5202:3345":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:15880:21318":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12081:17149":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:5811:8822":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:4767:8846":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"20:4060:34435":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"2:14025:28516":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:15912:21321":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13661:17338":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:15660:21299":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:4762:8845":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:33352:9120":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:15845:21315":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:41829:9066":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"29:69:21729":{"crate_id":29,"path":["strsim","GrowingHashmapChar"],"kind":"struct"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:23489:3267":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8537:3227":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:12918:9238":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5295:13908":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:2519:32890":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12825:17249":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:47226:3524":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:44866:8762":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:8546:3159":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:46857:3549":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:46629:3515":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11690:17080":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:2679:9151":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"11:1866:3020":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12672:17268":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:45679:28460":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:31190:9038":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:4950:8857":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:40315:8835":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:44349:28514":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:46997:3489":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"26:21:2798":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"17:12215:17183":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:11199:21621":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:44660:8778":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:7612:3017":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:34461:9126":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:996:3027":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11340:3392":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:5323:21927":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8592:3197":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"23:326:21678":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"2:22979:30166":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"20:52:2802":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"6:1514:10798":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:45196:8797":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3920:3247":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8156:3092":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7013:16881":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:6416:14631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6678:16859":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"6:7284:9946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:6645:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:45424:9294":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:7256:16889":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:3124:15934":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11018:22088":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:41275:9075":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:2156:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:43326:3409":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"13:0:2634":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12057:3247":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:11539:3164":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:40947:28192":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:26526:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:7584:30342":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:8308:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5623:13946":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:23241:28058":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13005:17293":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:1633:3017":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:14795:20552":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10217:17008":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7367:10939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2722:15918":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:2866:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8792:3368":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:41805:3414":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"20:3538:21597":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"16:2818:15922":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:23347:3251":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:5312:29123":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:8495:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6578:14642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6858:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6171:16842":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12624:17202":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10448:3083":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:12614:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:45367:9271":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11102:3336":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"2:47920:8643":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5069:13887":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:1878:3034":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:34807:9128":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:47992:8649":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:960:3021":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"20:3496:21602":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"6:6792:14664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1584:10805":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:46953:3535":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:473:9894":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8407:3212":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:4981:16491":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"3:234:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5428:13924":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:7424:15071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5617:13945":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:5782:3387":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:3790:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:42860:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:34316:9125":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12686:17280":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:22154:29938":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:12391:17213":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"20:3801:2797":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"5:7512:3041":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11605:17033":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:45640:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:1625:10808":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:3871:34408":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"17:14737:20549":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:4832:22073":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:13321:17042":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:5441:13925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:48107:8654":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:40207:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:6158:9492":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:3310:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:14585:20540":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:3328:3034":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11077:3159":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"20:3389:2794":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"5:7747:8710":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10245:17009":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8605:3194":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:8274:9071":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5377:16611":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4805:13859":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:2528:15909":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:12603:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:2165:3055":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:16534:21512":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11652:17086":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:42636:3017":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:11941:22027":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"23:451:3369":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"2:44562:8766":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:7551:16900":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:15601:21297":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"20:3435:21603":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"11:1118:15819":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12358:17239":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:45667:8664":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11385:17065":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:6360:14567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:11201:29136":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:43758:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:2028:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:3141:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:12334:17237":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:1558:15821":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:32794:9196":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:6638:14648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:14820:20554":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:11552:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:1002:3028":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:0:2645":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:7292:10750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"21:358:21620":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"17:15974:21328":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12034:15813":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:515:21564":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:14671:20546":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:23294:28060":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3577:3178":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:9474:3413":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:12613:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:3411:3220":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:2504:3144":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:5539:13937":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:45339:9272":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:559:9905":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:22170:3164":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:38787:9133":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13969:20025":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:16077:21335":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4170:3273":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:1178:21605":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"17:12896:17287":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:16678:21518":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:6398:14630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:9800:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:6736:33079":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"20:4069:34437":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"17:16180:21341":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:47873:3537":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"20:3144:21613":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"1:8656:3240":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:15939:21324":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13691:17339":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6500:15874":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7383:16895":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7966:16910":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10792:17026":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:3675:26404":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9341:3412":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:15417:21287":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:7679:3109":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12761:17252":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:2126:3032":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:6927:3424":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:6387:16850":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:6505:14638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:2405:17120":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"20:4227:2798":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"2:34980:9130":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:47128:28255":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:7334:16892":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11357:17064":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:48015:8650":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11474:17072":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:16211:21344":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:2490:3140":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:8575:3195":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:15638:17089":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:7941:17002":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:3416:8677":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:16311:21351":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:34048:3462":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:43028:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:12610:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:48068:8653":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:4156:3272":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:3037:8904":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"20:759:34354":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"2:4644:2968":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5265:13904":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15076:20572":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:47149:28256":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13397:17046":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:1690:10815":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:11776:17112":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:12162:17179":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"20:3781:2987":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"1:9188:3391":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:885:3038":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4875:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3389:3461":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:3257:34356":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"17:11221:17034":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:6431:3613":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"23:503:21669":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"17:15869:21317":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2343:3136":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:14598:20541":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6366:16849":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:4897:8856":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:10288:29698":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5550:13938":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5482:13930":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"10:44:15805":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:11162:17033":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6950:16877":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:1640:3021":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:6040:16834":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11308:17036":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3404:9121":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11280:17035":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:7990:15452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:971:3023":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2568:15911":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:13215:8750":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:1063:32919":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"20:3581:21590":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"6:8249:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:26:21696":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"2:23569:28092":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:4163:3017":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:7951:22038":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11172:33489":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12698:17281":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:31152:2971":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:589:28428":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"20:3477:21601":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"16:8148:16921":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:5165:13894":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11732:17110":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"15:288:15853":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:2094:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:12118:3248":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2964:15929":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:9502:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13609:17056":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"18:706:8757":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:45619:28521":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:44976:8789":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5019:13881":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13450:17048":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:6257:3426":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:23458:28340":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8299:3014":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:7369:16894":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13204:17037":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:40189:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14639:20544":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:859:3029":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"2:40227:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:6390:14629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10843:3216":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:43438:8696":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:42611:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7904:16905":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:8162:16922":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13069:17033":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"21:281:21618":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"11:2540:3011":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:950:3020":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12930:17052":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:43431:8689":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:14054:20031":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:7734:8884":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:5707:16830":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:381:2980":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:47852:3503":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:45248:8781":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:8304:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:906:3254":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:13426:17047":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:9807:3156":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:538:9902":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:47931:8644":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:47794:3531":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:43289:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:23018:3608":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12951:17289":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"23:341:21679":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"6:5051:13885":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:45355:9275":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"20:3315:21587":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"2:12932:9240":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:2336:3134":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"20:4132:21627":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"1:12624:1965":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:8093:16918":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:3082:30465":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:2258:30335":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:985:3026":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:9812:22260":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"24:193:15734":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"1:11110:3092":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:8267:3154":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8293:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:2275:3030":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:15105:20574":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"14:219:15839":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:3357:9101":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:4559:30242":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"12:0:2640":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11113:17032":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4990:13878":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11817:17123":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"14:31:15829":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:15857:21316":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:40297:9139":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:32773:16940":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:9305:3431":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"20:1661:21635":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"16:7997:16913":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:44409:8734":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:22172:3475":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6656:16858":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10393:17014":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"23:520:21670":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"2:40247:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:16276:21348":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:3985:15942":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"11:1885:3035":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:3193:3107":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:47338:3490":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:5728:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:13718:17340":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"24:276:21692":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"1:11214:22262":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:12612:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"5:2154:3054":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:813:3025":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"9:470:15694":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:11123:3387":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:11620:3131":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:4919:2969":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:8328:2840":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"20:1109:21607":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"1:1503:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4984:13877":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:22349:3472":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:1549:3017":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:6082:16836":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:47966:8647":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7302:16891":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"18:507:34155":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:4764:16435":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:12604:1736":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:9261:3432":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:15924:21322":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:12186:22035":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:4947:13872":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13040:17298":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:8598:3198":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:1858:3015":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:5319:13911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"10:0:2638":{"crate_id":10,"path":["adler"],"kind":"module"},"17:2436:17145":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:5503:13933":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:3695:3015":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:43733:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:11955:22029":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13982:20026":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:10659:8697":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8775:3349":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:44875:8761":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:1489:10794":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:2525:32892":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:697:2989":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:7562:15081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8668:3312":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:39476:9136":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2814:8675":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"16:7713:33223":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:23580:28093":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:12611:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"11:2507:32888":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:11231:17072":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:41110:8874":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:726:21559":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11984:17172":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:14450:3043":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:10467:22001":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:11957:17119":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:1129:3033":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:5196:16568":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"20:61:2804":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"2:8270:9072":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:1779:30224":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:23635:28098":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:11857:8739":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:750:3018":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:7355:16893":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:321:33083":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13192:17300":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"26:0:2783":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"17:15572:21295":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8766:3350":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:14283:20523":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:4140:34443":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"2:47181:3518":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:6300:9077":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1518:3015":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12722:17255":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:42628:3016":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:7946:16908":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5288:13907":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:44470:8721":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:4493:28492":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:7800:29303":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:1097:3030":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:6479:21970":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:608:34182":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:7524:3020":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"11:808:3022":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"22:152:21665":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"1:1879:3074":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:42930:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13908:20020":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:4927:16483":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11970:17118":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8121:2993":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:42620:3015":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:479:9895":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14974:20565":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:1657:3036":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:1918:9017":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:14901:20560":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"6:6719:14658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"20:4152:9084":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"1:9231:3393":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:11552:17085":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:43986:28401":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:40152:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:4528:8674":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:3354:3037":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"13:110:32927":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:3358:3218":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:14749:20550":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:6110:3178":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13221:17038":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"23:181:3164":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"2:43976:3369":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:705:2991":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13591:17055":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:22243:3471":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:12134:17178":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8141:3091":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10295:17011":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:7708:9205":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:1533:3016":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4964:13874":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:1494:10795":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:8102:16919":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"7:31:15667":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:16138:21337":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"18:698:21558":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:10837:3218":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:12592:8729":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:7962:9853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5349:13915":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:31590:8900":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:1662:3037":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11123:33488":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:6273:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:11775:3198":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"20:3469:21600":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"21:303:29697":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"6:4842:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:12200:15862":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:8525:16932":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9247:3435":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:41847:9069":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:6756:14663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6645:14649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7504:3017":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:46676:3521":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:9178:3379":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"27:0:2784":{"crate_id":27,"path":["is_terminal_polyfill"],"kind":"module"},"2:44856:8773":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:7445:15074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5205:13897":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:1645:3034":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:681:2987":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:9426:21969":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:12609:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:2506:3145":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:11818:8750":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:5369:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:5557:13939":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:4316:3178":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"20:3371:21588":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"11:2440:3021":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:41397:9088":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11526:17094":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:15585:21296":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6254:32999":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:15682:21301":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:45039:8793":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13118:17302":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:9405:21965":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:10646:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"14:159:15829":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:9413:16901":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"20:3252:34355":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"2:45363:9270":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:43947:28397":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:3853:17219":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"22:28:3164":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"2:14358:3610":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"11:357:32906":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:22118:29929":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:8397:21829":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"23:244:26404":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"29:130:21738":{"crate_id":29,"path":["strsim","GrowingHashmapMapElemChar"],"kind":"struct"},"6:5395:13921":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:1667:10812":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:40267:3005":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:7463:15075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:22225:3470":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12279:17235":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"18:735:21552":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:16727:21522":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:12710:17282":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"11:1042:15817":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6623:33060":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:8266:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12523:17199":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:7060:8822":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3057:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:5044:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"24:132:3369":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"21:427:34606":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"17:13144:17297":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:15474:21290":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:6864:16871":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:4692:16386":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6460:16854":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"14:164:15830":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:7576:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12408:17240":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8707:3336":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:6872:3419":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:31205:8685":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:1675:10813":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4914:13868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:6679:14653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:3046:15932":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:2948:15928":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:41133:3110":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:8243:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:787:3021":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:32769:22178":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:13470:17049":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"20:3454:21594":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"1:9194:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:1883:3021":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13514:17051":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:47018:3495":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:15652:21298":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:1338:17095":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11065:21998":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:7220:16888":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10563:17019":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:5117:13890":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:1703:10816":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:22223:3164":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:12600:1923":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:11359:9293":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:8230:16926":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:16752:21524":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:12582:17195":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:4613:8859":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:14546:20537":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8945:3374":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:11351:22127":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:5755:32980":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:42414:28383":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:5918:3426":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:1119:30224":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6121:16839":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:15539:21293":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"20:1685:22523":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"2:2665:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"7:0:1955":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:1636:3020":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:12193:15862":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"10:36:32887":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"20:3890:34410":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"2:47765:3497":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:4402:16119":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:4502:3310":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:16125:21336":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:7185:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5450:13926":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12549:17198":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:8093:2962":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:5253:16579":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:3867:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:651:34155":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:916:3017":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:11412:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"5:998:3015":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:14113:20035":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:3419:8678":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:8312:21826":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:44511:8741":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:11929:22024":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:11787:17138":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:1563:10803":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:2323:3032":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:2248:2950":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:983:3030":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:44196:8724":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5366:13917":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:4906:3335":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:7524:15078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:3258:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7072:16885":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5083:16547":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:43955:3172":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:4421:3309":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:42795:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"6:545:9903":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:2418:8682":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:6751:3414":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:9320:3434":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:16691:21519":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:16763:21525":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"20:3348:21582":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"2:41375:9087":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"20:3632:21633":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"1:0:1762":{"crate_id":1,"path":["std"],"kind":"module"},"23:406:21681":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"6:8007:15453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:649:3015":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:41820:3226":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:15035:20569":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:1597:10807":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:7695:3112":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:32861:2841":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:14338:3613":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:10657:8696":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:8595:16936":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:344:32903":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:4834:22075":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:46744:3522":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:49:2801":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"1:11935:3396":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:1684:10814":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5575:13941":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"20:3521:21595":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"5:1630:3052":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:7165:15848":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"20:938:21586":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"2:46936:3529":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:10665:8695":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:41407:9089":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"21:184:21615":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"5:4121:3020":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7539:33177":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:1940:3089":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8304:3013":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:12615:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"11:820:3026":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:11194:29135":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:12616:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:4356:3015":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:2764:3200":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:4239:16002":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:4151:30224":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"21:382:21621":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"17:0:2644":{"crate_id":17,"path":["object"],"kind":"module"},"2:46761:3528":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:564:9906":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:3585:15938":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"5:3299:30458":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:5462:13927":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:45565:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:7604:3017":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:4348:3306":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:313:34601":{"crate_id":21,"path":["anstyle","color","NullFormatter"],"kind":"struct"},"17:12190:17181":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"23:144:21684":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"2:42532:3240":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:937:3019":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12905:17278":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:32862:9102":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2297:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:15990:21330":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"23:99:21683":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"16:6237:16845":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:14130:29747":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:44492:8740":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:15495:21291":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12027:17175":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"20:3829:21648":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"17:13932:20022":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:832:3027":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:3287:3015":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:5364:3228":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:7413:16896":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"21:0:2778":{"crate_id":21,"path":["anstyle"],"kind":"module"},"17:16320:21352":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:1915:3083":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"20:2771:3015":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"1:12385:22279":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"11:718:3024":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:40139:9137":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6452:14635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:10469:22000":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:14374:20527":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:47675:3491":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:6186:16843":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:11895:8751":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"11:1083:15818":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4881:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"20:1370:21608":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"17:16191:21342":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9354:21957":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:42767:9224":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"17:13384:17045":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"20:0:2449":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"2:13658:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:5725:16831":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:42332:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5325:13912":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6744:14661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:1539:10801":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:6571:16855":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:7439:15073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"29:87:21730":{"crate_id":29,"path":["strsim","HybridGrowingHashmapChar"],"kind":"struct"},"1:975:3024":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:46886:3469":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:5406:8709":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:5224:13899":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11850:17122":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:3921:3021":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:31184:8719":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:13385:3130":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:43691:28386":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:42386:3239":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5521:13935":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4369:3308":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:7390:10924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:3318:26876":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"20:3770:21625":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"22:125:21664":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"6:8260:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11616:17034":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:40135:3068":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:46723:3517":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:2377:17160":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13853:20017":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:11565:17084":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:5255:13903":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:465:9893":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"15:306:15854":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:22756:3473":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:22100:8900":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:1409:3033":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:851:3028":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:12619:1883":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:44742:8774":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7916:16906":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:5126:3178":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:15159:20577":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:4547:8842":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:2828:8889":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6406:16851":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:32891:8676":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:7870:22151":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:9538:3167":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:23668:28101":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:42498:28210":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:3294:3035":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:5036:13883":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:3012:15931":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"20:4043:21643":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"1:12582:22118":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:14000:20027":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13156:17296":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:22981:9151":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:8918:3372":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:14268:20522":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:15762:21308":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7041:16883":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:12620:1889":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:1864:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:3694:3189":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:12043:17146":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"20:3301:21585":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"18:96:21539":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:41144:9205":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44481:8722":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:2575:30304":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5357:13916":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:47426:28274":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"16:6157:16841":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13569:17054":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:966:3022":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:12034:22273":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:11220:22263":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"9:490:15698":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5107:13889":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"18:623:34171":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"20:4208:2799":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"2:23372:28339":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:8206:16924":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:375:2979":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:44449:8723":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:10760:22264":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:15009:20567":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8250:3153":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13634:17337":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11447:17069":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"9:380:15696":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:5405:13922":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:16775:21526":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:6902:30224":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:11039:21992":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:6806:16866":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:7459:16898":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:47940:8645":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:42819:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:23103:3599":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:46776:3534":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:22129:29932":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:45207:8798":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8688:3304":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"11:776:3020":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"9:226:3369":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:3439:15937":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:6873:16872":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:5346:16603":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6749:14662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:5151:13893":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3547:3226":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:4405:3178":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:7786:33224":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:9205:3337":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:3108:15933":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:41354:9086":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:6995:28370":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5630:13947":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:12554:8733":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:14334:17241":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:8220:16925":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12292:17192":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:14858:20557":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:32780:28486":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:8674:3301":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:0:2643":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:2221:9162":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:44796:8776":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13265:17039":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:42572:3242":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"20:1656:21632":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"15:327:15858":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:10651:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:23431:28084":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:2548:15910":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:12606:1860":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:16633:21515":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:9592:8755":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:282:30224":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:22967:3607":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:2340:30340":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:3775:9138":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"29:120:21737":{"crate_id":29,"path":["strsim","RowId"],"kind":"struct"},"2:41262:3195":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11114:3382":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:901:33082":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:4841:8854":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:15049:20570":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:1395:3031":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"24:289:21693":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"6:5471:13928":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6887:16873":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:776:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"11:1136:3033":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:5415:16626":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6911:16875":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13054:17090":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:10625:24640":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:41284:9076":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:41123:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12017:17174":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:8284:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:7580:15082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14559:20538":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7772:8801":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:123:32896":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4976:13876":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:10102:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:14806:20553":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:16230:21345":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10802:3197":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:11968:8745":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:3832:15940":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:47977:8648":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:45630:3609":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:32803:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:7308:9775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5687:16829":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11015:17030":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:981:3040":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2448:15905":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:41456:9080":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:3320:3036":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:41191:3128":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"6:5381:13919":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:7544:3056":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:3796:8840":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"20:3911:34412":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"2:34182:9124":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:34115:3464":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:41322:9083":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5512:13934":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:2334:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:9218:3392":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:41007:2985":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6062:16835":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:22142:29935":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:43252:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13732:20011":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"20:2793:3016":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"17:14018:20028":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:14459:20532":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:5316:16596":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:12623:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:15956:21326":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:7841:3021":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:8237:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1521:10799":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:15023:20568":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11863:17121":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:12605:1770":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:22847:3602":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:5494:13932":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:8295:16928":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:6800:9096":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:6032:3410":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:12948:8763":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:8134:16920":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:9442:9212":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:6791:3423":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10695:17023":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:46691:3481":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:598:34165":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"20:2974:34286":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"17:10533:16831":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10096:17004":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:42648:3355":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"20:4146:34445":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"2:32787:8854":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:6659:14651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"20:3558:21604":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"6:4921:13869":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:41591:9093":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:7857:8819":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5334:13913":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"18:635:34172":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"0:0:2456":{"crate_id":0,"path":["clap"],"kind":"module"},"16:2988:15930":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"24:247:2803":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5652:13949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:47276:3536":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10937:33484":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"20:3620:21589":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"16:6779:16864":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:7664:3012":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:4218:3276":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"11:676:3017":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:22231:3474":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"20:3545:21596":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"17:15063:20571":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:6582:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13920:20021":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:7987:16912":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"21:211:21616":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"2:23547:28090":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:15724:21304":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:6355:22251":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"20:4201:34456":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:42354:3237":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12975:17291":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:7735:3114":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:491:9897":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:44814:8777":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"20:3280:2956":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"17:10441:17016":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:8847:29697":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:42916:3017":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:10030:17003":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:4482:30242":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:45606:3612":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"23:509:34684":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:22652:29940":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"20:4081:34438":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"1:12599:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:8326:15651":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:2340:15823":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:1224:30464":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:10885:2962":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:13443:8757":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"22:97:21662":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"2:43674:8685":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:8135:2994":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"20:57:2800":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"6:1632:10809":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:10293:28581":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"23:377:21676":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"20:3588:21609":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"28:0:2785":{"crate_id":28,"path":["anstyle_query"],"kind":"module"},"2:45656:8666":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6802:14665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:6536:3615":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:45182:8796":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:321:32900":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:7984:15451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:32805:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:5111:16552":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:9520:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:43102:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:718:21551":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:16378:21356":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5025:13882":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:4228:3277":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:3502:17196":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:45598:3611":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:3063:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13081:17034":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:14871:20558":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:8708:16941":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:2516:3150":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:33776:9122":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"15:394:15865":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:41022:8875":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:45097:8794":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:2778:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:8316:15650":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:4177:34446":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"5:2360:30341":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:5950:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:6638:16857":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:31563:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:4513:3178":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:14042:20030":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:517:9899":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:15430:21288":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:2287:30336":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:42785:9223":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:30922:3250":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:44568:8765":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:7515:15077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:44642:8779":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:15837:21314":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12175:17180":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:3152:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22929:3604":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"20:3515:21592":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"6:6651:14650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:8800:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:22351:3471":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:1500:10796":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"11:2513:29944":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:8480:16930":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:23558:28091":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:6300:16847":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:7728:3355":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:8176:16923":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:2354:3015":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:6486:14596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:40906:8843":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:41416:9090":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"21:261:21617":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"9:168:15800":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"20:3983:21645":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"16:2465:15906":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11028:3153":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:4265:16005":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8328:3053":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3083:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:6111:2997":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:5281:3408":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:8240:3155":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:42679:3342":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6769:32670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15770:21309":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:2413:15875":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:3621:3069":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:14946:20563":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:9400:21964":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:13094:17304":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:5222:16571":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6841:16869":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4946:3286":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:5507:30224":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:1862:3017":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:16645:21516":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:15829:21313":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"20:4095:34440":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:43719:28395":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"20:3234:34351":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"6:578:9908":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5488:13931":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:9393:21962":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13837:20016":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10860:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:14311:20525":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:44438:8737":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:15753:21307":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"21:328:21619":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:32894:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"26:40:21704":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"1:3360:3219":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:2414:3020":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:14126:20036":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7468:16899":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:7553:15080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:7762:16902":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:44891:8770":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:41229:3158":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:11318:33491":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11677:17081":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:6981:16879":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12007:17173":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:43741:8685":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:47367:3496":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:8317:16929":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:1571:3018":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:10433:8686":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:5341:13914":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:13289:17040":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:14357:20526":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:13426:8759":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:7880:16904":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:23602:28095":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:8733:3288":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"14:40:20013":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:8440:2839":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:7568:3017":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:23624:28097":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:3580:2838":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8663:3311":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40167:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:12248:17233":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"23:292:21680":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"29:34:21719":{"crate_id":29,"path":["strsim","StringWrapper"],"kind":"struct"},"2:3569:8667":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"16:7505:33172":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"9:318:15751":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12839:17251":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"20:3899:34411":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"20:4117:21628":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"17:15982:21329":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:909:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:16302:21350":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:4948:3289":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:7084:8823":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:563:21567":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:4808:16456":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11629:17088":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:41293:9081":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:45217:8799":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5529:13936":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6747:16863":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:5485:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:1111:3031":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:3684:3162":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:6267:16846":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:13449:8756":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:5850:3388":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13870:20018":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6500:14637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:45540:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"20:3817:21642":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"1:8622:3236":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"9:345:15711":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:5676:3384":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:42710:9220":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4997:13879":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"24:0:2781":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"17:15285:21283":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:42520:3249":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:5127:8868":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:9482:3178":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:43213:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12859:17286":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:10728:17024":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:2533:32893":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:34249:9123":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:47293:3484":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11705:17108":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:8500:16931":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:9365:2956":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:23613:28096":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"23:436:34676":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"1:5004:3291":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11830:17090":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:2871:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"20:3838:3019":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"6:6893:14694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"14:201:8800":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12991:17256":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"20:3923:34413":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"1:4822:3275":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4937:13871":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4869:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:43176:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6602:14644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:6755:3415":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14519:20535":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:47166:28257":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10976:33485":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:12051:8747":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:689:21557":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:14157:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:8803:3047":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5179:3297":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:14962:20564":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:8025:16915":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"13:229:32928":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:666:17002":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:2656:3208":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:42727:9222":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:47951:8646":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4184:3275":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:11726:3015":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3424:8679":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"20:3574:21606":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"2:44696:8748":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:10596:17020":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:44521:8742":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"20:34:2803":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"4:0:2635":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10842:17028":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:4787:3331":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:14098:20034":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:5142:16560":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:1530:10800":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:16738:21523":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:6967:16878":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:4982:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:34634:9127":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6428:14633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:47067:3556":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:2658:15915":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:6039:3411":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:12009:8748":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:44846:3194":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:5662:3383":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:7407:10922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:10594:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:10367:17013":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:4505:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:42954:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:12550:22040":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"20:65:2805":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"2:47035:3501":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10515:17018":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12305:17236":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:31216:28172":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:6878:14693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"9:412:15697":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:785:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:13454:8754":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:4836:22077":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:5477:13929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:14151:20038":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:45347:9273":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:8278:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:7575:16901":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:6472:14595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:4831:8853":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:10864:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:10663:8694":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:8083:3403":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5230:13900":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:3078:30307":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5375:13918":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:2115:3031":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:46708:3487":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:7279:16890":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6026:16833":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:5027:3285":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:16029:21334":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:45026:8792":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5271:13905":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:979:3025":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11086:22121":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:9183:3380":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"20:1654:21631":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"1:6447:22258":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:6502:9500":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:44760:8775":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12775:17283":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:44551:8769":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:41798:9063":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:4118:15950":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:12597:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:2638:15914":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"20:3442:21598":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"16:8543:16933":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:23478:3252":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:4888:8855":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4902:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:7326:15069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44418:8738":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:41605:9094":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12735:17254":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:40999:8771":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:16202:21343":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:45012:8791":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"20:3962:21652":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"16:5170:16565":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:12621:1895":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:3315:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:6670:14652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:11514:17100":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:1481:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:471:17000":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:6989:9079":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:2781:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:9507:3421":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:13502:8783":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:22131:29934":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12940:17279":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:538:21566":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5447:16635":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:45371:9293":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:43939:3170":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"25:51:3369":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"1:8840:3369":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"14:0:2641":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8611:3245":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:23188:28057":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:3069:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:532:9901":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:5280:16583":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"20:3758:21624":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"6:1507:10797":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5611:13944":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:13889:20019":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:5112:3332":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"20:3785:21640":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"2:44610:8744":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:582:17001":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:13138:9283":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"25:88:2803":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"2:22641:3467":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"27:3:3203":{"crate_id":27,"path":["is_terminal_polyfill","IsTerminal"],"kind":"trait"},"17:10114:17005":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12148:17144":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:47471:28275":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"24:108:21695":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"6:5196:13896":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10783:33471":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:10999:3338":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:7540:26159":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:3609:3161":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"11:2297:3031":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:43664:28385":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"20:3183:116":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"1:1881:3075":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11456:17070":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:8863:3370":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14772:20551":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:4150:15959":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:6995:16880":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:16249:21346":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"23:0:2780":{"crate_id":23,"path":["anstream"],"kind":"module"},"16:7492:33170":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:46659:3516":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12107:17177":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12346:17238":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11400:17066":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:113:21540":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:14065:9085":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:12919:17288":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:7379:22147":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"2:2908:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:8257:3157":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:7337:15070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:43994:28402":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:506:22222":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:47405:3551":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:7554:30333":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1569:10804":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:6734:30224":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:2339:3135":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:1589:3022":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"20:4029:21644":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"6:6513:14639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7977:16911":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"20:3262:209":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"1:593:2957":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:22339:3164":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1008:3029":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:7782:8802":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:1380:3032":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:14415:20530":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:3333:30462":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"11:1027:3032":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4950:3290":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:23309:28334":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"20:3932:34414":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"16:2898:15926":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:45131:8795":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:9255:3017":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4929:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:11442:22097":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:14482:20533":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:2488:3139":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:11058:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:14532:20536":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:10717:3391":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:11969:22031":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:155:15880":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:14611:20542":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8928:3015":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:3504:3203":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"20:2950:2793":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"1:4687:3313":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:2433:15904":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13490:17050":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"29:112:21736":{"crate_id":29,"path":["strsim","StrSimError"],"kind":"enum"},"16:3693:15939":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:16356:21354":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:4356:3307":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12065:17171":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:15805:21311":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:3589:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:6941:3425":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:14707:20548":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:47082:3557":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:23075:3598":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:8060:2981":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:22891:3603":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:2226:17126":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:5552:8714":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:16164:21339":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:1696:3298":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12259:17234":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:41303:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:2126:9048":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:41363:9095":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:5057:13886":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:43424:8688":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:3719:17201":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8320:3210":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:1001:3031":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6441:14634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:4240:3280":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:12023:8746":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10822:17027":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:41446:9092":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:46968:3483":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:5121:3333":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:11925:17125":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13208:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40985:8881":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:14651:20545":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"}},"external_crates":{"28":{"name":"anstyle_query","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"strsim","html_root_url":null},"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"is_terminal_polyfill","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}