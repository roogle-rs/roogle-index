{"root":"0:0:1684","crate_version":"4.2.2","includes_private":false,"index":{"5:5323:34430":{"id":"5:5323:34430","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:25017":{"id":"2:11916:25017","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11389:7772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11959:33770":{"id":"2:11959:33770","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:33757":{"id":"2:11885:33757","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11863:1378","crate::ops::IndexMut":"2:2993:2172","str::slice_unchecked":"2:11884:33756"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:33767":{"id":"2:11954:33767","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:25025":{"id":"2:11896:25025","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:33754":{"id":"2:11869:33754","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11867:33753"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:24914":{"id":"2:11986:24914","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11863":{"id":"2:11863","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11864:801","2:11865:22705","2:11866:33752","2:11867:33753","2:11869:33754","2:11872:29732","2:11873:33755","2:11874:311","2:11875:24983","2:11876:24979","2:11878:24980","2:11880:24981","2:11882:24982","2:11884:33756","2:11885:33757","2:11886:25007","2:11887:25008","2:11888:30472","2:11889:31912","2:11890:22888","2:11891:30483","2:11892:30487","2:11893:27581","2:11894:33758","2:11895:30473","2:11896:25025","2:11899:25026","2:11902:25027","2:11905:19464","2:11909:19465","2:11913:25015","2:11916:25017","2:11919:25019","2:11922:33759","2:11925:33760","2:11928:25021","2:11931:25023","2:11934:33761","2:11937:33762","2:11940:1900","2:11943:33763","2:11946:33764","2:11949:33765","2:11952:33766","2:11954:33767","2:11956:33768","2:11958:33769","2:11959:33770","2:11960:33771","2:11963:33772","2:11966:23645","2:11969:25028","2:11972:33773","2:11975:33774","2:11978:33775","2:11981:33776","2:11983:24911","2:11984:24912","2:11985:24913","2:11986:24914","2:11987:33777","2:11989:2092","2:11990:33778"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5316:34428":{"id":"5:5316:34428","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1995","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1995","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:23645":{"id":"2:11966:23645","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:34432":{"id":"5:5332:34432","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:1995","`String`":"5:7180:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1995","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:19465":{"id":"2:11909:19465","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11983:24911":{"id":"2:11983:24911","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:30473":{"id":"2:11895:30473","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42878:7782","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:25027":{"id":"2:11902:25027","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:19464":{"id":"2:11905:19464","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:25008":{"id":"2:11887:25008","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11886:25007"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:33759":{"id":"2:11922:33759","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11565:7781","str::split":"2:11913:25015","prim@char":"1:11857:411","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11925:33760"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42636:7801","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:2313":{"id":"5:5333:2313","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:33761":{"id":"2:11934:33761","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315":{"id":"5:5315","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5316:34428","5:5317:2290","5:5320:34429","5:5323:34430","5:5331:34431","5:5332:34432","5:5333:2313","5:5334:26214","5:5335:26215"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11928:25021":{"id":"2:11928:25021","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781","str::rsplitn":"2:11931:25023"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42690:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:24912":{"id":"2:11984:24912","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5317:2290":{"id":"5:5317:2290","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:30472":{"id":"2:11888:30472","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42556:7788","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11956:33768":{"id":"2:11956:33768","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:25019":{"id":"2:11919:25019","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11565:7781","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split":"2:11913:25015"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42604:7766","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:33766":{"id":"2:11952:33766","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:33772":{"id":"2:11963:33772","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:801":{"id":"2:11864:801","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11857:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:24979":{"id":"2:11876:24979","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:33775":{"id":"2:11978:33775","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:33755":{"id":"2:11873:33755","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:2092":{"id":"2:11989:2092","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:2092"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42894:2093","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5335:26215":{"id":"5:5335:26215","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11986:24914"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3-20:0:1674":{"id":"0:3-20:0:1674","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[98,0],"end":[98,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"clap_builder","name":"clap_builder","id":"20:0:1674","glob":true}},"2:11880:24981":{"id":"2:11880:24981","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:33758":{"id":"2:11894:33758","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42850:7795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:30487":{"id":"2:11892:30487","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11891:30483"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42869:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:33762":{"id":"2:11937:33762","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:33764":{"id":"2:11946:33764","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11565:7781","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::rmatch_indices":"2:11949:33765"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42736:7796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:27581":{"id":"2:11893:27581","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42840:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:34431":{"id":"5:5331:34431","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:29732":{"id":"2:11872:29732","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11133:7785"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:33774":{"id":"2:11975:33774","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:33777":{"id":"2:11987:33777","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:33777"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42885:7792","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:33763":{"id":"2:11943:33763","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11565:7781","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:1900"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42808:7799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:25026":{"id":"2:11899:25026","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:33778":{"id":"2:11990:33778","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:33778"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42903:7793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:26214":{"id":"5:5334:26214","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11985:24913"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11985:24913":{"id":"2:11985:24913","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1684":{"id":"0:0:1684","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[119,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3-20:0:1674"],"is_stripped":false}},"5:5320:34429":{"id":"5:5320:34429","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:24983":{"id":"2:11875:24983","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:1900":{"id":"2:11940:1900","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11565:7781","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:1900"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42790:7798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:25007":{"id":"2:11886:25007","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11887:25008"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:24982":{"id":"2:11882:24982","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:33760":{"id":"2:11925:33760","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11565:7781","str::split":"2:11913:25015","prim@char":"1:11857:411","str::split_terminator":"2:11922:33759"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42654:7800","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:30483":{"id":"2:11891:30483","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11892:30487"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42860:7784","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:25023":{"id":"2:11931:25023","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11857:411","str::splitn":"2:11928:25021","self::pattern":"2:11565:7781"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42708:7768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11867:33753":{"id":"2:11867:33753","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:33773":{"id":"2:11972:33773","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:25028":{"id":"2:11969:25028","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11889:31912":{"id":"2:11889:31912","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42562:7787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:33756":{"id":"2:11884:33756","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11863:1378","str::slice_mut_unchecked":"2:11885:33757","crate::ops::Index":"2:2989:2171"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11866:33752":{"id":"2:11866:33752","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:22888":{"id":"2:11890:22888","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42572:2288","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:33771":{"id":"2:11960:33771","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:7781"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11590:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:33776":{"id":"2:11981:33776","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11527:126","`FromStr`":"2:11526:2460"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11526:2460","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11526:2460","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:33769":{"id":"2:11958:33769","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:311":{"id":"2:11874:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11875:24983","`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:24980":{"id":"2:11878:24980","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:22705":{"id":"2:11865:22705","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:33765":{"id":"2:11949:33765","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11565:7781","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::match_indices":"2:11946:33764"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42754:7797","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:25015":{"id":"2:11913:25015","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11565:7781","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split_whitespace":"2:11891:30483","str::rsplit":"2:11919:25019"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42586:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"30:4581:12295":{"crate_id":30,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:6963:2146":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"30:9104:13985":{"crate_id":30,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"32:6660:21133":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"30:5298:12328":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:2813:8149":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"32:6081:21107":{"crate_id":32,"path":["linux_raw_sys","general","tcp_fastopen_client_fail"],"kind":"enum"},"2:39210:7793":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5772:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:2579:14352":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"20:4205:37024":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"12:1138:2135":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43305:8290":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:11997:18639":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:44228:2635":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"9:896:14062":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10845:15464":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8164:2285":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:42885:7792":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"27:0:1928":{"crate_id":27,"path":["anstyle"],"kind":"module"},"6:5931:13028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:9445:8264":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:39542:8104":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:7805:2257":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4422:12315":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"32:5263:12336":{"crate_id":32,"path":["linux_raw_sys","general","in6_pktinfo"],"kind":"struct"},"1:8052:2258":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:38834:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"30:5817:12353":{"crate_id":30,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2971:7706":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:39894:2316":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"20:1290:1953":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"6:5910:13026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4805:12355":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12211:18654":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12087:18646":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:9115:23694":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"32:6743:21141":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5"],"kind":"union"},"6:6059:12210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:8186:2441":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12850:19381":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:10418:2306":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:3049:2318":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:38651:7872":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"31:4145:37782":{"crate_id":31,"path":["rustix","process","id","Uid"],"kind":"struct"},"32:6606:21127":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"17:11436:18609":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:43113:7817":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:13413:19427":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:42894:2093":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:3446:2262":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:11133:7785":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4248:12297":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:59:1950":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"6:7440:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"30:5496:12336":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"30:5993:12375":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5722:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12550:19366":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2820:8146":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:12948:19389":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"30:6936:12979":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:515:19479":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"32:5085:21063":{"crate_id":32,"path":["linux_raw_sys","general","ip_comp_hdr"],"kind":"struct"},"2:44518:2593":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13126:19405":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3971:2359":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"20:4093:1947":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"16:2411:14345":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:42586:2289":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"20:4295:37243":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"27:127:37631":{"crate_id":27,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"1:7580:2369":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"31:3822:19702":{"crate_id":31,"path":["rustix","backend","termios","types","QueueSelector"],"kind":"enum"},"1:5010:27823":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11001:2474":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6270:15298":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:4232:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"34:32:22618":{"crate_id":34,"path":["strsim","StringWrapper"],"kind":"struct"},"2:42439:7745":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:42869:7783":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8816:2514":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:8752:2288":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42562:7787":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4483:12322":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:2940:1992":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:6221:34716":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:44583:2560":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"32:4753:21044":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"1:8975:27820":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"20:4110:19545":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"2:3989:33169":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"9:188:14103":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:4945:12369":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12874:19383":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:11636:7805":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4820:12356":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"31:4115:37795":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdClockId"],"kind":"enum"},"24:26:19596":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"1:1988:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4649:12335":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:39218:7907":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:10214:7769":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:11343:2337":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:2893:7697":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"8:0:1783":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6472:14284":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:9107:2551":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6903:15321":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"31:4810:37833":{"crate_id":31,"path":["rustix","process","prctl","PTracer"],"kind":"enum"},"1:9018:23647":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:10833:2469":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:5726:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"32:4501:21026":{"crate_id":32,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:1647:1073":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:44536:32130":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"30:8221:13446":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"30:8458:13455":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:7357:15335":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12909:19386":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"32:4822:21051":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage"],"kind":"struct"},"27:113:37632":{"crate_id":27,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"2:2676:7703":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11721:18622":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:4142:19553":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"32:6138:21109":{"crate_id":32,"path":["linux_raw_sys","general","tcp_info"],"kind":"struct"},"1:7788:2255":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8963:27799":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:41066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:1898:2211":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:9947:15610":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"32:5049:21060":{"crate_id":32,"path":["linux_raw_sys","general","iphdr"],"kind":"struct"},"6:4476:12321":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"30:6986:13018":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:1431:2126":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"23:423:37545":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"1:7798:2253":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:44851:2594":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:7249:15326":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:8917:27846":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"20:4217:37029":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"2:39441:2169":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11547:15612":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:9874:22696":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:11828:18630":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:9317:15486":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4301:12300":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:3713:2123":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:8055:15409":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:534:36275":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8244:2335":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"12:985:2132":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:2104:33653":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13214:19415":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11235:18118":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"32:6560:21121":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11052:2267":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"18:574:37011":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:4:1000":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:30035:31749":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:11070:22947":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4313:12302":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"30:1987:9840":{"crate_id":30,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"31:2990:19673":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFd"],"kind":"struct"},"32:5748:8927":{"crate_id":32,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"1:925:2125":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11087:18108":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:4139:2117":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"30:5369:12331":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:43021:7814":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"27:334:19616":{"crate_id":27,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"30:7074:13022":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:44499:32113":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"10:0:1785":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"12:1555:14263":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"30:5154:12322":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43555:2640":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"20:4087:19543":{"crate_id":20,"path":["clap_builder","parser","matches","any_value","AnyValueId"],"kind":"struct"},"17:2916:15568":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"31:4686:37809":{"crate_id":31,"path":["rustix","process","prctl","EndianMode"],"kind":"enum"},"16:6790:15319":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:3376:7852":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:22189:2079":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:8596:15438":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"31:2625:19687":{"crate_id":31,"path":["rustix","backend","io","epoll","CreateFlags"],"kind":"struct"},"32:6950:21146":{"crate_id":32,"path":["linux_raw_sys","general","io_sqring_offsets"],"kind":"struct"},"5:4268:34738":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"18:671:19470":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6541:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:39571:8094":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10466:15657":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:7469:15426":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11247:18119":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:4217:14864":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:21:671":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:10721:15460":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:11034:18105":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:12233:7937":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13231:19417":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"20:3549:19498":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"17:13114:19404":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:1824:2191":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:553:8925":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:44873:2597":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"31:3909:37903":{"crate_id":31,"path":["rustix","backend","time","types","DynamicClockId"],"kind":"enum"},"2:43086:7816":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:3899:2354":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:46485:2599":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7659:15349":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6079:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:38958:7869":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9303:15490":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:7677:2137":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"31:3933:37768":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdFlags"],"kind":"struct"},"1:558:2071":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"32:5729:8967":{"crate_id":32,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"17:12926:19387":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:7684:2199":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12609:19367":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:8951:36984":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:6318:27795":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:484:27178":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:2934:1990":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10796:15411":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"20:4470:37031":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"16:4441:14920":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4662:12337":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"20:4340:19546":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"30:9276:14013":{"crate_id":30,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4402:12312":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:6506:7847":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:7667:2136":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:4113:2388":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:6373:34716":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:39297:7906":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"32:6325:21113":{"crate_id":32,"path":["linux_raw_sys","general","tcp_zerocopy_receive"],"kind":"struct"},"2:11389:7772":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:10222:24011":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:8701:15441":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"32:4510:21027":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"34:72:22632":{"crate_id":34,"path":["strsim","StrSimError"],"kind":"enum"},"1:8880:2516":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:8420:2455":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:9544:27270":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:6676:15313":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:41885:7942":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:6911:2487":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:5708:2496":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:38944:32782":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:45703:2619":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2612:2301":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"31:4360:37772":{"crate_id":31,"path":["rustix","process","prctl","UnalignedAccessControl"],"kind":"struct"},"2:5527:8093":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:39551:8113":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11594:18615":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:21371:2564":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4416:12314":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"12:1845:2123":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:11070:18107":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:2937:1991":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:12147:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:9250:15474":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13192:19413":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:9010:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"32:5696:8919":{"crate_id":32,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"6:4743:12347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10108:15566":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8495:2458":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:9658:15554":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4766:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:41369:7722":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11054:18106":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5690:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"30:4651:12298":{"crate_id":30,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:0:1674":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"17:8510:14305":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"30:573:8920":{"crate_id":30,"path":["libc","unix","rusage"],"kind":"struct"},"2:40986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2370:2250":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:3205:7704":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13024:19395":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12781:19378":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:505:8920":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:7511:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"30:4998:12314":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"30:5033:12316":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:681:19471":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"13:226:35844":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:2367:14343":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"32:4567:9847":{"crate_id":32,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"17:11485:18610":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:8085:2315":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7956:15357":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2894:14365":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"31:3611:37848":{"crate_id":31,"path":["rustix","backend","process","types","Resource"],"kind":"enum"},"2:42992:7812":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"32:6473:21118":{"crate_id":32,"path":["linux_raw_sys","general","new_utsname"],"kind":"struct"},"6:5843:13022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:39481:8098":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"30:1948:9839":{"crate_id":30,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:3146:2138":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10221:15649":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:43175:7820":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:679:2099":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"26:21:1948":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"30:9234:12524":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:652:37011":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:3190:32661":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"30:5572:12340":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:7298:15330":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:9488:15505":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:0:1792":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:1021:15492":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:3504:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:153:14316":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:4451:12318":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4952:12370":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:44328:2636":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:20697:2563":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"30:6893:13016":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:67:1955":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"2:6608:8097":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:11214:22887":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:6359:15304":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10207:15638":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"32:4528:21029":{"crate_id":32,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"32:4957:9828":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreqn"],"kind":"struct"},"30:5015:12315":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11734:18623":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:3264:2123":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"32:7318:21163":{"crate_id":32,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"17:9223:15473":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11876:1473":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:45489:2610":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:50235:32159":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"30:2074:9844":{"crate_id":30,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:8561:15413":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:1597:2141":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:9323:7939":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4328:12145":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:6851:2315":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:6071:2642":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:13527:19434":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"12:834:2129":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13059:19399":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"23:319:19593":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"1:3975:2360":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"30:7476:13062":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:2793:14361":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:8991:36973":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"20:36:1953":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"32:5269:21068":{"crate_id":32,"path":["linux_raw_sys","general","ip6_mtuinfo"],"kind":"struct"},"12:697:2126":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:7150:2215":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"32:5300:21071":{"crate_id":32,"path":["linux_raw_sys","general","rt2_hdr"],"kind":"struct"},"17:9627:15514":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"32:6932:21145":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_9"],"kind":"enum"},"30:4905:12309":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:10415:2310":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:6024:2644":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:9071:36983":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:8134:2286":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"32:5904:13010":{"crate_id":32,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"1:8157:2289":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:39519:32156":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4703:12342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6743:15317":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:44681:2632":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:39146:7913":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:41226:2493":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"20:3959:19536":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"16:3188:14370":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"12:274:35829":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"18:624:37010":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"31:3572:37900":{"crate_id":31,"path":["rustix","backend","process","types","MembarrierCommand"],"kind":"enum"},"17:11684:18620":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4787:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:4545:14976":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:481:19477":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:10458:2074":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:11813:18629":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:2297:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:1575:2123":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"30:0:806":{"crate_id":30,"path":["libc"],"kind":"module"},"20:3640:19502":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"16:5203:14307":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:9577:15509":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:6538:2507":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"20:1565:127":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"32:6585:21124":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"17:13536:19435":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10360:15619":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5000:12375":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8270:2422":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7970:15358":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11853:18632":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:3566:14381":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"31:3779:37806":{"crate_id":31,"path":["rustix","backend","process","types","RawCpuSet"],"kind":"struct"},"2:22786:2340":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:525:8921":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12337:15464":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7396:15337":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:12980:19393":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"32:5602:21080":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"16:3854:14549":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"30:8295:13448":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12485:19364":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:2683:14356":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"20:3840:19509":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"30:5225:12325":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:2830:8148":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8794:2117":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8479:2457":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"32:4575:21030":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"2:30533:7927":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13279:19418":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:5552:2508":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:1230:2135":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:1645:9840":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:277:1995":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:62:8544":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:9118:36971":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:1663:9842":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:8014:15360":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:9062:7721":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"12:387:35832":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"32:7204:21160":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_getevents_arg"],"kind":"struct"},"6:1541:9831":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:2842:14363":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:1339:2117":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:5762:8518":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"32:5307:21072":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_destopt_hao"],"kind":"struct"},"30:7203:13027":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"12:2205:2115":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:21275:32631":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13158:19409":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:2358:2244":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:3528:2118":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:21742:32150":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9088:2267":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:12118:18648":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"23:153:19570":{"crate_id":23,"path":["anstream","lockable","Lockable"],"kind":"trait"},"2:20854:2568":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"30:8856:8876":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"32:4942:9826":{"crate_id":32,"path":["linux_raw_sys","general","in_addr"],"kind":"struct"},"6:4307:12301":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3344:2274":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:39463:8091":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"30:604:8921":{"crate_id":30,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:2261:14311":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"25:0:1926":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"30:486:8915":{"crate_id":30,"path":["libc","unix","group"],"kind":"struct"},"1:2209:2234":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:9873:15607":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:9805:15604":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:10205:1943":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:11504:14295":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"20:1108:19517":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"5:7194:7823":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:8187:2440":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"30:1929:9838":{"crate_id":30,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:41621:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:45253:2630":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"32:5332:21074":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_3"],"kind":"enum"},"1:6823:27282":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"9:622:14081":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:44398:32143":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:3599:14390":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:42530:7794":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5751:2504":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:9058:7713":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:46051:2607":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4346:12305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:21676:31715":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"9:676:14071":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:8339:15433":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"32:4742:21043":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"17:8631:15439":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:2896:33654":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5813:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"30:4865:12307":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6052:15285":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"30:6911:13017":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:8274:2424":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:8981:15445":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:766:19468":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:1420:2125":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"14:40:18103":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"27:261:19613":{"crate_id":27,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"24:255:1953":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"1:1849:2197":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"31:4829:37825":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointMode"],"kind":"enum"},"1:11143:27289":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"32:7235:2424":{"crate_id":32,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"17:12630:19369":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:20428:32666":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"30:7443:12210":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"32:7138:21155":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe_op"],"kind":"struct"},"2:39401:2232":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:1514:9827":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:4262:14885":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:113:19595":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"6:473:8915":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"24:132:2454":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"17:9401:15487":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:39421:7745":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"20:3869:19503":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"30:7953:8799":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11879:779":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:12307:18661":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:21111:2590":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:12060:18644":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:5168:7738":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"12:861:2131":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:12368:2642":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:9736:2369":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"24:304:19593":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:20654:2369":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:12361:18664":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:39131:2093":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:9060:7712":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"31:3294:19655":{"crate_id":31,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"12:60:35819":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11271:18121":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12103:18647":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4218:12294":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:1618:8069":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"29:56:19630":{"crate_id":29,"path":["io_lifetimes","portability","FromSocketlike"],"kind":"trait"},"2:39391:2233":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"31:2713:19688":{"crate_id":31,"path":["rustix","backend","io","epoll","EventFlags"],"kind":"struct"},"2:9274:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"12:1832:2117":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8772:2475":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:7704:27806":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:46503:7671":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:2535:14350":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:242:36976":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:5759:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40575:2332":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:4900:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:8397:2454":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:38856:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"30:6721:12951":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5990:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:2771:14360":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:42402:7757":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:48504:2639":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:38737:8157":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13100:19403":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11199:18116":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"30:4605:12296":{"crate_id":30,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2548:27270":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:8835:2512":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4574:14981":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"32:4966:9829":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq_source"],"kind":"struct"},"2:44429:2616":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12797:19379":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"32:7298:9767":{"crate_id":32,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"16:7497:15342":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:8494:14307":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:12357:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:9746:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"30:7166:13025":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:7452:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6530:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:22090:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:42903:7793":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"20:3743:19512":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"6:594:8931":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:3160:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"29:127:19637":{"crate_id":29,"path":["io_lifetimes","raw","AsRawFilelike"],"kind":"trait"},"16:5596:15271":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:20641:2572":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:6241:15296":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:9559:30330":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:11186:18115":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:5219:14305":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"30:8070:9793":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"27:382:19619":{"crate_id":27,"path":["anstyle","style","Style"],"kind":"struct"},"2:39271:7910":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"32:6649:21132":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"32:6497:21119":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"1:10929:19618":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:2475:2298":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:9193:36980":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"12:810:2124":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"32:6452:21117":{"crate_id":32,"path":["linux_raw_sys","general","old_utsname"],"kind":"struct"},"30:4627:12297":{"crate_id":30,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:9059:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:39879:2104":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"31:3671:37891":{"crate_id":31,"path":["rustix","backend","process","types","Signal"],"kind":"enum"},"31:4668:37822":{"crate_id":31,"path":["rustix","process","prctl","TimingMethod"],"kind":"enum"},"6:4429:12316":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:8056:15361":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:4630:2394":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:11315:8305":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"32:6785:21143":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_8"],"kind":"enum"},"2:2668:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:1710:9847":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"30:4979:12313":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:7537:27286":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:48874:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:6702:8078":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4389:12310":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"20:4226:37022":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"32:7369:13016":{"crate_id":32,"path":["linux_raw_sys","general","cmsghdr"],"kind":"struct"},"30:8329:13449":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10445:15464":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"32:7117:21153":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update"],"kind":"struct"},"32:5739:12219":{"crate_id":32,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"18:507:37011":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"30:5987:12374":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:668:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"32:4796:21048":{"crate_id":32,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"17:9751:15529":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4611:2351":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"23:163:19571":{"crate_id":23,"path":["anstream","raw","RawStream"],"kind":"trait"},"2:22321:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:939:2128":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"24:0:1925":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"30:5981:12373":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3199:2311":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11872:734":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:39472:8092":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:6222:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11855:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:6087:27268":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"20:3544:2068":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13007:19394":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"30:7322:35621":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:31725:27806":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:3932:2274":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"32:5275:12355":{"crate_id":32,"path":["linux_raw_sys","general","in6_ifreq"],"kind":"struct"},"30:5945:12370":{"crate_id":30,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:1771:15508":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:868:2117":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:1771:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"12:300:35827":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:4786:15025":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:4358:7886":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"32:6569:21122":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"2:43317:8295":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:44380:2628":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:962:2131":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11343:18126":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:41651:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:7566:31865":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:11330:18125":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:2433:14346":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"20:3833:19510":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"2:10699:7760":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:22024:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:9066:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"32:7219:8926":{"crate_id":32,"path":["linux_raw_sys","general","linger"],"kind":"struct"},"30:4828:12305":{"crate_id":30,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4882:12363":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"21:0:1922":{"crate_id":21,"path":["bitflags"],"kind":"module"},"32:6998:21149":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_10"],"kind":"enum"},"1:6174:2508":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:10546:15452":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:38937:15360":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"30:6830:13013":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"29:152:19642":{"crate_id":29,"path":["io_lifetimes","raw","FromRawSocketlike"],"kind":"trait"},"16:6171:15292":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:8911:36975":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7117:36318":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2320:14341":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"30:8420:13453":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"20:3257:19524":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"2:42373:7754":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"27:210:19612":{"crate_id":27,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"32:5236:9832":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in6"],"kind":"struct"},"32:4988:21056":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"17:10608:15454":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9339:15484":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:1931:15502":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:9383:23917":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"31:4179:37796":{"crate_id":31,"path":["rustix","process","id","Pid"],"kind":"struct"},"23:301:19578":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"1:6119:27841":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:9978:2191":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:2757:8119":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:43381:2556":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:2538:2299":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:40792:2119":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"32:7157:21157":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction"],"kind":"struct"},"18:80:19451":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"30:7345:13033":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:40866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:39643:8095":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"30:1744:9829":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11013:2475":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:11869:735":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:9889:2117":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3242:7705":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:43360:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"27:360:19618":{"crate_id":27,"path":["anstyle","reset","Reset"],"kind":"struct"},"2:12160:7936":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:41901:7941":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"12:1085:14259":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5541:15269":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:6607:27795":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:8774:15410":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"12:762:2123":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:4627:2421":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"32:6310:21112":{"crate_id":32,"path":["linux_raw_sys","general","tcp_diag_md5sig"],"kind":"struct"},"2:43218:7803":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:8786:2476":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12934:19388":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:2727:14358":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"32:5983:21102":{"crate_id":32,"path":["linux_raw_sys","general","tcp_word_hdr"],"kind":"union"},"17:9791:15558":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:7103:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"12:1003:2133":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"32:5805:21090":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"32:4536:8799":{"crate_id":32,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"1:8181:2326":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:9433:15481":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:46512:7672":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"20:3566:19499":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"5:2904:33704":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:1611:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:6623:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:5418:7847":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12148:18650":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:1962:15526":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10949:18101":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"30:4945:12311":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:29963:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"30:2027:9842":{"crate_id":30,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4566:23687":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:7861:2300":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:40649:2117":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:7525:2150":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:951:34716":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1704:9846":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:8137:15427":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1201:2134":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:5559:2509":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:1687:9844":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:41910:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7890:15353":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12730:19373":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:1370:2119":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"29:132:19638":{"crate_id":29,"path":["io_lifetimes","raw","AsRawSocketlike"],"kind":"trait"},"2:11585:7778":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12008:18640":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:4749:15012":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:22255:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10283:15623":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"12:2069:2133":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:2830:24005":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"32:4645:21037":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"1:5343:2467":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12836:19380":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7603:15347":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"32:5070:21061":{"crate_id":32,"path":["linux_raw_sys","general","ip_auth_hdr"],"kind":"struct"},"30:4846:12306":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9930:15585":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:9539:15503":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"30:9240:12525":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:6471:2502":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:20823:2369":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:44459:2604":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:1927:2212":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"12:1534:14262":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:3227:19497":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"2:4721:2103":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:8997:23064":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2808:8145":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:7163:2216":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10921:15665":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"30:505:8916":{"crate_id":30,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6594:9767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"32:5314:21073":{"crate_id":32,"path":["linux_raw_sys","general","ipv6hdr"],"kind":"struct"},"6:5890:13024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:7277:7844":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6877:15320":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"30:5633:12343":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"32:4723:12353":{"crate_id":32,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"2:10172:7770":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:8781:31134":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:4100:2387":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:1354:2118":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:5815:15279":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"7:79:14037":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9820:15605":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:956:2130":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:40716:8236":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44805:2609":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"32:5580:21077":{"crate_id":32,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"16:7388:15336":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"30:1709:9827":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"32:6413:8923":{"crate_id":32,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"32:7227:21161":{"crate_id":32,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"2:42144:7748":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"30:1762:9830":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"30:7302:13032":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:3112:2139":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:43164:7819":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"30:5513:12337":{"crate_id":30,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9778:15530":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"22:130:19564":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"1:3124:27069":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:42392:7756":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8740:2473":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4862:12360":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:40438:2328":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:31729:8206":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:7521:14014":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:41922:2454":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:11263:27282":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:4812:988":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"30:1781:9831":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:2216:2236":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"9:586:14129":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:6593:15310":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"23:170:2369":{"crate_id":23,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"17:9691:15528":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12251:18657":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:44827:2612":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13572:19437":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13492:19431":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:11748:18624":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12225:18655":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13557:19436":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:39257:7792":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:42125:8283":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"22:114:19563":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"20:1537:19537":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"2:4413:7888":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11368:18128":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"18:538:19481":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:42790:7798":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:3457:14373":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7825:15350":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:9844:15564":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9183:15450":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6698:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4261:12298":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10752:15461":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:2624:33664":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:2225:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:572:8928":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:2788:8141":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6773:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:39358:2219":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"16:5558:15270":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"31:457:106":{"crate_id":31,"path":["rustix","backend","io","epoll","Context"],"kind":"trait"},"17:9021:15446":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7511:15343":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"14:165:14270":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:1074:2134":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4910:12366":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:1747:9850":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:6572:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4890:12364":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:4050:19526":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"17:11106:18109":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8347:2453":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:6628:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5122:15241":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"32:5851:21095":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"6:1589:9836":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10121:15567":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"27:313:19615":{"crate_id":27,"path":["anstyle","effect","Effects"],"kind":"struct"},"5:1401:2121":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:11878:1471":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:39510:8101":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:7120:2217":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:531:8922":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:4357:14908":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:6649:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:2800:8144":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"12:1518:14261":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:9288:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:40455:2329":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"20:4175:37023":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"29:67:19625":{"crate_id":29,"path":["io_lifetimes","traits","IntoFd"],"kind":"trait"},"30:2151:9849":{"crate_id":30,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:1527:2274":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"9:33:14132":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:42484:7763":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:2631:14354":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:3665:2337":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"30:728:8928":{"crate_id":30,"path":["libc","unix","itimerval"],"kind":"struct"},"2:21369:2369":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:4577:7900":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:2389:14344":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:3632:14399":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:43576:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6528:15308":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4597:12331":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:21651:32124":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:7145:1994":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7237:15325":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:40421:2327":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11841:18631":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:31738:8120":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:9350:15483":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4489:12323":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:707:7779":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6791:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11356:18127":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:39241:7908":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:40484:31153":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"23:208:19582":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"31:3873:37805":{"crate_id":31,"path":["rustix","backend","time","types","ClockId"],"kind":"enum"},"30:2093:9845":{"crate_id":30,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"29:181:19643":{"crate_id":29,"path":["io_lifetimes","views","FilelikeViewType"],"kind":"trait"},"2:44729:2617":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:2572:2291":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:7329:15333":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6252:15297":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"30:695:8926":{"crate_id":30,"path":["libc","unix","linger"],"kind":"struct"},"20:4367:27282":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"16:2341:14342":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"20:3764:19513":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"2:2507:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11536:15611":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:9000:2213":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:1185:2132":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:43321:8299":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:39174:7912":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12617:19368":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:9382:15489":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:9897:15609":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:2705:14357":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4795:12354":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13518:19433":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:1046:33675":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:3026:14369":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:10434:15656":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:9362:15447":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:43605:7693":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:46239:2611":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"23:402:19573":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"2:14:1903":{"crate_id":2,"path":["core","write"],"kind":"macro"},"30:745:8929":{"crate_id":30,"path":["libc","unix","tms"],"kind":"struct"},"2:45443:2606":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:41940:31178":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1520:9828":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:727:19474":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"30:5903:12366":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:6000:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"9:863:14061":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10310:15652":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"30:2130:9847":{"crate_id":30,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"31:4791:37917":{"crate_id":31,"path":["rustix","process","prctl","PrctlMmMap"],"kind":"struct"},"2:40665:2119":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4781:12352":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:3640:2119":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"31:4213:37776":{"crate_id":31,"path":["rustix","process","membarrier","MembarrierQuery"],"kind":"struct"},"20:3525:181":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"30:8253:13447":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6829:36250":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7869:2156":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:21749:2345":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:42382:7758":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"31:3476:19658":{"crate_id":31,"path":["rustix","backend","io","types","EventfdFlags"],"kind":"struct"},"5:6946:2145":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4720:12344":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"20:4081:19542":{"crate_id":20,"path":["clap_builder","parser","matches","any_value","AnyValue"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"17:13039:19397":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:891:2121":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:22222:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:6161:15291":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:4144:14815":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:3087:2173":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:10863:2476":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:39328:31763":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13580:19438":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:9051:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:4387:2077":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:5428:2469":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:3159:2309":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13436:19428":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10520:15661":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:6521:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:39633:8110":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"32:4621:21034":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"29:142:19640":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawSocketlike"],"kind":"trait"},"17:12756:19376":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"30:5857:12355":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:8928:2068":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:4164:2389":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"25:53:2454":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"32:5860:21096":{"crate_id":32,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"1:11828:2102":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"32:5865:21097":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"32:6373:21114":{"crate_id":32,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"31:3380:19670":{"crate_id":31,"path":["rustix","backend","io","types","PipeFlags"],"kind":"struct"},"16:4689:15000":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"12:2184:32450":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10182:15572":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:11875:1472":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"30:7143:13024":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8970:27839":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:3171:7874":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6186:15293":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"32:4615:21033":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"32:4833:21053":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"5:5640:2122":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:20449:32664":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"32:7126:21154":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update2"],"kind":"struct"},"17:12964:19391":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"32:7338:21164":{"crate_id":32,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"1:6359:2498":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4549:12327":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"32:5041:12338":{"crate_id":32,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"12:659:2119":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"31:2530:37916":{"crate_id":31,"path":["rustix","process","uname","Uname"],"kind":"struct"},"5:7260:2123":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:2847:8152":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:7201:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12033:18642":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"32:7278:9766":{"crate_id":32,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"6:5786:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:2864:8156":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:8864:2513":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:1704:2123":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:4367:7887":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13141:19407":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:41612:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:7949:2302":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"20:4132:2121":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"20:3296:37030":{"crate_id":20,"path":["clap_builder","builder","arg_settings","Flags"],"kind":"struct"},"1:7700:2200":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"30:8181:13444":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"31:466:19682":{"crate_id":31,"path":["rustix","backend","io","epoll","Borrowing"],"kind":"struct"},"32:5610:21081":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"20:3484:1943":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"30:539:8918":{"crate_id":30,"path":["libc","unix","timespec"],"kind":"struct"},"1:10353:27279":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:41606:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"30:5136:12321":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5660:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"30:5650:12344":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11909:18635":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"32:5773:21086":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"9:111:14075":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"20:4418:19529":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"20:3823:19506":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"12:1029:2134":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"30:5277:12327":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"32:6677:21135":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"32:5594:21079":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"14:215:14278":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"32:5712:13825":{"crate_id":32,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"5:1969:2156":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:4552:2357":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:4256:19555":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"30:5344:12330":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:4849:15040":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"32:6632:21130":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"17:12198:18653":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:0:806":{"crate_id":6,"path":["libc"],"kind":"module"},"32:5896:21100":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"30:2143:9848":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:7022:2119":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:561:8926":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:4921:15064":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:9108:15448":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"33:0:1933":{"crate_id":33,"path":["anstyle_query"],"kind":"module"},"2:9064:7722":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:546:8924":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4988:12373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2930:1989":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:7661:2101":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4396:12311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:2497:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:43593:7695":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"30:2005:9841":{"crate_id":30,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:7075:2115":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:1800:2160":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"23:382:2454":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"17:9501:15490":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:9909:15565":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:41932:31216":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:7581:2089":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11856:925":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:12399:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:13031:19396":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:10075:15569":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:22288:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:39903:8083":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:20447:32668":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"30:5938:12369":{"crate_id":30,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:4721:15008":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:41106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6643:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"32:6421:2380":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_un"],"kind":"struct"},"16:6284:15299":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6719:36085":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"30:522:8917":{"crate_id":30,"path":["libc","unix","timeval"],"kind":"struct"},"30:5742:12349":{"crate_id":30,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:567:8927":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:621:33700":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:5359:2468":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:46363:2596":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"20:3791:19515":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"5:1600:34716":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"23:366:37526":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"11:44:14247":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:4742:32019":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"32:6578:21123":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"29:183:19645":{"crate_id":29,"path":["io_lifetimes","views","FilelikeView"],"kind":"struct"},"30:4558:9989":{"crate_id":30,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:44629:2625":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40784:2118":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:11338:8302":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:7475:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:3428:2213":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"32:7356:13015":{"crate_id":32,"path":["linux_raw_sys","general","msghdr"],"kind":"struct"},"18:491:37015":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:46699:7683":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:11565:7781":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"30:5117:12320":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"30:1822:9833":{"crate_id":30,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:41639:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:2792:2553":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:96:19452":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10455:15648":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:39311:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:4748:2367":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:45519:2613":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:6395:2505":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:22156:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"32:6054:21106":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_5"],"kind":"enum"},"2:20394:32627":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:46523:7673":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"30:1687:8979":{"crate_id":30,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"32:5104:21065":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_2"],"kind":"enum"},"32:7214:9830":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr"],"kind":"struct"},"24:89:19588":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"17:9631:15501":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10374:15621":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"9:956:14059":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:2825:14362":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43185:7821":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4714:12343":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:8230:2392":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"20:3730:19516":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"1:11839:23609":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2776:8139":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:7815:2254":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:4253:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:39501:8100":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"31:4969:37775":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureState"],"kind":"struct"},"6:493:8918":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:2503:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:21568:31187":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:11119:8254":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:3595:34716":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:45207:2626":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:42413:7747":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13594:19439":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:21775:2347":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:5494:15266":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:20828:2562":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:31689:2477":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"30:8402:13452":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:5839:15280":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"0:0:1684":{"crate_id":0,"path":["clap"],"kind":"module"},"27:282:19614":{"crate_id":27,"path":["anstyle","color","RgbColor"],"kind":"struct"},"17:8475:15408":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10655:2253":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:4099:2274":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:2859:8155":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:6931:2175":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4669:2372":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"30:806:8598":{"crate_id":30,"path":["libc","unix","FILE"],"kind":"enum"},"30:6847:13014":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:4662:14997":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11161:18113":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"29:0:1930":{"crate_id":29,"path":["io_lifetimes"],"kind":"module"},"30:5094:12319":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:20666:2561":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:42690:7770":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"31:4746:37860":{"crate_id":31,"path":["rustix","process","prctl","VirtualMemoryMapAddress"],"kind":"enum"},"1:588:2091":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:7469:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"32:4733:21042":{"crate_id":32,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"20:3243:19523":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"30:7355:13034":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:5168:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"31:5210:37773":{"crate_id":31,"path":["rustix","process","wait","WaitOptions"],"kind":"struct"},"6:4571:12329":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:8608:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"22:5:2352":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"1:11199:22894":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:5682:2495":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13184:19412":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"14:7:14269":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:531:19480":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:11570:7777":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"32:0:1932":{"crate_id":32,"path":["linux_raw_sys"],"kind":"module"},"2:3977:33168":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2385:1799":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:10682:15458":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:505:2064":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:8489:2117":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8252:2393":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12860:19382":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4828:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"12:738:2121":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:42452:7746":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:2732:1988":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"14:0:1788":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10645:23638":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"32:5521:21075":{"crate_id":32,"path":["linux_raw_sys","general","socket_state"],"kind":"enum"},"17:8441:15437":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"32:5666:8979":{"crate_id":32,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"30:5725:12348":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:10310:2473":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:39682:8112":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:420:14313":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:38951:7885":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4439:12317":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4334:12304":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"30:1693:9826":{"crate_id":30,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6034:15284":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:4891:2429":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"12:1852:2138":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:7197:1993":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"30:5611:12342":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4757:12349":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:42636:7801":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"20:3749:19507":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"17:13176:19411":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:5447:15263":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5800:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:9764:15557":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:2841:8151":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"20:4165:37027":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"32:4558:14013":{"crate_id":32,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"2:22123:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:0:1790":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:39188:7914":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:6728:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"32:7387:9846":{"crate_id":32,"path":["linux_raw_sys","general","mmsghdr"],"kind":"struct"},"31:4847:37829":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeature"],"kind":"enum"},"1:3121:26925":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:8293:7777":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10997:18103":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"30:4805:12304":{"crate_id":30,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:929:2126":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10506:15626":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:6781:15318":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11823:30098":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:7428:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:3388:7856":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:21697:31760":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:10720:23739":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11874:1475":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:7980:15359":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"32:5788:21088":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"32:6705:21137":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1"],"kind":"union"},"6:6094:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"30:6813:13012":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:48926:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1392:2120":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:40540:2330":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"32:5814:21091":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"16:6137:15289":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"32:5946:12210":{"crate_id":32,"path":["linux_raw_sys","general","sysinfo"],"kind":"struct"},"2:2129:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"32:5880:9850":{"crate_id":32,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"17:9458:15520":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"32:7378:2351":{"crate_id":32,"path":["linux_raw_sys","general","ucred"],"kind":"struct"},"2:7095:8089":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"32:7097:21151":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_files_update"],"kind":"struct"},"2:43337:8293":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:4671:2373":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"29:137:19639":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawFilelike"],"kind":"trait"},"6:1899:9989":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"26:41:19605":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"6:5698:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:41362:7721":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:11791:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7435:15339":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:4298:2274":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"12:353:35825":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:487:8917":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:42708:7768":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"30:676:8925":{"crate_id":30,"path":["libc","unix","winsize"],"kind":"struct"},"2:40563:2331":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:3515:2117":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"32:5009:21059":{"crate_id":32,"path":["linux_raw_sys","general","group_filter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"16:4606:14989":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:9274:15476":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:6496:9766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:2675:1987":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:11014:18104":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:39584:8106":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6123:15288":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:0:1370":{"crate_id":1,"path":["std"],"kind":"module"},"32:5650:12300":{"crate_id":32,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"1:9069:2518":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:7469:15340":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:1410:2124":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:803:2143":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"32:7167:21158":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction__bindgen_ty_1"],"kind":"union"},"1:5374:1943":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10332:15653":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"12:0:1787":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"20:3685:1944":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"1:3118:23399":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:4122:7891":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"30:9246:12526":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:2344:2240":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:39450:2286":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"32:5226:21066":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr__bindgen_ty_1"],"kind":"union"},"30:7228:13028":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:20381:7927":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:1695:9845":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"31:5181:37915":{"crate_id":31,"path":["rustix","process","rlimit","Rlimit"],"kind":"struct"},"2:43313:8296":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:7480:24138":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"30:5883:12364":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:1580:2138":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:41146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:42654:7800":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"32:5251:21067":{"crate_id":32,"path":["linux_raw_sys","general","in6_flowlabel_req"],"kind":"struct"},"1:7845:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:564:19482":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:7597:2076":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:6940:2119":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:4325:19547":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"17:10583:15453":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12278:18659":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"32:6597:21126":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"32:4467:21025":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"6:4733:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"32:5888:21099":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"17:12164:18651":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:10845:23706":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:20578:2570":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:7637:15348":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:5450:8102":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:11384:2336":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:45049:32134":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9263:15475":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:208:7711":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:6692:34723":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:1083:2135":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13366:19422":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4237:12296":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4092:2386":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:4833:2419":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"20:3876:19520":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"1:11241:23666":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:10093:7766":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:8437:2456":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:39235:2093":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:1216:2133":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:25596:2341":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11500:18611":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:12181:33235":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11873:730":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5912:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:12896:19385":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11787:18627":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:11864:1457":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:3668:2336":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:5236:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7483:15341":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"32:5586:21078":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"2:4303:7884":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10420:15647":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:42572:2288":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:10131:7767":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:521:19476":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:48887:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"32:4762:21045":{"crate_id":32,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"1:8940:23061":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"20:54:1952":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"16:7909:15354":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:29712:2342":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"30:4564:12294":{"crate_id":30,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"30:7502:13063":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"30:5783:12351":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"22:30:2369":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"31:479:19683":{"crate_id":31,"path":["rustix","backend","io","epoll","Owning"],"kind":"struct"},"6:7386:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:6376:15305":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:39562:8105":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"30:6961:12980":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:9831:15606":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:3732:34716":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6567:15309":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"32:4806:21049":{"crate_id":32,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"16:7567:15346":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"30:8890:13824":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:2855:8154":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10270:15624":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:42544:7791":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:638:2096":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6017:15283":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:44948:32132":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:38752:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:9857:15586":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11939:18636":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10257:15625":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4618:12332":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7044:36331":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:3689:14432":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"20:4489:2465":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"30:7282:13031":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"20:63:1954":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"1:2865:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"20:4061:2094":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"2:45283:2633":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"30:5836:12354":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4727:12345":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:45909:2638":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"32:5835:21093":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1:6922:26673":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:9722:15553":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:43333:8292":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5967:35621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:2761:2552":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:44358:2624":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4656:12336":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:7087:2116":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:3616:19496":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"1:3197:2310":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:40674:2437":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:1586:2139":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:43512:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"18:660:19469":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6690:15314":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:2745:7702":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:39316:2218":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:41348:7712":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:20847:2369":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:7487:12528":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11033:8311":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:4092:7890":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:11579:7779":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:39913:8084":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:3138:2140":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:3157:2308":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"30:556:8919":{"crate_id":30,"path":["libc","unix","rlimit"],"kind":"struct"},"2:39872:32137":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:21106:2567":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:22354:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"32:4713:21041":{"crate_id":32,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"1:11863:1378":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:499:8919":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:9204:33304":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:20703:2565":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"32:5618:21082":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"2:11278:8303":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10680:2257":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4751:12348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3238:2307":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:39619:8109":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"30:5077:12318":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:2075:33670":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8113:2263":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:2782:8142":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:7944:27840":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:10626:2423":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:8666:15440":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10854:15465":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:7180:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5938:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:7426:15338":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:1509:9826":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:29935:7843":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"20:3737:19511":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"17:9446:15494":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:6971:33651":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"23:231:19579":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"2:12208:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"30:9158:12519":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:1712:8184":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5752:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:2282:14339":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"24:96:19590":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"30:5706:12347":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:5163:15258":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10875:15466":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11877:1474":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:6294:2119":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:113:19453":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:6525:7848":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:7099:8088":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:40707:2438":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"30:1845:9834":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"30:7265:13030":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:43150:7818":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"30:5974:12372":{"crate_id":30,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:4768:785":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:8393:15435":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:7093:15322":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:10497:15660":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:8368:15434":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:3656:2157":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:7136:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"31:2854:19674":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFlags"],"kind":"struct"},"20:4072:19556":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"2:10058:7773":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:6345:15303":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"12:393:35820":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:40906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:5996:15282":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"12:98:35842":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:9371:15448":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"20:4380:37244":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"1:7939:27842":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"30:4770:12303":{"crate_id":30,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:11166:2480":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"30:8440:13454":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11247:23622":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"30:9263:12529":{"crate_id":30,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:40733:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:10668:23627":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:5525:15268":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:5488:2470":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11461:7689":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5878:13023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1592:2140":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"32:4771:21046":{"crate_id":32,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"20:4039:19525":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"16:5878:14310":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:48939:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4562:23683":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:4635:14994":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:2900:33703":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:1527:9829":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"32:6717:21139":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_3"],"kind":"union"},"1:10134:2479":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"30:7425:13061":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:2989:2171":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:1716:2380":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"29:47:19629":{"crate_id":29,"path":["io_lifetimes","portability","FromFilelike"],"kind":"trait"},"32:5704:12294":{"crate_id":32,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"31:3087:19675":{"crate_id":31,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"5:4331:34738":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:9981:7772":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"14:187:14277":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:21600:31188":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"32:7076:21150":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_11"],"kind":"enum"},"17:8272:15431":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"30:5955:12371":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:5056:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6611:9770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"29:42:19632":{"crate_id":29,"path":["io_lifetimes","portability","IntoSocketlike"],"kind":"trait"},"5:771:2142":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"20:4123:19551":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"12:1628:35840":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6059:36302":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7211:15324":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"30:4962:12312":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4628:12333":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:41588:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13168:19410":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:870:2119":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"32:6686:21136":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe"],"kind":"struct"},"32:6711:21138":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_2"],"kind":"union"},"1:3869:2352":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:2796:2555":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:39198:7915":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"12:2178:35835":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:5949:15281":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"20:2880:37030":{"crate_id":20,"path":["clap_builder","builder","app_settings","Flags"],"kind":"struct"},"2:2766:2554":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"20:4193:37026":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"2:45129:2637":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:9700:15527":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:46584:7678":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"30:7906:8967":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:3990:2302":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"31:3798:19701":{"crate_id":31,"path":["rustix","backend","termios","types","OptionalActions"],"kind":"enum"},"1:3281:2295":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:7618:2074":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6330:15302":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:6719:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3389:2260":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"30:8017:13442":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:41893:31208":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4994:12374":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:0:1786":{"crate_id":11,"path":["adler"],"kind":"module"},"2:9056:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:43329:8298":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10394:15655":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:5737:15275":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"32:5292:21070":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_opt_hdr"],"kind":"struct"},"31:4196:37783":{"crate_id":31,"path":["rustix","process","id","Cpuid"],"kind":"struct"},"17:9155:15449":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"31:4725:37812":{"crate_id":31,"path":["rustix","process","prctl","MachineCheckMemoryCorruptionKillPolicy"],"kind":"enum"},"2:42140:31451":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"30:7042:13021":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"23:333:19583":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"16:7872:15352":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"29:19:19620":{"crate_id":29,"path":["io_lifetimes","portability","AsFilelike"],"kind":"trait"},"20:3810:19505":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"2:9527:31949":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:8796:15442":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:12349:18663":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"14:160:14269":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8296:2371":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:43393:8312":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:0:1782":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:1066:34839":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10642:15456":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"30:658:8924":{"crate_id":30,"path":["libc","unix","pollfd"],"kind":"struct"},"18:636:37006":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2657:14355":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:8170:2335":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:11870:732":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"30:5054:12317":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:1723:9848":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"30:5594:12341":{"crate_id":30,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:361:2088":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:1652:9841":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:1583:9835":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:9293:15491":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:1065:2133":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:6571:9793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12322:18662":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"30:5433:12333":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:11881:1110":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12884:19384":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:3453:2283":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:3314:2316":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"30:8203:13445":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:2682:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4361:12307":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:9422:15482":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:21515:32029":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:6668:36272":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:1726:32148":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:8329:2433":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:3979:2118":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:11405:2338":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:3263:14371":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:12638:19370":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"30:809:8599":{"crate_id":30,"path":["libc","unix","fpos_t"],"kind":"enum"},"32:5551:8924":{"crate_id":32,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"1:11699:26672":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:6524:2506":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:8983:15321":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"25:89:1953":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"2:2339:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13221:19416":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11089:2518":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"31:4162:37789":{"crate_id":31,"path":["rustix","process","id","Gid"],"kind":"struct"},"32:4635:21036":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"2:1894:7708":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"31:4451:37769":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointEmulationControl"],"kind":"struct"},"31:4024:37767":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdTimerFlags"],"kind":"struct"},"2:40826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:21713:31707":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"18:690:19472":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"30:5763:12350":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11315:18124":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:6355:2104":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13340:19420":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"30:4675:12299":{"crate_id":30,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:6053:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4501:12324":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:6468:2501":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:11103:8252":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13134:19406":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"30:5893:12365":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5235:36228":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"30:7120:13023":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"32:4547:13440":{"crate_id":32,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"32:5674:8920":{"crate_id":32,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"17:10774:15462":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:7173:8876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:39594:8107":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:609:37020":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"9:827:14163":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"30:5800:12352":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"30:1802:9832":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:12425:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"20:4245:19544":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"17:12816:19363":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:3177:7873":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11639:18618":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:7543:15344":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:40801:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:5921:8114":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:10946:27288":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"20:4395:37067":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:2804:8143":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:9064:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:4224:12295":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:7271:30115":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"32:4813:21050":{"crate_id":32,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"17:9738:15531":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"32:5825:21092":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"17:10245:15651":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:3249:15591":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"32:6590:21125":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"32:6623:21129":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"20:3174:1945":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"6:6764:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:11229:22940":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"32:6669:21134":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"30:9252:12528":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13148:19408":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:8110:15407":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:22057:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:5823:13021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:8218:2330":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"28:5:2295":{"crate_id":28,"path":["is_terminal","IsTerminal"],"kind":"trait"},"2:43520:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"22:100:19562":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"2:42840:2285":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:21624:2343":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"20:4184:37028":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"2:2771:8140":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5716:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"30:8351:13450":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2993:14367":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:7847:15351":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:46301:2631":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"30:4749:12302":{"crate_id":30,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11300:18123":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11774:18626":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:6955:2122":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:641:2097":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"9:800:14195":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11528:15613":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4274:12299":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:2333:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"32:5765:21085":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"5:4751:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:1030:34841":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"30:5171:12323":{"crate_id":30,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"31:4542:37766":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointExceptionMode"],"kind":"struct"},"1:5675:2494":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:8162:15428":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:36:35818":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4369:12308":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3371:2261":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:578:8929":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4921:12367":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:386:15424":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7059:2437":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:40504:31809":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:2687:2078":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:8881:36965":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:2360:2245":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7929:15355":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:46543:7675":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"29:37:19631":{"crate_id":29,"path":["io_lifetimes","portability","IntoFilelike"],"kind":"trait"},"27:173:37633":{"crate_id":27,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"2:5697:33054":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:2605:14353":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:42808:7799":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:5124:34716":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"32:5658:8928":{"crate_id":32,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"1:2342:2239":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:3236:2306":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"31:3001:19662":{"crate_id":31,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"6:1550:9832":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"20:3884:36094":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"30:4788:12145":{"crate_id":30,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:10200:7771":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:4084:2385":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:4817:15032":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"23:262:19581":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"30:7185:13026":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:39278:7911":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"31:438:7885":{"crate_id":31,"path":["rustix","backend","io","epoll","Ref"],"kind":"struct"},"16:7278:15328":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:2930:14366":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:9997:24007":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4929:12368":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:45026:32136":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:5746:2492":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:50214:32135":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:5902:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5793:15278":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:40657:2118":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"20:3910:19535":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"5:2894:34780":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:950:2129":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3913:2355":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:3921:2356":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:11526:2460":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:11880:1528":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:11354:8304":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:4979:27823":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2835:8150":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:2679:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:11857:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"30:7021:13020":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:46622:7680":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"9:649:14082":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:8822:36974":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:11149:18112":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13382:19424":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"32:5990:21103":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_4"],"kind":"enum"},"5:262:34716":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"20:3853:37257":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"17:11576:18614":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8810:2119":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:42860:7784":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:2809:37136":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"2:9938:2289":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:10047:23759":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:11708:18621":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:7267:15327":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"28:0:1929":{"crate_id":28,"path":["is_terminal"],"kind":"module"},"1:621:2094":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"12:751:2122":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:9165:36972":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:1571:9834":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"30:5922:12368":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:7028:2119":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"9:505:14241":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:41709:8245":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"22:34:2289":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"2:41673:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"12:725:2120":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:3644:2156":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"12:1859:2139":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:40725:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:38690:7707":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"32:5913:12951":{"crate_id":32,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"17:10490:15659":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"32:5560:21076":{"crate_id":32,"path":["linux_raw_sys","general","prctl_mm_map"],"kind":"struct"},"17:9526:15504":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5411:15261":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5780:15277":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4322:12303":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:5614:36201":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:8295:15432":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"32:7261:21162":{"crate_id":32,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"23:0:1924":{"crate_id":23,"path":["anstream"],"kind":"module"},"20:4496:37249":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"30:621:8922":{"crate_id":30,"path":["libc","unix","hostent"],"kind":"struct"},"30:8924:13826":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"31:4707:37815":{"crate_id":31,"path":["rustix","process","prctl","TimeStampCounterReadability"],"kind":"enum"},"2:43309:8294":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3505:2122":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:41725:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6548:2424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:1564:2117":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:38768:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"30:2052:9843":{"crate_id":30,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:5433:15262":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"12:2190:35839":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13459:19429":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6619:15311":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7309:15331":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"30:641:8923":{"crate_id":30,"path":["libc","unix","iovec"],"kind":"struct"},"6:6488:8967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:599:37014":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:43563:2641":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:12480:2174":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"12:853:2130":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8903:2497":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:3907:2122":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"30:9194:12521":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:4442:8102":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"31:5194:37797":{"crate_id":31,"path":["rustix","process","sched","CpuSet"],"kind":"struct"},"1:8176:2334":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"20:4434:19528":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"16:6109:15287":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"32:7174:21159":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_12"],"kind":"enum"},"1:4244:2390":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"32:6035:21104":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_opt"],"kind":"struct"},"18:590:32144":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"20:4065:19541":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"5:2177:33669":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:10476:15658":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:8236:2383":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:1571:2122":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6842:36203":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12972:19392":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:10710:2259":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"32:6923:21144":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_cqe"],"kind":"struct"},"17:11951:18637":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:21763:2344":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"30:4714:12300":{"crate_id":30,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9601:15507":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11974:18638":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:3151:34806":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:5472:15265":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:1051:2132":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:43038:7815":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"20:4523:1948":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"6:7218:13826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:3172:2141":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"32:5282:21069":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_rt_hdr"],"kind":"struct"},"1:11882:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:40398:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"13:110:35891":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:355:2087":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4379:12309":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"32:6431:21116":{"crate_id":32,"path":["linux_raw_sys","general","oldold_utsname"],"kind":"struct"},"30:1887:9836":{"crate_id":30,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"32:4843:21054":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_1"],"kind":"enum"},"5:1983:2157":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12739:19374":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"30:5536:12338":{"crate_id":30,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:11862:1348":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:847:2117":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"12:1836:2119":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:10139:15447":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:44250:2623":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:6210:15295":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:9181:1950":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9671:15521":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"32:6298:21111":{"crate_id":32,"path":["linux_raw_sys","general","tcp_md5sig"],"kind":"struct"},"12:1866:2140":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"19:0:1017":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2455:7931":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:8188:2439":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"30:7925:9766":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"30:2113:9846":{"crate_id":30,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:5388:15260":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:9681:15555":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"32:5843:21094":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"1:10940:27267":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8746:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:5896:2508":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:43325:8297":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"32:7148:21156":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe"],"kind":"struct"},"16:2557:14351":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:5835:2274":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"20:51:1951":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"16:6517:14283":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:20426:32669":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"12:1044:14258":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"20:3208:1946":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"30:1726:9828":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:43341:8311":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:6200:15294":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:5510:15267":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:3125:15573":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"32:5964:21101":{"crate_id":32,"path":["linux_raw_sys","general","tcphdr"],"kind":"struct"},"30:8163:13443":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5951:13031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11125:18110":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"20:3659:19619":{"crate_id":20,"path":["clap_builder","builder","styled_str","Style"],"kind":"enum"},"30:4731:12301":{"crate_id":30,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10403:15461":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:42494:7764":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:4842:2420":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:20744:2566":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"30:6763:13010":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:8212:15429":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"32:6640:21131":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"6:6512:8799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2509:14349":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12237:18656":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:46660:7682":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13506:19432":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:43198:7802":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"32:5642:8917":{"crate_id":32,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"2:6519:8090":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"13:0:1781":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"20:858:19500":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"6:4775:12351":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:7434:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4687:12340":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:8241:15430":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"32:5626:21083":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"1:8092:2317":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10296:15622":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:39533:8103":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"32:4827:21052":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1"],"kind":"union"},"6:123:8599":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"22:0:1923":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"16:5761:15276":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:42474:7765":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:1735:8183":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:7446:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"30:712:8927":{"crate_id":30,"path":["libc","unix","sigval"],"kind":"struct"},"1:9378:2256":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:21659:31819":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"31:3193:19672":{"crate_id":31,"path":["rustix","backend","io","types","SpliceFlags"],"kind":"struct"},"1:10820:2200":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"23:348:19584":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"17:562:15426":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:8758:2474":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:3961:2358":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:40946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:6496:15307":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"12:1065:35843":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"14:31:14269":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1731:9849":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:6175:2122":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"32:6399:21115":{"crate_id":32,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"6:4850:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:9553:15447":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"12:2198:35836":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6735:15316":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"30:9212:12523":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11137:18111":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"25:23:14179":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:2919:2153":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10062:15571":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12768:19377":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"29:69:19624":{"crate_id":29,"path":["io_lifetimes","traits","FromFd"],"kind":"trait"},"30:6871:13015":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1788:2181":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:5805:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:933:2127":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5728:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4877:12362":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:8776:31867":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:39491:8099":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"30:4927:12310":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:40589:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:4841:12358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"30:783:8931":{"crate_id":30,"path":["libc","unix","protoent"],"kind":"struct"},"6:1609:9838":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:586:8930":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:904:2122":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"20:2775:1942":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"2:46569:7677":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:44204:32133":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:4236:7878":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"32:6343:13017":{"crate_id":32,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"2:41186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:1786:2180":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:534:2069":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:2157:33663":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7942:15356":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"20:3581:19501":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"30:480:8544":{"crate_id":30,"path":["libc","unix","DIR"],"kind":"enum"},"2:48861:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:7481:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5741:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11160:23699":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"32:5754:21084":{"crate_id":32,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"2:10020:7759":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:20409:32627":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:29941:8132":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5917:13027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:42364:7755":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"30:5194:12324":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:4888:15055":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5959:13032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:10412:2308":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:755:19475":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12955:19390":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"14:221:14279":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11761:18625":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"32:6389:8925":{"crate_id":32,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"2:39921:8086":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:9475:15506":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:44897:2598":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"27:347:19617":{"crate_id":27,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"34:0:1934":{"crate_id":34,"path":["strsim"],"kind":"module"},"5:1442:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7343:15334":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"30:5478:12335":{"crate_id":30,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:851:2144":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"32:4660:21039":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"30:7002:13019":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:6985:2119":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"31:534:2117":{"crate_id":31,"path":["rustix","backend","io","epoll","Iter"],"kind":"struct"},"16:6316:15301":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12265:18658":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:4155:19552":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"1:7853:27070":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13047:19398":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:8526:15412":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"15:214:14291":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13327:19419":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"20:4358:37251":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"17:9283:15493":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"15:193:14287":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:38878:2109":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"23:417:19569":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"1:5545:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:44775:2605":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:7529:8087":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4539:12326":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"32:4949:9827":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq"],"kind":"struct"},"16:7166:15323":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:39158:31830":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:6993:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"31:5306:37861":{"crate_id":31,"path":["rustix","process","wait","WaitStatus"],"kind":"struct"},"2:42850:7795":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"29:147:19641":{"crate_id":29,"path":["io_lifetimes","raw","FromRawFilelike"],"kind":"trait"},"2:42970:7811":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"9:0:1784":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:914:2123":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:5981:36263":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:11479:23707":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"14:202:7822":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"30:8896:13825":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:11867:632":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:42736:7796":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:40527:2339":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"20:3772:19514":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"1:11860:1035":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:6880:24137":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"20:4235:19554":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"1:4062:29471":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11873:18633":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10528:15451":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:582:7927":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"15:175:14286":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6757:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:5309:2465":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:40776:2117":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:1568:2119":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"32:4588:21031":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"17:13082:19401":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:42465:7762":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"9:977:14063":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11174:18114":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:30141:31803":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:44481:2608":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"32:5245:8921":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_mreq"],"kind":"struct"},"2:29977:31813":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:5491:2472":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2487:14348":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12291:18660":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:487:15425":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"18:644:37011":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:35:2176":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:9913:2118":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"32:4975:21055":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:4164:7734":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:12176:18652":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9885:15608":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"32:6108:21108":{"crate_id":32,"path":["linux_raw_sys","general","tcp_ca_state"],"kind":"enum"},"6:7463:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"30:5914:12367":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12046:18643":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9061:15447":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"31:4339:37819":{"crate_id":31,"path":["rustix","process","prctl","DumpableBehavior"],"kind":"enum"},"6:4457:12319":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:7793:2256":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:7828:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:9070:7720":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:7030:29472":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:46532:7674":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:42604:7766":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8151:2288":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:7372:36031":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7557:15345":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:4725:2374":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:6667:34733":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:5703:15274":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2868:14364":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:7252:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:5628:15272":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"20:4278:19548":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"32:6542:21120":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"17:0:1791":{"crate_id":17,"path":["object"],"kind":"module"},"17:8871:15443":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"30:5875:12363":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"32:4519:21028":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"12:320:35823":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"30:1913:9837":{"crate_id":30,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:4847:2274":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13478:19430":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:9328:15485":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"32:5872:21098":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:4559:12328":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:8613:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:48913:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"32:4996:21057":{"crate_id":32,"path":["linux_raw_sys","general","group_req"],"kind":"struct"},"2:44184:32107":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:920:2124":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:3105:2117":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"23:63:19590":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:9712:15556":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10650:23648":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:699:19473":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:44296:2603":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:6816:36279":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:481:8916":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:48900:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2212:2235":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"30:2136:2380":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"30:8105:9767":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:43502:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10385:15654":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:43007:7813":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"9:920:14060":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:3437:24783":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:1677:9843":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:39264:7909":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"30:5412:12332":{"crate_id":30,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4697:12341":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:878:2120":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"12:1120:14260":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:11320:24008":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"32:5029:9831":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in"],"kind":"struct"},"32:4628:21035":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"17:10159:15574":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"32:6749:21142":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_7"],"kind":"enum"},"30:9176:12520":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"32:6202:21110":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_6"],"kind":"enum"},"6:1534:9830":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11025:23736":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:4667:2368":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11515:18612":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"32:5020:9840":{"crate_id":32,"path":["linux_raw_sys","general","in_pktinfo"],"kind":"struct"},"6:1604:9837":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6654:15312":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9644:15500":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:39888:8082":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:4385:14912":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4981:12372":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"27:182:19611":{"crate_id":27,"path":["anstyle","color","Color"],"kind":"enum"},"1:4564:23685":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:46161:2627":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:736:19467":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"23:286:19577":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"2:41355:7713":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"29:189:19646":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeView"],"kind":"struct"},"1:4496:2412":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"30:7246:13029":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:3816:19508":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"6:4962:12371":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"9:592:14080":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"22:159:19565":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"6:4673:12338":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:7646:2100":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:1903:15542":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:4241:7879":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:7205:7824":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:39654:2287":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:4402:2394":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"20:2795:37149":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"2:42313:33157":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"30:5555:12339":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"20:4503:1949":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"1:11868:633":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:21462:32031":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:5323:2466":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"32:5002:21058":{"crate_id":32,"path":["linux_raw_sys","general","group_source_req"],"kind":"struct"},"2:21584:31165":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"31:5075:37770":{"crate_id":31,"path":["rustix","process","prctl","PointerAuthenticationKeys"],"kind":"struct"},"6:4353:12306":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"9:382:14166":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:8506:2459":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:8144:2287":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:11590:7776":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"27:305:31865":{"crate_id":27,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"6:4681:12339":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"24:192:14179":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"5:5574:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"30:5685:12346":{"crate_id":30,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:3927:2357":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13354:19421":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:5664:15273":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4408:12313":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"32:176:19709":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenUnionField"],"kind":"struct"},"5:3937:34716":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"26:0:1927":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:2825:8147":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6667:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"30:1869:9835":{"crate_id":30,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"15:0:1789":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:9328:7940":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12073:18645":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"30:7973:13440":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"12:1872:2141":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:3770:2338":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"32:6614:21128":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"6:7195:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"31:4868:37771":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureControl"],"kind":"struct"},"1:7592:2075":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11559:18613":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:5995:27275":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:7498:12529":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6743:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:4968:2492":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2993:2172":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"32:6737:21140":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_4"],"kind":"union"},"2:41026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:5460:15264":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:719:19466":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:45553:2595":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:10824:23670":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:20615:2571":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:30516:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:46637:7681":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"12:2080:2134":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:8101:2259":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:653:8979":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"12:1840:2122":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:39865:8080":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:40640:8162":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"9:19:14131":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:46558:7676":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:7518:27273":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:6655:32448":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"32:4782:21047":{"crate_id":32,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"12:632:2117":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:9048:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:7134:31763":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12748:19375":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3863:2353":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"23:245:19580":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:10233:15650":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:29901:2152":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:46447:2634":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"32:7106:21152":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_register"],"kind":"struct"},"5:1451:2155":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:3117:34802":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:8225:2391":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"23:434:19572":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"2:44659:2629":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11259:18120":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"31:356:37908":{"crate_id":31,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"2:2228:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"32:5079:21062":{"crate_id":32,"path":["linux_raw_sys","general","ip_esp_hdr"],"kind":"struct"},"17:10708:15459":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:9068:7719":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:967:15488":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4583:12330":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"32:5094:21064":{"crate_id":32,"path":["linux_raw_sys","general","ip_beet_phdr"],"kind":"struct"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:38792:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:8418:15436":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:6535:7849":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4637:12334":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11617:18617":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"12:822:2128":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:4316:2384":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13393:19425":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:39137:7876":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:20856:2566":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"29:182:19644":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeViewType"],"kind":"trait"},"6:540:8923":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:6107:34733":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:5945:13030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"30:9297:14014":{"crate_id":30,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:10732:7761":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"30:8035:2424":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"30:2167:9850":{"crate_id":30,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:8802:2517":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:7522:2147":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"9:709:2454":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:646:2098":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:2749:14359":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:1617:9839":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:4313:7885":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:860:2118":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"12:119:35834":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:20695:2369":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:3603:2333":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"7:32:14030":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:11858:1491":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11893:18634":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:46607:7679":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:6743:2557":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"30:5256:12326":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:119:8598":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"30:6783:13011":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:2065:2064":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:614:37002":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:8941:15444":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:2300:14340":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"20:1289:19519":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"20:2620:2118":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"7:0:1518":{"crate_id":7,"path":["unwind"],"kind":"module"},"32:4651:21038":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"32:6043:21105":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_window"],"kind":"struct"},"17:11606:18616":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"32:4674:21040":{"crate_id":32,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"17:11661:18619":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"32:6357:13985":{"crate_id":32,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"17:11288:18122":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"32:4599:21032":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"16:6298:15300":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"20:1533:19534":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"17:9031:36968":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"31:0:1931":{"crate_id":31,"path":["rustix"],"kind":"module"},"2:2454:2369":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10321:15618":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13091:19402":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"20:1037:19518":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"17:10894:15467":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10670:15457":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8848:2515":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13071:19400":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:39668:8111":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:39603:8108":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12022:18641":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13374:19423":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:4519:14974":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:4297:14896":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3983:2362":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:38928:7860":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:10625:15455":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12134:18649":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"30:5454:12334":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:38910:8159":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"30:764:8930":{"crate_id":30,"path":["libc","unix","servent"],"kind":"struct"},"6:6634:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"30:5668:12345":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:1847:1950":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:11511:14295":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"12:2053:2132":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"12:777:14256":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"32:5221:14014":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr"],"kind":"struct"},"16:5184:14309":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10973:18102":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:4024:7701":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:4069:2274":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6463:15306":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"30:7993:13441":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:5374:15259":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:22387:2346":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"30:8377:13451":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:1531:19533":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"17:11217:18117":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6704:15315":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7288:15329":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"32:6965:21147":{"crate_id":32,"path":["linux_raw_sys","general","io_cqring_offsets"],"kind":"struct"},"16:3010:14368":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"30:4884:12308":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:3150:8158":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:11871:733":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:5172:7739":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:4413:14916":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:42556:7788":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"29:28:19626":{"crate_id":29,"path":["io_lifetimes","portability","AsSocketlike"],"kind":"trait"},"5:7001:33328":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:42754:7797":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"12:815:2127":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"12:669:2125":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:10350:15462":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:7135:36327":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:2395:33667":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6865:36011":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"12:646:2118":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:3402:14372":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"31:549:19686":{"crate_id":31,"path":["rustix","backend","io","epoll","EventVec"],"kind":"struct"},"16:2465:14347":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:42878:7782":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:21636:31827":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:10088:15570":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:44274:2615":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10822:15463":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:46409:2614":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11800:18628":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:44995:32140":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"24:290:19592":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"2:2851:8153":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"31:3846:14179":{"crate_id":31,"path":["rustix","backend","termios","types","Action"],"kind":"enum"},"1:11861:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:7319:15332":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:1559:9833":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"32:6980:21148":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_params"],"kind":"struct"},"2:10186:7768":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"31:498:19684":{"crate_id":31,"path":["rustix","backend","io","epoll","Epoll"],"kind":"struct"},"2:21263:2558":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12674:19371":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:39344:8227":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"30:8134:9770":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:45365:2618":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:3716:14435":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:38812:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"30:5394:2351":{"crate_id":30,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13203:19414":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12514:19365":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:247:36982":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:4424:2395":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6146:15290":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:4327:14902":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"30:5321:12329":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"32:5634:8918":{"crate_id":32,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"20:2598:2117":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"6:4468:12320":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13404:19426":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"32:5781:21087":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"31:2839:19657":{"crate_id":31,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:4871:12361":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6070:15286":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"32:5799:21089":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"17:12695:19372":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:6282:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"20:3635:2068":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"6:4520:12325":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"}},"external_crates":{"34":{"name":"strsim","html_root_url":null},"31":{"name":"rustix","html_root_url":null},"28":{"name":"is_terminal","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"linux_raw_sys","html_root_url":null},"29":{"name":"io_lifetimes","html_root_url":null},"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"anstyle_query","html_root_url":null},"30":{"name":"libc","html_root_url":null},"27":{"name":"anstyle","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}