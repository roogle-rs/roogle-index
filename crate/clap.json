{"root":"0:0:1829","crate_version":"4.4.7","includes_private":false,"index":{"2:12425:28169":{"id":"2:12425:28169","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12073:1506","str::slice_mut_unchecked":"2:12426:28170","crate::ops::Index":"2:3073:2351"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12443:20629":{"id":"2:12443:20629","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12487:28175":{"id":"2:12487:28175","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12106:8008","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::rmatch_indices":"2:12490:28176"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43676:8023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:20381":{"id":"2:12527:20381","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12435:28171":{"id":"2:12435:28171","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43790:8022","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:28189":{"id":"2:12532:28189","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4571:28189"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43843:8020","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1829":{"id":"0:0:1829","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[113,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.70.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1821"],"is_stripped":false}}},"2:12528:20382":{"id":"2:12528:20382","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:26558":{"id":"2:12430:26558","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43502:8014","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12421:20582":{"id":"2:12421:20582","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:28170":{"id":"2:12426:28170","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12073:1506","crate::ops::IndexMut":"2:3077:2352","str::slice_unchecked":"2:12425:28169"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5523:28849":{"id":"5:5523:28849","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12490:28176":{"id":"2:12490:28176","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12106:8008","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::match_indices":"2:12487:28175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43694:8024","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:28851":{"id":"5:5534:28851","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12501:28182":{"id":"2:12501:28182","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12131:8003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:26491":{"id":"2:12436:26491","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43818:8009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:20378":{"id":"2:12525:20378","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39520:20516","Self::is_ascii":"2:12524:20377"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39520:20516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12434:23892":{"id":"2:12434:23892","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43780:2470","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12431:20335":{"id":"2:12431:20335","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43512:2473","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12463:28172":{"id":"2:12463:28172","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12106:8008","str::split":"2:12454:20615","prim@char":"1:12067:450","`DoubleEndedIterator`":"2:7518:126","str::rsplit_terminator":"2:12466:28173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43576:8028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:28185":{"id":"2:12516:28185","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:2270":{"id":"2:12531:2270","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4574:2270"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43834:2271","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:20607":{"id":"2:12427:20607","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12428:20608"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:28852":{"id":"5:5535:28852","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2143","`String`":"5:7489:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:28168":{"id":"2:12414:28168","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:19938":{"id":"2:12450:19938","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41566:196","prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:28181":{"id":"2:12500:28181","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12419:20581":{"id":"2:12419:20581","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404":{"id":"2:12404","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12405:872","2:12406:20563","2:12407:28165","2:12408:28166","2:12410:28167","2:12413:21799","2:12414:28168","2:12415:342","2:12416:341","2:12417:20580","2:12419:20581","2:12421:20582","2:12423:20583","2:12425:28169","2:12426:28170","2:12427:20607","2:12428:20608","2:12429:26490","2:12430:26558","2:12431:20335","2:12432:26471","2:12433:26482","2:12434:23892","2:12435:28171","2:12436:26491","2:12437:20627","2:12440:20628","2:12443:20629","2:12446:19937","2:12450:19938","2:12454:20615","2:12457:20617","2:12460:20619","2:12463:28172","2:12466:28173","2:12469:20621","2:12472:20623","2:12475:20625","2:12478:20626","2:12481:2055","2:12484:28174","2:12487:28175","2:12490:28176","2:12493:28177","2:12495:28178","2:12497:28179","2:12499:28180","2:12500:28181","2:12501:28182","2:12504:28183","2:12507:20630","2:12510:20631","2:12513:28184","2:12516:28185","2:12519:28186","2:12522:28187","2:12524:20377","2:12525:20378","2:12526:20380","2:12527:20381","2:12528:20382","2:12529:28188","2:12531:2270","2:12532:28189"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12446:19937":{"id":"2:12446:19937","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41566:196","prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1821":{"id":"0:3-20:0:1821","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1821","glob":true}}},"2:12417:20580":{"id":"2:12417:20580","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12469:20621":{"id":"2:12469:20621","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008","str::rsplitn":"2:12472:20623"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43630:7997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12497:28179":{"id":"2:12497:28179","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:28848":{"id":"5:5519:28848","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2143","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:20615":{"id":"2:12454:20615","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12106:8008","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::split_whitespace":"2:12432:26471","str::rsplit":"2:12460:20619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43526:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12504:28183":{"id":"2:12504:28183","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12507:20630":{"id":"2:12507:20630","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:20631":{"id":"2:12510:20631","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:20380":{"id":"2:12526:20380","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:872":{"id":"2:12405:872","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12067:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12437:20627":{"id":"2:12437:20627","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:21799":{"id":"2:12413:21799","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11666:8012"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12408:28166":{"id":"2:12408:28166","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12432:26471":{"id":"2:12432:26471","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12433:26482"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43800:8011","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:26482":{"id":"2:12433:26482","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12432:26471"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43809:8010","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12466:28173":{"id":"2:12466:28173","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12106:8008","str::split":"2:12454:20615","prim@char":"1:12067:450","str::split_terminator":"2:12463:28172"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43594:8027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12475:20625":{"id":"2:12475:20625","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:28180":{"id":"2:12499:28180","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12495:28178":{"id":"2:12495:28178","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:21805":{"id":"5:5537:21805","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12527:20381"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:8350":{"id":"5:5520:8350","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12428:20608":{"id":"2:12428:20608","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12427:20607"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12472:20623":{"id":"2:12472:20623","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12067:450","str::splitn":"2:12469:20621","self::pattern":"2:12106:8008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43648:7995","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:28167":{"id":"2:12410:28167","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12408:28166"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12484:28174":{"id":"2:12484:28174","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12106:8008","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::matches":"2:12481:2055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43748:8026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12522:28187":{"id":"2:12522:28187","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12067:132","`FromStr`":"2:12066:2638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12066:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12066:2638","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:28165":{"id":"2:12407:28165","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:341":{"id":"2:12416:341","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518":{"id":"5:5518","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5519:28848","5:5520:8350","5:5523:28849","5:5526:28850","5:5534:28851","5:5535:28852","5:5536:2498","5:5537:21805","5:5538:21806"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12524:20377":{"id":"2:12524:20377","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12440:20628":{"id":"2:12440:20628","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:2498":{"id":"5:5536:2498","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12406:20563":{"id":"2:12406:20563","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12460:20619":{"id":"2:12460:20619","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12106:8008","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::split":"2:12454:20615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43544:7993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12478:20626":{"id":"2:12478:20626","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:21806":{"id":"5:5538:21806","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12528:20382"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12423:20583":{"id":"2:12423:20583","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:26490":{"id":"2:12429:26490","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43496:8015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12481:2055":{"id":"2:12481:2055","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12106:8008","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::rmatches":"2:12484:28174"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43730:8025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:28184":{"id":"2:12513:28184","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12415:342":{"id":"2:12415:342","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12416:341","`u8`":"1:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12457:20617":{"id":"2:12457:20617","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11922:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12493:28177":{"id":"2:12493:28177","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:28188":{"id":"2:12529:28188","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4573:28188"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43825:8019","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:28186":{"id":"2:12519:28186","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:8008"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:28850":{"id":"5:5526:28850","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:47848:7898":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:9242:15679":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12024:18577":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6361:15530":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:32038:26796":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:47745:2773":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:4848:853":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:7534:15571":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:45664:2787":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:12751:209":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:7567:12832":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:45919:2729":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:22738:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:4806:15225":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13906:19863":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:12089:847":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:4433:12597":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:14001:19871":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4523:12608":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:3289:7931":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:39347:8085":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:40554:8331":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:1590:2321":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:7261:2326":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:40761:8299":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11151:15921":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:9531:116":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:44090:8045":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:21816:27020":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4394:12593":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8895:2695":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"24:96:20079":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"1:12038:2282":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2925:8372":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:0:1944":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:4731:2574":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"20:3131:20002":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"2:12907:2868":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:7660:15579":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"20:3892:32093":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"1:11628:7915":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12888:19106":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5079:12666":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44281:8530":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4555:12612":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:47839:7897":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3171:216":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8174:2500":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:4196:2456":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:5030:12661":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:727:149":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6171:211":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"21:113:32303":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"6:5056:12663":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:96:19925":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:580:9145":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:2150:15802":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:4745:15212":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:12084:1612":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:12790:19101":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:7571:2141":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:2670:2393":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:4683:2532":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12698:19094":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:5596:2648":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:8978:15675":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:7025:8297":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:10586:7994":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1516:215":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:1703:2560":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12136:18585":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:6640:2604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:3276:2496":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:40068:8125":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:9660:31832":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:22206:2526":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:10436:7999":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"7:78:14340":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:5866:15512":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:40099:26386":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4867:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:22936:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:6638:2685":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:12621:19089":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6268:31160":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13055:19117":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:30331:26421":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:43512:2473":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12645:19090":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:22771:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:1568:2303":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:7624:14317":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:9536:125":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:149:14548":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:40342:8313":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:30835:8148":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:4968:12655":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:4728:2601":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:2498:2445":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:2382:2425":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:853:2298":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7523:15570":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6835:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6613:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10507:15789":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:6811:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43076:26521":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6386:15532":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:22279:26301":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6753:15548":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:39936:8131":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"23:480:32377":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:44026:8043":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10112:15750":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:7555:15665":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:207:7938":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:41335:2513":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6588:9987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:7776:2376":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11872:15939":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:5371:7965":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:1010:2313":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13554:19842":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10547:15820":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:7669:2445":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"3:234:231":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:3441:15841":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:6958:29268":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13575:19844":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:2143:29706":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:1924:2389":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:8031:24458":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2776:242":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:4653:2538":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:49:2100":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"1:1817:2368":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:7613:15576":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:897:2302":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:7689:2254":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:3010:122":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:9755:152":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14156:19887":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:10475:7986":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:3232:14603":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:12111:8004":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:8928:2690":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"20:3523:19982":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"11:101:30662":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11325:23311":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:5864:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4759:12630":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:46855:2772":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"9:393:14363":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:7436:15564":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:43253:26461":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4934:12650":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"20:1097:19996":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"1:4519:2575":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:3429:2456":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2783:2135":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:7231:2299":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:693:2299":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:10513:8000":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:4166:2456":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8530:2634":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8887:2297":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13487:19840":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:41640:2299":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"20:3850:20039":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"1:6454:2676":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"20:3364:19977":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"2:40290:26474":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2798:2258":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2223:2417":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:3600:14606":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:3401:2501":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12846:19104":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:555:9141":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7513:15569":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:4288:8095":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:43470:8021":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:12225:18591":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13914:19864":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:12086:1610":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"22:158:20054":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"2:2833:2136":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"20:4243:2097":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"16:6332:15527":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:9795:8159":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:427:30666":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:12088:1608":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"23:265:20069":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"1:8036:24056":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:7518:126":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"24:290:20081":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"17:11226:15923":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:6151:12502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:7880:2436":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:1895:2388":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12598:19088":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:4008:2536":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:9531:31836":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"11:2303:14490":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:43800:8011":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:9790:8158":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4884:1065":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:22837:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:9063:24072":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:8440:2631":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:12086:18581":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:0:531":{"crate_id":2,"path":["core"],"kind":"module"},"6:4346:12589":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:389:30652":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:39184:215":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:2880:2724":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:0:2078":{"crate_id":21,"path":["anstyle"],"kind":"module"},"2:4362:8103":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:9505:134":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"20:1365:2102":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"23:112:2480":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"17:13802:19854":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:12068:1628":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6485:15538":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:6279:15525":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7067:30812":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11098:15893":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2836:7929":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:3654:2299":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"14:31:14496":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:23416:241":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:2277:108":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:10196:244":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:44261:8518":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:261:31840":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:8713:15667":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2618:121":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:7452:2395":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4655:12620":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:6051:13335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:8167:15596":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:2568:2484":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:4168:8110":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:3359:2247":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"5:2245:29406":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2428:14577":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4573:12614":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12765:19099":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12724:19096":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:41752:2297":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4480:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"9:330:14418":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:14042:19875":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6023:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:12071:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:21489:2741":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11647:14529":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:2547:263":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:4407:8104":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"23:439:2632":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"5:7285:2299":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:5110:24471":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43834:2271":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:1562:14489":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:41381:26712":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"20:3569:19995":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"5:1525:2337":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:9542:7947":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:3532:2443":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:536:31077":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"20:3383:2093":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"16:6893:31100":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4441:12598":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:9911:8486":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:7006:15558":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"22:129:20053":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"11:2494:2295":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"25:53:2632":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"2:48035:7909":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:1591:10038":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10588:15822":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"23:491:20059":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"17:12554:19086":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:5673:15504":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:9617:31841":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"20:4223:2098":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"17:10661:15873":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:4400:12435":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:2939:8375":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9070:15496":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:824:2323":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:46825:2766":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10214:15766":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12970:19111":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:4665:23003":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:2644:14586":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:4056:2539":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"24:26:20085":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"2:9223:27628":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:10860:2440":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:14282:19892":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:42194:2671":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:504:15664":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:43414:7992":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:8608:2619":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:5781:2673":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:8195:15598":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"11:344:30663":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:30259:69":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"11:122:30648":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:0:1948":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:43061:8503":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"11:731:2306":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6092:13337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9328:2473":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:10850:124":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:564:19955":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4494:12605":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"9:0:1942":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11381:15931":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:4004:2302":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6513:15540":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43313:7981":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:42116:88":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:2931:8373":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:10368:2298":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:10795:22988":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12465:15881":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:44249:8513":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:9372:15681":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"24:89:20077":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"20:4033:20033":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"6:6849:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:4076:2298":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"11:680:2298":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11232:2449":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:8716:8004":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:12073:1506":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:7342:31157":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:9488:2390":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"18:491:31875":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:3206:2320":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12750:19098":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:7764:2316":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:5327:29265":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:533:9138":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:8794:15669":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12074:18580":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:8599:2637":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:2866:8363":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4769:12631":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:521:19949":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:45817:2764":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:3770:20013":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"6:4900:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:42596:26732":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:4986:15261":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"20:3273:19973":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"17:12513:19083":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:43730:8025":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:2596:14584":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:45564:2786":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:6494:2683":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:6560:31120":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"18:574:31856":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:0:1498":{"crate_id":1,"path":["std"],"kind":"module"},"2:42621:69":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:10009:27110":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:13723:19851":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8839:203":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:3198:23709":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:699:19946":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:44549:7919":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:1779:2357":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:5336:125":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:39067:8088":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:21804:2727":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:4350:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12576:19087":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4829:12639":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:12702:159":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"24:0:2081":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"2:12066:2638":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:21241:8391":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"20:1679:20415":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"2:43748:8026":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6376:15531":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12196:18589":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:1842:2374":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"25:89:2102":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"1:3994:2535":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:2461:30654":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:3315:14604":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:14316:19895":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:7769:2317":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:8367:2604":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:6914:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:3519:2302":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"20:3678:20023":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"2:2914:8369":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14346:19898":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6663:10172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:45854:2819":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:41760:2298":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:9312:2099":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:22295:26388":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:298:30649":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:1429:151":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:4663:23001":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:11389:15690":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:41958:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:3049:14601":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4709:12624":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:45586:2791":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:7269:31156":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:9650:15686":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6915:15554":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:5459:2646":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:4753:12629":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:3214:2318":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5752:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:569:9143":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"20:4075:24490":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"17:14076:19878":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:46209:2826":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"14:202:8049":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:8154:15595":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6415:15534":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9574:31851":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:8957:2691":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:10776:2603":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"20:4048:20032":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"23:101:20072":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"17:9752:15688":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8422:2613":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:926:2307":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5322:15477":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:10359:109":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:46465:2788":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:42556:26761":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:40035:8127":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"20:3781:2273":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"17:13101:19120":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:475:9131":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"20:1660:20024":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"20:3437:19987":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"1:8582:2297":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:11348:2658":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:2330:130":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11886:18570":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:654:9194":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:2841:8340":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:3596:2298":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8879:2654":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:0:1949":{"crate_id":17,"path":["object"],"kind":"module"},"16:5574:15498":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12911:19107":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"23:302:20067":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:14100:19881":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10929:15838":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:41709:231":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:7041:31093":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13135:19122":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"11:324:30660":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:43576:8028":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4721:12625":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:11652:8475":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:7694:15580":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:210:20005":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"16:8205:15599":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:3457:2442":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11358:15930":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:3539:2465":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:9165:2449":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:8851:2652":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:7589:8069":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:2351:2299":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:21357:2445":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:47958:7906":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:2499:8152":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13148:19123":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:14469:19906":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12810:19102":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:44464:212":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:5975:2670":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"9:357:14378":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10186:15754":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:32045:8103":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"20:3430:19992":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"5:3583:2297":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:43502:8014":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:21194:2745":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:1697:10048":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:11871:8521":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:7561:12831":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10738:15877":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:44507:2867":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:47387:2761":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:21458:2445":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:14434:19903":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:14118:19883":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4511:12607":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:2754:2297":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"2:2788:113":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:3763:2521":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:41501:2515":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4418:12595":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"13:0:1939":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12090:1668":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:4643:12619":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8041:2487":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:14522:19910":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:3737:2339":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:4667:23005":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:9223:24539":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:12106:8008":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:8909:2692":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:759:2300":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4296:12585":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:22357:2529":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12293:18596":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11761:15706":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:7330:2299":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"14:221:14506":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:12177:8032":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:5727:15507":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"10:0:1943":{"crate_id":10,"path":["adler"],"kind":"module"},"6:4451:12599":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12123:18584":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:39208:217":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:4462:15121":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:43947:8040":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10340:15767":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:548:9140":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"22:32:2474":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"6:7293:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4745:12628":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4690:12622":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13188:19126":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11023:15840":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:5474:109":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:1635:633":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7782:15585":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11024:2654":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"11:483:149":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11423:22523":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:1639:10042":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:2670:14587":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13922:19865":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:4987:2456":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:7939:8306":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"14:187:14504":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6879:15552":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:2644:2486":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4497:2574":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:12081:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13085:19119":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:6098:23333":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:2618:14585":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:40792:8302":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:22044:26426":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13274:15703":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:3173:2297":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:9051:24486":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:1674:10045":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:3274:27019":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:949:2310":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"20:3305:19976":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"5:2133:2243":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:2450:14578":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:41692:8459":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10788:15878":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:46889:2821":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:42323:7940":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"23:163:2445":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"17:256:31842":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:182:20004":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"16:6467:15537":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:40390:8329":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:4557:15144":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:755:19948":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13667:19847":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:22331:2528":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:2766:14591":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2604:2476":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:42337:7948":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"24:255:2102":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"1:8996:2675":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7606:23326":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:7532:12827":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4611:12616":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:1923:7935":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13071:19118":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13422:19838":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8194:2440":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:7935:2331":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4406:12594":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"24:304:20082":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"2:47943:7905":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7284:2617":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:39520:20516":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:11417:26026":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12280:18595":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:39921:2271":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"20:3449:19983":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"2:4137:8109":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12543:19085":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"21:261:20006":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"11:1127:14486":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13259:19131":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:11269:156":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"16:6346:15528":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:9141:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11137:15890":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"20:3818:20031":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"17:12685:19093":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13244:19130":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"20:1701:133":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"5:7377:2295":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:21928:2733":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:4585:15148":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46233:2827":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"21:334:20009":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"20:4103:31934":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:21926:2445":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:47868:7900":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6352:15529":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:21712:2746":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:11215:15889":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:589:2269":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:46163:2771":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:32027:22869":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4548:12611":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:1826:183":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:4411:2564":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10240:15732":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:40082:104":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:5421:2456":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:40313:8324":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4799:12635":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:44115:8047":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14335:19897":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:45835:2770":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:364:2267":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:3077:2352":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:6458:2677":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6856:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"20:3801:2096":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"2:45540:2750":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"20:3617:19978":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"20:1653:20020":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"2:9544:7948":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"20:4162:8322":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"2:32031:15600":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"20:3831:20037":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"20:65:2104":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"17:10036:15730":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:42661:75":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:7554:15573":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:2964:29177":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:4889:15236":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:39250:219":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:42612:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:43818:8009":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:11811:8522":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"20:925:19975":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"2:12126:8005":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10227:15765":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:1655:20021":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"20:34:2102":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"17:11617:15700":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:40355:8326":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2860:8360":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:10800:26108":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11048:15906":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:22345:2527":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"11:1635:30671":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:12120:8006":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:7736:15583":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:4719:15210":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:40365:8327":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:7961:2338":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5020:12660":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4385:12592":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:20903:27238":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:44265:8516":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:4283:8094":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:15:2058":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:42876:26746":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:14145:19886":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:7743:2280":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:39228:220":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:2788:14592":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:1549:2456":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:5443:2645":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:2876:2722":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:7897:2438":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:7405:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:43809:8010":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12778:19100":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:39333:8077":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:2504:14580":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:6665:29265":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:6334:2870":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"20:2959:31973":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"2:44520:175":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:9546:211":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:3461:14605":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4497:15132":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11991:18575":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:2961:7923":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:20890:27022":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"23:423:32370":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"5:629:29174":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:1674:29265":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8244:2473":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:7544:15572":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"8:0:1941":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:719:19939":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:2216:2415":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:8115:15593":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11788:15936":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11535:15696":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:7625:23318":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:1710:10049":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:1075:15729":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:2884:8365":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"11:423:30670":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:14173:19889":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:1672:1155":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10916:15837":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11488:23098":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:10726:15876":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6545:15542":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:646:2277":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"23:376:20082":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"2:22606:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:4862:15233":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:22870:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:9538:7940":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"18:727:19947":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6043:13334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:40544:2472":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:9172:15677":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:2472:14579":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"11:2368:2302":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:45716:2798":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:7015:15559":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7828:15587":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"20:4126:20016":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:43630:7997":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:41841:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8329:2563":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:3671:29265":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"11:1092:14485":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:12999:2327":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11654:14529":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:2172:29397":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:2317:2297":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:1546:10034":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10575:15821":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:2361:199":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4561:12613":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:10511:23329":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:1514:10030":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11572:2523":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:1505:2306":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:1475:2301":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:5944:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:44138:8029":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:8588:2636":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:6622:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:10805:2434":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:1691:10047":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:7579:12834":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4621:12617":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4954:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:7436:26386":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12373:19078":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6792:15549":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:7526:12826":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:39948:26391":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:897:2297":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:10126:15751":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:796:2303":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"20:3170:109":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"2:47699:2822":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:30273:26420":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:1986:201":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:9517:23337":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:7322:2299":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:5808:2674":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9445:15682":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:7287:14127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9912:15717":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11367:15894":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14110:19882":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12876:19105":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:2359:14574":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:3032:14600":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:1738:8402":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"9:177:14467":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:5712:15506":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11272:15925":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:46284:26616":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7937:124":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:40243:8311":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:9184:2720":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:1846:2299":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:2467:26222":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:5528:2647":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:1501:10028":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"9:507:14365":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:2366:2420":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:3830:14633":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:4641:15156":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:2238:2312":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:6145:13364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6929:15555":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:4835:15230":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:14134:19885":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10616:15824":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:21094:2739":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5790:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:9747:148":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:2722:14589":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11235:15924":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:10561:15786":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:3219:29705":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:47039:2755":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:32139:8341":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3475:2441":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:1664:10044":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6318:15526":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10420:15815":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:10869:23186":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:40252:8318":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:47920:7904":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:2173:8392":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:8206:2444":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14420:19902":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"20:3758:20012":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"1:7920:135":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:1484:2304":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:2872:8362":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"20:3115:20001":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"16:6583:15544":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11405:20334":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:12131:8003":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:4934:2599":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6844:15551":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:507:9136":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4922:12649":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4786:12633":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4501:12606":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:8607:2620":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:3358:2480":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:12033:24061":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:358:2266":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:21707:2738":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:40810:8305":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:44300:127":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6226:15522":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:6028:8334":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:10627:7997":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:21108:8391":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:943:2309":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"19:0:1096":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:46589:2800":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:47821:2828":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:42639:133":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8903:2299":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:501:9135":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:1275:2314":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:574:9144":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:1076:2315":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9277:15680":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"20:4066:32010":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"2:9977:27963":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:14013:19872":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:1444:2299":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:10573:2495":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:21058:2737":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:6059:29966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:8311:2515":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:7758:2281":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:276:2143":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:7573:12833":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:6385:180":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13868:19859":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:7694:2256":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:3410:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:6325:225":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:1428:2298":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:4339:2570":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:4033:26784":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:39168:218":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5088:15291":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6017:15518":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"20:3533:19986":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"2:22241:26393":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4728:12626":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12983:19112":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"11:1145:2315":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:2214:134":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:6865:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:3583:19998":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"2:21313:2730":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:7265:9092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:1912:10214":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:2888:8364":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:47973:7907":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:992:2312":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:483:23321":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:21379:2735":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13778:15731":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10139:15752":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:2904:8367":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:43322:7985":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:14090:19880":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:4801:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:29988:2525":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:9540:7939":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:25818:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"21:313:20008":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"1:4078:2543":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:7293:215":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14024:19873":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:8250:2474":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:46065:2753":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:5995:15517":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:7885:2437":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:43304:7982":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:9994:23315":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:2969:14599":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:784:2322":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13546:19841":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:47879:7901":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13890:19861":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:30437:26367":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:11213:8530":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:913:2304":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:43978:8042":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:5079:24471":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12066:999":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12711:19095":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3964:2533":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6735:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:40234:8310":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:30203:2333":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:8848:15671":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13838:19857":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:8686:15666":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"20:3785:20029":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"17:11573:15698":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"18:590:26752":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"20:61:2103":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"27:0:2084":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"25:23:14401":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:41777:200":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:357:30645":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:14478:19907":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:7476:139":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"21:282:20007":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"20:4209:2643":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"1:9028:22923":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:678:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:4021:26778":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:12724:26962":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:45694:2792":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:10616:2253":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:6206:8314":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:4045:106":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11205:23194":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:10818:23009":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9945:15732":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:3065:14602":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11088:23314":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:12944:147":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:4949:15248":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:1632:10041":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"7:0:1658":{"crate_id":7,"path":["unwind"],"kind":"module"},"20:3472:19990":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"17:11951:18573":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:42584:114":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"10:44:14472":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6759:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:4597:2592":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:113:20084":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2:11154:7987":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"20:3901:32009":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"6:4333:12588":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:43405:7989":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:41624:2297":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"20:4003:32082":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:3722:2338":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:636:31855":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:3201:23594":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:2058:2312":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:4474:12602":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:7976:26771":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:41768:2299":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:6721:15547":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:1876:2320":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:7478:14288":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11193:2653":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10685:15832":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:2321:14572":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:5634:15501":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:22097:26424":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4989:12657":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:10641:7995":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:4436:2257":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:955:2311":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:641:2276":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12484:15880":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:44273:8511":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9896:15716":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:11375:22558":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:40272:8320":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:3211:32037":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"20:3709:2487":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"2:2892:8366":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:11006:23216":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:0:1950":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:2992:7932":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:6456:15536":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"20:3863:20038":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"17:13174:19125":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:2907:14597":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:3865:2523":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"20:57:2099":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"6:5970:13326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:7573:2303":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13792:19853":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:45734:2804":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12959:19110":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13981:19869":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:7391:15563":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:9506:137":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"11:2473:30657":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12473:15879":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:7489:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12437:19080":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"25:0:2082":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"17:2209:15787":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:766:19941":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:9972:15726":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:7566:23402":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4488:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:8072:15591":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:507:31856":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:4068:7928":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5782:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4949:12652":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:40333:8325":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4631:12618":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:558:2250":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:1585:2320":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:10468:15818":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:41465:26418":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:7054:31102":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:2161:634":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:2012:15768":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:30807:200":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14068:19877":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10397:15814":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10637:15826":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"11:817:2304":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12208:18590":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2919:8371":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:3038:2138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:2526:14581":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"22:99:20051":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"2:43379:7972":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6243:15523":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:6983:29274":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:4344:15051":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:39988:8133":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:20922:27241":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:4259:2569":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7792:15586":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:43910:8038":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:10840:135":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4853:12642":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:8239:15600":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:11082:23325":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4943:12651":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13739:19852":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"20:4216:32113":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"6:6082:13336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4734:12627":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11124:15891":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:22969:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:3240:2321":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"23:319:20068":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:2258:101":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11173:15922":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:4016:2537":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:46331:26618":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:41543:2517":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:40802:8303":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:39978:8132":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:6720:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11111:15892":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10292:15686":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"20:3443:19988":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"18:113:19926":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:45965:2793":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:7011:23397":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:40192:7972":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:5994:13328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:3315:2492":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:5892:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5743:15508":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:3570:177":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:7582:15575":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:9131:181":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"23:0:2080":{"crate_id":23,"path":["anstream"],"kind":"module"},"6:6741:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"13:226:30721":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12007:18576":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:39294:2289":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:11636:8473":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:46385:26615":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"20:2776:2298":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"11:785:2302":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:2787:249":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:41524:2516":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:7538:12828":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:5661:15503":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:4417:15100":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:563:9142":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:21297:2445":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:2786:250":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"21:360:20010":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"6:6790:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4592:12615":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:1558:10035":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:7715:2253":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"20:3249:201":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"14:160:14496":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:6586:2299":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6083:14542":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"23:343:20064":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"16:2284:14543":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:8973:2694":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"20:2935:2092":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"16:2881:14596":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:44277:8512":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40281:8321":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4461:12600":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:21106:26807":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"14:40:18572":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:9790:31848":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:7102:15560":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:35:2353":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:2793:252":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12305:18597":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:41488:2524":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7503:15568":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:9071:15561":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:47996:7908":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:5633:8072":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:4428:29267":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"20:3290:19974":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"1:871:2300":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:2784:7930":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:6171:13365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9003:15676":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:46187:2820":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:7489:2142":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4913:12648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:7884:15589":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"26:41:20093":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"1:11640:24515":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:1983:202":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:44537:7921":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:123:8814":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:12079:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:5963:15515":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5049:12662":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12997:19113":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:2850:2723":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10714:15875":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:9106:21910":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:6696:14515":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:660:19942":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:1013:29265":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12496:19082":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:43544:7993":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:4416:8105":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:5816:31014":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:1840:2099":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:12074:1593":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:2501:2483":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:614:31870":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:45632:2757":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:9233:24531":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:1764:657":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1528:10032":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:624:31862":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11586:15699":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:11887:8523":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:40087:2399":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:8606:2283":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:2394:2303":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:13010:19114":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4960:12654":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5851:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:1259:2312":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:2225:29789":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:39927:8092":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11639:15701":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:45765:2752":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:4157:26025":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"15:306:14521":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"20:4156:32108":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"11:2165:14480":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:44446:224":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4792:12634":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5820:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:7239:2325":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10009:22932":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:7389:2296":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"15:0:1947":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:41997:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:609:31887":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:1413:2297":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6186:13366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13693:19837":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13040:19116":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4847:12641":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"10:36:30643":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9852:15713":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"20:3540:19985":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"18:690:19945":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:132:2632":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"9:52:14381":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:43676:8023":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"11:2479:30656":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13685:19849":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:2178:15762":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10059:15728":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:6944:30752":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:22804:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:11390:21914":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"9:486:14361":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:42858:2632":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:10672:15874":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11910:18571":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10430:15816":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:1507:10029":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:907:2303":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"7:31:14333":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12422:19079":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:7907:2435":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:7945:23710":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10628:15825":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4468:12601":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:0:1821":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"1:5268:207":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:3180:2319":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:8659:15646":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:3234:8379":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:6015:225":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:14536:19911":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:3185:29716":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11316:15917":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:7670:2268":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:4236:2297":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:9550:7946":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"11:1051:14484":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:2935:8374":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:434:14545":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"20:1364:19997":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"6:1682:10046":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4877:12645":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4997:12658":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4859:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:4070:2541":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9488:31835":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11547:15697":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13676:19848":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:3523:24133":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5085:12667":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:6726:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13710:19850":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:2582:23315":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:44104:8046":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"20:3510:19981":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"2:45995:2799":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41919:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13567:19843":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:3655:14607":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:3797:14624":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:39326:8380":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11327:15927":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11306:15703":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:7544:12829":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:2629:133":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:7251:2302":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"20:3925:32033":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"22:0:2079":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"17:13451:19839":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:8050:15590":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:2051:2339":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11295:15926":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:4640:8119":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:12049:23200":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:10878:23220":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"20:3883:32012":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"22:5:2533":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"11:666:2297":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:14514:19909":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:4826:2554":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:5830:15511":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13162:19124":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5435:31085":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14324:19896":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"20:3516:19984":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"2:39964:8130":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:7195:2500":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:11922:7999":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10410:15781":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11351:15929":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:489:9133":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5982:13327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13286:19132":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:3034:2137":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:10133:24182":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"11:1687:151":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:7480:160":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:41318:2512":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11244:15700":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:2929:133":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:10982:22931":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:9512:2437":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:5137:2670":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"20:3953:20030":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"17:10084:15723":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"23:459:20060":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"23:474:20058":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"6:5833:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1537:10033":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1496:10027":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:2305:14571":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"20:3080:2095":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"17:11000:15842":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:22639:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:2394:2431":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:42316:7939":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:43843:8020":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:1842:2297":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:1541:14488":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6883:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:41295:165":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:2845:2721":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:7162:26027":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"20:744:32092":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"6:6633:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:1184:15737":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:8926:15673":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12531:19084":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:2692:29239":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:3313:2491":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:7053:21907":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:4540:12610":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:1650:10043":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6425:15535":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"20:3231:32034":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"6:5013:12659":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:40129:2400":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:41682:2618":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:922:2306":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"20:3873:32036":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"2:43780:2470":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12111:18583":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:918:2305":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:5905:15513":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6742:14514":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:10393:2474":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:14126:19884":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12070:1116":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"20:4190:31958":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"16:5121:15300":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:7318:15562":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5049:15276":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11261:15915":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:41802:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"9:237:2632":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:39106:7933":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:3760:2522":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:2838:110":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:9015:111":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:47905:7903":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:1494:2305":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:41615:168":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:46141:2765":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:2367:206":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2948:8377":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:2380:14575":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"20:3629:20022":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"16:5403:15496":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11507:15695":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7090:31052":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13632:19846":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12043:18578":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"18:515:19952":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5897:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3958:2534":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:2927:231":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:10698:15854":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:9136:239":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:4066:2540":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"9:450:14362":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:400:15663":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:41352:2514":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:1604:10040":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:12083:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10023:15687":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:548:148":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:20905:27240":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"15:288:14520":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:863:2299":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43594:8027":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6041:15519":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:43825:8019":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"20:4088:31971":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"17:10197:15780":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"14:165:14497":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:21150:2744":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:40162:2414":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:5423:2644":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8323:2572":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:21280:2736":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13611:19845":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:44125:8048":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:6002:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:40016:8019":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:8237:2472":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"11:1882:2321":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13024:19115":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:12067:450":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5363:15494":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:7503:8050":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:43392:7973":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4943:2600":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:7310:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:4208:2568":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12154:18586":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13876:19860":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:40262:8319":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:9867:15714":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:2219:2416":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:14448:19904":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8318:2571":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10456:15788":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12452:19081":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"14:215:14505":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:7677:215":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:4921:15244":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:9102:15651":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:703:2305":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:638:2275":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:46619:2806":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:20875:27022":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:9762:31831":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:3764:14615":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"20:3934:32084":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"1:1781:2358":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:4034:29265":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6261:15524":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:6571:2681":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:4352:8102":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4700:12623":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:7601:12836":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:8953:15674":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:12072:1474":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:9201:24490":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:12065:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:11473:15693":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"20:4150:32097":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"5:1120:29413":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:1466:2300":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:2897:8370":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:1140:29717":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:6826:8074":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"11:860:2310":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:596:9147":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:42075:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:2538:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:20862:8148":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:7492:15567":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:5627:8312":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7568:15574":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4823:12638":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10962:15835":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9607:15685":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:6467:2302":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10534:15790":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:416:179":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:671:19943":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8146:2439":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:4613:15152":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:8865:2653":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:40777:8301":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:12689:143":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:40172:2413":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:5696:15505":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"20:3239:32083":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"5:6513:29265":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:6839:2726":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:1761:8401":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10097:15722":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:8263:2520":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:42829:26733":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:4770:2552":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:8257:2470":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"28:0:2085":{"crate_id":28,"path":["strsim"],"kind":"module"},"1:11342:24048":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2544:138":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:5860:2302":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:3255:8090":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13228:19129":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4379:12591":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8345:2573":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10012:15686":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:7796:22869":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"20:3943:20040":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"1:6174:2868":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:261:29265":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6204:15521":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:9921:15742":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"20:3221:32015":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"5:6816:8073":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8363:2602":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:3326:7934":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"9:426:14364":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:14308:19894":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:44158:8030":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:14056:19876":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10646:15872":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:9998:15724":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4838:12640":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:840:2297":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:8281:15601":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:10135:24508":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:4775:12632":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:6974:26494":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:1557:2297":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:11228:7980":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:13758:19836":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:12082:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:22903:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:42821:8161":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5939:15514":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46362:26619":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:1931:703":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:1642:8287":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"11:868:2311":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:3244:259":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:30243:8353":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:7621:15577":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6960:15556":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:3888:14667":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"20:3553:19993":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"17:14355:19899":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"18:681:19944":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:305:26771":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"17:3565:15859":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:45610:2751":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:542:9139":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:588:9146":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:9058:24052":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12267:18594":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"26:21:2097":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"2:44562:26707":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40023:8126":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"22:113:20052":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"1:4768:2549":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:2255:100":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2535:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13966:19867":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:707:8006":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:1067:2314":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:31991:2655":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1576:10037":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:11848:8524":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11551:2521":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"20:52:2101":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"17:9350:15648":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3023:2334":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:880:2324":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"0:0:1829":{"crate_id":0,"path":["clap"],"kind":"module"},"16:7360:31148":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:10376:24178":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:7614:14316":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:22672:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:4053:14784":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:9780:15689":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:3195:22807":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:40221:2471":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:32052:8428":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"18:481:19950":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:11666:8012":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:5156:208":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:3249:140":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:3125:2503":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:21227:2740":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:4373:12590":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:40000:8020":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5073:12665":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:43484:8018":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:5790:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:5409:2643":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"20:1172:19994":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"2:41880:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14401:19901":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"26:0:2083":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:39272:221":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:21491:2735":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"20:3840:2301":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"2:5509:2456":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"20:3964:20041":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"16:8181:15597":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:4395:2456":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:11179:2652":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:10186:2445":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4309:12586":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:80:19924":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:531:19953":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:43342:7984":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:2325:205":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:46701:2754":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13298:19133":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:11511:2522":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:4527:15138":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:40754:26479":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:10344:2297":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"28:32:20107":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"5:5375:7966":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:42846:152":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2832:14594":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:43353:7974":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"20:3491:19991":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"14:7:14496":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:43332:7983":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10603:15823":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"24:192:14401":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"11:1855:2303":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:9886:15715":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:12080:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"20:3792:20042":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"6:6030:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:22218:26379":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:10570:2493":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"11:2085:2314":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:1290:2313":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"15:327:14525":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:8227:2471":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:11971:18574":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12830:19103":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:2463:29241":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:44253:8515":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:6809:8309":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:2074:2313":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:40304:8323":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:6401:15533":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10978:2377":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:3044:2140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5063:12664":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:41649:2617":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10278:15763":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:4992:2609":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2551:262":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11337:15928":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:4187:2566":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:1850:2302":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:4463:8106":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:5774:2672":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13202:19127":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:13851:19858":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:1521:10031":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:10655:7998":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10285:2657":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"11:2487:30658":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:483:9132":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10520:15819":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:21482:2445":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10316:15769":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:7953:2485":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"20:3576:19979":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"2:4279:226":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:4848:222":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:45795:2758":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:3232:15836":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10447:14480":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:6797:8072":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10370:15761":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:7590:12835":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:43961:8041":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6968:15557":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:43434:7991":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:47575:2767":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:1525:14487":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:1561:2299":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:7708:15581":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6703:10155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:39153:8378":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:9564:15684":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"20:2975:32071":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"17:13113:19121":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11448:15692":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:62:8759":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:43496:8015":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4529:12609":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3234:2493":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"20:3268:2247":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"16:7597:31013":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:884:2301":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:1104:29719":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:14163:19888":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:9021:2247":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:7932:2328":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13816:19855":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:7255:2665":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3514:2390":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:10383:15760":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"20:3099:19972":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"2:7627:173":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:11187:7988":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11687:15702":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:582:15665":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14033:19874":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:42036:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11086:15920":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"13:110:30720":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:6568:2680":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:2894:23308":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:3915:14670":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:6037:13333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"20:3340:19971":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"17:10494:15791":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11191:15701":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8941:2693":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10980:15686":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:5982:15516":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13989:19870":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:2339:14573":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:7301:29159":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:9031:82":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:42155:95":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"20:4142:20015":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"18:736:19940":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3236:2494":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:1862:2318":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:43790:8022":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"20:3244:32099":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"17:9711:31847":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:14083:19879":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:22166:26713":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:9548:7945":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:2972:29179":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"21:173:32304":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"2:43932:8039":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:7443:8307":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7128:15561":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11074:15919":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1570:10036":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6189:31105":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:5999:2686":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10750:15833":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:2037:2338":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:1596:10039":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:21365:2734":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:6624:2684":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:2696:14588":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:12332:116":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:7271:29711":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:7862:15588":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:8134:15594":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:772:2301":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:44456:232":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:9146:156":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:20920:27243":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:47637:2801":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:43694:8024":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:1734:10051":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10193:23024":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:9701:15687":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:10991:2647":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:5384:15495":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:22182:26401":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:5760:15509":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10771:15853":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:3332:2303":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:5853:2284":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:5612:15500":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"11:841:2309":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11490:15694":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:22258:26371":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"15:394:14532":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:8183:2502":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11719:15704":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12252:18593":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14221:19890":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:5599:2650":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12934:19108":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:8513:2633":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:1579:2319":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"23:63:20079":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"2:9218:26773":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:2171:8391":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:8269:2519":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:47894:7902":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13949:19866":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10949:15834":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"14:0:1946":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8572:2635":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:2968:29178":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:40212:2349":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:8765:15668":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7474:15566":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:12896:111":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:14499:19908":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:6604:9015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:382:20011":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"16:6600:15545":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9137:15652":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:1072:30674":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13897:19862":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:10830:2438":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:495:9134":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:1573:2318":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:8825:15670":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:5798:15510":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7462:15565":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12172:18587":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12098:18582":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:21359:2732":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3949:2456":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:2810:14593":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12237:18592":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4320:12587":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13215:19128":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:2368:2421":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11661:15650":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:43526:2474":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:5667:2687":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:2334:2298":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:11407:15691":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4815:12637":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:12016:23160":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:6820:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5814:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2855:8361":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:599:31866":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:2933:14598":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:5017:15268":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6009:13330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11815:15937":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:5935:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:3261:8089":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:45520:2785":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:41701:210":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:40783:2501":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:2541:157":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:10548:7993":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5878:13278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:9521:15683":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:9207:15678":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:6910:8317":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"20:3046:2094":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"2:22324:26722":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:12776:8156":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:47859:7899":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:10903:15839":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:6580:9182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:2409:1957":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:49859:2748":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:7514:8051":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:1304:2315":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:1718:10050":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:42868:26708":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:5419:15497":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12092:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12087:1611":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:5660:2686":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:7792:2377":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6569:15543":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:12085:1609":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2909:8368":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:30237:8068":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6686:10157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:43080:7975":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:6212:26753":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:1058:2313":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11845:15938":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:4211:7961":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:12078:692":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:11071:20010":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:5808:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"12:0:1945":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"20:3986:20034":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"23:288:20066":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"17:12945:19109":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:2384:2426":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:40042:8128":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:41632:2298":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:13826:19856":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:46111:2759":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:5588:15499":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:534:2248":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5844:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:47783:2807":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8490:2632":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:40414:8315":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:7422:2397":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:505:2243":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:40404:8330":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:5653:225":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:7520:12825":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:5996:8733":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:44337:8531":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:10669:7996":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"3:0:475":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:22233:26749":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"20:3464:19989":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"1:8833:2651":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:2286:2314":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:44325:2725":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"23:358:20065":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2:9036:89":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:2406:14576":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:3274:2495":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"11:2260:2313":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:10265:15764":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:14460:19905":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:11250:22602":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:9959:15727":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:2943:8376":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:652:31856":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:119:8813":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:14296:19893":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10165:15753":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:1778:2303":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:3041:2139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:9933:15736":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:9086:15497":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"20:3591:26732":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"2:6217:20060":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:8389:2551":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:3073:2351":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:5905:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12671:19092":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:14269:19891":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:8337:2520":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:4365:29267":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"23:221:24133":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"6:4892:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:7222:2335":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:527:9137":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:44499:2866":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:1752:26720":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:10576:2491":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:7890:2434":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"11:1869:2319":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:40322:8333":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:47497:2795":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:644:31856":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:21056:2445":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:6222:24058":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:9085:23207":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4425:12596":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:44245:8510":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"20:3913:32107":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"5:2962:29412":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:4822:27984":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12184:18588":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7768:15584":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11710:15703":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:9010:24045":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:1036:2314":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:6924:23305":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:8097:15592":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:6277:2686":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:47245:2789":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:3698:2518":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:2744:14590":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:41564:198":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:4772:2553":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:40008:2271":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:6190:23323":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:10114:2368":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:45872:2825":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"18:582:8148":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:5915:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"21:127:32302":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"5:7465:2396":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:9985:15725":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:622:2273":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:4179:2565":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:6901:15553":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:42837:8160":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:44269:8517":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:46779:2760":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"23:134:20073":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"1:11851:21912":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:5569:8322":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11162:15886":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:7439:8308":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:22705:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6156:15520":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:9051:15647":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:21463:2731":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:0:1940":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:2864:14595":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:829:2308":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6818:15550":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:1044:2312":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6687:15546":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:7478:7960":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:40049:8129":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:43648:7995":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22150:26302":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11201:15887":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:40115:2398":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:932:2308":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:42330:7947":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:538:19954":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4849:2548":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:12091:1215":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:4774:15217":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"23:405:20071":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"23:390:20070":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"17:12658:19091":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:2574:14583":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:8895:15672":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4978:12656":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9455:31839":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:1564:2302":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6499:15539":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:14378:19900":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:4195:2567":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:9823:15712":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:10468:2651":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:40568:8332":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:6100:2456":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:7651:15578":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:40374:8328":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:12077:690":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:7722:15582":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13973:19868":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12062:18579":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:3802:2303":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:46543:2794":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10478:15813":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:44053:8044":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"11:822:2307":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11062:15918":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:4:1079":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:44257:8514":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:8594:15649":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11742:15705":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12737:19097":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"21:347:20048":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"1:8274:2511":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:40768:2676":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:4022:2538":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"22:28:2445":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"17:10440:15817":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:2548:14582":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10366:15774":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6531:15541":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:6672:238":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11281:15916":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:7406:24057":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:42566:69":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:11934:18572":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4805:12636":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4669:12621":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:5648:15502":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"28:72:20121":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"2:46017:2805":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:7555:12830":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:43424:7990":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}