{"root":"0:0:1700","crate_version":"4.2.7","includes_private":false,"index":{"2:11918:313":{"id":"2:11918:313","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11919:28572","`u8`":"1:11891:1490"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12022:34328":{"id":"2:12022:34328","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:34308":{"id":"2:11917:34308","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:34309":{"id":"2:11928:34309","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11880:1392","str::slice_mut_unchecked":"2:11929:34310","crate::ops::Index":"2:2970:2192"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11933:31244":{"id":"2:11933:31244","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11874:417"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43190:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:19617":{"id":"2:11949:19617","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41253:178","prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12004:34324":{"id":"2:12004:34324","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11634:7852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12029:28290":{"id":"2:12029:28290","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12002:34322":{"id":"2:12002:34322","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:1919":{"id":"2:11984:1919","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11609:7857","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::matches":"2:11984:1919"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43418:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:34311":{"id":"2:11938:34311","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43478:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11953:19618":{"id":"2:11953:19618","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41253:178","prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:28572":{"id":"2:11919:28572","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11891:1490"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5383:8204":{"id":"5:5383:8204","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:28605":{"id":"2:11963:28605","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11609:7857","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::split":"2:11957:26012"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43232:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:34984":{"id":"5:5389:34984","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:28558":{"id":"2:11916:28558","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11176:7861"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:26013":{"id":"2:11937:26013","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43468:2304","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:28611":{"id":"2:11940:28611","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12030:28286":{"id":"2:12030:28286","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12007:34325":{"id":"2:12007:34325","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:34326":{"id":"2:12016:34326","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11957:26012":{"id":"2:11957:26012","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11609:7857","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::split_whitespace":"2:11935:31021","str::rsplit":"2:11963:28605"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43214:2308","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:28609":{"id":"2:11975:28609","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11874:417","str::splitn":"2:11972:28607","self::pattern":"2:11609:7857"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43336:7844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:34315":{"id":"2:11981:34315","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:28603":{"id":"2:11960:28603","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11432:7848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12000:34321":{"id":"2:12000:34321","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12025:34329":{"id":"2:12025:34329","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11570:126","`FromStr`":"2:11569:2478"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41395:209","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11569:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11569:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5382:34982":{"id":"5:5382:34982","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2013","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2013","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:28569":{"id":"2:11922:28569","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41253:178"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12028:29694":{"id":"2:12028:29694","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39409:28557","Self::is_ascii":"2:12027:28289"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39409:28557","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:809":{"id":"2:11908:809","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11874:417"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:34313":{"id":"2:11969:34313","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11609:7857","str::split":"2:11957:26012","prim@char":"1:11874:417","str::split_terminator":"2:11966:34312"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43282:7876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:28607":{"id":"2:11972:28607","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857","str::rsplitn":"2:11975:28609"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43318:7846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5386:34983":{"id":"5:5386:34983","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:34312":{"id":"2:11966:34312","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11609:7857","str::split":"2:11957:26012","prim@char":"1:11874:417","`DoubleEndedIterator`":"2:7194:120","str::rsplit_terminator":"2:11969:34313"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43264:7877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12034:2110":{"id":"2:12034:2110","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4528:2110"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43522:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12003:34323":{"id":"2:12003:34323","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1700":{"id":"0:0:1700","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[119,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3-20:0:1690"],"is_stripped":false}},"2:12010:24124":{"id":"2:12010:24124","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5400:28288":{"id":"5:5400:28288","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12030:28286"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:34319":{"id":"2:11996:34319","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12031:28285":{"id":"2:12031:28285","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12032:34330":{"id":"2:12032:34330","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4527:34330"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43513:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11930:28594":{"id":"2:11930:28594","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11931:28595"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3-20:0:1690":{"id":"0:3-20:0:1690","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[98,0],"end":[98,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"clap_builder","name":"clap_builder","id":"20:0:1690","glob":true}},"2:11943:28612":{"id":"2:11943:28612","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:34310":{"id":"2:11929:34310","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11880:1392","crate::ops::IndexMut":"2:2974:2193","str::slice_unchecked":"2:11928:34309"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:34327":{"id":"2:12019:34327","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5399:2332":{"id":"5:5399:2332","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12027:28289":{"id":"2:12027:28289","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:34982","5:5383:8204","5:5386:34983","5:5389:34984","5:5397:34985","5:5398:34986","5:5399:2332","5:5400:28288","5:5401:28287"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11910:34305":{"id":"2:11910:34305","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11911:34306":{"id":"2:11911:34306","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:28568":{"id":"2:11920:28568","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41253:178"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:34317":{"id":"2:11990:34317","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11609:7857","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::rmatch_indices":"2:11993:34318"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43364:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5397:34985":{"id":"5:5397:34985","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5401:28287":{"id":"5:5401:28287","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12031:28285"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12035:34331":{"id":"2:12035:34331","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4525:34331"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43531:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:31302":{"id":"2:11939:31302","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43506:7858","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:23659":{"id":"2:11909:23659","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:28595":{"id":"2:11931:28595","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11930:28594"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:22852":{"id":"2:11934:22852","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43200:2307","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:31020":{"id":"2:11936:31020","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11935:31021"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43497:7859","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:34316":{"id":"2:11987:34316","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11609:7857","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::matches":"2:11984:1919"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43436:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:34314":{"id":"2:11978:34314","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:28571":{"id":"2:11926:28571","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:28614":{"id":"2:12013:28614","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5398:34986":{"id":"5:5398:34986","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2013","`String`":"5:7250:223"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2013","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907":{"id":"2:11907","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11908:809","2:11909:23659","2:11910:34305","2:11911:34306","2:11913:34307","2:11916:28558","2:11917:34308","2:11918:313","2:11919:28572","2:11920:28568","2:11922:28569","2:11924:28570","2:11926:28571","2:11928:34309","2:11929:34310","2:11930:28594","2:11931:28595","2:11932:31301","2:11933:31244","2:11934:22852","2:11935:31021","2:11936:31020","2:11937:26013","2:11938:34311","2:11939:31302","2:11940:28611","2:11943:28612","2:11946:28613","2:11949:19617","2:11953:19618","2:11957:26012","2:11960:28603","2:11963:28605","2:11966:34312","2:11969:34313","2:11972:28607","2:11975:28609","2:11978:34314","2:11981:34315","2:11984:1919","2:11987:34316","2:11990:34317","2:11993:34318","2:11996:34319","2:11998:34320","2:12000:34321","2:12002:34322","2:12003:34323","2:12004:34324","2:12007:34325","2:12010:24124","2:12013:28614","2:12016:34326","2:12019:34327","2:12022:34328","2:12025:34329","2:12027:28289","2:12028:29694","2:12029:28290","2:12030:28286","2:12031:28285","2:12032:34330","2:12034:2110","2:12035:34331"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11932:31301":{"id":"2:11932:31301","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11874:417"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43184:7864","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:28613":{"id":"2:11946:28613","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:7857"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:34318":{"id":"2:11993:34318","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11609:7857","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::match_indices":"2:11990:34317"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43382:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:7854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:28570":{"id":"2:11924:28570","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:31021":{"id":"2:11935:31021","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11936:31020"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43488:7860","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:34307":{"id":"2:11913:34307","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11911:34306"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11998:34320":{"id":"2:11998:34320","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"20:4454:19701":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"17:13419:19559":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10885:15501":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9772:15555":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:4:1011":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:8900:23520":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:6110:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12433:18803":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"30:7185:13147":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:2076:2082":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"20:4359:19699":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"16:6164:36563":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6151:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"22:100:19716":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"31:2713:19843":{"crate_id":31,"path":["rustix","backend","io","epoll","EventFlags"],"kind":"struct"},"8:0:1803":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:41608:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:42024:7797":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:43336:7844":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:4244:206":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:10675:2276":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:8975:24076":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:41202:2349":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:39914:7983":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:21889:2366":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:7098:2137":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"23:301:19733":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2:40112:2305":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"30:2167:9921":{"crate_id":30,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:9562:31710":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:46239:2615":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:264:33753":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:3974:2140":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"32:5226:21214":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr__bindgen_ty_1"],"kind":"union"},"16:7635:15384":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2777:2572":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"32:5773:21234":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"6:5717:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:42315:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4751:12475":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:1144:2153":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"30:4788:12281":{"crate_id":30,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:7555:12666":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:42770:30991":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"7:32:14151":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13015:19526":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:9359:8012":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:4634:2439":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"20:4237:19706":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"6:4836:12486":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2503:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"11:840:2147":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:43282:7876":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11258:18255":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:535:36225":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:42992:7831":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:21248:2594":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:5814:2510":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"29:181:19798":{"crate_id":29,"path":["io_lifetimes","views","FilelikeViewType"],"kind":"trait"},"2:39959:7982":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:43961:8362":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40083:7821":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:10214:7846":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:1844:1969":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:20447:8002":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:4568:14956":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"32:6343:13138":{"crate_id":32,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"23:262:19736":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"1:5330:2484":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4790:12480":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"32:6677:21283":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"1:8164:2345":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"30:4979:12449":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:6092:2719":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"32:6298:21259":{"crate_id":32,"path":["linux_raw_sys","general","tcp_md5sig"],"kind":"struct"},"32:4536:8866":{"crate_id":32,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"32:5904:13131":{"crate_id":32,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"20:3646:37509":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"2:2845:8231":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:2213:2255":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:20671:2585":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:40344:8184":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:12467:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:41166:31280":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"32:6606:21275":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"1:2367:2269":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:41888:2511":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:5017:25734":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1715:9918":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6671:14327":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13426:19560":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:7157:2134":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"20:734:37603":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"1:8068:2334":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:5830:8584":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"31:3671:38142":{"crate_id":31,"path":["rustix","backend","process","types","Signal"],"kind":"enum"},"22:0:1942":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"2:41648:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13506:19569":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6336:15335":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:7549:8159":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6506:15346":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:4904:15052":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:9871:22843":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:6628:8169":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10712:15708":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:42250:32230":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"13:110:36190":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:9453:15521":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:10936:15504":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6575:15350":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:10202:1962":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:8420:2474":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"32:6640:21279":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"2:44204:160":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7498:15375":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"31:4179:38218":{"crate_id":31,"path":["rustix","process","id","Pid"],"kind":"struct"},"32:5888:21247":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"2:39869:7989":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:40063:2251":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:9545:15529":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6254:15330":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:30145:8207":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4288:12430":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"31:4791:38226":{"crate_id":31,"path":["rustix","process","prctl","PrctlMmMap"],"kind":"struct"},"2:12278:8010":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"30:4558:10064":{"crate_id":30,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:3749:14425":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:4726:12472":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:7586:33421":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:10660:15508":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:8256:15451":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:4753:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6002:13151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"30:5256:12462":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"27:305:33421":{"crate_id":27,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"17:11721:18762":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:46269:2621":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:5498:2490":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:39195:7936":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"30:5136:12457":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:2822:8226":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:35:2195":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11155:23543":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"32:7117:21301":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update"],"kind":"struct"},"16:5708:15312":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8147:2304":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:43741:7893":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:31893:2495":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:8948:23548":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:5920:15319":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4499:12452":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:0:814":{"crate_id":6,"path":["libc"],"kind":"module"},"30:9212:12660":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:936:2146":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:8140:2308":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:4503:2430":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"30:806:8664":{"crate_id":30,"path":["libc","unix","FILE"],"kind":"enum"},"2:3068:2194":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11785:18764":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:4481:25770":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"30:5033:12452":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11896:787":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:46911:2644":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:21576:31210":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:5906:2526":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:399:36138":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:12282:18792":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:39973:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"30:5938:12505":{"crate_id":30,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"32:5696:8986":{"crate_id":32,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"1:930:2145":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:901:2140":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:3585:14416":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:10858:2494":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:44221:7771":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4911:12494":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:7347:7920":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"31:4847:38163":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeature"],"kind":"enum"},"2:6722:8150":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40181:31003":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4797:12481":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:4120:2406":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:1724:8258":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12563:18812":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"31:4668:38191":{"crate_id":31,"path":["rustix","process","prctl","TimingMethod"],"kind":"enum"},"32:4957:9899":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreqn"],"kind":"struct"},"30:5725:12484":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11993:18774":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"32:4558:14134":{"crate_id":32,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"2:3924:2293":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"14:215:14320":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"30:7042:13142":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:39030:199":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13066:19531":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:43522:2111":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:3435:2232":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:5346:15302":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:2747:2571":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11136:15714":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"32:4827:21200":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1"],"kind":"union"},"1:3203:2329":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11544:18273":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12483:18806":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13516:19570":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:4315:7960":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"30:8181:13565":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9734:15549":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"32:4806:21197":{"crate_id":32,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"2:2686:224":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"32:5094:21212":{"crate_id":32,"path":["linux_raw_sys","general","ip_beet_phdr"],"kind":"struct"},"6:1594:9907":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:9061:2232":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:361:2107":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"26:41:19760":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"16:2830:14404":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:41728:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:9876:15601":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:22138:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"30:4805:12440":{"crate_id":30,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"30:6783:13132":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:43067:7821":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:10941:23667":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"26:0:1946":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"32:7387:9917":{"crate_id":32,"path":["linux_raw_sys","general","mmsghdr"],"kind":"struct"},"30:4605:12432":{"crate_id":30,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"30:5478:12471":{"crate_id":30,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:9696:15536":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:39855:7987":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:3047:14411":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:43468:2304":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"29:37:19786":{"crate_id":29,"path":["io_lifetimes","portability","IntoFilelike"],"kind":"trait"},"2:10242:7847":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:3030:14410":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"32:7298:9838":{"crate_id":32,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"1:10455:2092":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:3990:2380":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:6201:15327":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5797:36219":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"11:1852:2141":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"30:9276:14134":{"crate_id":30,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:3862:19665":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"14:31:14311":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:1589:2158":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:6753:2574":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:9322:37269":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:7259:2455":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"23:366:37846":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"17:12293:18793":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:41083:2346":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:1537:2293":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"32:6389:8992":{"crate_id":32,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"5:4320:244":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"32:6108:21256":{"crate_id":32,"path":["linux_raw_sys","general","tcp_ca_state"],"kind":"enum"},"6:474:8982":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:46003:2649":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"20:3798:19680":{"crate_id":20,"path":["clap_builder","builder","styled_str","Styles"],"kind":"struct"},"2:20752:2592":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:5484:7923":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"20:4001:19674":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"16:7103:15366":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:5741:15314":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:21629:31356":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2862:209":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"23:348:19739":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"2:45078:2636":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43714:7892":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:3350:2293":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"24:304:19748":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"16:8180:15404":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:1783:2199":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"32:7126:21302":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update2"],"kind":"struct"},"6:5032:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6935:15361":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"29:189:19801":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeView"],"kind":"struct"},"2:9594:31711":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:9866:15567":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3672:2356":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"30:5321:12465":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"32:6932:21293":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_9"],"kind":"enum"},"2:11397:8374":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:10440:15698":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11628:18279":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:6854:15357":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"32:5070:21209":{"crate_id":32,"path":["linux_raw_sys","general","ip_auth_hdr"],"kind":"struct"},"2:42017:7789":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:41319:2136":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"32:4510:21175":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"6:4743:12474":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"30:5496:12472":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:814:2161":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"20:3659:37604":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"5:1241:2153":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"32:5799:21237":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"1:8253:2440":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:40583:8158":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"31:4145:38203":{"crate_id":31,"path":["rustix","process","id","Uid"],"kind":"struct"},"2:9105:7788":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6990:15364":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6008:13152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"32:4588:21179":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"17:9488:15537":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4571:22827":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:1622:9910":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:4757:15025":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"33:0:1952":{"crate_id":33,"path":["anstyle_query"],"kind":"module"},"16:3872:14476":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12178:18787":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:7173:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"30:6721:13071":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:8651:14350":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:11823:24132":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"32:5300:21219":{"crate_id":32,"path":["linux_raw_sys","general","rt2_hdr"],"kind":"struct"},"1:2864:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:6307:15332":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:41768:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6981:15363":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:11381:8372":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"30:6813:13133":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:917:2142":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:7061:197":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:44140:210":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"14:221:14321":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10967:15505":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4331:12434":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"31:4115:38182":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdClockId"],"kind":"enum"},"6:4732:12473":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:40246:8178":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:46193:2609":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11844:18766":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:6441:33753":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"30:7476:13183":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"31:479:19838":{"crate_id":31,"path":["rustix","backend","io","epoll","Owning"],"kind":"struct"},"17:12138:18785":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"30:7021:13141":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:7521:23692":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:4986:25734":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:3329:19651":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"17:13678:19578":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:9188:37299":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:40256:8179":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:7443:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"32:5610:21229":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"2:10062:7835":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10691:15706":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"32:6585:21272":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"1:8201:2349":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:12399:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:6534:2524":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"27:182:19766":{"crate_id":27,"path":["anstyle","color","Color"],"kind":"enum"},"32:7278:9837":{"crate_id":32,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"17:13744:19582":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12510:18808":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13233:19542":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:959:2149":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:9994:25585":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4851:12488":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:1546:9902":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:8521:15478":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6327:15334":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:2811:8223":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:11891:1490":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:4538:12456":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"11:1050:14300":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"9:234:2472":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:564:19635":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43965:8363":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12372:18799":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:2738:8193":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:5032:15084":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:7502:23683":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4674:2386":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:45249:2619":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5000:15076":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:4774:31895":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8996:23552":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:11532:18272":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:45623:2675":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:9955:2136":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:2308:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"23:153:19725":{"crate_id":23,"path":["anstream","lockable","Lockable"],"kind":"trait"},"27:282:19769":{"crate_id":27,"path":["anstyle","color","RgbColor"],"kind":"struct"},"2:6539:8162":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:13721:19581":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:9115:7796":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"30:5783:12487":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:44233:7769":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"20:3636:37489":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"17:10721:15672":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"15:219:14334":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:2357:2264":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4932:12496":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1721:2398":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:43949:8369":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:9350:37304":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"30:5981:12510":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:4176:7810":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:7578:14135":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:22369:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"32:5307:21220":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_destopt_hao"],"kind":"struct"},"9:388:14181":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:8931:15454":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:9265:15492":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4728:15020":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:43030:7833":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:2974:2193":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:41438:2135":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:8203:2459":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"20:3978:37518":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"17:9933:15577":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"30:2143:9919":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12033:18777":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"20:4307:37511":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"2:4800:793":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:521:19629":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5947:13145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4875:12491":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:42515:8015":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:7774:2274":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"30:7282:13152":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:5886:15318":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"20:4298:37512":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"30:728:8995":{"crate_id":30,"path":["libc","unix","itimerval"],"kind":"struct"},"20:2982:37346":{"crate_id":20,"path":["clap_builder","builder","app_settings","Flags"],"kind":"struct"},"2:45601:2669":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:39990:31362":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:1978:15572":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:39236:7945":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"30:7143:13145":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7652:197":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:699:19626":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:40265:8180":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"20:3705:19653":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"30:8458:13576":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:2341:2259":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4492:12451":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:30105:2170":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:1071:36142":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"32:5245:8988":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_mreq"],"kind":"struct"},"32:176:19864":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenUnionField"],"kind":"struct"},"20:4269:19707":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"11:1540:14304":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"32:7138:21303":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe_op"],"kind":"struct"},"1:11894:1489":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"20:4472:37505":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"2:39046:197":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:3968:2376":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7275:13947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11193:15716":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:4251:2408":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:5594:15305":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:11084:2536":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:30139:7919":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:7658:2154":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:4431:2413":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:2303:187":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"11:867:2149":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"32:6614:21276":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"31:2854:19829":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFlags"],"kind":"struct"},"17:10142:15656":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"30:5706:12483":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:43937:8364":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3978:2377":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:1859:2156":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2786:14402":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:43112:7839":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1539:9901":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:3774:2086":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"2:43318:7846":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"32:6749:21290":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_7"],"kind":"enum"},"17:13376:19555":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:8490:15477":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"30:5914:12503":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:3815:14443":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6520:15347":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:2781:8219":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"32:4713:21189":{"crate_id":32,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"1:731:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:20915:2583":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:9101:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:40163:8172":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:6603:7925":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:12915:19522":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"30:5883:12500":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:11609:7857":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"30:573:8987":{"crate_id":30,"path":["libc","unix","rusage"],"kind":"struct"},"2:21738:2362":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"20:4349:19709":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"32:6569:21270":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"16:4932:15056":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:8047:15396":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:9109:7798":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"32:5729:9033":{"crate_id":32,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"1:7847:2319":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2806:8222":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"11:703:2144":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:21027:2583":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:6651:9838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6146:193":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:2840:8230":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"32:4651:21186":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"18:636:37317":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:9113:7795":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:3146:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:7317:36568":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:11161:2498":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:2188:33679":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:2545:23689":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:652:37318":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:39134:202":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:1924:2231":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"11:60:36137":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"30:9104:14106":{"crate_id":30,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:1577:2156":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:22435:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:1077:34299":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"22:159:19719":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"30:5987:12511":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"31:2530:38238":{"crate_id":31,"path":["rustix","process","uname","Uname"],"kind":"struct"},"2:2345:188":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:3306:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:6535:36231":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:6442:15342":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4546:12457":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13477:19566":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"30:745:8996":{"crate_id":30,"path":["libc","unix","tms"],"kind":"struct"},"2:42531:8014":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:42306:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:2904:7773":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:3755:19650":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"1:11188:24072":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"32:4753:21192":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"20:4279:37493":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"16:2470:14389":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:2115:33717":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11556:18274":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"30:4731:12437":{"crate_id":30,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:0:285":{"crate_id":5,"path":["alloc"],"kind":"module"},"32:7106:21300":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_register"],"kind":"struct"},"16:7757:15390":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:9055:2286":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:5655:15309":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4821:12484":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:39222:31390":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:6024:36047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"30:5412:12468":{"crate_id":30,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"30:7302:13153":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:11634:7852":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:44148:194":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:43232:7842":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"23:163:19726":{"crate_id":23,"path":["anstream","raw","RawStream"],"kind":"trait"},"20:36:1972":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"16:7509:15376":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"30:1948:9910":{"crate_id":30,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"32:5275:12491":{"crate_id":32,"path":["linux_raw_sys","general","in6_ifreq"],"kind":"struct"},"5:632:33821":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:5847:15317":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:3906:2372":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"32:6310:21260":{"crate_id":32,"path":["linux_raw_sys","general","tcp_diag_md5sig"],"kind":"struct"},"2:5482:8174":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:31998:8195":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4370:7962":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"24:89:19743":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"6:4571:12460":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:7497:12658":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:6785:13571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"23:434:19727":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"6:5077:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:47113:2671":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"31:4542:38213":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointExceptionMode"],"kind":"struct"},"2:2506:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11230:25647":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:43488:7860":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"15:180:14329":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:1565:2137":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"31:3909:38223":{"crate_id":31,"path":["rustix","backend","time","types","DynamicClockId"],"kind":"enum"},"16:6868:36222":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"31:4686:38187":{"crate_id":31,"path":["rustix","process","prctl","EndianMode"],"kind":"enum"},"1:11888:741":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11946:18772":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6890:15359":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5104:15108":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:43953:8367":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:5798:13136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:7011:27979":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:4510:14946":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:8911:2086":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8799:2532":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"24:255:1972":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"32:5865:21245":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"2:45046:2606":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"32:5618:21230":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"17:9557:15491":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:6481:2520":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:30737:8002":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"32:7235:2442":{"crate_id":32,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"23:245:19735":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"1:844:2135":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:1715:2141":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:13101:19516":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11459:18267":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:618:2113":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:4253:7955":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:9917:15599":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7335:36622":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:1895:2230":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:3687:2175":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:21790:31389":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"30:8295:13569":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:947:2147":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1657:9912":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:579:8996":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"32:5085:21211":{"crate_id":32,"path":["linux_raw_sys","general","ip_comp_hdr"],"kind":"struct"},"2:2509:237":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:10935:23663":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:41488:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:4136:2293":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:41189:2358":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6431:15341":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:3870:2371":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:47372:7756":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4767:12477":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11878:311":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:2192:36122":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13135:19534":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"30:9240:12662":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:5708:2140":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:43214:2308":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:888:2139":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"13:226:36143":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:45431:2654":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:47449:7759":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13024:19527":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:40103:2190":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"32:5666:9045":{"crate_id":32,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"17:12923:19523":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:420:14356":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4970:12501":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2816:8225":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:7520:12661":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"11:1839:2135":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"27:261:19768":{"crate_id":27,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"16:2502:14390":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:1846:2216":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:20488:30865":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:4409:2412":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:9178:1969":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"20:4340:37496":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"14:0:1808":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:731:2138":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"32:6711:21286":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_2"],"kind":"union"},"32:5602:21228":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"2:9480:8335":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4478:12449":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:1572:2141":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:13857:19590":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"20:1361:19673":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"6:1519:9898":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4688:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"30:2093:9916":{"crate_id":30,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43792:7895":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:6628:9864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11895:1486":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"32:6081:21255":{"crate_id":32,"path":["linux_raw_sys","general","tcp_fastopen_client_fail"],"kind":"enum"},"5:5903:2293":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:9107:7797":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5935:13144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:10774:7837":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:9108:37292":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:4004:33753":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10491:15668":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:828:2146":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:614:37325":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:43957:8368":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7077:15365":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:42540:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"31:4725:38145":{"crate_id":31,"path":["rustix","process","prctl","MachineCheckMemoryCorruptionKillPolicy"],"kind":"enum"},"2:4134:7967":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:2764:14401":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"30:1929:9909":{"crate_id":30,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:5190:33753":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"15:0:1809":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:6478:2519":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"30:5117:12456":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4486:12450":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2918:2009":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"32:5626:21231":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"1:7779:2275":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"32:6705:21285":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1"],"kind":"union"},"1:8403:2473":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"30:2130:9918":{"crate_id":30,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:690:19625":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11861:18767":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:4849:2438":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"30:6871:13136":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11573:18275":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:3055:2337":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:20893:2387":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:1080:2153":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"32:6623:21277":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"2:9980:2308":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"32:5788:21236":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"11:119:36119":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12980:19525":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"30:712:8994":{"crate_id":30,"path":["libc","unix","sigval"],"kind":"struct"},"17:9028:15487":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:11020:24118":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:47334:7754":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:2967:14409":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:12192:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:10685:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:10307:2491":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:10256:7845":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11653:18281":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:40575:8156":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:9096:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4619:12463":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"20:3359:19678":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"11:326:36129":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:9653:15566":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:3774:33753":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:44954:2599":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:9748:15491":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:1736:9920":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3242:2325":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:6362:2137":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"32:5263:12472":{"crate_id":32,"path":["linux_raw_sys","general","in6_pktinfo"],"kind":"struct"},"18:755:19628":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:9853:15600":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:744:2139":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12113:18783":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:40134:8164":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:43190:7863":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10316:15613":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:8858:15485":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3123:2157":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:9071:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:7217:2011":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"32:7204:21308":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_getevents_arg"],"kind":"struct"},"30:8351:13571":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40143:8170":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:4365:2293":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4840:2437":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"32:7157:21305":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction"],"kind":"struct"},"1:7686:2219":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:3752:2141":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"32:4628:21183":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"32:5964:21249":{"crate_id":32,"path":["linux_raw_sys","general","tcphdr"],"kind":"struct"},"22:130:19718":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"1:5760:2522":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:6558:15349":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"30:7925:9837":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:39839:31234":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:21354:30697":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:39940:7986":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"11:1561:14305":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13211:19540":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"32:4975:21203":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:13651:19575":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:11301:23564":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"14:40:18256":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:40295:8182":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"32:5748:8994":{"crate_id":32,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"1:4171:2407":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"30:7246:13150":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"30:539:8985":{"crate_id":30,"path":["libc","unix","timespec"],"kind":"struct"},"1:8905:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:41446:2136":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2900:2171":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:1564:9904":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8040:2277":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:1462:2173":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4590:12461":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13367:19554":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2339:2258":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"20:4392:19703":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"6:4527:12455":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:21682:31404":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12019:18776":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:30339:31880":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6919:36499":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"30:4927:12446":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"20:4649:1967":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"11:675:2143":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13469:19565":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"32:6632:21278":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"17:11770:18763":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:8573:15480":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"22:5:2370":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"17:11011:15455":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40541:2122":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:8629:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:47235:2677":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"20:2897:37345":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"30:5893:12501":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7411:15369":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5779:13134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"31:438:7961":{"crate_id":31,"path":["rustix","backend","io","epoll","Ref"],"kind":"struct"},"20:3398:37346":{"crate_id":20,"path":["clap_builder","builder","arg_settings","Flags"],"kind":"struct"},"17:8753:15482":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"11:1873:2158":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:5058:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:10023:7848":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:11138:23664":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"18:80:19604":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:20681:8246":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"18:507:37318":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:6830:13575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8472:2135":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:43826:7878":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5065:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:9579:23689":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"30:2005:9912":{"crate_id":30,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4827:12485":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:12205:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:4069:27984":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:9959:15603":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:20475:30700":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:4817:203":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:8443:15476":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:62:8610":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:5677:15310":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2580:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"27:127:37954":{"crate_id":27,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"17:13292:19547":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"20:4009:32247":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"1:7663:2155":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:11442:7765":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:1034:15538":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:1682:9914":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3275:2141":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:6668:9841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8159:2353":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:5435:2487":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"32:5872:21246":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:4813:12483":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:9249:31351":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:43001:7830":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"32:4635:21184":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"6:500:8986":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"31:3611:38104":{"crate_id":31,"path":["rustix","backend","process","types","Resource"],"kind":"enum"},"20:3688:19652":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"20:2720:2136":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"1:8863:2534":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"31:457:106":{"crate_id":31,"path":["rustix","backend","io","epoll","Context"],"kind":"trait"},"30:4714:12436":{"crate_id":30,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:2086:33922":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"32:5712:13946":{"crate_id":32,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"16:5963:15321":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4890:12492":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:1433:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"30:5555:12475":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:9443:15520":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:9111:193":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:8127:2306":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"30:5650:12480":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:3378:2280":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:2406:33892":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5051:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:40020:2238":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"30:7228:13149":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:6243:2140":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"30:1726:9899":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"30:5277:12463":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"30:9176:12657":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:4000:31376":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:43010:7834":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:2827:23679":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:9031:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8312:2451":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"32:5825:21240":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:40213:8185":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:5063:190":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:39015:8232":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:506:8987":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:47387:7757":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13411:19558":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"20:51:1970":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"31:4360:38200":{"crate_id":31,"path":["rustix","process","prctl","UnalignedAccessControl"],"kind":"struct"},"29:42:19787":{"crate_id":29,"path":["io_lifetimes","portability","IntoSocketlike"],"kind":"trait"},"30:783:8998":{"crate_id":30,"path":["libc","unix","protoent"],"kind":"struct"},"30:7203:13148":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"32:5835:21241":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"2:21:679":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:4719:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:8109:15399":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:43945:8365":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"27:173:37953":{"crate_id":27,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"6:4521:12454":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2500:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:42562:31212":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"20:916:19654":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"6:4318:12433":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:4379:7963":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:5693:15311":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10580:15701":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5862:13140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"32:4547:13561":{"crate_id":32,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"5:6289:33753":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:38968:7784":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:8208:2409":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:43620:7888":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"27:334:19771":{"crate_id":27,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"18:609:37339":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13257:19545":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"32:6785:21291":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_8"],"kind":"enum"},"15:198:14330":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11924:18771":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:6814:13573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4459:12446":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:2763:8217":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:11614:7853":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"30:522:8984":{"crate_id":30,"path":["libc","unix","timeval"],"kind":"struct"},"30:7166:13146":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:7252:23551":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"32:5913:13071":{"crate_id":32,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"2:6675:31449":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"32:5594:21227":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"16:7016:36608":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"30:6986:13139":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:47051:2650":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:3610:2352":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:727:19627":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6598:13563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"30:2027:9913":{"crate_id":30,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9478:15539":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7449:15371":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:7814:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"30:8924:13947":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5829:13099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:42010:7788":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:43200:2307":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"30:8134:9841":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:41808:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:22237:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"30:8402:13573":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13659:19576":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10735:15709":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:7233:2235":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:20460:30700":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"32:5843:21242":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"17:8718:15457":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:0:1810":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:45745:31358":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"32:7076:21298":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_11"],"kind":"enum"},"2:12226:31102":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12902:19521":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"25:23:14219":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:11176:7861":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:7090:2137":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"32:6325:21261":{"crate_id":32,"path":["linux_raw_sys","general","tcp_zerocopy_receive"],"kind":"struct"},"16:7029:36565":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12318:18795":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"30:6763:13131":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:9973:15576":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12449:18804":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10545:15506":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:4206:2135":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"32:4833:21201":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"1:6184:2526":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:6132:15325":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:7529:15378":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:47308:7752":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:3533:2135":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"20:3654:37494":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"30:2074:9915":{"crate_id":30,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"20:3965:19663":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"6:7258:13946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:3357:7928":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"31:4829:38111":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointMode"],"kind":"enum"},"16:2694:14398":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"30:6893:13137":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:42552:2472":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:5715:2514":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10516:15664":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:3631:2137":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4371:12436":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3163:2327":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1576:9905":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6236:15329":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5015:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12307:18794":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"9:502:14183":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:679:230":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"30:4962:12448":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:393:36136":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:8755:2493":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:41387:192":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:12158:18786":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:7935:2321":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"32:5739:12355":{"crate_id":32,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"17:13219:19541":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9523:15531":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"34:72:22780":{"crate_id":34,"path":["strsim","StrSimError"],"kind":"enum"},"16:5724:15313":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"32:6413:8990":{"crate_id":32,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"2:41225:2350":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6016:13153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6460:15343":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:6405:2523":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:5418:36556":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:3223:7782":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:3720:19655":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"2:40224:8177":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"20:3683:2086":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"20:4176:19682":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"1:4323:2402":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:7565:2108":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"30:4905:12445":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"32:7261:21310":{"crate_id":32,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"30:695:8993":{"crate_id":30,"path":["libc","unix","linger"],"kind":"struct"},"17:13121:19533":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10569:15667":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:41848:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11890:738":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"30:1781:9902":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:3149:2158":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"14:165:14312":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"30:505:8983":{"crate_id":30,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:45409:2648":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"32:6043:21253":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_window"],"kind":"struct"},"6:482:8983":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10989:15506":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:1196:2150":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:9498:15536":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:665:2137":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:8729:185":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:41060:154":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"30:8377:13572":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"30:641:8990":{"crate_id":30,"path":["libc","unix","iovec"],"kind":"struct"},"1:3127:25913":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:4898:2447":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:7467:15372":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:7065:36559":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:1709:9917":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11891:18769":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:10257:15617":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:1611:33753":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7767:15391":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:8961:15366":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:43635:7889":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:8360:15473":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11886:743":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:41378:8309":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:22402:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:2682:2005":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"9:421:14182":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:2921:2010":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:47253:7747":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"30:1687:9045":{"crate_id":30,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:5779:15315":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12358:18798":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10649:15704":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"30:5094:12455":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3165:2328":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"30:4884:12444":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:11623:7855":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8793:2137":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11832:15658":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11090:15510":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"10:36:36117":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3988:31411":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:2737:8192":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"20:3276:1964":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"17:12894:19520":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"32:4988:21204":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"1:480:23687":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6321:15333":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:2337:14383":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12835:19519":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"9:445:14180":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"32:5880:9921":{"crate_id":32,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"5:5234:7814":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:6129:23525":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:9512:15532":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:42333:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:11386:2357":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13249:19544":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:49255:2597":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:5900:13143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:46659:2638":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:5559:2526":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:44191:2716":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:7031:2164":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:5941:8186":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"32:5314:21221":{"crate_id":32,"path":["linux_raw_sys","general","ipv6hdr"],"kind":"struct"},"16:7626:15383":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"31:498:19839":{"crate_id":31,"path":["rustix","backend","io","epoll","Epoll"],"kind":"struct"},"16:8072:15397":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"30:7425:13182":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"31:4196:38146":{"crate_id":31,"path":["rustix","process","id","Cpuid"],"kind":"struct"},"17:10743:15495":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10761:15496":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:554:2089":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:7485:12656":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2594:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"32:5983:21250":{"crate_id":32,"path":["linux_raw_sys","general","tcp_word_hdr"],"kind":"union"},"17:13443:19562":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:29916:2361":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12194:18788":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:7023:2140":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:42755:8354":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:10412:2329":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:3621:33753":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"30:5922:12504":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:20715:2591":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:4248:7954":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:12410:2717":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12259:18791":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:653:9045":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:8478:2476":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:1588:9906":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"32:6980:21296":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_params"],"kind":"struct"},"20:4532:19685":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"16:7669:15385":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:10555:15665":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:1994:2175":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:0:495":{"crate_id":2,"path":["core"],"kind":"module"},"17:13461:19564":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:926:2144":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"32:4782:21195":{"crate_id":32,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"2:2742:2569":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:44021:8382":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"30:2151:9920":{"crate_id":30,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"32:6473:21266":{"crate_id":32,"path":["linux_raw_sys","general","new_utsname"],"kind":"struct"},"2:11321:8373":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:22303:2098":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6876:15358":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10705:15707":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"32:5765:21233":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"1:1561:2135":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:4398:33771":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:2808:14403":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:3131:8233":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:40172:8173":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:20780:2586":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:2460:2387":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:6005:23673":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:11486:14338":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:494:8985":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:1728:9919":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13433:19561":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11902:18770":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:8788:15483":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:2832:8228":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"32:6357:14106":{"crate_id":32,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"17:11446:18266":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"32:4615:21181":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"16:2319:14382":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:6574:7923":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:45286:2674":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:2675:219":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"32:6649:21280":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"30:7953:8866":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:4191:19698":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"17:13240:19543":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"32:6669:21282":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"5:4046:2136":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:1057:33900":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:41100:2347":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:7509:12660":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"30:809:8665":{"crate_id":30,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:44978:2635":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"20:54:1971":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"17:10402:15684":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"9:352:14196":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10104:15611":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:541:8990":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:6593:7924":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:45698:31300":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:5755:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"20:3897:19668":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"2:20833:2387":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"10:44:14288":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:22468:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9670:15552":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:40550:8154":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"20:0:1690":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"32:5896:21248":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"5:1431:2143":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:11432:7848":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"32:5754:21232":{"crate_id":32,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"17:13316:19549":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4999:12504":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:11629:7854":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:38929:7948":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:43364:7872":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11391:18262":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:547:8991":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:11884:640":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"30:5298:12464":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"23:319:19748":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"5:6691:243":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:44183:2715":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4952:12499":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"30:480:8610":{"crate_id":30,"path":["libc","unix","DIR"],"kind":"enum"},"30:5817:12489":{"crate_id":30,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:43158:7870":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:9138:15489":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:6717:14326":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5022:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:7330:2141":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:1403:2138":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:5794:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:39879:7990":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:43969:8381":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:9228:37290":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:1747:8257":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4678:2391":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:10640:22812":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:41528:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"30:2052:9914":{"crate_id":30,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13145:19535":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"30:5974:12508":{"crate_id":30,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"32:5020:9911":{"crate_id":32,"path":["linux_raw_sys","general","in_pktinfo"],"kind":"struct"},"11:768:2141":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:40316:2306":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:1866:2157":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:41146:32248":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:2862:14405":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10823:15498":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43184:7864":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:4789:15033":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4392:12439":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10857:15500":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:3142:15619":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"18:0:1812":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7697:15387":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:10650:2272":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"9:325:14235":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:6116:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:40281:8181":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"20:4548:19684":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"2:41454:2137":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:487:15469":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:5785:13135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:2789:8220":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"30:1869:9906":{"crate_id":30,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"3:229:209":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:119:8664":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:8953:23535":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:3124:23909":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:4969:15069":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4653:12466":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:20505:30862":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8279:2389":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:6735:33778":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:21698:32231":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11282:18256":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13082:19532":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:3934:2375":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13053:19530":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:1568:2140":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"30:5955:12507":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:4480:14940":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:7156:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:452:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"30:5763:12486":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:8785:2535":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:3444:30467":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:2905:33965":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"23:231:19734":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"30:9252:12665":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12098:18782":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8769:2494":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:2426:14387":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"30:5836:12490":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:9822:15560":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4377:12437":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:45000:2640":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:4681:2369":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:10663:22810":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"20:4596:37424":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"2:31933:8280":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"32:7338:21312":{"crate_id":32,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"2:7542:2165":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"30:7322:36047":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:6328:25727":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:1583:2157":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"32:7356:13136":{"crate_id":32,"path":["linux_raw_sys","general","msghdr"],"kind":"struct"},"20:4494:37423":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"32:6138:21257":{"crate_id":32,"path":["linux_raw_sys","general","tcp_info"],"kind":"struct"},"32:5041:12474":{"crate_id":32,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"2:41568:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"20:63:1973":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"2:43846:7879":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:43506:7858":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:7588:15381":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:210:7787":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:8134:2307":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:5366:2486":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"11:2076:2151":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:7204:31362":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43020:7832":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"32:6421:2398":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_un"],"kind":"struct"},"17:11969:18773":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:279:2013":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"30:8329:13570":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"31:4162:38185":{"crate_id":31,"path":["rustix","process","id","Gid"],"kind":"struct"},"1:7791:2276":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"20:1607:19689":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"30:5945:12506":{"crate_id":30,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:47357:7755":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12607:18815":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:5238:7815":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:42290:32247":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:2907:33903":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10377:15618":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"32:5642:8984":{"crate_id":32,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"6:4509:12453":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4383:12438":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2970:2192":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10015:15651":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:43382:7873":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:2209:2254":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8886:2515":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:3310:1965":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"1:8213:2410":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"32:4599:21180":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"17:9534:15530":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:8420:15475":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:6548:2525":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:39156:2127":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:1908:10064":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:4845:15041":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:766:19621":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"30:7002:13140":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:1768:608":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:7053:2137":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:2168:33904":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:45209:2607":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:8142:15401":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11889:742":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"30:2136:2398":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2461:8006":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:1634:36120":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11899:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:6136:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"32:6660:21281":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"16:154:14359":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:3928:2374":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:1555:9903":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10465:15670":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10416:15696":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"32:5805:21238":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"2:1658:1084":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"32:5236:9903":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in6"],"kind":"struct"},"1:4569:22825":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:40330:8183":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:7264:7899":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12522:18809":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"32:4645:21185":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"17:13499:19568":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:1879:2159":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:6097:23658":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:2931:14408":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:7583:2093":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"24:113:19750":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"16:8156:15402":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5557:15303":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11856:24110":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:247:37293":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"30:1744:9900":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"32:5814:21239":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"32:4467:21173":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"30:4828:12441":{"crate_id":30,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:3982:2378":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:6232:205":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:2206:2253":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"32:5009:21207":{"crate_id":32,"path":["linux_raw_sys","general","group_filter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"27:0:1947":{"crate_id":27,"path":["anstyle"],"kind":"module"},"1:11203:24070":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:47293:7751":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7478:15373":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6662:15351":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:7784:2272":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13399:19557":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11060:15508":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:3183:2159":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:7437:15370":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:590:31290":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:8941:25750":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:40527:8152":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4629:12464":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:1812:2178":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"29:67:19780":{"crate_id":29,"path":["io_lifetimes","traits","IntoFd"],"kind":"trait"},"31:356:38248":{"crate_id":31,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"29:19:19775":{"crate_id":29,"path":["io_lifetimes","portability","AsFilelike"],"kind":"trait"},"2:2836:8229":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"30:5668:12481":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:1628:8141":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:11877:1046":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:8683:15456":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:42570:31318":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"32:5990:21251":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_4"],"kind":"enum"},"32:7214:9901":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr"],"kind":"struct"},"20:4331:37492":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"11:1688:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7519:15377":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:1524:14303":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11339:18259":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:47319:7753":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"30:7265:13151":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"32:4949:9898":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq"],"kind":"struct"},"2:30175:31882":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12576:18813":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:41369:2456":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:45379:2642":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:41251:180":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:8214:15405":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:2752:8215":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:2594:14394":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:46453:2604":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:11881:1472":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"32:6431:21264":{"crate_id":32,"path":["linux_raw_sys","general","oldold_utsname"],"kind":"struct"},"2:22171:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:8170:15403":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:3152:7950":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:2204:36124":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"30:5077:12454":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"32:7219:8993":{"crate_id":32,"path":["linux_raw_sys","general","linger"],"kind":"struct"},"2:43803:7896":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:2572:14393":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12388:18800":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"30:5454:12470":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:8283:15471":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:1843:2137":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:4246:2139":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"2:41395:209":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:43436:7875":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:526:8988":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:3782:14434":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13564:19571":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5843:13100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7930:23550":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6544:15348":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:3497:2140":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:30161:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:4400:14908":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"30:1762:9901":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"24:290:19747":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"30:7355:13155":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"30:604:8988":{"crate_id":30,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:7194:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:573:8995":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:7464:24494":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"32:4996:21205":{"crate_id":32,"path":["linux_raw_sys","general","group_req"],"kind":"struct"},"6:4784:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"29:147:19796":{"crate_id":29,"path":["io_lifetimes","raw","FromRawFilelike"],"kind":"trait"},"1:867:2137":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:5630:15307":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10923:15503":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"20:4224:19700":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"5:3520:162":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:43080:7822":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:39978:2237":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:7230:8943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"11:816:2142":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:1609:9908":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:3369:7932":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"32:4966:9900":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq_source"],"kind":"struct"},"17:12592:18814":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:1009:2151":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:3460:2302":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"30:8890:13945":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:4164:19681":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"17:13689:19579":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12403:18801":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:2355:2263":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"30:5611:12478":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:2339:181":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:30233:31883":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"20:4256:19708":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"30:8440:13575":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"32:4501:21174":{"crate_id":32,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"25:53:2472":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"1:4755:2385":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:40204:8176":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:7609:2092":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"29:47:19784":{"crate_id":29,"path":["io_lifetimes","portability","FromFilelike"],"kind":"trait"},"11:305:36131":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:8380:2472":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:40556:2335":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:6760:33781":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:6587:13562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13803:19586":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:7568:14134":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:43513:7868":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:4637:2412":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:1985:183":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:6175:33778":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:2915:2008":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:5816:13138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:862:2162":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:47410:7758":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:5540:8165":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"32:6998:21297":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_10"],"kind":"enum"},"2:3141:233":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10334:15491":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:9316:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:21856:32227":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:45179:2601":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:0:1384":{"crate_id":1,"path":["std"],"kind":"module"},"1:638:2116":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:6218:15328":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"30:5903:12502":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1594:2159":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:660:19622":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"30:5594:12477":{"crate_id":30,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"31:3294:19810":{"crate_id":31,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"1:1071:2152":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:40153:8171":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"30:4998:12450":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4865:12490":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:9773:2387":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10798:15497":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"32:7378:2369":{"crate_id":32,"path":["linux_raw_sys","general","ucred"],"kind":"struct"},"31:4451:38105":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointEmulationControl"],"kind":"struct"},"6:5974:13148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"29:182:19799":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeViewType"],"kind":"trait"},"23:382:2472":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"2:41117:2348":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:14:1922":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:532:8989":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:4624:14964":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"20:3874:19661":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"30:4627:12433":{"crate_id":30,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:43649:7890":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9986:15604":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:11893:1488":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:5773:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:41688:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:3087:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:47262:7748":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8219:2401":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:43172:7867":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:41336:2455":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"20:3586:1962":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"17:11471:18268":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8235:2411":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13344:19552":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:10415:2325":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"30:7993:13562":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13332:19551":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:9091:25770":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:45647:2676":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:4012:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"11:1091:14301":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:11065:24156":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:39090:201":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:9074:2568":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:2569:2310":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:1919:15588":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:0:1802":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:3162:33945":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"20:1609:19690":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"2:10173:7843":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"20:59:1969":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"11:783:14298":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:7119:8160":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"20:3948:19660":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"6:1700:9916":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5402:14348":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:4107:2405":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"29:28:19781":{"crate_id":29,"path":["io_lifetimes","portability","AsSocketlike"],"kind":"trait"},"6:123:8665":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:5034:2510":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11845:2121":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9683:15551":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"30:556:8986":{"crate_id":30,"path":["libc","unix","rlimit"],"kind":"struct"},"32:5946:12346":{"crate_id":32,"path":["linux_raw_sys","general","sysinfo"],"kind":"struct"},"17:9596:15533":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10068:15653":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:41302:8237":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:8489:2477":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"32:5104:21213":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_2"],"kind":"enum"},"16:6376:15338":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"29:132:19793":{"crate_id":29,"path":["io_lifetimes","raw","AsRawSocketlike"],"kind":"trait"},"2:10135:7842":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"27:360:19773":{"crate_id":27,"path":["anstyle","reset","Reset"],"kind":"struct"},"23:333:19738":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"2:2152:8246":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:6696:15352":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"32:7097:21299":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_files_update"],"kind":"struct"},"31:4213:38211":{"crate_id":31,"path":["rustix","process","membarrier","MembarrierQuery"],"kind":"struct"},"19:0:1028":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"30:8221:13567":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:6582:216":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6685:13564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:6871:2334":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"14:160:14311":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:45130:2647":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13777:19584":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:2524:14391":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10092:15655":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:3266:15637":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:11324:2356":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"23:286:19732":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"2:20820:2593":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:7272:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"30:8070:9864":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:7683:15386":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"31:5210:38089":{"crate_id":31,"path":["rustix","process","wait","WaitOptions"],"kind":"struct"},"17:9148:37276":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:10840:24147":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:6800:13572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"32:5029:9902":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in"],"kind":"struct"},"30:621:8989":{"crate_id":30,"path":["libc","unix","hostent"],"kind":"struct"},"31:5306:38220":{"crate_id":31,"path":["rustix","process","wait","WaitStatus"],"kind":"struct"},"20:4409:37468":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"17:10681:15705":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"31:534:2135":{"crate_id":31,"path":["rustix","backend","io","epoll","Iter"],"kind":"struct"},"16:6390:15339":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"30:5513:12473":{"crate_id":30,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:7532:12663":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7803:15392":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:554:8992":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:595:8998":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4472:12448":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11502:18270":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:7069:33632":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:2692:227":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"32:4575:21178":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"20:1362:1972":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"6:6553:9837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:47273:7749":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:1421:2142":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:12253:191":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8777:2135":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:10645:25644":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:4872:15044":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"10:0:1805":{"crate_id":10,"path":["adler"],"kind":"module"},"1:11885:641":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:7039:33929":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"32:6717:21287":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_3"],"kind":"union"},"17:8389:15474":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:911:2141":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:6755:13569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10000:15650":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:21750:31413":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:2773:2570":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:42941:31374":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:22270:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9886:15574":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6943:15362":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:8084:2278":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:11897:1543":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:7275:7900":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:574:37318":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:21811:31355":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"32:5851:21243":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"34:0:1953":{"crate_id":34,"path":["strsim"],"kind":"module"},"32:5658:8995":{"crate_id":32,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"17:11600:18277":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:9364:8013":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"20:3868:19666":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"1:7564:2387":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"32:7369:13137":{"crate_id":32,"path":["linux_raw_sys","general","cmsghdr"],"kind":"struct"},"1:3205:2330":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"30:658:8991":{"crate_id":30,"path":["libc","unix","pollfd"],"kind":"struct"},"6:6706:13567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"31:549:19841":{"crate_id":31,"path":["rustix","backend","io","epoll","EventVec"],"kind":"struct"},"1:2472:2317":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"20:3941:19662":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"2:4103:7966":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:2785:8218":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:9375:2275":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:3171:32352":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"22:114:19717":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"2:45479:2602":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:11879:1362":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"30:7443:12346":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"23:63:19745":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"32:5650:12436":{"crate_id":32,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"16:6351:15336":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:41237:2351":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:41327:2137":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:41311:2135":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:40305:8167":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"30:2113:9917":{"crate_id":30,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10354:15620":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:5175:189":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:5976:15322":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:879:2135":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:3958:19664":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"17:12550:18811":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:2154:8247":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"20:2877:1961":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"2:2828:8227":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:4947:12498":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:7711:15388":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:42260:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:8918:24104":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:43478:7871":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:12441:204":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"29:152:19797":{"crate_id":29,"path":["io_lifetimes","raw","FromRawSocketlike"],"kind":"trait"},"1:2535:2318":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:1621:586":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4980:12502":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"29:183:19800":{"crate_id":29,"path":["io_lifetimes","views","FilelikeView"],"kind":"struct"},"6:5071:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"30:6961:13100":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4294:12431":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"30:5369:12467":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:4559:2375":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"23:402:19728":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"2:43933:8361":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:2911:2007":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"29:0:1949":{"crate_id":29,"path":["io_lifetimes"],"kind":"module"},"30:1845:9905":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"29:69:19779":{"crate_id":29,"path":["io_lifetimes","traits","FromFd"],"kind":"trait"},"16:2642:14396":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"32:4567:9918":{"crate_id":32,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"2:22501:2365":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:676:2118":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:4702:15018":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:386:15468":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:4773:12478":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:2915:33967":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:2546:14392":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11484:18269":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4960:12500":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4845:12487":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:39933:7985":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"23:208:19737":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"17:10505:15699":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:3158:7949":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"32:5704:12430":{"crate_id":32,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"11:2087:2152":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:47282:7750":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11220:15717":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:43531:7869":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"30:9158:12656":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:2720:14399":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8153:2354":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"23:423:37862":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"17:11299:18257":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:40053:2252":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"32:7167:21306":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction__bindgen_ty_1"],"kind":"union"},"6:4991:12503":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"31:2625:19842":{"crate_id":31,"path":["rustix","backend","io","epoll","CreateFlags"],"kind":"struct"},"32:4733:21190":{"crate_id":32,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"30:6847:13135":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:21342:2575":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6569:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"30:1822:9904":{"crate_id":30,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:42278:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"30:8253:13568":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3396:2279":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:1381:2137":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:1442:2144":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"30:5800:12488":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"30:7973:13561":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6724:13568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"32:5860:21244":{"crate_id":32,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"16:7743:15389":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"3:0:441":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"32:6560:21269":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"1:2204:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6022:15324":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6700:13566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"32:0:1951":{"crate_id":32,"path":["linux_raw_sys"],"kind":"module"},"17:12959:19524":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:44934:2634":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:355:2106":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11585:18276":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"20:4622:37507":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"2:46801:2610":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:45333:2577":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4698:12469":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:45577:2620":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:2769:8216":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"32:5251:21215":{"crate_id":32,"path":["linux_raw_sys","general","in6_flowlabel_req"],"kind":"struct"},"18:719:19619":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:5880:13142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"32:6497:21267":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"30:4564:12430":{"crate_id":30,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6293:15331":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:42031:7798":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:6767:15354":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"32:4813:21198":{"crate_id":32,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"6:1514:9897":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:515:19632":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:45879:2637":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"30:9263:12666":{"crate_id":30,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"0:0:1700":{"crate_id":0,"path":["clap"],"kind":"module"},"20:4207:1966":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"2:39818:7952":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:2298:14354":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"20:3810:1963":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"17:12085:18781":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:11875:1506":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2732:2006":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4404:12440":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"27:113:37955":{"crate_id":27,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"16:6793:15355":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:3345:19677":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"31:3087:19830":{"crate_id":31,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"30:764:8997":{"crate_id":30,"path":["libc","unix","servent"],"kind":"struct"},"16:7366:15368":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"32:4660:21187":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"17:8310:15472":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:3244:2326":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:10131:2497":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4609:12462":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:4325:7961":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"32:5002:21206":{"crate_id":32,"path":["linux_raw_sys","general","group_source_req"],"kind":"struct"},"17:13698:19580":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:9368:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:12634:18816":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:5552:205":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:3157:2156":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:39899:2111":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:21243:2584":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:31929:24276":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:21765:31258":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"11:2212:36125":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11898:1121":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12072:18780":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6179:15326":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10478:15669":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:9931:2135":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:1787:15554":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:6617:25727":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:9783:221":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5386:14350":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"32:5674:8987":{"crate_id":32,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"16:7572:36276":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4449:12445":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:9324:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"27:210:19767":{"crate_id":27,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"30:5154:12458":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"31:3846:14219":{"crate_id":31,"path":["rustix","backend","termios","types","Action"],"kind":"enum"},"17:12126:18784":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:2683:7780":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:4099:2404":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:5243:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"32:5560:21224":{"crate_id":32,"path":["linux_raw_sys","general","prctl_mm_map"],"kind":"struct"},"5:782:2160":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10635:15694":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:4037:14593":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10452:15671":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:9469:15522":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:1668:9913":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:1980:2174":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"20:67:1974":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"17:13356:19553":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"31:3779:38183":{"crate_id":31,"path":["rustix","backend","process","types","RawCpuSet"],"kind":"struct"},"17:9895:15573":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:3287:2314":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"20:4035:19691":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"20:3935:19659":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"17:8953:15486":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"23:417:19724":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"25:89:1972":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"17:8632:15452":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10695:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:9178:15490":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:8818:2530":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:10828:2487":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:20653:2589":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:39907:7868":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:11146:8322":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11615:18278":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4920:12495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:9098:15488":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:9021:166":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11800:18765":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:1847:2140":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:7545:2168":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:7526:12662":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6728:15353":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11410:18263":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13763:19583":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"20:3626:37490":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"24:132:2472":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"1:10350:23668":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:10615:15693":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:11887:740":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"30:1709:9898":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4641:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"32:5282:21217":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_rt_hdr"],"kind":"struct"},"6:6545:9033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"30:8896:13946":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:3672:2174":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:30709:182":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"30:5015:12451":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"9:174:14283":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"24:96:19745":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"32:5079:21210":{"crate_id":32,"path":["linux_raw_sys","general","ip_esp_hdr"],"kind":"struct"},"17:10283:15616":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:757:2140":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:4568:8174":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"18:671:19623":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:7543:15379":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:9036:2536":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:11218:22851":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:39926:7984":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:40233:8166":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"30:5194:12460":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:43093:7838":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:43778:7894":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"20:4439:19702":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"17:11234:18254":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:7637:2119":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"31:4024:38176":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdTimerFlags"],"kind":"struct"},"17:10026:15652":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:975:15534":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"27:347:19772":{"crate_id":27,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"30:1802:9903":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2142:587":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:10100:7849":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"18:491:37328":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:3225:14413":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:46303:2670":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"31:4339:38217":{"crate_id":31,"path":["rustix","process","prctl","DumpableBehavior"],"kind":"enum"},"32:5292:21218":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_opt_hdr"],"kind":"struct"},"5:3116:2135":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:3876:2370":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:638:2135":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"32:7227:21309":{"crate_id":32,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"32:7148:21304":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe"],"kind":"struct"},"32:6452:21265":{"crate_id":32,"path":["linux_raw_sys","general","old_utsname"],"kind":"struct"},"17:13041:19529":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:2911:33968":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"20:1614:19693":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"32:6578:21271":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:9566:15492":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"30:7120:13144":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"32:6542:21268":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"1:10924:19773":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4803:12482":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:39827:7988":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13453:19563":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:2668:14397":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:7855:2174":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:6848:13576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"30:7906:9033":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:43497:7859":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:7670:2218":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"31:4868:38219":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureControl"],"kind":"struct"},"2:8792:33420":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"30:8203:13566":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4857:12489":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:10428:15697":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"31:3798:19856":{"crate_id":31,"path":["rustix","backend","termios","types","OptionalActions"],"kind":"enum"},"18:681:19624":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:21472:2581":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:3546:2136":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10626:15703":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:20790:8246":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13159:19536":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11037:15507":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"32:4762:21193":{"crate_id":32,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"17:11163:15715":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:4757:12476":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:242:37275":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"29:56:19785":{"crate_id":29,"path":["io_lifetimes","portability","FromSocketlike"],"kind":"trait"},"1:7925:25759":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13385:19556":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:6365:2122":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:46115:2603":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"32:5634:8985":{"crate_id":32,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"6:4707:12470":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5367:14352":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:40125:8163":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:7652:2120":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11641:18280":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:2357:14384":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13639:19574":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:8823:15484":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12646:18817":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"31:3476:19813":{"crate_id":31,"path":["rustix","backend","io","types","EventfdFlags"],"kind":"struct"},"5:1212:2152":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"30:8856:8943":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"32:4942:9897":{"crate_id":32,"path":["linux_raw_sys","general","in_addr"],"kind":"struct"},"30:6911:13138":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10052:15632":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11821:15657":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:22336:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:562:15470":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:2404:14386":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:5495:2488":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:4898:12493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:5316:2483":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:481:19630":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:7839:25747":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"31:5181:38156":{"crate_id":31,"path":["rustix","process","rlimit","Rlimit"],"kind":"struct"},"17:13488:19567":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"30:5433:12469":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:4562:37405":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"1:7831:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"29:142:19795":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawSocketlike"],"kind":"trait"},"6:5809:13137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:1785:2200":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:21025:2587":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6904:15360":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"30:5857:12491":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:4445:14929":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:5959:13146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:8909:2307":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4553:12458":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:2952:7783":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:45555:2614":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:10996:2492":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4818:15038":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"9:0:1804":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:43941:8366":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"30:4865:12443":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:4335:33771":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:0:1941":{"crate_id":21,"path":["bitflags"],"kind":"module"},"1:11892:1487":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:12345:18797":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:531:19633":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6474:15344":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"32:5049:21208":{"crate_id":32,"path":["linux_raw_sys","general","iphdr"],"kind":"struct"},"2:7165:2012":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:8979:37300":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:11355:18260":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10705:2278":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:5811:15316":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5967:13147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13169:19537":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:2635:33933":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:6861:24493":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:9946:15575":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4416:12441":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12536:18810":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:11835:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:20679:31419":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:43598:7887":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"30:0:814":{"crate_id":30,"path":["libc"],"kind":"module"},"2:1907:2179":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11874:417":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"20:3779:19656":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"17:13265:19546":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:8090:15398":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:8797:32746":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:3675:2355":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"20:4556:37504":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"1:11872:370":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:11434:18265":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:1453:197":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10303:15612":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13324:19550":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:7252:13945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13791:19585":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:10815:2219":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"20:4615:2483":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"6:5747:13131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:2382:1819":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:43418:7874":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"32:5332:21222":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_3"],"kind":"enum"},"32:6737:21288":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_4"],"kind":"union"},"31:3380:19825":{"crate_id":31,"path":["rustix","backend","io","types","PipeFlags"],"kind":"struct"},"2:39229:7961":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"20:2698:2135":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"2:2233:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"29:127:19792":{"crate_id":29,"path":["io_lifetimes","raw","AsRawFilelike"],"kind":"trait"},"16:3899:14479":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:707:7855":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:1048:2150":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:26:19751":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"6:1614:9909":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:3453:2281":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4941:12497":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2794:8224":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:9409:15518":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:20640:2588":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"24:0:1944":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"6:4439:12444":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"32:5221:14135":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr"],"kind":"struct"},"17:10270:15615":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:45148:2653":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:11680:7881":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11520:18271":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:587:8997":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"31:4969:38112":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureState"],"kind":"struct"},"6:7503:12659":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"22:34:2308":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"11:1126:14302":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"32:4528:21177":{"crate_id":32,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"32:4771:21194":{"crate_id":32,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"20:4319:37495":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"11:821:2145":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"32:6035:21252":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_opt"],"kind":"struct"},"13:0:1801":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:2933:15614":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:9113:25593":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:13194:19539":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:11365:2355":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"31:3001:19817":{"crate_id":31,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"2:21773:31201":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"11:991:2150":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10598:15505":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:45231:2613":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13612:19572":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11372:18261":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:39188:8234":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:6047:13154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8847:2531":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"30:4749:12438":{"crate_id":30,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"31:4746:38175":{"crate_id":31,"path":["rustix","process","prctl","VirtualMemoryMapAddress"],"kind":"enum"},"17:8195:15453":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"18:599:37321":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:624:37315":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:20849:2578":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"29:137:19794":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawFilelike"],"kind":"trait"},"2:44009:2573":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:97:36141":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13842:19589":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"20:3664:183":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"1:3920:2373":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"30:7502:13184":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:582:8002":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"11:0:1806":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"30:9194:12658":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:6903:23681":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:10715:24121":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:9721:15550":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:10621:2441":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:875:2138":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13033:19528":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"30:6936:13099":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:43988:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:22942:2359":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:20994:2387":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:5305:15285":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:39891:7869":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10670:15695":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:413:164":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"30:9297:14135":{"crate_id":30,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:1631:28456":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"17:10897:15502":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:6081:2717":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"32:5586:21226":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"2:45799:31239":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"20:3855:19670":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"2:43264:7877":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:11880:1392":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"30:5742:12485":{"crate_id":30,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:1412:2139":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:96:19605":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:736:19620":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"32:6373:21262":{"crate_id":32,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"30:5171:12459":{"crate_id":30,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:2879:14406":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:8667:14348":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12331:18796":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9275:37301":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"31:466:19837":{"crate_id":31,"path":["rustix","backend","io","epoll","Borrowing"],"kind":"struct"},"32:7318:21311":{"crate_id":32,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"16:7042:36310":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13812:19587":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:8025:15395":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:5643:15308":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8096:2282":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:4559:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12006:18775":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"32:5269:21216":{"crate_id":32,"path":["linux_raw_sys","general","ip6_mtuinfo"],"kind":"struct"},"11:2060:2150":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:47197:2656":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7557:15380":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:45024:2600":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13309:19548":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10039:15610":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:8204:2458":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:6369:2516":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"30:5536:12474":{"crate_id":30,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1692:9915":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:6691:13565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12496:18807":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5571:15304":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:55:14349":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"16:4596:14960":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:4732:2392":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13181:19538":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:11028:8381":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:40565:8155":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:8205:2457":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"30:8163:13564":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:5689:2513":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:4327:14859":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:5566:2527":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"30:5344:12466":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9796:15553":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13821:19588":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:5944:15320":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:2236:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"31:4810:38202":{"crate_id":31,"path":["rustix","process","prctl","PTracer"],"kind":"enum"},"1:2609:2320":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"30:676:8992":{"crate_id":30,"path":["libc","unix","winsize"],"kind":"struct"},"16:5071:15099":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:7152:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5616:15306":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:20901:2582":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4431:12443":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12770:19517":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:42774:7824":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:2735:7779":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:45957:2643":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"30:5993:12512":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"30:4675:12435":{"crate_id":30,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:7115:8161":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:4676:2390":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"32:4519:21176":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"1:3320:2335":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9340:15494":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4307:12432":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:43813:7897":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3777:2357":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"32:5781:21235":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"1:5682:2512":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:9617:15528":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:9907:15602":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:4399:2096":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:652:2136":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:9424:15519":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:43102:7841":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:7596:15382":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:39112:200":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:2448:14388":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:1738:32238":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:7220:2234":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:3128:33941":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"32:6923:21292":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_cqe"],"kind":"struct"},"2:40195:8175":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1525:9899":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:1365:2136":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"30:4770:12439":{"crate_id":30,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"31:3193:19827":{"crate_id":31,"path":["rustix","backend","io","types","SpliceFlags"],"kind":"struct"},"1:922:2143":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:7250:223":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:7837:15393":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10080:15654":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"11:2219:2133":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:5922:205":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"20:1109:19672":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"14:187:14319":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:44246:31245":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"31:3933:38184":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdFlags"],"kind":"struct"},"25:0:1945":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"20:4084:19692":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"16:3640:14417":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:21827:31236":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:5350:2485":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"9:481:14179":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5870:13141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7488:15374":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"30:6830:13134":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5857:13139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"30:4846:12442":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:3130:25912":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"31:3873:38197":{"crate_id":31,"path":["rustix","backend","time","types","ClockId"],"kind":"enum"},"20:4370:19710":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"30:8420:13574":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:21018:2387":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:1532:9900":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10527:15700":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:41463:182":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"28:5:2314":{"crate_id":28,"path":["is_terminal","IsTerminal"],"kind":"trait"},"7:79:14158":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:8624:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:9839:15546":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:11479:14338":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13865:19591":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6057:13155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:2905:14407":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"32:4723:12489":{"crate_id":32,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"5:962:33753":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:11162:8324":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:9038:37285":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"26:21:1967":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"18:113:19606":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:5988:13149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"24:192:14219":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"30:1693:9897":{"crate_id":30,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8257:2442":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:4166:2293":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:45776:31359":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:10589:15702":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:4593:7976":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:359:36127":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"30:7345:13154":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"31:5075:38088":{"crate_id":31,"path":["rustix","process","prctl","PointerAuthenticationKeys"],"kind":"struct"},"1:11840:23531":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:10044:22858":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"31:3822:19857":{"crate_id":31,"path":["rustix","backend","termios","types","QueueSelector"],"kind":"enum"},"6:5995:13150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:859:2148":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:46033:2655":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:10819:22844":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:7538:12664":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:2685:225":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"32:4742:21191":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"32:6054:21254":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_5"],"kind":"enum"},"5:6999:2182":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:3994:19657":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"6:562:8993":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"20:4187:2113":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"32:4843:21202":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_1"],"kind":"enum"},"2:21877:2363":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:39215:15405":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"9:52:14199":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:10228:7844":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"32:6950:21294":{"crate_id":32,"path":["linux_raw_sys","general","io_sqring_offsets"],"kind":"struct"},"1:7453:15470":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"32:6743:21289":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5"],"kind":"union"},"6:488:8984":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:1752:9921":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:585:2109":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1650:9911":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11454:25657":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8075:2336":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"30:486:8982":{"crate_id":30,"path":["libc","unix","group"],"kind":"struct"},"30:8105:9838":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"30:9234:12661":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12419:18802":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"12:0:1807":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4667:12467":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13625:19573":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"31:3572:38155":{"crate_id":31,"path":["rustix","backend","process","types","MembarrierCommand"],"kind":"enum"},"1:9380:23662":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"30:5054:12453":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:3916:19669":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"30:5633:12479":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:5381:1962":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"18:644:37318":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12799:19518":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:7690:24276":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:7190:2236":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11879:18768":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:7801:2273":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11422:18264":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:6578:13561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:20507:30864":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"32:6202:21258":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_6"],"kind":"enum"},"16:3446:14415":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"32:4822:21199":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage"],"kind":"struct"},"17:11109:15511":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12059:18779":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"28:0:1948":{"crate_id":28,"path":["is_terminal"],"kind":"module"},"6:6776:13570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:42355:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:9103:7789":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:6243:36590":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:2757:8214":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11873:934":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:9826:15547":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:4091:2403":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:22204:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"32:6399:21263":{"crate_id":32,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"1:11047:2286":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:7293:15367":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4344:12435":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:21470:2387":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:4035:7778":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11069:15509":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:8117:2305":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:11008:2493":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:2378:14385":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:11358:8375":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"23:170:2387":{"crate_id":23,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"16:3063:14412":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:2801:8221":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"30:9246:12663":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"27:382:19774":{"crate_id":27,"path":["anstyle","style","Style"],"kind":"struct"},"11:279:36133":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:8256:15406":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:4540:14952":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"23:0:1943":{"crate_id":23,"path":["anstream"],"kind":"module"},"31:5194:38208":{"crate_id":31,"path":["rustix","process","sched","CpuSet"],"kind":"struct"},"2:42523:31410":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:11674:23661":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"22:30:2387":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"2:6931:2505":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:4573:22829":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"30:1913:9908":{"crate_id":30,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"20:4289:37497":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"1:9026:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:1041:34301":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:4115:2321":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"16:3300:14414":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:1947:15548":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4398:12281":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4882:999":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"30:5572:12476":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"20:4629:1968":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"2:21714:31292":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"27:313:19770":{"crate_id":27,"path":["anstyle","effect","Effects"],"kind":"struct"},"32:5551:8991":{"crate_id":32,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"2:3186:7781":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"32:6965:21295":{"crate_id":32,"path":["linux_raw_sys","general","io_cqring_offsets"],"kind":"struct"},"30:5225:12461":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:0:1811":{"crate_id":17,"path":["object"],"kind":"module"},"2:39812:2111":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"11:1035:2152":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:46989:2616":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:12522:2181":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:10741:7836":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:8548:15479":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:1062:2151":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"31:2990:19828":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFd"],"kind":"struct"},"16:7244:36570":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"30:8035:2442":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"32:4796:21196":{"crate_id":32,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"17:9641:15540":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:2687:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:45108:2641":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:2742:14400":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7859:15394":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:21863:2364":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:9380:15517":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:7008:2137":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:3889:19667":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"1:953:2148":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:45525:2608":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:8129:15400":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:1227:2151":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8831:2533":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:7588:2095":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"20:1653:127":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"30:8017:13563":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13879:19592":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12236:18790":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12046:18778":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"30:4651:12434":{"crate_id":30,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"14:202:7898":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:7491:12657":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"32:4621:21182":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"2:2497:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"32:7174:21307":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_12"],"kind":"enum"},"30:5875:12499":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2697:2097":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:43122:7840":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:7145:2133":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:6292:165":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10125:15631":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:538:19634":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:11569:2478":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:635:2115":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:39070:198":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"30:7074:13143":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"31:0:1950":{"crate_id":31,"path":["rustix"],"kind":"module"},"2:4425:7964":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10409:2327":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:568:8994":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:2198:30707":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6400:15340":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:1350:2135":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:8598:15481":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:8723:2491":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"30:1987:9911":{"crate_id":30,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8227:2354":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4423:12442":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12224:18789":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:43666:7891":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:4913:2293":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6488:15345":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11813:15659":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:47159:2622":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10840:15499":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"20:1180:19671":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"2:20490:30867":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"20:2911:37404":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"30:4581:12431":{"crate_id":30,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"14:7:14311":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:9068:37274":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"7:0:1533":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:9628:15527":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:2616:14395":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11319:18258":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:9312:15493":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:9975:2210":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:44130:204":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"32:5521:21223":{"crate_id":32,"path":["linux_raw_sys","general","socket_state"],"kind":"enum"},"1:11236:23090":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6819:15356":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:5640:231":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9218:15491":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"32:5580:21225":{"crate_id":32,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"2:43041:7823":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:9577:15535":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:40006:8300":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8741:2492":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:39409:28557":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:8310:7853":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:6821:13574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:20999:2579":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:501:2082":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:1821:2210":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:7544:12665":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:45268:2668":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"30:4945:12447":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6605:2442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:530:2087":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"20:4198:19711":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"1:8462:2475":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6061:14353":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"32:4674:21188":{"crate_id":32,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"34:32:22766":{"crate_id":34,"path":["strsim","StringWrapper"],"kind":"struct"},"30:5394:2369":{"crate_id":30,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4466:12447":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:20895:2580":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:857:2136":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"30:5685:12482":{"crate_id":30,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"32:6686:21284":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe"],"kind":"struct"},"2:2513:236":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40534:31314":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:7014:2163":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12461:18805":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"31:2839:19812":{"crate_id":31,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"2:25752:2360":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:10219:25586":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"30:1887:9907":{"crate_id":30,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"31:4707:38108":{"crate_id":31,"path":["rustix","process","prctl","TimeStampCounterReadability"],"kind":"enum"},"17:13667:19577":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"32:6597:21274":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1:8330:2471":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:6361:15337":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"32:6590:21273":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"17:12622:15508":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"20:4509:37372":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"16:5998:15323":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:643:2117":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:1313:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"}},"external_crates":{"34":{"name":"strsim","html_root_url":null},"31":{"name":"rustix","html_root_url":null},"28":{"name":"is_terminal","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"linux_raw_sys","html_root_url":null},"29":{"name":"io_lifetimes","html_root_url":null},"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"anstyle_query","html_root_url":null},"30":{"name":"libc","html_root_url":null},"27":{"name":"anstyle","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":25}