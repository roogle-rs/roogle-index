{"root":"0:0:1957","crate_version":"4.5.1","includes_private":false,"index":{"2:12938:20931":{"id":"2:12938:20931","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41272:191","prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13027:29601":{"id":"2:13027:29601","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4678:29601"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43470:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12961:21614":{"id":"2:12961:21614","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173","str::rsplitn":"2:12964:21616"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43257:8162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:943":{"id":"2:12894:943","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12254:455"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:21124":{"id":"2:12902:21124","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12132:8177"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:21618":{"id":"2:12967:21618","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:29592":{"id":"2:12991:29592","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:21576":{"id":"2:12910:21576","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:8527":{"id":"5:5597:8527","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:28184":{"id":"2:12928:28184","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43445:8174","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12982:29588":{"id":"2:12982:29588","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12584:8173","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::match_indices":"2:12979:29587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43321:8189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13017:21358":{"id":"2:13017:21358","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39243:8318","Self::is_ascii":"2:13016:21164"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39243:8318","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:30298":{"id":"5:5600:30298","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:30297","5:5597:8527","5:5600:30298","5:5603:30299","5:5611:30300","5:5612:30301","5:5613:2637","5:5614:21163","5:5615:21162"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13014:29599":{"id":"2:13014:29599","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12545:137","`FromStr`":"2:12544:2546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12544:2546","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12544:2546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12946:21608":{"id":"2:12946:21608","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12584:8173","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::split_whitespace":"2:12924:28187","str::rsplit":"2:12952:21612"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43153:2613","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:29585":{"id":"2:12958:29585","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12584:8173","str::split":"2:12946:21608","prim@char":"1:12254:455","str::split_terminator":"2:12955:29584"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43221:8192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5596:30297":{"id":"5:5596:30297","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2266","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:30299":{"id":"5:5603:30299","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1949":{"id":"0:3-20:0:1949","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,0],"end":[101,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1949","glob":true}}},"2:12916:21602":{"id":"2:12916:21602","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12918:21606","str::split_at_mut":"2:12917:21603"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:29595":{"id":"2:12996:29595","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:21163":{"id":"5:5614:21163","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13019:21161"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:28187":{"id":"2:12924:28187","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12925:28202"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43427:8176","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12905:21578":{"id":"2:12905:21578","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12271:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:29590":{"id":"2:12987:29590","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:29591":{"id":"2:12989:29591","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:21361":{"id":"2:13021:21361","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37513"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12925:28202":{"id":"2:12925:28202","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12924:28187"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43436:8175","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893":{"id":"2:12893","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12894:943","2:12895:21156","2:12896:29577","2:12897:29578","2:12899:29579","2:12902:21124","2:12903:29580","2:12904:334","2:12905:21578","2:12906:21574","2:12908:21575","2:12910:21576","2:12912:21577","2:12914:29581","2:12915:29582","2:12916:21602","2:12917:21603","2:12918:21606","2:12919:21607","2:12921:28183","2:12922:27362","2:12923:21135","2:12924:28187","2:12925:28202","2:12926:23571","2:12927:29583","2:12928:28184","2:12929:21620","2:12932:21621","2:12935:21622","2:12938:20931","2:12942:20932","2:12946:21608","2:12949:21610","2:12952:21612","2:12955:29584","2:12958:29585","2:12961:21614","2:12964:21616","2:12967:21618","2:12970:21619","2:12973:2179","2:12976:29586","2:12979:29587","2:12982:29588","2:12985:29589","2:12987:29590","2:12989:29591","2:12991:29592","2:12992:29593","2:12993:29594","2:12996:29595","2:12999:21623","2:13002:21624","2:13005:29596","2:13008:29597","2:13011:29598","2:13014:29599","2:13016:21164","2:13017:21358","2:13018:21165","2:13019:21161","2:13020:21160","2:13021:21361","2:13022:21362","2:13023:21363","2:13024:29600","2:13026:2398","2:13027:29601"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5613:2637":{"id":"5:5613:2637","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:21165":{"id":"2:13018:21165","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13020:21160":{"id":"2:13020:21160","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:27362":{"id":"2:12922:27362","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12254:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43129:8179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13023:21363":{"id":"2:13023:21363","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37513"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:21575":{"id":"2:12908:21575","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:21135":{"id":"2:12923:21135","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43139:2612","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:29594":{"id":"2:12993:29594","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12610:8168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12955:29584":{"id":"2:12955:29584","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12584:8173","str::split":"2:12946:21608","prim@char":"1:12254:455","`DoubleEndedIterator`":"2:7966:131","str::rsplit_terminator":"2:12958:29585"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43203:8193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:29589":{"id":"2:12985:29589","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:29598":{"id":"2:13011:29598","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:29600":{"id":"2:13024:29600","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4680:29600"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43452:8184","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12976:29586":{"id":"2:12976:29586","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12584:8173","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::matches":"2:12973:2179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43375:8191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:21621":{"id":"2:12932:21621","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612:30301":{"id":"5:5612:30301","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2266","`String`":"5:7608:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:23571":{"id":"2:12926:23571","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43407:2609","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1957":{"id":"0:0:1957","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[115,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.1/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.74)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy::single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy::single_component_path_imports)]","#![allow(clippy::branches_sharing_code)]","#![allow(clippy::if_same_then_else)]","#![allow(clippy::collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1949"],"is_stripped":false}}},"2:12999:21623":{"id":"2:12999:21623","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:21612":{"id":"2:12952:21612","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12584:8173","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::split":"2:12946:21608"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43171:8158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:29578":{"id":"2:12897:29578","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:29583":{"id":"2:12927:29583","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43417:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:29587":{"id":"2:12979:29587","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12584:8173","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::rmatch_indices":"2:12982:29588"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43303:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:334":{"id":"2:12904:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12905:21578","`u8`":"1:12271:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13005:29596":{"id":"2:13005:29596","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:29579":{"id":"2:12899:29579","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12897:29578"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:21619":{"id":"2:12970:21619","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:28183":{"id":"2:12921:28183","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12254:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43123:8180","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:21362":{"id":"2:13022:21362","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37513"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13002:21624":{"id":"2:13002:21624","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:29577":{"id":"2:12896:29577","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12949:21610":{"id":"2:12949:21610","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12400:8164","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:30300":{"id":"5:5611:30300","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:21607":{"id":"2:12919:21607","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12918:21606"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:21574":{"id":"2:12906:21574","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:21622":{"id":"2:12935:21622","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:21620":{"id":"2:12929:21620","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:21162":{"id":"5:5615:21162","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13020:21160"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:21156":{"id":"2:12895:21156","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:21616":{"id":"2:12964:21616","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12254:455","str::splitn":"2:12961:21614","self::pattern":"2:12584:8173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43275:8160","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:29582":{"id":"2:12915:29582","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12260:1609","crate::ops::IndexMut":"2:3158:2484","str::slice_unchecked":"2:12914:29581"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:21606":{"id":"2:12918:21606","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12919:21607"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:21161":{"id":"2:13019:21161","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:21164":{"id":"2:13016:21164","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:21603":{"id":"2:12917:21603","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12916:21602","str::split_at_mut_checked":"2:12919:21607"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:29580":{"id":"2:12903:29580","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:29593":{"id":"2:12992:29593","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:20932":{"id":"2:12942:20932","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41272:191","prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:29597":{"id":"2:13008:29597","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8173"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12912:21577":{"id":"2:12912:21577","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:29581":{"id":"2:12914:29581","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12260:1609","str::slice_mut_unchecked":"2:12915:29582","crate::ops::Index":"2:38889:2483"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:2179":{"id":"2:12973:2179","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12584:8173","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::rmatches":"2:12976:29586"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43357:8190","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13026:2398":{"id":"2:13026:2398","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4681:2398"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43461:2399","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:8446:2610":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:6802:15256":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:42549:28129":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4568:2726":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:7428:30380":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"20:755:33646":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"6:8029:14862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14012:19917":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:41461:2429":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:12605:8170":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:1929:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"20:3189:115":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"2:46177:2916":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10997:16459":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:40094:8506":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:43452:8184":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:545:9313":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5515:13340":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:38905:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:22140:3021":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:41453:2428":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:45470:2963":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:7306:9356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:2037:16513":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12201:16664":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2723:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:5736:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:4035:2685":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6491:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6698:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6689:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:14298:19935":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:5781:16246":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:9064:2771":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"20:1374:20991":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"2:1648:2594":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"20:1689:21392":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"1:8456:2611":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:5436:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:5719:2594":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:15426:20707":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:5557:13344":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:6614:28180":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:11061:8159":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"23:373:21060":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"1:9622:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:4839:2701":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:39655:2399":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:11021:26888":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10954:16457":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:10842:2569":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"5:7558:27865":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5891:2765":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:14372:19940":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12422:16671":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:7794:16419":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11730:16568":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:4985:13284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:3026:30404":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:261:32500":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43877:8684":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:5565:13345":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:6379:13973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:31729:16343":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"9:392:15104":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:698:20940":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:6749:30755":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"28:87:21113":{"crate_id":28,"path":["strsim","HybridGrowingHashmapChar"],"kind":"struct"},"1:8109:2569":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:4468:15863":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:2175:16547":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:12621:16685":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:497:9308":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:4386:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7604:16317":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13344:19400":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"23:402:21065":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"25:88:2228":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"2:10819:2428":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:8155:16337":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:15151:20681":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8547:2715":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:15616:20718":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:2591:2622":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:2124:2443":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:12371:16448":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"20:4049:21027":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"1:6617:2836":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:7545:2528":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"11:1676:32007":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8704:2784":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:11116:8160":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:29788:2664":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:3314:8556":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:538:20948":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:12272:1716":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:5236:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:22555:27718":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:4467:2594":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12557:16477":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:1887:2506":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14968:20670":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:4065:2687":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"15:0:2070":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:11865:16622":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6543:16280":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"15:288:15262":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"11:1566:15228":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9916:16423":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:2756:30528":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12278:1320":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12695:16683":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"20:4005:33599":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"2:39020:2418":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:10832:24392":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:13400:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:14599:19955":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:2195:2369":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:41210:2654":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:6948:16296":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:31736:28472":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:10155:16238":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:8093:16334":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12076:16579":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11443:16514":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:15418:20706":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8476:2609":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:4976:16003":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:41775:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7509:16309":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:217:8100":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:2838:15337":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:1516:2431":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:42259:27732":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:11256:16496":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:2101:2469":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:42541:28130":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:40507:8480":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"14:40:19394":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:43417:8187":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:15390:20703":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:4882:15978":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:10813:2755":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:15931:19392":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:6417:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:643:33296":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:3456:2640":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"10:44:15213":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:3119:2261":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9355:2835":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:1596:2448":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:31816:2265":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:41270:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"20:3521:20975":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"17:13387:19403":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:7631:8216":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:16151:20898":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:6480:16276":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:15701:20724":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"20:3638:21017":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"17:15078:16476":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11915:16623":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:4268:2594":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:5756:16244":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"20:4066:33601":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"2:2925:8517":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:41232:2655":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:706:8171":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"24:0:2207":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"1:9132:2843":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:2998:15342":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14986:20672":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5181:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:7952:2379":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6278:16263":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"22:97:21046":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"6:5191:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6478:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:39774:8293":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:21231:28142":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:8393:8484":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11743:16569":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:5522:2796":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:1051:2445":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:10988:8165":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:40032:8502":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2281:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12433:16407":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:42232:27602":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:6419:8512":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:2279:2552":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:6588:16283":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43600:8207":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:15116:20678":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6120:16261":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:89:21072":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"1:7293:22916":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:3243:26366":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:43461:2399":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"23:244:26680":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"20:3120:20966":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"1:7909:2396":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:5936:2412":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:9634:23424":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:11051:16487":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:21882:2886":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:351:31986":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:13581:19417":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"22:0:2205":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"16:6300:16264":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:2878:15339":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14260:19932":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:41328:2428":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:10982:16458":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"24:285:21076":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"2:2606:2580":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:9280:24237":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:5014:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:6880:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7570:16314":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12808:16402":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:14414:19943":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:31760:2264":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:39981:8497":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:1510:10205":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5277:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7580:16315":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10915:33279":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:1923:2450":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:43726:8211":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:5863:16251":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:10025:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:2355:15315":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:5407:1173":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7061:16302":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:46302:8062":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:42313:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:6360:2839":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:7927:2380":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:4330:2721":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:5817:16248":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5700:16241":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:11102:8162":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:914:2436":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:1917:2449":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:10315:2808":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"20:3787:2401":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"17:12089:16580":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:45438:2908":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:538:9312":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:12400:8164":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:1741:8462":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:10244:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:4940:15990":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:46340:8064":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:40085:8505":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:43171:8158":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11369:2548":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:4266:2719":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:3108:2464":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:9085:2805":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5671:13356":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:5070:2760":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:40110:8507":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:10068:16405":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:41855:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:43112:8183":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:10855:24321":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12443:16662":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:9497:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:553:9314":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2471:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5314:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:10676:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:8073:16333":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:46393:8067":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5643:13353":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:43675:8209":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44075:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:5686:16240":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:3321:2634":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7514:2425":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"20:4200:2794":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"1:9381:2583":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:12362:16669":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:15734:20726":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:9995:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:4459:8268":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:10035:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"11:1896:2434":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:4560:15886":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:928:2439":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12342:16634":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:5842:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:481:26928":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:3283:30545":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:1939:2519":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11853:16621":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13455:19408":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:15445:20709":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"21:127:33720":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"1:12257:1223":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:40062:8491":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:15039:20675":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5665:13355":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:41250:2656":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:7132:32210":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11715:16567":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:15569:20714":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:12271:1734":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:3364:2630":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11269:16497":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:5415:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:7389:10346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"14:160:15238":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:1478:2429":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"27:0:2210":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"17:10573:33288":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:3020:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:32422:8537":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:52:2227":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"23:486:33818":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"5:7420:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:836:2428":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:5678:2801":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:5005:2751":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:2441:2560":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:4258:2718":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:6634:16286":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:11612:24384":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:4771:15959":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:1723:10225":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"22:30:2613":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"17:13774:16624":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11621:16536":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:10218:16397":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:10769:33270":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7686:16321":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:30250:27704":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:11574:15221":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:10027:8105":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:2929:2874":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:2660:15329":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:7412:2430":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:38920:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:9781:16420":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"21:374:21005":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"11:1066:15225":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"20:1670:21019":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"1:9300:22914":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:32236:8538":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:3126:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:10913:26730":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:5385:16238":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"18:589:28191":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10710:16436":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12454:16672":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:7456:2430":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:3032:30391":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:2307:30495":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:39991:8498":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:7314:10160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11677:23425":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13553:19415":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7539:16311":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6385:16268":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:14436:19944":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:2808:15336":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:45519:27709":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:14723:20661":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:2634:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"21:182:20998":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"16:4913:15986":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8099:2571":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"11:2151:2445":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:15456:20710":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6574:16282":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:13424:19406":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:10947:24207":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"12:0:2068":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11235:24208":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:3647:2428":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:11187:23513":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:3603:2604":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:6577:2827":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:4821:16686":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:2528:15323":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:45548:27600":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:10456:28079":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"23:288:21064":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"2:13528:2456":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:41736:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8580:2754":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:46198:2950":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:5488:2794":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:42902:29306":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4971:13282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:45455:2914":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:1707:10224":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:12818:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:256:32502":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:10887:33286":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:5624:13350":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:5536:13342":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:42013:8113":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7559:16313":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:726:20941":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"9:447:15103":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14341:19938":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:10661:16435":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:3323:2635":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"23:337:21063":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"17:11557:16561":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:1354:2446":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:39962:8489":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"20:4146:33590":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"17:14038:19919":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:21967:3015":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:3244:2448":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:5211:2821":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:41353:2769":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10419:16393":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"9:330:15159":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:22448:27711":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:252:2228":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"5:6049:8906":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:945:2441":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:7398:30559":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6721:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:6940:32439":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:23064:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"20:65:2230":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"14:220:15248":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:46355:8065":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:39672:8296":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:9247:24317":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13832:19906":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:41319:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:2548:15324":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5457:13333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"20:3844:2432":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"20:3823:21026":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"5:4500:30777":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:903:2434":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:581:8313":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"28:0:2211":{"crate_id":28,"path":["strsim"],"kind":"module"},"6:5400:13328":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:6471:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:15138:20680":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:5846:16250":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:7805:24309":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10317:16430":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:39844:2529":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:14271:19933":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:5075:16033":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6231:16262":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:35610:8549":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:7306:32489":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:22232:3010":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:7695:16322":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6466:16275":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:5796:8500":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"24:298:21077":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"6:1517:10206":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14177:19927":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:8226:16342":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:6678:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:21339:2887":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:39911:8137":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:9461:2225":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:5266:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:15769:20729":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:16187:20901":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:7473:8475":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:11152:8704":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:8190:2468":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:5623:2594":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:7633:32307":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8606:2703":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:2592:15326":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:42334:8103":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:22504:27587":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:6581:2828":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13235:19394":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:1585:10213":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12189:16663":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:13473:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10439:16432":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:8317:13525":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"23:144:21068":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"6:6532:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:7339:2465":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"14:202:8214":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:4747:8284":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:849:2429":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8160:2427":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"11:1160:2446":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:1686:10222":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7656:16320":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:2548:31994":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:14311:19936":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14847:20664":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:39070:8250":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"11:1007:2443":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:15383:20702":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:4843:2705":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:46245:8057":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2295:8569":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:5415:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:41405:2386":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11115:16470":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"22:28:2580":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"6:6435:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:43129:8179":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:5347:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:13814:19905":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:33019:8541":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8126:2570":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:14752:20662":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:1309:2443":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"20:4101:33482":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:46276:8060":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:3354:27484":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:41395:2772":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:11205:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:5361:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:3842:15375":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:4390:8260":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13173:16723":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"20:3395:2219":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"16:7168:16304":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8792:2428":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:6874:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:1189:30603":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:11467:16512":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2985:23428":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:1574:2428":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:39856:2531":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:2878:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5445:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:46045:2938":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:7485:14484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:12277:1794":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:6788:31741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:513:16418":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9886:16422":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:9259:24133":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:3584:26680":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5477:13336":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:867:2431":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46119:2944":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:844:2439":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:573:33296":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:3767:2657":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:21351:2884":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5250:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:15957:20890":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:11829:24307":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:2477:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:43897:8682":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:8000:2508":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:190:15142":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"1:637:2403":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12508:16676":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:5189:24339":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:430:32004":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5002:13286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"14:7:15238":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"20:4087:33512":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"16:4614:15894":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:9938:16424":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:1885:2225":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:9629:2572":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"20:3441:20986":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"6:6729:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:39050:8557":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:10236:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"11:1603:15230":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5581:13346":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:15582:20715":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:13211:19393":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"14:165:15239":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12543:16681":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:14025:19918":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:39740:2399":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5052:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:3575:2521":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:45825:2964":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:13899:19910":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:1891:2433":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"10:36:31984":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:4148:2429":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:3614:15348":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:15521:20713":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:39683:27632":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:5607:2798":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:41413:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:7503:2424":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:30218:8233":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:21456:2885":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:9109:2430":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12584:16438":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:1663:10219":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:4273:8275":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:673:2428":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:7452:14481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:11662:8147":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"11:2554:32012":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:43041:8138":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:3028:30405":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10185:16396":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"20:3250:33603":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"17:12251:16636":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"20:2956:2218":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"2:22582:28164":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9399:2873":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:2231:15221":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:9254:24129":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"28:112:21119":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"17:9984:16425":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"20:4233:2223":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"17:15678:20723":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:1602:2449":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:0:2071":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:6098:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:7251:8487":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"20:3377:20971":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"6:7602:14491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:4352:15793":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"20:3448:20981":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"2:3129:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6665:16288":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"14:31:15238":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:7461:14482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6335:16266":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:5307:16219":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:563:20949":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12278:16666":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:8328:13526":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5336:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5200:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:3249:30550":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:43445:8174":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6447:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:1072:2446":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5306:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:39884:2544":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:1699:10223":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11214:16468":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:43648:8208":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5352:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:4734:23300":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:40469:28181":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:43321:8189":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:3329:15346":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:10868:2613":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11812:16577":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:6082:2839":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11595:16563":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:3341:8254":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:43357:8190":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6758:15257":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"20:1711:138":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"17:15434:20708":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5483:13337":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:8012:14861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:41999:8105":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:15176:20683":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"26:21:2223":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"1:2696:2615":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"20:3564:20987":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"6:0:948":{"crate_id":6,"path":["libc"],"kind":"module"},"20:3286:2373":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"2:32960:8542":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:3806:2469":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:1153:30605":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:2797:2429":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"2:3737:2430":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:10039:8111":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12683:16684":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:80:20918":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:8482:2659":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12328:16632":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:32608:8540":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:3494:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:14051:19920":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:41478:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11605:16558":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:15289:20693":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:43153:2613":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"20:3372:2373":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"6:4885:13272":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:1585:2434":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:15273:20691":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:859:2430":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:15023:20674":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"28:120:21120":{"crate_id":28,"path":["strsim","RowId"],"kind":"struct"},"6:8282:13520":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11841:16620":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:12254:455":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:3304:2450":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6519:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:15301:20694":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:588:2397":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:4031:2594":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:15324:20696":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:9737:16392":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:2234:16532":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:11595:23511":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6079:16259":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:491:9307":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2440:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:7529:2384":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"28:130:21121":{"crate_id":28,"path":["strsim","GrowingHashmapMapElemChar"],"kind":"struct"},"1:8174:24356":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:2418:15318":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12289:16631":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:46432:8068":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12225:16638":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11524:16559":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:12255:1755":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13538:19414":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:1680:10221":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:10606:2630":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:41198:2663":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"18:680:20938":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:150:15290":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"26:40:21088":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"2:39829:27865":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6504:16278":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:4736:23302":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"20:3602:27639":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"16:3778:15357":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:11431:2547":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:2382:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:22364:27885":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:39818:2530":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7006:16299":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:9671:16394":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:6257:3026":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8536:2723":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13509:19412":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:4891:13104":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:3270:2449":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:4093:2690":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:6689:2831":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:8639:2764":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:6408:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:4959:13280":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:46236:8056":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:45502:2970":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:8306:13524":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:4410:2722":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12043:16582":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:16223:20904":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:4787:13264":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:742:2437":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:43865:8680":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:13276:8322":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:40283:8510":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:46256:8058":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5617:13349":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"9:238:2784":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:15748:20727":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13412:19405":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:41010:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:16198:20902":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:10389:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:3475:15347":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:12949:16449":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:2352:2445":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:43881:8688":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2854:15338":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:45049:2928":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4992:13285":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11227:16467":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:16259:19403":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"18:598:33319":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:9093:2428":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:12274:1728":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:15356:20699":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:7357:8495":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:12205:24273":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:7100:30795":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:14587:19954":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:10924:2509":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:6895:16294":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"20:3626:20972":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"1:10247:23419":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:6714:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:5370:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:9492:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:21333:2883":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:6746:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:11063:16481":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11313:16499":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:42749:27928":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:30599:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"20:3686:21018":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"20:4035:21028":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"17:10828:33280":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:41384:2770":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"20:3594:20992":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"1:7221:26920":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:8253:13516":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:735:20934":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:8175:16338":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:6940:8239":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"20:0:1949":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"18:623:33313":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:9323:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5031:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:1975:744":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:3791:2468":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:42287:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:15836:20734":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:15992:20891":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"11:1087:32005":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:4:1186":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12238:16637":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:1535:10208":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:40483:2827":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:9824:8102":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:6619:21055":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:44124:3025":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:40498:2640":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:16249:20906":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:11042:16462":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6782:16290":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"19:0:1203":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7052:16301":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:10390:8656":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:2401:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:4469:8269":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"20:3263:33584":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"6:1559:10210":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:2536:32014":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:0:2204":{"crate_id":21,"path":["anstyle"],"kind":"module"},"2:41502:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:10603:2634":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:5235:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4952:13279":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:7887:8486":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13308:19398":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:872:32500":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"20:3230:33591":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"1:2660:2623":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13986:19915":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8154:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:621:2401":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:39661:8258":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:21246:28140":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:6821:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:2684:15330":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3095:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:531:20947":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5376:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"22:110:21047":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"16:860:32501":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:3603:2433":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:2764:2524":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:2961:8091":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"21:259:21000":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"2:42494:2586":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11026:16461":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"11:396:31996":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"15:394:15274":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:941:2428":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7085:32419":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:10837:24381":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6456:16274":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:2323:15313":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:10037:8110":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:5415:32459":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13999:19916":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:38960:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:43533:8203":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"20:3068:2220":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"17:14284:19934":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:45356:2942":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6976:16298":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:12824:16443":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:2966:8092":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:12900:16447":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:13438:3023":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:7356:2454":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11324:16525":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:9219:2373":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:31846:8088":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:46265:8059":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13526:19413":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15010:20673":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:9144:2846":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3279:2632":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:15646:20721":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:10905:16440":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:14994:20660":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:14545:19952":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5064:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:7467:14483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6991:32370":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:880:2432":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:2287:30564":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"21:209:20999":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"1:9350:2834":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:12323:8694":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:3460:20977":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"17:15313:20695":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4800:13265":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5546:13343":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11075:16477":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:557:2376":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:39755:8291":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:41658:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:473:9304":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9072:2804":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:3158:2484":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"20:61:2229":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"17:16269:19405":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:42296:8101":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:41344:2430":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:4308:2428":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:7585:2527":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:726:2668":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"11:2304:2443":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:7031:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7428:16306":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:5445:8130":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:10228:2500":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:5502:2795":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:5831:16249":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11825:16599":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:9328:2826":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:12851:16444":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:4062:15526":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:7400:25825":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:8247:13515":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:2303:15285":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10622:33274":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6768:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:11023:8158":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"20:3135:20995":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"6:6657:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:2995:33644":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"2:39953:8488":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:15410:20705":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:8782:2787":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1653:10218":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:1062:30755":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6900:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6664:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10904:26732":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:7608:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:479:9305":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14876:20667":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:12259:1577":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:7359:14479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8414:2575":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:39748:8184":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:41894:2822":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:1828:2434":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:2708:15331":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:31848:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:9679:29335":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:39931:2481":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:45064:2893":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:5122:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:32842:2875":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:12610:8168":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:7690:2434":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:2112:2470":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:4570:8272":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:40075:8504":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:1692:2712":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:42502:28182":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:11144:8161":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:4174:8257":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:45417:2902":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:3669:15349":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:22199:3011":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"18:670:20937":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:5708:8237":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:43221:8192":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:43554:8204":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:21260:28132":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:1054:2444":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9048:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:41048:2652":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:559:9315":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:3518:2577":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:10284:16429":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:10885:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:11898:16598":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:5107:16042":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8402:2641":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:6738:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:12273:1722":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:7980:2408":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:45713:2897":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7546:14487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:608:33321":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"23:416:21066":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"21:113:33719":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"2:13251:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14560:19953":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4876:13271":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3934:2662":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"9:178:15208":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"13:226:32017":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:5061:2594":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:2569:2424":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"25:0:2208":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"20:4075:24303":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"2:38889:2483":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"11:1107:15226":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12572:16437":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:11799:16619":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:22087:3020":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:45696:2949":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:22073:2580":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:7339:14477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:9977:2521":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11016:16460":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:2443:2561":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6811:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"23:497:21054":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"6:4909:13274":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:46291:8061":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:44137:3022":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:9345:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:45111:2894":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15799:20731":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5039:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:4079:2688":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:7043:2879":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:6746:2837":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:42962:8148":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:3413:2619":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:1910:2448":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:7366:2756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7741:16324":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:42734:8673":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:12658:8197":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"20:4123:21011":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:21192:8313":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5020:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:3396:2434":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:9267:16304":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12647:16680":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:13485:19410":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:14868:20666":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:12544:2546":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:4641:15898":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:43427:8176":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5653:13354":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:4531:15880":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:1025:2444":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"20:1182:20988":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"5:6540:2433":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13959:19913":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4590:2727":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:10911:8164":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"20:3947:21035":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"17:13946:19912":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5014:2752":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:12516:16691":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:10534:33273":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:21729:2580":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:3366:2631":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13363:19401":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11877:16578":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:3025:8082":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5146:13299":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:3871:2434":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:4543:2383":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:5927:16253":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"11:2469:2434":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:5344:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:5769:16245":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:2572:15325":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11540:2809":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"20:1665:21016":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"16:8216:16341":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13877:19909":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:5750:2840":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:40023:8501":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:6815:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:2297:8570":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:11354:16510":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:22011:3016":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:11293:16498":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:3740:30755":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6542:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:22602:2666":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12276:917":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:25464:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:6930:8238":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:3237:2428":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:3329:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:16032:19395":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:2936:15341":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"21:301:29339":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"17:11567:16562":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:22520:27623":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:5914:32281":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:11133:2804":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:10950:8153":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:96:20919":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11144:26735":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:8019:2262":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8488:2658":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:1544:2436":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:856:2440":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10964:2805":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:30224:8453":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:7446:14480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8656:2783":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:12265:717":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:33388:8545":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:15342:20698":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:15214:20687":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"20:4158:8500":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"2:38230:8554":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11419:16437":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:542:32234":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:564:9316":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:45231:2901":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:811:2434":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:515:20946":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5677:13357":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13272:19396":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10612:16434":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:5320:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:21447:2580":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:9174:2847":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:687:2429":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:765:20935":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:43257:8162":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:8197:15021":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:6608:8492":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:5472:13335":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:40041:8511":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:12040:21132":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:5722:16242":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7910:16332":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:533:2374":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"21:341:21043":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"2:43569:8205":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:5742:16243":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2644:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:1863:8579":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:9115:2845":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"23:0:2206":{"crate_id":23,"path":["anstream"],"kind":"module"},"16:7769:16326":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:30626:8313":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:31750:8607":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:7516:14485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13855:19908":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:523:9310":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"20:2980:33500":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"17:11547:16560":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5244:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5423:13330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:16121:20896":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:15596:20716":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:4137:2692":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2435:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:4149:2695":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:12260:1609":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:8136:16336":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:7388:2471":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:15126:20679":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:11130:8163":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:11629:8146":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:8727:2785":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:437:15287":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11142:16437":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:26:21080":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"16:4856:15975":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10541:26886":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:10759:16437":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"11:2423:2430":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:8288:13521":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43583:8206":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:43869:8683":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:7368:2433":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:45263:2913":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:40525:8483":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:10033:8113":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:14529:19951":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"20:3929:33522":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"2:12116:8646":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:45787:2909":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4824:13267":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:43303:8188":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:10473:26932":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:22589:2667":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12127:16587":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:32901:2877":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:4907:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:3716:2626":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"1:8541:2724":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:1547:10209":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:3354:20965":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"1:1862:2500":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"11:1887:2430":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:10671:33285":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:9195:2825":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:40000:8499":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:328:31993":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:10720:33287":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:7706:8234":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:40259:2611":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:2525:30388":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:7937:2263":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:481:20944":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:16212:20903":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:45586:27599":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:22101:8569":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"6:6629:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:5910:8490":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:294:2266":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"26:0:2209":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:43123:8180":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"18:754:20942":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12464:16673":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14189:19928":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6609:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:8300:13523":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:2736:2625":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:10406:23416":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:6273:26889":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:43073:8155":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2631:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8555:2659":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:1671:10220":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:1734:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"4:0:2063":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:12100:8644":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"20:4183:33498":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"1:2271:2550":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6650:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:45277:2962":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6670:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4870:13270":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:6494:16277":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4897:2706":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:12346:8691":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"20:3957:21025":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"2:45143:2930":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:4802:2726":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:39057:8242":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:4141:2693":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"20:3454:20982":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"2:12590:8169":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:7528:16310":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:2427:2556":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:21202:28136":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:7597:8125":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:7845:26925":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:465:9303":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12030:16584":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:15206:20686":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1580:10212":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11581:21134":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:4228:25828":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:2087:2468":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:6398:16269":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:12132:8177":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:43737:8212":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8182:2624":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:1496:10203":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:44162:8080":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6409:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10895:2575":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:5675:2799":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:12286:8692":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:2508:15322":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11755:16570":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11153:16438":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"7:78:15081":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:15376:20701":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:15092:20676":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:7590:16316":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43747:8213":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6317:16265":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14475:19947":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"13:0:2062":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:42519:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7618:16318":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:1575:2467":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:41336:2429":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:1607:2450":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:2562:32009":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:43099:8186":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:45210:2895":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:5008:923":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:5225:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"20:3905:33527":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"14:0:2069":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:4738:23304":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:13089:16720":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:39711:8297":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:44146:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:11242:16495":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5158:24339":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:613:33316":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:21331:2580":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:2637:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:37596:8552":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12399:16670":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:15222:20688":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"9:482:15102":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:8798:2788":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:2876:8089":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:7448:2430":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:14131:19925":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:33215:8544":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"11:837:2438":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:33734:8548":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:6763:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:12485:16675":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:4279:2720":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:7330:9186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11482:24226":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"16:7098:32428":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:11606:24379":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"20:3475:20983":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"2:13224:28282":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:16138:20897":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:11189:16473":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:4242:8274":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:5219:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:42242:8101":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:5598:13348":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:2369:15231":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"20:3240:33589":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"6:4979:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:5449:8131":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:4942:13278":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6849:16292":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:9684:28254":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"9:502:15106":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:38942:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"20:3764:21007":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"1:922:2438":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:22154:8569":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:13785:16625":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:9340:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:3580:20989":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"1:4127:2691":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:12275:1710":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:10524:16433":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:8188:16339":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"21:173:33721":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"17:9858:16421":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:43760:8194":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"20:3807:2222":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"17:11493:16519":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:4841:2704":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:12659:16679":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"25:23:15142":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:22:772":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:39698:8295":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"23:99:21067":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"2:45388:2896":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12478:16674":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:44185:28195":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:12258:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:7823:16329":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:41816:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:1854:27603":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13046:16404":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"20:4214:2224":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"5:6907:8237":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:43889:8687":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:14855:20665":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:43203:8193":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12863:16445":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5212:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:21758:2880":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:10284:2587":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:6181:26917":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"7:0:1784":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11700:2661":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:15778:20730":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:659:20936":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:8294:13522":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:12584:8173":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:16105:20895":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:33078:8543":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8165:2426":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:7813:16328":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:45923:2932":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:45128:2900":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:15814:20732":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:12266:861":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4916:13275":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2438:15319":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5329:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:5083:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:3829:2661":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:45096:2934":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10399:2612":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:43083:8156":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12792:16401":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8469:2613":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:7966:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6524:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4932:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"20:3887:33526":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"6:5466:13334":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:9336:2594":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:725:2580":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:4724:2690":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1503:10204":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:42991:8151":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:39721:8298":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"23:466:21055":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"2:39813:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:6441:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43901:8704":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:3018:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:21734:2890":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:13497:19411":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8258:24360":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:7355:16305":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3240:24072":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:39971:8496":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:8202:16340":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:5996:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:3877:33524":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"6:1526:10207":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:5367:16237":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:2379:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:15281:20692":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:14235:19930":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:16165:20899":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:41092:27706":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:1578:2430":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:279:30755":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:4437:30777":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:8351:15058":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11534:24153":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:13674:19900":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:41176:27882":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"20:3798:21037":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"2:45248:2907":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:37541:8551":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13146:16722":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6160:15284":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:40492:8479":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:42981:8150":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:40269:8509":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:14933:20669":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:40517:8481":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"7:31:15074":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:15266:20690":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:41469:2430":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:3264:16581":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:22471:2665":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:3251:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:14147:19926":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:2636:15328":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:689:20939":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7397:32516":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:8387:2461":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:883:2442":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:578:9318":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:6407:3029":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:16069:20892":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5160:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:6028:2821":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:8271:13519":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10251:16428":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:6760:2838":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:40:2485":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:16093:20894":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:2748:15333":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:3810:15366":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:12264:701":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:4424:15842":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:6305:24144":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:11634:16534":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"20:34:2228":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"2:41032:2651":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:7755:16325":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:15400:20704":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:15197:20685":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:5636:13352":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"20:1663:21015":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"2:43275:8160":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:40124:8508":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"28:69:21112":{"crate_id":28,"path":["strsim","GrowingHashmapChar"],"kind":"struct"},"17:14912:20668":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7379:32517":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"10:0:2066":{"crate_id":10,"path":["adler"],"kind":"module"},"2:44173:8078":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:15720:20725":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:517:9309":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10249:24320":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:6532:16279":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:13292:19397":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:7250:26072":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10350:16431":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:43375:8191":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5382:13326":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:5897:16252":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:7932:2382":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:4718:15952":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:7473:16307":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:40134:8493":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14788:20663":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:41992:8104":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:38893:8555":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:14111:19924":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:2628:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"11:123:32006":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:6962:16297":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13766:16626":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:42953:8149":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:5857:2823":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"20:4138:21010":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"2:13202:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:507:33296":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:45373:2948":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2674:26932":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:43063:8157":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:4029:2686":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:46317:8063":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11120:2803":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:113:20920":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:2383:2428":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:1169:30402":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8493:2650":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11510:16505":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:909:2435":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12597:16687":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:10877:16439":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7549:16312":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:2403:2429":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:43028:8137":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:11843:15271":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"20:3527:20978":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"17:11341:16511":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:11367:16477":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:5995:16255":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:1593:10214":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10092:16427":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:42753:8140":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:1771:1261":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:9059:2803":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12213:16665":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:2478:15321":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:45196:2947":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:22432:28197":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:491:33307":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6648:16287":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:1565:10211":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:6505:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:31759:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12969:16395":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"11:2542:29352":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13753:19903":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"13:109:32064":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"23:389:21077":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"1:11170:2583":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:2458:15320":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6872:16293":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15944:19393":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:11688:16531":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"23:309:21061":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"5:1463:2428":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10121:24101":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:403:16417":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:13418:3026":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:7703:2816":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"23:181:2580":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"2:2888:2385":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:8431:29339":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:7429:10329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"20:3938:33523":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"16:4502:15874":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:14977:20671":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"20:3854:21034":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"16:5960:16254":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:8809:2789":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"20:3587:20973":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"14:187:15246":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:15473:20712":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:2788:15335":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:43054:8154":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6915:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:1494:2430":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:10170:16239":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:16079:20893":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:11392:16509":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:15168:20682":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6706:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:2902:15340":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5296:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:2203:16507":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:14386:19941":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:15822:20733":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:1968:2520":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"20:3551:20979":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"16:6927:16295":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:4316:8126":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:10137:16391":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:3925:15412":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"28:34:21102":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"2:33561:8546":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11405:16508":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12707:16441":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15624:20719":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1555:2437":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:21280:2888":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:7799:16327":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:7421:27986":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12887:16446":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:3832:2660":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:8259:13517":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:14212:19929":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6427:16271":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"24:113:21079":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"6:6636:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13437:19407":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:21214:28136":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:21278:2580":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:4395:8261":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13375:19402":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:3597:16604":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:39874:2545":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6620:16285":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:12270:836":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"15:306:15263":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:4250:2717":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:5037:16018":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13568:19416":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:2883:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:46090:2910":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:8384:2457":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:4523:8271":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:41697:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:9208:24149":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:5347:16236":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:3281:2633":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"21:353:21004":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"1:8426:2579":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:3899:15409":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:6756:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:45292:2968":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:11567:23388":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:39000:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:41064:2653":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:2049:8097":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:570:9317":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"11:2326:2444":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:15190:20684":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6047:16257":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"9:0:2065":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:11817:8074":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"11:787:2432":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:7648:16319":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:6597:14051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:9213:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:31817:8518":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14503:19949":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:46148:2965":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13844:19907":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:669:30539":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:5912:2433":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:37486:8550":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:4103:30755":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:1621:10215":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:45181:2941":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:1581:2433":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:30239:8101":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:96:21074":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:43712:8210":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11102:16471":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:4108:27853":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:2944:8539":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:44083:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6412:16270":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:11497:16506":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:7348:14478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44062:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:7891:8485":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6606:16284":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:15249:20689":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:39767:8292":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:4802:15967":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"20:3291:20967":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"20:1107:20990":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"20:4207:33659":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"1:6471:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3536:2576":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:12599:8171":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:43943:2878":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6775:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:12221:24140":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:12261:1695":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"20:3989:21029":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"1:9363:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"18:521:20943":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13325:19399":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"20:3776:21008":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"1:5553:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:2775:2428":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"22:5:2685":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"6:5112:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:800:2433":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:1903:2447":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"0:0:1957":{"crate_id":0,"path":["clap"],"kind":"module"},"2:4966:2642":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5134:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:10866:2573":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:645:2405":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:6621:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12175:16651":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"11:774:2431":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:42531:2784":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:14079:19922":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:2640:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:7412:10331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:15:2182":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:21229:28138":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4837:13268":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6353:16267":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:1840:8580":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:5802:16247":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:43139:2612":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:7864:26935":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:22482:27884":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:3835:21032":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"1:7908:2580":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:8268:2626":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:45164:2935":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:22540:27615":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:37651:8553":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"15:327:15267":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"22:152:21049":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"1:10932:2798":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:7984:9263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:2234:30464":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12150:16585":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:10029:8104":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"1:11517:26922":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:3123:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:41396:8629":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:7584:14490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:1340:2444":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:4120:27852":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:22311:27861":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"20:3307:20968":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"2:45601:2931":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:0:2067":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:3335:8255":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:5743:2839":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:45675:2943":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11788:16618":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5630:13351":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:8463:2612":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:635:33302":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:45846:2898":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43436:8175":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:4132:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:5260:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:828:2451":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:11089:16472":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:12318:16449":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"9:53:15122":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:2453:2566":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"18:718:20933":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:5102:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:15760:20728":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:6560:16281":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:7075:30786":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"23:480:21053":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"17:9755:16390":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43893:8681":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"11:364:31998":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:597:16419":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14489:19948":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:45487:2969":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11661:16535":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15655:20722":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10044:16426":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:7994:2409":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:1207:16482":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:1590:2447":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:12252:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:5400:16239":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:31725:26011":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:40053:8503":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:2728:15332":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:3534:20976":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"16:8118:16335":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12530:16682":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:11702:16566":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"20:3102:2221":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"18:651:33296":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13064:16403":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:4087:2689":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:2443:2433":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:22417:27612":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:14449:19945":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:6153:2594":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"20:3150:20996":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"17:14575:16407":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7014:16300":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:6813:16291":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:1639:10217":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6562:14050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:4482:2716":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:2140:2444":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:2274:2551":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:14091:19923":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8015:2509":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8104:2572":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7321:2769":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:10876:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:41394:2411":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12388:16660":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:6586:30755":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:7348:2430":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:15058:20659":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:9226:24215":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:3593:2578":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:6667:2430":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:7727:16323":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:43873:8685":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:3278:2447":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:16176:20900":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"20:1375:2228":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"assoc_type"},"23:359:21059":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:12226:2410":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:22496:27624":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6263:32469":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:875:2441":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:9807:16406":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:3014:15343":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:6342:32505":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:43919:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:7378:2455":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"23:61:21074":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"6:5290:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11674:16565":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12300:16667":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:9175:8169":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6026:16256":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:0:2072":{"crate_id":17,"path":["object"],"kind":"module"},"5:1724:30755":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:12269:855":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"23:322:21062":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"5:1534:2435":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:42971:8152":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"21:279:21001":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"17:13594:19418":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"20:3867:21033":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"1:2499:2080":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:41580:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:4928:28107":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:44116:3024":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:5864:2824":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:10666:2580":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12107:16437":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5390:13327":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:1490:10202":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6442:16273":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:3369:8093":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:39904:2574":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:1826:2490":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"23:447:2784":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"11:1883:2428":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:356:2394":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:7924:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:14246:19931":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:2338:15314":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:8529:2654":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4864:13269":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:939:2440":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:8259:16343":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8116:2573":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11128:16469":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:2374:15316":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:10843:2429":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:15463:20711":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11761:2662":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:11706:8145":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:12253:1105":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:7857:16330":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:9159:2844":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:15102:20677":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:5401:30755":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:43407:2609":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11166:16475":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:1040:2443":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:11010:21004":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:9042:2802":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:11460:24303":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"21:309:21002":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:41541:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"20:3968:21036":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"1:362:2395":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11583:16533":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:39732:8185":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12671:16715":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:13738:19902":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:503:2369":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12494:16639":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:46370:8066":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:43470:8185":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:710:2436":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:45335:2936":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"20:4152:33483":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"1:8742:2786":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:918:2437":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5489:13338":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:10020:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:5528:13341":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:3018:8547":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:2205:30530":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:5588:13347":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12929:16448":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"20:3502:20985":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"17:13024:16451":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:21770:28144":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:39781:8294":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"20:57:2225":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"2:2956:8090":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:4587:15890":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:2607:8317":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:8263:24131":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:10279:2585":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:43885:8686":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"20:3791:21024":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"20:3483:20984":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"11:299:31991":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:1628:10216":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:4920:2700":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:12279:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12268:849":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:2425:2555":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:46000:2904":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:3077:8094":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:31743:8269":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:1485:10201":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:8301:16344":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:3029:15344":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:42006:8112":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:4238:2594":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:8265:13518":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6066:16258":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:14325:19937":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:8138:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:12237:24230":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:2394:15317":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6433:16272":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:22613:2681":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:43778:8195":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7144:16303":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:3246:26367":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:39940:2610":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:10498:2802":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:868:2452":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:7928:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:832:2435":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:14516:19950":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12056:16583":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:2768:15334":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4924:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11537:16526":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14066:19921":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:5006:16010":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:31687:2806":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:3486:2594":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6460:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4811:13266":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:6692:2832":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13797:19904":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:7356:8494":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:3406:8096":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:45758:2903":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5046:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"20:3268:197":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"1:7645:24132":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:43002:8139":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:10600:2632":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:951:2442":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8584:2756":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:12267:843":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13922:19911":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:39800:8290":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:640:2404":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13606:19419":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:15635:20720":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"20:3917:33521":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"11:700:2430":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"20:936:20969":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"2:45569:27616":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:39243:8318":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:4986:16692":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:16050:19396":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:8341:15057":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:924:2453":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:21458:2884":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13187:19392":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4965:13281":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4897:13273":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:3321:20970":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"17:13723:19901":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:8563:2725":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:1063:2445":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:43954:8705":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"20:49:2226":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"2:40009:28152":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:11740:2660":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"20:3896:33525":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"18:0:2073":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:1582:15229":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:15608:20717":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:31761:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"25:53:2784":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"11:1142:15227":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:2712:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:7573:2526":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"23:432:33815":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"2:40476:8477":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2934:2876":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:867:32502":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:14463:19946":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:3196:15345":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:1824:2489":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:8393:2639":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:11764:16571":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:3036:30400":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13015:16407":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:4514:8270":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:4073:2433":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6098:16260":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4799:2753":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13399:19404":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:3660:2429":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:10488:27476":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"22:125:21048":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"2:38845:8095":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:14402:19942":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:16235:20905":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:10018:16398":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12993:16450":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:102:32013":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:45306:2882":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:8075:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:7561:14488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:532:9311":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:434:32000":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:6388:3028":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:21880:2580":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:3473:16586":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"9:357:15119":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:5538:2797":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"23:114:2619":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"17:12264:16635":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:485:9306":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:22099:27899":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:9101:2848":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:7497:16308":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:4830:15972":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:15368:20700":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13972:19914":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"21:329:21003":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"1:0:1601":{"crate_id":1,"path":["std"],"kind":"module"},"2:12362:8693":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:7888:16331":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5174:2684":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7111:32368":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:38980:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:46219:2971":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5283:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:3324:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11647:16564":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13252:19395":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:1525:2432":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10818:16438":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:5502:13339":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:2612:15327":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:7575:14489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12353:16668":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"20:3544:20980":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"2:38809:8253":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:4743:15954":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12408:16661":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:42510:2588":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12724:16442":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:22185:2580":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:1325:2445":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:8006:14860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:41619:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"14:214:15247":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:893:2433":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:1098:16474":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11836:15271":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:14356:19939":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"8:0:2064":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11773:16617":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:45808:2915":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:21248:28143":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:22227:3012":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:13473:19409":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:44065:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:15333:20697":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11027:26915":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:586:9319":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"24:131:2784":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"20:3258:33588":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"2:7643:2639":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:45646:2937":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:45079:2929":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:4155:8087":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:10031:8112":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12768:16399":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:7537:14486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:10648:2379":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:13116:16721":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:6749:16289":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:7621:8215":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:22049:3017":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:42271:27639":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"9:424:15105":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:30186:2463":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4668:2744":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}