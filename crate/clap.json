{"root":"0:0:2446","crate_version":"4.5.9","includes_private":false,"index":{"2:13831:30377":{"id":"2:13831:30377","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13437:8741","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::match_indices":"2:13828:30376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44740:8757","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742":{"id":"2:13742","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13743:1024","2:13744:23538","2:13745:30366","2:13746:30367","2:13748:30368","2:13751:23899","2:13752:30369","2:13753:350","2:13754:24012","2:13755:24008","2:13757:24009","2:13759:24010","2:13761:24011","2:13763:30370","2:13764:30371","2:13765:24034","2:13766:24035","2:13767:24038","2:13768:24039","2:13770:29230","2:13771:29421","2:13772:23347","2:13773:29228","2:13774:29229","2:13775:26937","2:13776:30372","2:13777:29231","2:13778:24052","2:13781:24053","2:13784:24054","2:13787:21533","2:13791:21534","2:13795:24040","2:13798:24042","2:13801:24044","2:13804:30373","2:13807:30374","2:13810:24046","2:13813:24048","2:13816:24050","2:13819:24051","2:13822:2740","2:13825:30375","2:13828:30376","2:13831:30377","2:13834:30378","2:13836:30379","2:13838:30380","2:13840:30381","2:13841:30382","2:13842:30383","2:13845:30384","2:13848:23457","2:13851:24055","2:13854:30385","2:13857:30386","2:13860:30387","2:13863:30388","2:13865:23903","2:13866:23904","2:13867:23906","2:13868:23907","2:13869:23908","2:13870:23910","2:13871:23911","2:13872:23912","2:13873:30389","2:13875:2969","2:13876:30390"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13775:26937":{"id":"2:13775:26937","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44826:3179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13746:30367":{"id":"2:13746:30367","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13776:30372":{"id":"2:13776:30372","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44836:8755","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13748:30368":{"id":"2:13748:30368","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13746:30367"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13743:1024":{"id":"2:13743:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12478:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:23457":{"id":"2:13848:23457","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:30390":{"id":"2:13876:30390","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5057:30390"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44889:8753","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13813:24048":{"id":"2:13813:24048","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12478:490","str::splitn":"2:13810:24046","self::pattern":"2:13437:8741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44694:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:3208":{"id":"5:5719:3208","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:24012":{"id":"2:13754:24012","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12497:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:30371":{"id":"2:13764:30371","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12484:1765","crate::ops::IndexMut":"2:3621:3055","str::slice_unchecked":"2:13763:30370"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:25296":{"id":"5:5721:25296","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13869:23908"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13834:30378":{"id":"2:13834:30378","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13810:24046":{"id":"2:13810:24046","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741","str::rsplitn":"2:13813:24048"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44676:8730","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5706:31086":{"id":"5:5706:31086","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:30381":{"id":"2:13840:30381","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701":{"id":"5:5701","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5702:31085","5:5703:9091","5:5706:31086","5:5709:31087","5:5717:31088","5:5718:31089","5:5719:3208","5:5720:25295","5:5721:25296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13836:30379":{"id":"2:13836:30379","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13816:24050":{"id":"2:13816:24050","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:30366":{"id":"2:13745:30366","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:9091":{"id":"5:5703:9091","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:23538":{"id":"2:13744:23538","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:30373":{"id":"2:13804:30373","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13437:8741","str::split":"2:13795:24040","prim@char":"1:12478:490","`DoubleEndedIterator`":"2:8393:133","str::rsplit_terminator":"2:13807:30374"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44622:8761","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13865:23903":{"id":"2:13865:23903","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:29230":{"id":"2:13770:29230","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12478:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44542:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:30389":{"id":"2:13873:30389","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5059:30389"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44871:8752","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13866:23904":{"id":"2:13866:23904","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40484:8887","Self::is_ascii":"2:13865:23903"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40484:8887","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13819:24051":{"id":"2:13819:24051","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13860:30387":{"id":"2:13860:30387","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13872:23912":{"id":"2:13872:23912","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37604"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13759:24010":{"id":"2:13759:24010","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2446":{"id":"0:0:2446","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[102,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.9/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.74)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name);\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![forbid(unsafe_code)]","#![warn(missing_docs)]","#![warn(clippy::print_stderr)]","#![warn(clippy::print_stdout)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:2439"],"is_stripped":false}}},"2:13753:350":{"id":"2:13753:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13754:24012","`u8`":"1:12497:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:21534":{"id":"2:13791:21534","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:2969":{"id":"2:13875:2969","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5060:2969"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44880:2970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:30385":{"id":"2:13854:30385","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:24054":{"id":"2:13784:24054","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:21533":{"id":"2:13787:21533","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:24011":{"id":"2:13761:24011","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13841:30382":{"id":"2:13841:30382","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13842:30383":{"id":"2:13842:30383","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13463:8736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:2439":{"id":"0:3-20:0:2439","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:2439","glob":true}}},"2:13765:24034":{"id":"2:13765:24034","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13767:24038","str::split_at_mut":"2:13766:24035"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13825:30375":{"id":"2:13825:30375","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13437:8741","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::matches":"2:13822:2740"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44794:8759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13870:23910":{"id":"2:13870:23910","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37604"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:23911":{"id":"2:13871:23911","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37604"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:24044":{"id":"2:13801:24044","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13437:8741","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::split":"2:13795:24040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44590:8726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13838:30380":{"id":"2:13838:30380","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:24052":{"id":"2:13778:24052","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:24035":{"id":"2:13766:24035","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13765:24034","str::split_at_mut_checked":"2:13768:24039"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13863:30388":{"id":"2:13863:30388","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13398:148","`FromStr`":"2:13397:3115"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13397:3115","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13397:3115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13807:30374":{"id":"2:13807:30374","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13437:8741","str::split":"2:13795:24040","prim@char":"1:12478:490","str::split_terminator":"2:13804:30373"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44640:8760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:29421":{"id":"2:13771:29421","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12478:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44548:8747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13867:23906":{"id":"2:13867:23906","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13869:23908":{"id":"2:13869:23908","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:24055":{"id":"2:13851:24055","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13857:30386":{"id":"2:13857:30386","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13828:30376":{"id":"2:13828:30376","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13437:8741","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::rmatch_indices":"2:13831:30377"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44722:8756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13755:24008":{"id":"2:13755:24008","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:31089":{"id":"5:5718:31089","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2829","`String`":"5:7759:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2829","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13757:24009":{"id":"2:13757:24009","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:24040":{"id":"2:13795:24040","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13437:8741","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::split_whitespace":"2:13773:29228","str::rsplit":"2:13801:24044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44572:3183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13868:23907":{"id":"2:13868:23907","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13781:24053":{"id":"2:13781:24053","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13777:29231":{"id":"2:13777:29231","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44864:8742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:29228":{"id":"2:13773:29228","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13774:29229"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44846:8744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13751:23899":{"id":"2:13751:23899","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12960:8745"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:29229":{"id":"2:13774:29229","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13773:29228"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44855:8743","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:25295":{"id":"5:5720:25295","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13868:23907"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:31085":{"id":"5:5702:31085","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2829","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2829","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13768:24039":{"id":"2:13768:24039","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13767:24038"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:30370":{"id":"2:13763:30370","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12484:1765","str::slice_mut_unchecked":"2:13764:30371","crate::ops::Index":"2:40131:3054"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13822:2740":{"id":"2:13822:2740","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13437:8741","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12478:490","str::rmatches":"2:13825:30375"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44776:8758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:30384":{"id":"2:13845:30384","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:31088":{"id":"5:5717:31088","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:24038":{"id":"2:13767:24038","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13768:24039"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:23347":{"id":"2:13772:23347","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44558:3182","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13752:30369":{"id":"2:13752:30369","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13798:24042":{"id":"2:13798:24042","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12478:490","self::pattern":"2:13437:8741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13227:8732","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:31087":{"id":"5:5709:31087","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:13360:17027":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:47819:8629":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:1848:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"28:130:21721":{"crate_id":28,"path":["strsim","GrowingHashmapMapElemChar"],"kind":"struct"},"20:3124:21596":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"5:4354:3000":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:47868:8632":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:41241:3052":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"20:65:2792":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"11:663:3001":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:7398:33064":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"14:159:15812":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:10669:8670":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:3302:27835":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"20:3361:2941":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"2:5130:8850":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:6705:3397":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:45549:3594":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8005:2967":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:5982:3392":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:46561:3469":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:41159:3182":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:545:9886":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1684:10797":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:4692:16369":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13957:20007":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:3907:3231":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:1206:30189":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:6428:14616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:15652:21281":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:41147:3096":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8487:3212":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10563:17002":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:4919:2955":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:3285:3000":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:9145:3322":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:46629:3516":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"24:112:21679":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2:3957:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:44722:8756":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2805:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:45312:9253":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5282:13889":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:4135:34435":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"2:23129:3579":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:11415:26455":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"2:39472:9118":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11261:3322":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11015:17013":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:3693:3000":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:7534:3027":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:1219:17070":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:1922:8999":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"16:5447:16618":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:2157:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7334:16875":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:3342:3203":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:6813:3002":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11328:23464":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:41224:8703":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:8326:15634":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9245:3413":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:3533:8662":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:23568:28454":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:3796:8822":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:15805:21294":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:24147:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4671:3298":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:12484:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:11311:3152":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:4332:3291":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:532:9884":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:2152:3040":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:11865:23349":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:15438:21272":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:5196:16551":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:4405:3294":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:6734:30261":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10802:3182":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12549:17181":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"20:3753:21608":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"17:13094:17287":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:5814:8804":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:14380:3592":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"20:2969:34146":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"1:1865:3061":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:7679:2956":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3867:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:1578:3004":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:22775:3149":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:4692:2953":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:3815:29245":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7946:16891":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8085:2979":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:16276:21331":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:44676:8730":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13889:20002":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10548:16815":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12215:17166":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"20:3957:21636":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"1:12504:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:9299:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:901:33246":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:2573:30224":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:13443:8737":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2528:15892":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:5111:16535":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:1242:30179":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:536:2936":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:7539:32998":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:9305:2941":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:43306:3391":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:46952:28502":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4816:13843":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:14049:29425":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:4212:3262":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11814:3378":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11578:17066":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12536:17180":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11133:21605":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:5725:16814":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:46544:3463":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"24:276:21676":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"27:0:2772":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"6:6659:14634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:6158:9474":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4875:13847":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:41015:8857":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"11:859:3014":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1514:10781":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7916:16889":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:15:2743":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:1863:3060":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:13932:20005":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:14311:20508":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"16:6186:16826":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13426:17030":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:22988:3589":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5585:13925":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:4465:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:1117:30261":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:42674:3342":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:8175:15597":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:45486:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:15946:21308":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:12815:17032":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:2898:15909":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:613:34109":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:4818:26777":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"22:110:21647":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"5:720:30365":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:5646:3366":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:6891:3407":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:14482:20516":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5241:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:9171:3374":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:47647:3513":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:15990:21313":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:8043:2947":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:10824:2947":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"20:3843:21634":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"16:3012:15914":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:23510:3252":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11154:23529":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:45500:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:2988:15913":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:11820:23456":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:10662:17005":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10140:16989":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6694:16843":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:16574:19997":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:33772:9104":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:1136:3018":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:12053:8642":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:13227:8732":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:8055:16899":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:41579:9075":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:7857:9043":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:41342:9068":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8813:3355":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:12264:23518":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:32788:16923":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:10116:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:6802:14648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:8118:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6237:16828":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:5617:13928":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:15556:21265":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:2519:32823":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:14000:20010":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"14:7:15812":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3404:9103":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:22175:30077":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:7459:16881":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:13546:17036":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:13437:8741":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:4762:8827":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:316:33246":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"15:288:15836":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:3124:15917":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:47883:8633":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:6536:3597":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2829:8871":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"11:2513:29215":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13982:20009":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11776:17095":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:7772:8783":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:6729:16845":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:8790:3354":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:2618:15896":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:3306:15919":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13634:17320":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11565:17067":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:16356:21337":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:15601:21280":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:2323:3120":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"20:3906:34429":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"17:10927:17012":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8190:3140":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:44380:8717":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"15:327:15841":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:15829:21296":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:11808:26431":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:11925:17108":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13591:17038":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7302:16874":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:45280:9251":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:6486:14579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:7806:29672":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:7935:16890":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:41169:3114":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:8638:3289":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"0:0:2446":{"crate_id":0,"path":["clap"],"kind":"module"},"17:11231:17055":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:6441:14617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5387:13903":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"20:3946:21625":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"11:1542:15803":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"11:1703:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:45622:29433":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"20:754:34445":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"2:3058:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:47374:3467":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:7494:15059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:47804:8628":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:32784:23699":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:8352:26402":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:44398:8720":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:8393:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:423:32837":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:4927:16466":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"25:53:3354":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"17:11074:34057":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5265:13887":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:3318:3021":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:44889:8753":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:46643:3464":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:7962:9836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12495:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"21:259:21601":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"16:3108:15916":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14737:20532":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:11148:23536":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:44864:8742":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13289:17023":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"21:173:34528":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"11:1898:3022":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:46871:3477":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13908:20003":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:544:32983":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7966:16893":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:2414:3005":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:6459:14619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15682:21284":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11984:17155":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:2909:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:7185:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:41808:3211":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:4816:26775":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:8543:16916":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7279:16873":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:3257:208":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"17:12305:17219":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:12233:17215":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:22152:30086":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:14691:20530":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:8284:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:4189:3364":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"2:4644:2954":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:14901:20543":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:7807:26580":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"2:22777:3455":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:2766:3000":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"6:5512:13917":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:40981:8864":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:282:30261":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:2075:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"23:416:21666":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"2:41263:9057":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:42320:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13837:19999":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:10671:8678":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:47845:8631":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10393:16997":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:5405:13905":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:12096:23513":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:4239:15985":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"15:394:15848":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12134:17161":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8270:3195":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:10679:8677":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:14139:20020":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:5951:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10245:16992":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:4806:3260":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:10447:8668":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:13118:17285":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"5:7708:9187":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:16077:21318":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:5868:3408":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"9:490:15681":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:3256:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:23000:29324":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:8243:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11318:34056":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12408:17223":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:47034:3500":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7209:15830":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:14932:20545":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:15974:21311":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:41199:3100":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:959:3009":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9340:26427":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:6946:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:5377:16594":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:4063:3005":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:15585:21279":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:4150:15942":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:6142:16823":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:5989:3393":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"11:1118:15802":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:10886:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:15049:20553":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:6769:31984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"9:0:2626":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:632:2968":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:44855:8743":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:11025:34070":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"14:186:15820":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:2440:3006":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:23678:28435":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:2490:3130":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:5105:3318":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:23262:28883":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"20:3343:21566":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"16:2682:15899":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:4104:3256":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:698:21542":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5165:13877":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:3437:21582":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"16:6747:16846":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:46981:28398":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:14030:20012":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4937:13854":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4869:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8624:3286":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:5732:3368":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:8237:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:3706:3001":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8347:26399":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:23623:28434":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:6602:14627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"9:435:15678":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:5740:16815":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"13:110:32849":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:2638:15897":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:8207:3142":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:23330:29719":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:5555:8697":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:23379:29136":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:6500:14620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:681:2974":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:979:3025":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"20:3109:21567":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"1:8200:3138":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:7580:15065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"24:247:2790":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"20:4038:21627":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"2:2872:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"20:3523:21577":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"16:6460:16837":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:16738:21506":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:15845:21298":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:601:2944":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4896:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:16789:21510":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:3680:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"15:0:2631":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:14820:20537":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:670:21539":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:5301:13892":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:16029:21317":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:14626:20526":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:4841:8836":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:7576:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43082:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:3153:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:3593:3146":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8716:3335":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:689:2976":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:3438:3201":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:2640:3193":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:3564:3035":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"20:3615:21573":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"5:7554:31666":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12698:17264":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:8708:16924":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:921:3004":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:14089:9067":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:40932:8862":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:2298:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11400:17049":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10475:3377":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:13797:19997":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6082:16819":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:8548:3183":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:41121:3095":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:9414:3395":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:11285:23367":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13144:17280":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"11:2126:3017":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:44992:8773":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"20:3994:34427":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"16:6096:16820":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:11004:26380":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:4964:13857":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:3142:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:41116:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:643:34083":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:8316:15633":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:16678:21501":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:40163:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:16727:21505":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:9218:3412":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:7741:8869":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:6472:14578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13069:17016":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:3842:3228":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:15076:20555":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12672:17251":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:16752:21507":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:6656:16841":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:42616:3001":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:42486:29143":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"20:3553:21588":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"17:13265:17022":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:12535:8714":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:485:9879":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:4163:3002":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:986:3013":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:12503:1958":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"21:301:29860":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"1:4324:3290":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"20:3866:34156":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"17:11456:17053":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"6:6695:14638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:6670:14635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:40300:8809":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4890:13849":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:2722:15901":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:2120:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:2285:31770":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:7430:15055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:389:32815":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:7284:9929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8025:2949":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:3852:3040":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6841:16852":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"1:8505:3148":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"20:3936:21635":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"2:8314:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:42804:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"21:341:21643":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"6:6523:14623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5604:13926":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12318:17197":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:14651:20528":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:22912:3585":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:43418:8678":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8895:3359":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:4302:23325":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:2726:9237":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:573:34083":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7468:16882":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:8618:3297":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"7:0:1948":{"crate_id":7,"path":["unwind"],"kind":"module"},"20:3569:21590":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"5:1531:3001":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"21:279:21602":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"16:6300:16830":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:3297:31671":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:22165:30089":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:15105:20557":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:8225:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:8809:3032":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:820:3011":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:923:3024":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:43721:8667":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5025:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:42633:3340":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2419:8664":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:1569:3003":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:8148:16904":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:14042:20013":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6702:14639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:23002:9133":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:6741:3405":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:10997:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"20:3927:34430":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"20:52:2789":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"17:15770:21292":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:8294:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:43738:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:2231:9143":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:46696:3482":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:9442:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:45599:8648":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:40185:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:5058:16528":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:3070:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7060:8804":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12982:17275":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:23417:28327":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"20:3885:34428":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"17:10441:16999":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5325:13895":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:44501:8724":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:5469:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:6422:14615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:42358:3223":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:7258:30301":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:7001:29748":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"11:808:3007":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:2488:3129":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:7347:33056":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:8217:3139":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"20:4147:9066":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"5:5405:8691":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"9:380:15679":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:45610:8646":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:47830:8630":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:16705:21503":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:4162:3259":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6736:33289":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:26547:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:7041:16866":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"14:219:15822":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:40243:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:7539:15062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:8102:16902":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:23082:3149":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:12358:17222":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:906:33286":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:3830:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"9:345:15694":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:41569:3181":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:10665:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:40902:8825":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:1675:10796":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:14707:20531":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13013:17291":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:12905:17261":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:7515:15060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:23437:28445":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:10166:16990":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:22139:30081":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:2666:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:43927:29392":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12248:17216":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:16320:21335":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"23:0:2768":{"crate_id":23,"path":["anstream"],"kind":"module"},"17:15159:20560":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:15694:21285":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:42599:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:505:15860":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:1885:3020":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:10660:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:2318:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7880:16887":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:155:15863":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:813:3010":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:1613:3000":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:23531:3149":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:4805:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"11:1866:3005":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:6513:14622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1703:10799":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2224:9145":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"16:8025:16898":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11957:17102":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:44408:8718":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:6877:3406":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:883:3023":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15924:21305":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5357:13899":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:11652:17069":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:10957:21759":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"20:4203:2786":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"6:6651:14633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:2658:15898":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11605:17016":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:14345:17225":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1871:3006":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:41000:2970":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:689:21541":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11385:17048":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:7220:16871":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"20:4064:34418":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"2:44542:8748":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"21:209:21600":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"17:12055:17159":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:15982:21312":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13569:17037":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:42560:3227":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:11677:17064":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:12960:8745":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:321:33286":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"11:481:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:5539:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:5800:3369":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:15530:21275":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12896:17270":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:7518:33208":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:900:3002":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43654:8667":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:4265:15988":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:523:9883":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:23667:28499":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:12501:1872":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"20:3139:21597":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"2:8029:3210":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:473:9877":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:23345:28448":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"7:31:15650":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:10921:3154":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:96:21522":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:14417:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13040:17281":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"18:754:21544":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:479:9878":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14974:20548":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:43193:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6040:16817":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13005:17276":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:877:3000":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4168:3260":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:2374:3001":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:13150:9265":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:3046:15915":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:33560:9101":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10331:16995":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11719:17092":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:7695:3097":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:7664:2997":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:7945:23501":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4216:3263":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12224:17167":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:5462:13910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:7737:27399":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"20:3366:21572":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"5:3331:31662":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:5395:13904":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:23039:3590":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:2682:9134":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:471:16983":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:41291:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:13668:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:983:3015":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"20:3533:21581":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"17:11172:34062":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:8295:16911":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:7512:3026":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:41088:8859":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:15932:21306":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:10962:26869":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5170:16548":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:8040:33053":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:5506:30261":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2044:3163":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:16180:21324":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"26:0:2771":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"6:5117:13873":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"20:3280:21568":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"2:40087:8663":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:7094:8806":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:1899:3069":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:14098:20017":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12203:17165":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:11346:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"5:1479:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:933:21570":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"1:12079:15845":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:9158:3373":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:491:34101":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4842:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:43045:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:14572:20522":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:3765:21609":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"5:3084:31803":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:47191:3472":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:15285:21266":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12797:17267":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13470:17032":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"20:1680:23798":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"5:3326:3019":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:2794:15904":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:13509:8765":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6887:16856":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:47079:3506":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:1608:3009":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"26:40:21688":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"17:12569:17177":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:47773:8625":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:44622:8761":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:7407:10905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:10549:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:578:9891":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"23:61:21674":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"16:5280:16566":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11830:17073":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:481:21546":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:10388:3069":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:1646:3022":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6638:16840":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"18:521:21545":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6737:14643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:4528:8656":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:4900:16462":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40943:28404":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:7367:10922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:6631:14630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:16125:21319":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:15147:20559":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5127:13874":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:47528:3473":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:11740:3000":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:42770:9205":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"23:181:3149":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"17:12775:17266":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"20:3824:21632":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"17:12624:17185":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8606:3225":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:16249:21329":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41420:9073":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6387:16833":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:5370:3213":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:3311:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12523:17182":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:7084:8805":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"20:3430:21587":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"6:8243:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:5069:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6901:16857":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11376:26463":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:1539:10784":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:10667:8671":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"9:49:15697":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5557:13922":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:4934:3275":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11431:17051":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:2903:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:16230:21328":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:8853:29860":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:14083:20016":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:374:21606":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"17:15869:21300":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4957:13856":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12748:17236":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:42624:3002":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12940:17262":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:5318:29945":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"16:8595:16919":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:1657:10794":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:15707:21286":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6590:14626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6062:16818":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:7292:10733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:23401:28492":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:23209:28901":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:44389:8716":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10367:16996":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:2012:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11526:17077":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:47324:28570":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:11274:3373":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:3592:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:11016:3144":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:8525:3180":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:4988:3276":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"7:78:15657":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"23:244:27931":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"6:7990:15435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7904:16888":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:45063:8776":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:8134:16903":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"8:0:2625":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:718:21535":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12604:17016":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10783:34073":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:5316:16579":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:12445:27411":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:12072:15845":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11162:17016":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"11:102:32833":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:12482:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:2525:32820":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:5351:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:6502:9482":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"6:5575:13924":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:4560:3287":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:47618:3479":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:14206:8891":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:3887:15924":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:42608:3000":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:7445:15057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:1651:21616":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:7795:26583":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"6:5450:13909":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:8264:16910":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12735:17237":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11464:17054":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"6:5539:13920":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5640:13931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:7317:15051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:15674:21283":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:9488:3341":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6864:16854":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11787:17121":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:12944:9222":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:12037:8728":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:43713:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"24:185:15717":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"17:13204:17020":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15120:20558":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8106:3078":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:1629:3019":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:16364:21338":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:3440:3202":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:11089:3374":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:12500:1890":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:380:2965":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:38838:9116":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:46888:3483":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11901:17110":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:6543:14624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13450:17031":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:41008:8752":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"11:2206:15796":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:13944:20006":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"20:4024:21628":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"16:6606:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:16691:21502":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:11832:8732":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:34044:3444":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:7857:8801":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:1878:3019":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8071:2978":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:5707:16813":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:11744:3354":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"20:3780:21624":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"17:14298:20507":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:8276:9054":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:0:2628":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"18:623:34091":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:34111:3446":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:4511:3163":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:45127:8778":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:3611:3145":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11951:17115":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:42374:3224":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:3416:8659":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:6419:16835":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"20:3510:21576":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"16:7713:33295":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"14:213:15821":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:45316:9275":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:7495:3036":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:6981:16862":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"11:718:3009":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:15035:20552":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:2323:3017":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:9366:23362":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:1516:3000":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:11041:3321":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"16:3439:15920":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:1625:10791":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7492:33148":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:3502:17179":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:1095:3016":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"20:3894:34113":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"17:16716:21504":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:14772:20534":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:10967:3138":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:8806:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:5412:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"23:309:21661":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"5:7604:3002":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"12:0:2629":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:9478:3152":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:31578:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:4154:3258":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12919:17271":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:6967:16861":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:15912:21304":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"20:4172:34173":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"26:21:2785":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"18:80:21521":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"14:201:8782":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:22121:8882":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:8623:16921":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:1587:3007":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10273:16993":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:5304:17292":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"20:3540:21580":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"6:6727:14642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:47353:28441":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:15762:21291":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:42402:28456":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:2413:15858":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"25:0:2770":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"2:42508:3234":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:44176:8706":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:1001:3016":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:8063:16900":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13168:17315":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:2787:3196":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:11080:29758":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:14181:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12065:17154":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:45478:28571":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"16:8176:16906":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:9345:26405":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:16302:21333":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:41593:9076":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4947:13855":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:10608:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"20:3516:21579":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"2:3309:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3589:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:6137:3390":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:9460:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4976:13859":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:32742:3375":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:1635:3020":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:3775:9120":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:7006:21655":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:44531:8751":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11290:34058":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11850:17105":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:2472:3124":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:7233:30256":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5441:13908":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:7355:16876":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:43966:28321":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4984:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13817:19998":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:44572:3183":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"11:776:3005":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:3076:31672":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:47705:3485":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:42971:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:14885:20542":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:15746:21289":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:31231:28567":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:13463:8736":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6710:14640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:14404:20512":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:1922:2787":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:8091:3077":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"21:127:34527":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"2:46739:3451":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:3531:3211":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:5875:3409":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13180:17284":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:8555:3179":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"20:4222:2785":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"5:5125:3163":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:11944:8726":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:15620:21264":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:23579:28469":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:10878:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:7728:3340":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11502:17056":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"20:2945:2780":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"2:43232:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:6792:16848":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:31199:8701":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"11:2507:32824":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"20:1173:21589":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"17:0:2633":{"crate_id":17,"path":["object"],"kind":"module"},"1:10784:3201":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:32819:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:45304:9258":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:12461:23463":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:46768:3505":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:47747:3540":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13691:17322":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"20:3583:21593":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"10:0:2627":{"crate_id":10,"path":["adler"],"kind":"module"},"2:22163:30087":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:6484:3408":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:6416:14614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5151:13876":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:851:3013":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:12491:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:13156:17279":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:5529:13919":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:9230:3415":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"18:515:21548":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:13189:9264":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4970:13858":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:47898:8634":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11064:17014":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10842:17011":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:12850:17268":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:8613:3296":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:41217:3143":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:8478:3210":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:5007:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:5130:17286":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:6305:23520":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:4981:16474":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12859:17269":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:4557:30283":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:47726:3519":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:1104:3017":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:15889:21302":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12007:17156":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:45490:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:123:32817":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13321:17025":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:2804:30222":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:4486:3295":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"20:3591:28429":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"6:5044:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:16138:21320":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:6578:14625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8357:3197":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11499:3116":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:1727:10801":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6254:33198":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:14996:20549":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:2748:3185":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:10792:17009":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"14:0:2630":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:47019:28489":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:47129:3518":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10728:17007":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:12505:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:6858:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14858:20540":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6571:16838":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11049:3078":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:11789:3183":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:2588:15895":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5664:13934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:6021:3005":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:10675:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:7308:9758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"9:226:3354":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:45090:8777":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:22244:3149":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:8249:2999":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:5280:3390":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:42752:9206":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"6:5249:13885":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:44846:8744":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:9496:3442":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:41434:9074":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"22:152:21649":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"2:11208:29759":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"2:9601:8737":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:8632:3230":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:292:32827":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"13:229:32850":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:9739:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:3073:8651":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:4758:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:0:2766":{"crate_id":21,"path":["anstyle"],"kind":"module"},"6:465:9876":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"20:1365:21592":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"2:40311:8817":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:45358:3447":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:47921:8635":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:47279:28421":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"16:6779:16847":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9447:3403":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:12493:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:42342:3222":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12334:17220":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:1711:10800":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:46710:3531":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6406:16834":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:15732:21288":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:41281:9063":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:46821:3465":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8020:2948":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:7553:15063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"24:289:21677":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"21:353:21605":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"2:42910:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13969:20008":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:1589:10789":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:12497:1896":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:11997:3233":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:9409:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:2005:3089":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:40484:8887":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:6263:3163":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4792:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:3705:3197":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"2:44880:2970":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7759:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11474:17055":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"23:497:21654":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"1:7422:23539":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14598:20524":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:538:21550":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:531:21549":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10217:16991":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:2867:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:6687:14637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:8249:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6852:14675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2568:15894":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:6193:9066":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3344:3204":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"23:480:21653":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"11:2394:3002":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:11834:23394":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11057:3368":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:45193:8763":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:12479:1918":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:8093:16901":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:44871:8752":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:41372:9060":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:45541:3593":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:15009:20550":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:507:23545":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12162:17162":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:23612:28433":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:47784:8626":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:3424:8661":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:1521:10782":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:8446:2826":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:507:34083":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5288:13890":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:7900:26424":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"24:0:2769":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"2:23486:3238":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:15539:21276":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:23634:28470":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:11033:23404":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"18:765:21537":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:684:2975":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:36852:9113":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:31220:8667":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:3551:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40223:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8262:26403":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:126:3354":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"17:15966:21310":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"20:3296:21569":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"2:38893:9117":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:9581:2787":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:14559:20521":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:4921:13852":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:43919:3155":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:42712:9204":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"16:6711:16844":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:6223:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43974:28322":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:1547:3002":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:2448:15888":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:16473:19994":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:4990:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3569:8649":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:47146:3466":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"23:359:21659":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"20:3833:3004":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"17:11756:17094":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:5019:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:491:9880":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:41817:9048":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"20:2788:3001":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"16:5346:16586":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"18:608:34098":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:15474:21273":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:12051:8731":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:8480:16913":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:47676:3534":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:1378:3017":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:45483:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:12043:17129":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:2815:8657":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:41827:9049":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:4119:3005":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7977:16894":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:11351:29754":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:13920:20004":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:6397:23537":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:8089:3385":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10695:17006":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8195:3141":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:2226:17109":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:6878:14676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:23393:28468":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9187:3417":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:4890:3320":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:44461:8704":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"23:322:21662":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:12107:17160":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11591:17065":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:3693:15922":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13397:17029":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:88:21672":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"17:15023:20551":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5196:13879":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5051:13868":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5217:13881":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5381:13902":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:30937:3235":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:3585:15921":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"11:2297:3016":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:577:2942":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:40263:2990":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:5612:3364":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:41404:9072":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:45562:29408":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:3853:17202":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:11764:3001":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"20:1649:21615":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"17:12081:17132":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:8317:16912":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:559:9888":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:8266:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:5011:3270":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:34976:9112":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:33348:9102":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:2779:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7997:16896":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"21:329:21604":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2:44558:3182":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:2358:31779":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11976:3231":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:7328:26662":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"2:43156:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:42845:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:8260:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:7612:3002":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:9294:26383":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:15837:21297":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"22:0:2767":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"2:46935:3539":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:34803:9110":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14437:20514":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12647:17183":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13081:17017":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:42934:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"20:3776:2972":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"17:10096:16987":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:5341:13897":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5319:13894":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5375:13901":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:5205:13880":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:1892:3021":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:6820:16850":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:46664:3470":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"20:1366:2790":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"assoc_type"},"2:31605:8882":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:8325:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:43759:8669":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13732:19994":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:45288:9256":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:16486:19995":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:42520:3225":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:45162:8781":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6586:16839":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:47451:3501":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:12606:8711":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:10629:17004":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:16378:21339":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:7890:16985":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:15753:21290":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44418:8719":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"9:168:15783":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3561:3163":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"23:486:34604":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"1:4140:3257":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:9452:3404":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:3305:27834":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:47793:8627":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"20:1702:149":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"1:4771:3316":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"20:49:2788":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"2:3419:8660":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:14337:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:1597:3008":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:4110:3255":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:3586:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:22193:3457":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:909:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:15548:21277":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7013:16864":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:7391:23547":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:12868:17031":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:46681:3476":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12722:17238":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4829:13844":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5503:13916":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:2246:2936":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:4353:3293":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:6116:3163":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:4981:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"20:3472:21585":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"17:13553:17043":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:5488:13914":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:1494:10778":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7804:33285":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:10609:3090":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"20:1104:21591":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"16:4842:16450":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:589:29412":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1489:10777":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:16001:21314":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:7326:15052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:665:2972":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5568:13923":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:2099:3015":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"20:3627:21617":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"2:3802:8821":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7762:16885":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:44794:8759":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:45296:9259":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"11:686:3008":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:44977:8772":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:12481:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:15495:21274":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:14795:20535":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13305:17024":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:40896:2970":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:7174:3448":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7956:16892":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13490:17033":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:11871:8721":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:38728:9114":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:386:2966":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:14585:20523":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:41095:8860":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:10938:3323":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:16191:21325":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:1643:10793":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:14392:20511":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"10:36:32809":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:40051:8820":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:10978:21743":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:43644:28455":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:4893:3298":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14946:20546":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:14532:20519":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11514:17083":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:563:21551":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:14611:20525":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:45152:8780":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:16172:21323":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:15409:21269":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:5551:8696":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44329:29411":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:11025:23454":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:1624:3006":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:11732:17093":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:2484:15890":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:47764:8624":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:45508:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:7337:15053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:11848:23371":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"20:3787:21637":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"21:309:21603":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"6:4997:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:15898:21303":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:3904:3232":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:832:3012":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:5186:3330":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:23479:29742":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5349:13898":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:14357:20509":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:43671:28437":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"14:40:19996":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"9:318:15734":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:12488:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:34630:9109":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:7782:8784":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:1530:10783":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5366:13900":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:1696:3283":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10566:26616":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:16164:21322":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:5230:13883":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8229:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:6995:9061":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:22370:3454":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:3837:3039":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:12490:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13718:17323":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:1362:3015":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"11:427:32838":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:40293:9121":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5224:13882":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2818:15905":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:6701:3396":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:2858:15907":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:651:34083":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:41333:9067":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:3397:3206":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:23590:28490":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:12292:17175":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:1597:10790":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"22:125:21648":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"2:43411:8671":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:46806:3517":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1507:10780":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:934:3005":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:5755:33002":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:46482:3497":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:44740:8757":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:5222:16554":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12094:17130":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:3316:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11997:17122":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6939:16859":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:46920:3538":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8004:3149":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:12023:8730":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:12494:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13208:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:4767:8828":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:47258:3533":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:770:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:4613:8841":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:44776:8758":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:6792:14647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13756:19995":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:8496:3144":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:7189:16870":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:7424:15054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:10926:3156":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:4194:3001":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10860:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:14519:20518":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:12499:1884":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13054:17073":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:46903:3532":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:3719:17184":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:5662:3367":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:32876:2828":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:6617:14629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:4009:3233":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:43008:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2127:9030":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:41301:9064":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:41054:8858":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:45573:3591":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:9422:3163":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:14326:17226":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:9128:3372":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:3194:3093":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:12492:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:5107:13872":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:3067:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:3712:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:47573:3507":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2680:9133":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:23656:28491":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:23601:28431":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:14472:3028":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:13870:20001":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2770:15903":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:7390:10907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:2712:3194":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14671:20529":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:14749:20533":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5611:13927":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:44481:8725":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:553:9887":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14831:20538":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2782:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"22:5:3255":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"1:8683:3273":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:9260:3416":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:38783:9115":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:3394:3445":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11877:17016":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:10781:3205":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:44694:8728":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6438:16836":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:996:3000":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:43269:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"20:3796:2784":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"1:3650:3090":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"11:2340:15806":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:8742:3353":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:16341:21336":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11357:17047":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:4224:3265":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:32809:9178":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:3357:9083":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:43425:8679":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:43119:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"20:3856:21633":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"2:41793:3396":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7165:15831":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:34457:9108":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:10673:8679":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:40971:8863":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:6911:16858":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:14639:20527":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:11433:3117":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:6806:16849":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:16311:21334":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:538:9885":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:3064:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"20:0:2439":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"6:6360:14550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"23:466:21655":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"1:5096:3317":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:6398:14613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:41395:9071":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:15350:21268":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"20:4196:34442":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"2:44450:8703":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:6638:14631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:42542:3226":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:10778:3203":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:46529:3503":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:5253:16562":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6623:33302":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"9:470:15677":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:5307:26379":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:22950:3586":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:2504:15891":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:1569:10787":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:34245:9105":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1584:10788":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:16211:21327":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43956:3354":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12951:17272":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:43935:3157":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"23:373:21660":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2:11553:3149":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:10407:23323":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"24:26:21680":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"2:40958:8861":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:44548:8747":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"9:412:15680":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:44472:8722":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:11863:17104":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12148:17127":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:6016:3336":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:3785:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2702:15900":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5477:13912":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:15417:21270":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:2256:31664":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:47241:3484":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:12568:8715":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"5:212:8666":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11280:17018":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:4831:8835":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:879:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:7987:16895":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:15430:21271":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:7072:16868":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:0:2634":{"crate_id":18,"path":["memchr"],"kind":"module"},"20:3464:21584":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"17:10515:17001":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5494:13915":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"23:402:21665":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"16:6335:16831":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2878:15908":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:2327:3121":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:3351:9081":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:44429:8705":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:3919:3006":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:16809:20007":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:11221:17017":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:3299:27308":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5139:13875":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:6819:3400":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:34178:9106":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:7344:3325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:8007:15436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:13458:8738":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4902:13850":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10295:16994":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6505:14621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41835:9051":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10114:16988":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:8334:2827":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:41363:9069":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"20:3384:2781":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"6:4881:13848":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:3389:3443":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:4871:16456":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:16763:21508":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:2433:15887":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"13:0:2623":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:297:2829":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:32877:9084":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:15822:21295":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11308:17019":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:10282:21735":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:11588:23506":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"20:61:2791":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"2:44836:8755":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:22673:30090":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5630:13930":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:16290:21332":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46725:3537":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:39:3056":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:14459:20515":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:7841:3006":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:45583:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:8278:3039":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:23124:3581":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:2465:15889":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4820:26779":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"20:3057:2782":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"17:14546:20520":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:7653:2996":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"21:182:21599":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"16:8720:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:40148:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:41786:9045":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:5652:13932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:2540:2996":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:13397:3115":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:3621:3055":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:5803:3371":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6835:16851":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:992:3014":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:12930:17035":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5428:13907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12259:17217":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:14054:20014":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13661:17321":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:9746:3141":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:11123:34075":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:0:2632":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:11817:17106":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:3292:3020":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15880:21301":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:8562:16917":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:5353:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"11:344:32830":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"23:389:21677":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"17:16619:21497":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:659:21538":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:45284:9254":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3321:2957":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7156:16869":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"20:4055:34160":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"1:12477:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12975:17274":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:1881:3006":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:10658:3372":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"20:3449:21578":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"2:2222:9144":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:12476:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:45006:8774":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:14154:29670":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:32908:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"20:3239:34154":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"5:3786:30261":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6390:14612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5521:13918":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:16661:21500":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:10030:16986":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:8633:16922":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:11982:8727":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:4314:3163":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:2275:3015":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:5057:13869":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:16012:21315":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:2163:3041":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:12370:17176":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:31205:9020":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:42893:3001":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"22:97:21646":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"17:16611:21496":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5179:3282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6950:16860":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:16775:21509":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:14126:20019":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11804:17107":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:41272:9058":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:45300:9257":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:41103:8856":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:16633:21498":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:8231:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5623:13929":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:3668:3147":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:6306:9059":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1407:3018":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:1777:30261":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:10307:29826":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"11:2354:3000":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:7835:16886":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:1579:15805":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"20:3876:34198":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"1:12498:1878":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:42673:2981":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:3074:31930":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:666:16985":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14374:20510":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:8525:16915":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:7740:8868":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"28:87:21713":{"crate_id":28,"path":["strsim","HybridGrowingHashmapChar"],"kind":"struct"},"17:11705:17091":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"20:3675:21618":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"5:4480:30283":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:3442:3006":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11690:17063":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2500:3135":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:15572:21278":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:23645:28573":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"22:30:3183":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"5:2138:3039":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:12429:23469":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:1862:3002":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:47220:3478":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:40131:3054":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13384:17028":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6610:14628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:6806:9078":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10486:17000":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"6:6452:14618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:12930:9220":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:22640:3459":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:3790:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:3067:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"25:88:2790":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"17:2405:17103":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1393:3016":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6026:16816":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:1976:3088":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"28:0:2773":{"crate_id":28,"path":["strsim"],"kind":"module"},"16:5687:16812":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:4544:3163":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:11909:8733":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46614:3510":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:8884:3358":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"20:3812:21626":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"20:3252:34397":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"2:46789:3511":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:44956:8771":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"14:164:15813":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:32906:8658":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:4547:8824":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:14151:20021":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:7568:3002":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:7562:15064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:6555:3598":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:14268:20505":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:34312:9107":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6744:14644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:4914:13851":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:1656:21619":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"2:3038:8886":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"23:99:21667":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"6:1551:10785":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:1083:15801":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6267:16829":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:4493:29076":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:3488:3188":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12839:17234":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11629:17071":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12991:17239":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:774:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:12502:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5658:13933":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:16534:21495":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:7786:33245":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"18:635:34106":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:32820:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:13173:9262":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:4405:3163":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"20:34:2790":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"1:969:3011":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:47108:3512":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:10121:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:16262:21330":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:23452:28498":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:7819:26582":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"20:3978:21629":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"1:9281:3394":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:5142:16543":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6366:16832":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:22252:3456":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:9451:9194":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:9437:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5482:13913":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:10701:23534":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:22635:3149":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:6121:16822":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:598:34081":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:23096:3580":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"20:3091:2783":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"1:10987:3142":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:16592:19998":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"20:3229:34145":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"2:7635:9056":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:750:3003":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:5276:26379":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4950:8839":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:6532:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:11215:29760":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:10976:34065":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:4402:16102":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"23:432:34596":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"17:11420:17050":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"15:306:15837":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:3034:23504":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:4932:3274":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:3037:3149":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7504:3002":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:14219:20504":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:12065:8729":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:2474:3125":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:2964:15912":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:47002:28569":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:41132:9187":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5083:16530":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12761:17235":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11859:23346":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8535:3181":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:46512:3498":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:787:3006":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:46597:3504":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:10627:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:10596:17003":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:4202:3261":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12961:17273":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"23:114:3188":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"22:28:3149":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"2:43699:28472":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:44826:3179":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:1617:3002":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:22264:3453":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15956:21309":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:32802:8836":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:4693:3299":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:3678:3174":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:5334:13896":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:13780:19996":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:15638:17072":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"20:4112:21612":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:10302:29856":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8725:3334":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:7747:8692":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13514:17034":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:7575:16884":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:4127:21611":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"1:980:3012":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4182:15951":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:14916:20544":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:5311:13893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44640:8760":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:1632:10792":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6719:14641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:12346:17221":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:45334:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:7489:23336":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:8304:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"11:1042:15800":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6756:14646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:42695:9202":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44159:28422":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:5626:3365":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:12478:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:3061:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"11:321:32825":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:1500:10779":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:57:2787":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"1:2546:2641":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:944:3006":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:9353:16884":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11913:23333":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:11293:9275":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:2838:15906":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12121:17131":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:3832:15923":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"24:95:21674":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"17:12279:17218":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:14871:20541":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:15089:20556":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:7524:3005":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10533:16814":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"23:288:21664":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"17:10417:16998":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:4118:15933":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:6207:3408":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:40135:9119":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:8011:16897":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:6645:14632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:1628:3038":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:12450:2980":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:950:3007":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:41444:9062":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:7463:15058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:41802:9047":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12786:17231":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:42825:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"17:16202:21326":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15063:20554":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:5119:3319":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:7369:16877":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13609:17039":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:4888:8837":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:517:9882":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:3080:31802":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:2320:3119":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:22150:30083":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"23:337:21663":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"14:31:15812":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:15724:21287":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:497:9881":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:8162:16905":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5471:13911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:4897:8838":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"11:357:32811":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12885:17260":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5186:13878":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:6679:14636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:45308:9252":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"11:676:3002":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:11936:3232":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:14506:20517":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:11566:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:12065:26408":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:1063:32835":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"25:23:15717":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"16:7027:16865":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:44172:28599":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:14806:20536":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12175:17163":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:9201:3414":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:7421:16880":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:46850:3471":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:23689:28432":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"28:69:21712":{"crate_id":28,"path":["strsim","GrowingHashmapChar"],"kind":"struct"},"16:4764:16418":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13348:17026":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6678:16842":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:41310:9065":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:22129:30081":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:7256:16872":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:41319:28581":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:2436:17128":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12034:15796":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:581:8882":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"20:3275:2941":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"2:22868:3584":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:41385:9070":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"20:3247:34436":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"17:15857:21299":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"11:649:3000":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10409:26386":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:1641:3021":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:10677:8676":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6157:16824":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:45175:8762":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:5647:16795":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:7833:26581":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:40992:8753":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:3985:15925":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"16:6109:16821":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"10:44:15788":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:15778:21293":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:45019:8775":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:6061:2982":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:2338:31778":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"20:3219:34152":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"17:11113:17015":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"23:447:3354":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"17:2377:17143":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:4954:16470":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:2225:3124":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:9195:3002":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:9333:26428":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5088:13871":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:906:3239":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:9179:3000":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:14018:20011":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:42780:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"1:8828:3356":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:4340:3292":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:14844:20539":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:7055:16867":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:8501:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5255:13886":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10777:17008":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:12027:17158":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:8278:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5550:13921":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:8666:16923":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13192:17283":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:22372:3453":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:1667:10795":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:14113:20018":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"23:144:21668":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"16:7413:16879":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:41250:3180":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:2918:15910":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:8661:3325":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:14415:20513":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:14066:8893":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:3659:27931":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:22360:3149":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:44518:8754":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:16499:21494":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:15660:21282":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:14360:3595":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:955:3008":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:42901:3002":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:7723:3098":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:41779:29405":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:41179:3113":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:9386:23458":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:4505:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"11:763:3004":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:8272:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:42664:3327":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12825:17232":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:32818:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:13536:17035":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:2746:15902":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:23315:28473":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:8582:16918":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12391:17196":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8254:2998":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:13853:20000":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6171:16825":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:45141:8779":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:7735:3099":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:1027:3017":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:7524:15061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:113:21523":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:16152:21321":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:9312:23453":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:22662:3449":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:7984:15434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:4141:34306":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"5:1619:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:894:33293":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:31167:3034":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:1690:10798":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:6822:3401":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:15314:21267":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"21:113:34526":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"17:10937:34047":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:13113:9263":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5036:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7551:16883":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:908:3003":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:7584:30202":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:4808:16439":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"28:34:21702":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"1:6595:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"20:4090:34419":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"16:5415:16609":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:1113:3018":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"20:3576:21574":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"18:680:21540":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13221:17021":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:23053:9133":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:8815:9052":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:9134:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:42885:3000":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:14071:20015":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11616:17017":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:1620:3005":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:12496:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:8572:3221":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:12485:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"11:1858:3000":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8561:3230":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5295:13891":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:22191:3149":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:3395:3205":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:4930:3271":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:11538:17073":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:45292:9255":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:6381:3595":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"20:3178:116":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"17:14283:20506":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:16799:20005":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:12489:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:22246:3452":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"1:890:3001":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:3580:2825":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"20:3918:34111":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"5:1222:31685":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1563:10786":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:2984:34348":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"17:1338:17078":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:42580:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:6902:30261":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:3352:3022":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:41351:9077":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:564:9889":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:46576:3499":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:2533:32821":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"11:1652:32813":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8657:3321":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:22974:3149":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:4929:13853":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:2078:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:2237:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"20:3491:21586":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"17:11970:17101":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12686:17263":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:7439:15056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:726:21543":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:4149:30261":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:3139:15918":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13027:17282":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"20:4076:34157":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"17:10822:17010":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12710:17265":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8542:3182":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6873:16855":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:43683:28429":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:5678:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:5861:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7505:33266":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:4481:29087":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:0:2624":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:7383:16878":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:12582:17178":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:14962:20547":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:1081:3015":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12190:17164":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:8567:3229":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15135:17035":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"28:112:21719":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"2:47960:8636":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:2948:15911":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:8609:16920":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:570:9890":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6850:16853":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:582:16984":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:2548:15893":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:16019:21316":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:3069:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:43944:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:735:21536":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:783:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6203:16827":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:963:3010":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5271:13888":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:3474:9111":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:13452:8739":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:6688:3005":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:7544:3042":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:6995:16863":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:11072:23378":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11552:17068":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:23368:3236":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:8500:16914":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:44590:8726":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:16645:21499":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:1924:3075":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11447:17052":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:1487:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:9751:23544":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"20:3443:21583":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"18:706:8739":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:45369:9276":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:586:9892":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"20:3310:21571":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"16:8206:16907":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:46497:3462":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:8230:16909":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:8280:9053":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:8868:3357":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:8878:3000":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:3074:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6500:15857":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:4284:3163":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:44491:8723":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:40203:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:42704:2958":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:6893:14677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:15939:21307":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:43404:8670":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14334:17224":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5420:13906":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:8220:16908":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:32795:29396":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12017:17157":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:2513:3137":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1:12483:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"11:1558:15804":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"28:120:21720":{"crate_id":28,"path":["strsim","RowId"],"kind":"struct"},"1:6429:26394":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:6749:14645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:23499:3237":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"11:2115:3016":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}