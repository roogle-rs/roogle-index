{"root":"0:0:1760","crate_version":"4.4.2","includes_private":false,"index":{"2:12316:27168":{"id":"2:12316:27168","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44055:7940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12317:23397":{"id":"2:12317:23397","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12323:22830":{"id":"2:12323:22830","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:1988":{"id":"2:12361:1988","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11986:7939","`DoubleEndedIterator`":"2:7435:121","prim@char":"1:12035:427","str::rmatches":"2:12364:28246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43967:7956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12320:22828":{"id":"2:12320:22828","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12387:20162":{"id":"2:12387:20162","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41801:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12299:23355":{"id":"2:12299:23355","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41803:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41801:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10080:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10080:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12315:28241":{"id":"2:12315:28241","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44027:7953","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330:19847":{"id":"2:12330:19847","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41803:181","prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41801:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:23395":{"id":"2:12352:23395","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12035:427","str::splitn":"2:12349:23393","self::pattern":"2:11986:7939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43885:7926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12370:28248":{"id":"2:12370:28248","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11986:7939","`DoubleEndedIterator`":"2:7435:121","prim@char":"1:12035:427","str::match_indices":"2:12367:28247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43931:7955","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1752":{"id":"0:3-20:0:1752","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1752","glob":true}}},"2:12399:28258":{"id":"2:12399:28258","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12406:20405":{"id":"2:12406:20405","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12402:28259":{"id":"2:12402:28259","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11947:127","`FromStr`":"2:11946:2567"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41946:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11946:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11946:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:28245":{"id":"2:12358:28245","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41801:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12346:28243":{"id":"2:12346:28243","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11986:7939","str::split":"2:12334:23387","prim@char":"1:12035:427","str::split_terminator":"2:12343:28242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43831:7958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:28921":{"id":"5:5525:28921","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1760":{"id":"0:0:1760","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[113,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.70.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1752"],"is_stripped":false}}},"2:12393:28256":{"id":"2:12393:28256","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12379:28252":{"id":"2:12379:28252","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12306:28240":{"id":"2:12306:28240","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12041:1443","crate::ops::IndexMut":"2:3066:2283","str::slice_unchecked":"2:12305:28239"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12412:28261":{"id":"2:12412:28261","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:28261"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44080:7951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12301:23356":{"id":"2:12301:23356","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10080:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10080:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:28253":{"id":"2:12380:28253","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12287:28235":{"id":"2:12287:28235","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12297:23354":{"id":"2:12297:23354","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41803:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41801:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10080:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10080:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12312:27163":{"id":"2:12312:27163","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12313:27155"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44037:7942","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12381:28254":{"id":"2:12381:28254","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12011:7934","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:20403":{"id":"5:5528:20403","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12407:20406"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12375:28250":{"id":"2:12375:28250","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:28918":{"id":"5:5510:28918","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2076","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2076","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12313:27155":{"id":"2:12313:27155","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12312:27163"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44046:7941","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12309:27167":{"id":"2:12309:27167","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12035:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43733:7946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12310:27288":{"id":"2:12310:27288","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12035:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43739:7945","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12284":{"id":"2:12284","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12285:832","2:12286:20956","2:12287:28235","2:12288:28236","2:12290:28237","2:12293:20689","2:12294:28238","2:12295:320","2:12296:319","2:12297:23354","2:12299:23355","2:12301:23356","2:12303:23357","2:12305:28239","2:12306:28240","2:12307:23379","2:12308:23380","2:12309:27167","2:12310:27288","2:12311:20184","2:12312:27163","2:12313:27155","2:12314:25837","2:12315:28241","2:12316:27168","2:12317:23397","2:12320:22828","2:12323:22830","2:12326:19846","2:12330:19847","2:12334:23387","2:12337:23389","2:12340:23391","2:12343:28242","2:12346:28243","2:12349:23393","2:12352:23395","2:12355:28244","2:12358:28245","2:12361:1988","2:12364:28246","2:12367:28247","2:12370:28248","2:12373:28249","2:12375:28250","2:12377:28251","2:12379:28252","2:12380:28253","2:12381:28254","2:12384:28255","2:12387:20162","2:12390:23398","2:12393:28256","2:12396:28257","2:12399:28258","2:12402:28259","2:12404:20401","2:12405:23169","2:12406:20405","2:12407:20406","2:12408:20407","2:12409:28260","2:12411:2200","2:12412:28261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12355:28244":{"id":"2:12355:28244","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41801:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:28918","5:5511:8276","5:5514:28919","5:5517:28920","5:5525:28921","5:5526:28922","5:5527:2427","5:5528:20403","5:5529:20404"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12396:28257":{"id":"2:12396:28257","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12326:19846":{"id":"2:12326:19846","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41803:181","prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41801:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12290:28237":{"id":"2:12290:28237","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12288:28236"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12364:28246":{"id":"2:12364:28246","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11986:7939","`DoubleEndedIterator`":"2:7435:121","prim@char":"1:12035:427","str::matches":"2:12361:1988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43985:7957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12308:23380":{"id":"2:12308:23380","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12307:23379"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12311:20184":{"id":"2:12311:20184","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43749:2402","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:20401":{"id":"2:12404:20401","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12409:28260":{"id":"2:12409:28260","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:28260"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44062:7950","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:28922":{"id":"5:5526:28922","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2076","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2076","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12384:28255":{"id":"2:12384:28255","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12296:319":{"id":"2:12296:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12052:1546"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12349:23393":{"id":"2:12349:23393","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939","str::rsplitn":"2:12352:23395"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43867:7928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12285:832":{"id":"2:12285:832","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12035:427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12286:20956":{"id":"2:12286:20956","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12334:23387":{"id":"2:12334:23387","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11986:7939","`DoubleEndedIterator`":"2:7435:121","prim@char":"1:12035:427","str::split_whitespace":"2:12312:27163","str::rsplit":"2:12340:23391"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43763:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12367:28247":{"id":"2:12367:28247","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11986:7939","`DoubleEndedIterator`":"2:7435:121","prim@char":"1:12035:427","str::rmatch_indices":"2:12370:28248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43913:7954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12373:28249":{"id":"2:12373:28249","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12293:20689":{"id":"2:12293:20689","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11546:7943"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12340:23391":{"id":"2:12340:23391","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11986:7939","`DoubleEndedIterator`":"2:7435:121","prim@char":"1:12035:427","str::split":"2:12334:23387"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43781:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2427":{"id":"5:5527:2427","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:28920":{"id":"5:5517:28920","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12305:28239":{"id":"2:12305:28239","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12041:1443","str::slice_mut_unchecked":"2:12306:28240","crate::ops::Index":"2:3062:2282"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12314:25837":{"id":"2:12314:25837","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44017:2399","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12408:20407":{"id":"2:12408:20407","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12337:23389":{"id":"2:12337:23389","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11802:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12295:320":{"id":"2:12295:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12296:319","`u8`":"1:12052:1546"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12294:28238":{"id":"2:12294:28238","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12390:23398":{"id":"2:12390:23398","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11986:7939"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41801:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12006:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:20406":{"id":"2:12407:20406","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:28919":{"id":"5:5514:28919","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12288:28236":{"id":"2:12288:28236","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12411:2200":{"id":"2:12411:2200","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:2200"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44071:2201","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:8276":{"id":"5:5511:8276","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:20404":{"id":"5:5529:20404","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12408:20407"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12307:23379":{"id":"2:12307:23379","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12308:23380"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12377:28251":{"id":"2:12377:28251","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:23169":{"id":"2:12405:23169","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39835:23303","Self::is_ascii":"2:12404:20401"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41801:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39835:23303","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12343:28242":{"id":"2:12343:28242","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11986:7939","str::split":"2:12334:23387","prim@char":"1:12035:427","`DoubleEndedIterator`":"2:7435:121","str::rsplit_terminator":"2:12346:28243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43813:7959","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11991:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12303:23357":{"id":"2:12303:23357","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10080:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10080:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"11:805:2238":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"11:986:2243":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11137:15799":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5760:15417":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7534:15479":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:8978:15583":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"11:2168:30552":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:5737:13162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:7282:2229":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:40366:8059":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:7349:2226":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:40707:8255":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:48054:2758":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4374:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:43749:2402":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:653:9119":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"22:112:19960":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"16:8281:15509":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:9521:15591":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:43559:7916":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:21418:2661":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:46250:2735":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7663:2184":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14001:19780":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:39641:8306":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:6022:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:14401:19810":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:40560:8237":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:8628:7935":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:7295:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:6834:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:10475:25280":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:11038:7918":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:3655:14515":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:44395:7961":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6625:2533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:46344:2689":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11316:15826":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11381:15840":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:434:14453":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12280:18504":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:822:2253":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:10430:15725":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:40721:8256":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:9086:15405":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:47620:2691":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12024:18486":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:5830:15419":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:9420:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"24:96:19989":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:40672:8252":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13451:19748":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6742:14422":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:9574:31602":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:4716:12546":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40529:2280":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40432:2330":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:39648:8008":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:47932:2752":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:44046:7941":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4642:20795":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:2559:2413":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12484:15789":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:7412:2327":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:4703:2530":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:11367:15803":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10520:15728":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:1677:1111":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:1554:2227":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:3846:2452":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4506:12528":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11337:15837":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:7717:2210":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5829:13230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:11546:7943":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:14:1991":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4854:12564":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:0:837":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11327:15836":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:12059:1159":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:3062:2282":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10447:15697":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:43590:7905":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:261:31598":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:9059:20201":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:8869:2624":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:12631:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:46298:2683":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4550:12533":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:500:9060":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:8072:15499":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11295:15835":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:5767:13224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"11:2060:2244":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:4801:2483":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:48016:2737":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"20:3078:2028":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"5:4234:2227":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:4638:20791":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:4889:15144":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:8953:15582":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:1672:29335":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:1858:2251":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6386:15440":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:10747:2532":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:2970:29398":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4483:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:3204:2250":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:399:30554":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"20:3531:19895":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"2:41929:8385":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:5434:2575":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:10320:7930":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:12011:7934":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:46152:2659":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:6753:15456":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"13:110:30608":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:22280:27383":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"20:2957:31906":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"16:7492:15475":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11086:15829":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:6472:2612":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:7766:2309":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:21437:2377":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"14:215:14413":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:1911:10139":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:7792:15494":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4489:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:9197:24992":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:10750:15742":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:7911:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7582:15483":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:4745:15120":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:42849:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4535:12531":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:45843:2681":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:2359:14482":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"21:360:19919":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"6:4800:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"20:3707:2416":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"18:80:19833":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13778:15639":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7436:15472":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:5629:2615":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:4315:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12098:18491":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:8989:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:10929:15747":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:5449:2025":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:9350:15556":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:10511:7928":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:43642:7920":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:2033:2242":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11351:15838":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11226:15832":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"20:3911:31955":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"17:11586:15607":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:2832:14502":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:8926:15581":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:9660:31282":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5612:15408":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"21:182:19913":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"17:11235:15833":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:44184:7971":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7609:14228":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6583:15452":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:47058:2696":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:42014:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:47478:2719":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:45927:2722":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:40871:8257":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"20:3044:2027":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"1:8201:2400":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:9372:15589":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:6200:25469":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4626:12539":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:14118:19792":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:2822:2069":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:14156:19796":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:2526:14489":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:532:9063":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:573:9069":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:2243:29244":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6573:9912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:6332:15435":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:39382:8020":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:42560:7870":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:47730:2725":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"20:4221:2031":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"20:925:19884":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"6:6775:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:4188:31898":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"6:1673:9970":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:40340:8056":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:41787:2446":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:12033:378":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"20:1655:19930":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"2:40479:2346":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:2450:14486":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:35:2285":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:40446:2332":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:10359:7917":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2279:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:21662:2668":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:2496:2412":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:10949:2309":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4524:12530":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11886:18479":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11074:15828":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:6067:13247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:7856:8232":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:39523:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6204:15429":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:5991:8260":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:2861:8288":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:31122:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7935:2268":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:2825:7859":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:7027:20721":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:4985:2388":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:40281:8060":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13487:19749":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:6439:2232":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:2213:2347":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10214:15674":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5805:13228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:41610:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:1517:14397":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:3669:29335":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:14346:19807":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1575:9962":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4824:12560":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13085:19028":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:43113:26906":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"9:330:14329":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:2959:7853":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8311:2449":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:2524:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:46776:2724":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:1495:9952":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:41107:8228":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:10397:7931":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:2540:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:41886:2546":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"26:41:20004":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"17:14434:19812":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:2766:14499":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:48112:7831":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:1776:2289":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:4628:2467":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:30574:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4556:12534":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:39543:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:44753:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:41117:8229":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:3010:2072":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2533:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:7852:2261":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4428:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7269:31032":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7102:15468":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:10580:2183":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:4182:7892":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:1778:2290":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:40404:2331":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:2969:14507":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:3997:2466":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:531:19862":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:30328:2454":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:8303:2492":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:2644:14494":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:6401:15441":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:5786:2603":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:10992:2583":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2782:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:40579:8245":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:1702:2489":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2332:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:32346:15508":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:46374:2695":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"20:1365:2035":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"16:6499:15447":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10646:15781":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:0:1875":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"24:132:2561":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"17:13040:19025":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:46466:2757":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:22287:2457":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:4168:2495":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:11479:2451":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"11:1845:2249":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:21013:2667":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:47870:2731":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"20:3799:2029":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"2:44506:8443":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:7290:2229":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:1743:8330":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4740:12549":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"9:393:14274":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11815:15846":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"18:755:19857":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"14:221:14414":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4963:12576":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:41083:2605":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:1027:14393":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:1826:2232":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:11316:2587":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:4811:814":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:7586:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:10344:20241":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:21312:2377":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:3212:2248":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:12056:1542":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:41989:2227":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:4376:8034":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:21771:27174":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:22595:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"18:699:19855":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10240:15640":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12208:18499":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:1663:9969":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"7:0:1591":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:14420:19811":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4908:12569":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:10771:24976":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:11237:2625":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9137:15560":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:21413:2377":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:9115:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:44147:7969":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:43095:2561":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:4392:2493":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:3830:14541":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6607:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:2472:14487":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:45819:2721":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"23:268:19979":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"16:5088:15199":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:44490:8441":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:276:2076":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6805:13664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:10962:2576":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:0:1435":{"crate_id":1,"path":["std"],"kind":"module"},"2:2849:8286":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:3238:2251":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:3465:2373":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:3881:31953":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"2:41852:8309":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:1928:670":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:2810:14501":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:1831:2233":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:5866:15420":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:5532:8248":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8396:2542":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:1649:9968":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:89:19987":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"1:2573:25324":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:541:9064":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12598:18997":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:41092:8227":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:8487:2562":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8970:2604":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:14013:19781":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"21:210:19914":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"2:10525:7926":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6376:15439":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:1075:15637":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:7172:2594":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:356:2196":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12576:18996":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:40509:7903":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:11984:20047":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:22793:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:3720:2268":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:6968:15465":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:30588:26279":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4992:12579":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9445:15590":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:6861:8243":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:2365:2353":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:32367:8356":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:14378:19809":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:1980:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"23:342:19992":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"2:3013:2073":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:5384:2388":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:21883:2663":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:1631:9966":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10292:15594":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:5622:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:507:31739":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12685:19002":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9711:31634":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:7199:2255":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:7462:15473":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:2406:1888":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:44062:7950":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:1538:14398":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:46068:2700":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8947:2623":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"14:202:7980":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4401:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:7540:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"9:52:14292":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"23:309:19976":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"2:45753:2715":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:10771:15762":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10059:15636":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13632:19755":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12830:19012":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:42392:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"20:3338:19880":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"2:11751:8447":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:3504:2322":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12196:18498":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11639:15609":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:2877:8290":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:7581:25282":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4685:12543":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:30752:26180":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6720:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:21252:2377":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"20:4160:8248":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"6:6156:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5877:13232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:614:31766":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:48127:7832":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:1184:15645":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:7054:30979":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:10534:2422":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"21:313:19917":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"1:4824:2477":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4810:12558":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"20:3462:19898":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"2:7435:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:7828:15495":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:3003:2070":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:4918:2529":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:48268:7839":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:39483:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:793:2234":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:2170:29255":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:12050:762":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12111:18492":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:5831:2214":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:5588:15407":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:0:1871":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:4787:12555":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:8115:15501":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:13259:19040":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"20:4101:32019":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:20845:27170":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13710:19759":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:22727:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"24:192:14312":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"6:5994:13241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:1501:14396":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4368:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:2049:2243":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:46564:26275":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:32306:2584":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:42574:7879":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9070:15404":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:2406:14484":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7090:31007":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:47272:2685":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:630:2227":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:582:15573":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13286:19041":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10916:15746":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:7668:2186":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:9207:15586":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:2536:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"11:695:2236":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:46087:2749":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:5977:2615":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"15:306:14429":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"20:3129:19911":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"1:919:2236":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4606:12537":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10468:15727":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13575:19753":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:12040:1413":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:44514:8438":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:14083:19788":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8861:2227":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:3065:14510":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:6436:2606":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"23:231:19981":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"2:44290:7975":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12765:19008":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6711:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:4426:29334":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:3522:2375":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5775:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:12787:2798":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:2216:2348":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"20:3627:19931":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"1:10811:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:7517:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13981:19778":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:1837:2032":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:2886:20238":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5044:12583":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:42803:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:21063:8318":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"5:261:29335":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:20817:8075":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13244:19039":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12422:18988":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:5939:15422":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:41650:2442":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12172:18496":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:119:8739":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4944:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:44215:7973":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:817:2239":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:7231:29243":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:48138:7833":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:14100:19790":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:2932:8302":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:12036:1562":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"20:3899:31907":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"2:41069:8225":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2772:2068":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"21:347:19957":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"17:400:15571":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:9639:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:41667:2443":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:3391:2430":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:42195:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:8120:2371":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:6955:29356":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:4417:15008":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:1257:2242":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:6687:15454":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12711:19004":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:3951:19939":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"16:7342:31047":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:4862:15141":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:5727:15415":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7768:15492":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:40589:8246":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10534:15699":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:21196:8318":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6318:15434":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:32360:8033":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:1709:9974":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:4140:19924":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"16:6944:30758":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:586:2199":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:11520:2450":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"23:457:19971":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"2:8948:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7884:15497":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:8519:2213":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:7006:15466":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:48101:7830":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:22694:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:6901:25320":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:11161:2582":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6879:15460":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:5017:15176":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:8594:15557":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:12237:18501":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:4331:8033":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:7881:2367":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1513:9955":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:9679:8086":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:7545:8000":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13135:19031":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:2881:8292":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:45967:2734":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:44689:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:6705:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:22661:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:47978:2703":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:43707:7952":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:6545:2609":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:3266:2425":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:629:29218":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:8686:15574":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11343:20127":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11719:15612":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:11991:7935":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:12212:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6485:15446":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:8239:15508":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8337:2531":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"13:0:1870":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:4405:2187":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11056:25322":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:2855:8289":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:10087:2300":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:5472:2388":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:8825:15578":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"20:3447:19892":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"2:32454:8267":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:2574:14491":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"23:324:19977":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"17:13826:19765":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:8211:2401":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:6772:8235":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:3915:14578":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:3232:15745":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5058:12585":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7360:31056":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2670:14495":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12252:18502":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7284:2546":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11244:15608":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:3238:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6726:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4638:12540":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4650:12541":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3744:2450":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11023:15749":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:1761:624":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11181:8456":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:14316:19804":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"20:1660:19933":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"18:0:1881":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:736:2231":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:44537:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:9025:25674":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:14110:19791":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12810:19011":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12184:18497":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:474:9056":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:12042:1527":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"7:32:14244":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:12049:761":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:8556:2227":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:4320:2499":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:5565:2577":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:8134:15502":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4833:12561":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13567:19752":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:41125:8231":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13215:19037":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:4527:15046":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:8363:2480":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:9878:25324":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:7318:15470":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12997:19022":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:22301:2456":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:11516:8399":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2548:14490":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:9487:2369":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:14460:19814":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:2178:8319":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:45897:2717":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:3049:14509":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5051:12584":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:9242:15587":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:12048:760":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:42793:26891":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:3441:15750":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:7396:26237":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5882:13233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11617:15608":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:5418:2574":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:3232:14511":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:7859:2369":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6352:15437":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10366:15682":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10628:15734":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:2166:601":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3160:2284":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11910:18480":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:894:2232":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11215:15798":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:8097:15500":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"20:2973:32017":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"1:8825:2581":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:7854:2368":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:3989:2465":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:5612:8003":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:7732:2211":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"20:3470:19899":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"2:40317:7951":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5955:13237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:40682:8253":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:657:2229":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:582:8075":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:1545:9959":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:2864:14503":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:8414:2560":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:2907:14505":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:555:2180":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:10108:25671":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:3250:8021":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:4967:2538":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"15:288:14428":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11111:15801":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12621:18998":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:44494:8440":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8231:2399":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5793:13226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:2596:14492":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:9415:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2618:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13890:19770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4748:12550":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:26182:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:21235:2666":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:123:8740":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:12053:1543":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:44327:7976":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4938:12572":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:10097:15630":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:149:14456":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"20:3168:2025":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"17:11761:15614":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:2659:2325":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"23:171:19969":{"crate_id":23,"path":["anstream","lockable","Lockable"],"kind":"trait"},"1:5398:2573":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4872:12566":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"9:507:14276":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:0:1879":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:10539:7929":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"11:119:30546":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:494:9059":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:2914:8298":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:41716:26257":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:5131:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:3115:2432":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:6041:15427":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:43105:26907":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:41938:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:6136:12423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:4497:15040":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:43569:7914":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:10106:20232":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:2788:14500":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:3594:2228":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:2391:2363":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:14033:19783":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:6841:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:2830:8266":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:2928:8301":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:40385:8055":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12074:18489":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:1603:9965":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5015:12581":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:6565:9107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:22562:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:5025:12582":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:1411:2227":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:23372:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13851:19767":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4587:12536":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5982:15424":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8248:2440":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:14282:19801":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:43298:8429":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:1640:600":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:14024:19782":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:44770:7851":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:46595:26181":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:2035:2268":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:4706:2503":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7015:15467":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"22:157:19962":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"2:3223:8305":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"20:3381:2026":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"17:13162:19033":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"20:3441:19897":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"2:3278:7861":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:6985:25151":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5363:15402":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:8205:15507":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:6175:27397":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:45865:2687":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:587:9071":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13676:19757":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2504:14488":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13949:19775":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:5636:2616":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:365:30541":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:44502:8442":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:41739:2453":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"20:4214:31936":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"2:4017:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:7530:15573":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:719:19848":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:5054:25666":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:10252:2228":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12225:18500":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:40659:8239":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10012:15594":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"20:3871:32018":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"1:7864:2366":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"20:3247:186":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"1:12039:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:3419:2388":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:940:2239":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:8848:15579":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:45998:2682":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:4785:27862":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:7135:22570":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:643:2207":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:5121:15208":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:2834:2651":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:3044:7863":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:506:9061":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7438:7891":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:8546:2564":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:7245:2229":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:12911:19016":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:41775:2445":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:5384:15403":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:44510:8437":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:43629:7904":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:1681:9971":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12373:18987":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:44037:7942":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:4764:396":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:30518:2263":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:40399:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:42078:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:40238:2201":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10949:15743":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:2223:29239":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:4949:15156":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:21105:2674":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:6036:13246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:46420:2750":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3226:2423":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:41861:2227":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:7474:15474":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4240:2498":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"11:836:2240":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"14:0:1877":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:6649:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13113:19030":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"20:3890:32027":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"1:4138:22567":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:43651:7923":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:46822:2730":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:707:7937":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:11623:14437":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:10165:15661":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:12658:19000":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3303:2420":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:20875:27359":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:5712:15414":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:4:1035":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:6816:2656":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13723:19760":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2937:8303":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:14163:19797":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14076:19787":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11490:15602":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:44795:27368":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:1590:9963":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:4005:26445":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:22826:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4436:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"9:0:1873":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10278:15671":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:1554:2388":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:1492:2235":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:9790:31347":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10340:15675":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10126:15659":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:5128:2599":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:40650:8251":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:43083:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"0:0:1760":{"crate_id":0,"path":["clap"],"kind":"module"},"1:9045:15469":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:2893:8293":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10637:15735":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:10166:25142":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:9287:2032":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:7643:2377":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:44071:2201":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:7621:15485":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:3233:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2488:8079":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:1690:9972":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:3178:2249":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:3244:8022":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"20:4073:25672":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"1:7743:2247":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:13897:19771":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:7272:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4664:12542":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10903:15748":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"20:2752:2227":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"2:48072:7827":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2220:2349":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4695:12544":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2369:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13989:19779":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:40639:8259":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:2865:2652":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:5696:15413":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:2428:14485":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:3461:14513":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:8015:2416":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:5963:15423":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5049:15184":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:3800:2233":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:43616:7903":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:3508:2232":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:44740:2797":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:9893:26353":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"20:3962:19950":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"16:2881:14504":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12554:18995":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12437:18989":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7599:14227":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:14448:19813":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12531:18993":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:2966:29397":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13554:19751":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:4053:14692":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:46396:2701":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:9424:7869":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:47012:2690":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:579:9070":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:9795:8412":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"14:7:14404":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:1073:2245":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:482:9057":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11991:18484":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:2211:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:43985:7957":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:42431:2600":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:2381:2358":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:12496:18991":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:7250:9017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:1653:19929":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"1:9002:20126":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:4518:12529":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12136:18494":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:481:19859":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:44782:7849":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:7689:2183":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"20:3271:19882":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"11:760:2233":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:42117:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:8148:2429":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:7261:28057":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:30552:7999":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8319:2502":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:44482:8436":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:1595:9964":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:915:2235":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11845:15847":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:43913:7954":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9650:15594":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4413:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1696:9973":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:57:2032":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"2:3066:2283":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:6306:2800":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:11050:25323":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:681:19853":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:6303:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:44027:7953":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:334:19918":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2:11946:2567":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:21446:2665":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9933:15644":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4478:2503":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:4747:2482":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:9328:2402":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5836:13231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:43733:7946":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10227:15673":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:9617:31214":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"21:0:2010":{"crate_id":21,"path":["anstyle"],"kind":"module"},"9:357:14289":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:9945:15640":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:1464:2230":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:9390:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4770:12553":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:4194:2388":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:42876:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10112:15658":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:43813:7959":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:3188:25610":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11191:15609":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8984:25466":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:44679:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:4037:2468":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:929:2238":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:1570:2248":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:1473:2231":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:41076:27398":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"18:491:31748":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"11:2194:30550":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:2527:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:4723:12547":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4475:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:1302:2245":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:10256:2586":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:44375:7960":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:4051:2470":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:564:19864":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"23:182:19970":{"crate_id":23,"path":["anstream","raw","RawStream"],"kind":"trait"},"23:63:19989":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"24:113:19994":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2:44055:7940":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2773:7860":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13906:19772":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6008:13242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:43313:26339":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13298:19042":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:837:2227":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:1647:8214":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:10849:20172":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:2339:14481":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"22:28:2377":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"2:21881:2377":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"20:4064:31921":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"11:644:2228":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:41946:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:4585:15056":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:2461:28075":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:6432:2605":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:562:9067":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4463:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"24:304:19992":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"2:10277:2403":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10478:15722":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:22162:2455":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7544:15480":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:3888:14575":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"21:282:19916":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"5:5318:29335":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:1527:9957":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:30558:8279":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"23:356:19982":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"11:2201:2225":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11597:7845":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:43781:7924":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:40253:8061":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:6531:15449":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:9861:27818":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:8005:25648":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:12047:763":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"20:3581:19907":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"17:13188:19035":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:7919:25605":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4568:12535":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"20:3428:19901":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"17:13816:19764":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:1766:8329":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:9480:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"20:4124:19925":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"1:8237:2449":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7597:30765":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:11200:2381":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:6156:15428":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:5648:15410":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:12006:7936":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:736:19849":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:12038:1073":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:4002:2232":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6189:30992":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10186:15662":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14090:19789":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"20:3362:19886":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"22:128:19961":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"2:12656:8083":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4616:12538":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:7191:2229":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:4909:2528":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:21334:2665":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:11802:7930":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:3975:2464":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:11616:14437":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11971:18483":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:6637:29335":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:9531:31684":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:4605:8049":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:10540:2420":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:9003:15584":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"20:49:2033":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"16:4774:15125":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:2380:14483":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:44341:7977":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:7391:15471":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:11573:15606":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2379:2357":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:2777:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"20:1172:19903":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"2:21268:2660":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:21061:26554":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12724:19005":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:5975:8659":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:3538:19894":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"16:2305:14479":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:7112:2429":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:6243:15431":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:504:15572":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:362:2197":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13739:19761":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9896:15624":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:10776:2366":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:531:2178":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:4254:8026":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:4835:15138":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:7278:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13274:15611":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:782:2252":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:0:2013":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"6:4895:12568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10685:15741":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10698:15763":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"7:79:14251":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:8297:2501":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12983:19021":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"20:3209:31951":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"6:4955:12575":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2775:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"20:34:2035":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"20:3229:31958":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"18:599:31743":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:10789:20187":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:2012:15676":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:40352:8057":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:844:2241":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5799:13227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:4806:15133":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:9972:15634":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12671:19001":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7862:15496":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10561:15694":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:22313:2458":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:10228:2227":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"14:40:18481":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:10440:15726":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:3529:2397":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"18:113:19835":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:11951:18482":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:3183:29393":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"20:3567:19904":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"22:32:2403":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"6:7505:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2257:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4973:12577":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11819:24767":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:6485:29335":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:3315:7862":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:14173:19798":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:7463:7981":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:7600:25315":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7128:15469":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:44518:8456":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:2933:14506":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"20:3303:19885":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"2:22053:26886":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:9780:15597":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"20:1701:128":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"20:3521:19891":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"2:43550:7912":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4704:12545":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:6788:8004":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:11173:20134":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:11532:8401":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:43661:7921":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"20:1364:19906":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"5:1288:2243":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:904:2233":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:7644:2198":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:3305:2421":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:41098:2430":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:2869:2654":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:5743:15416":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:10726:15785":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4328:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:39609:2219":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"24:255:2035":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"1:11310:24986":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"9:426:14275":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:526:9062":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:4719:15118":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:2924:8300":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"13:226:30561":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:10080:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:12055:1545":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:40265:26270":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:4640:20793":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:4986:15169":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:3399:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"20:4086:32026":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"20:3288:19883":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"1:10432:2580":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6589:8941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2722:14497":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12750:19007":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12959:19019":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:12017:20166":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4389:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6083:14450":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:11391:22561":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11535:15604":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"18:660:19851":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5967:13238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:5993:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4678:2461":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7474:7982":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"20:1679:23202":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"12:0:1876":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:10327:2025":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:21314:2662":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10507:15698":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4917:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:2284:14451":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:6957:8223":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:21011:2377":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"11:332:30539":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:5798:15418":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:9051:15555":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:7397:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:40244:8024":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:48081:7828":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"23:285:19980":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:42898:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:5752:2601":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12945:19018":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11147:2581":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"15:394:14440":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"18:671:19852":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12888:19015":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10575:15730":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:7463:14199":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:4921:15152":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:10980:15594":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:5322:15385":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:12000:7937":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:488:9058":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"28:0:2017":{"crate_id":28,"path":["strsim"],"kind":"module"},"2:48191:7836":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:6820:13665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2908:8297":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:2618:14493":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:1717:9975":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:2180:30553":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4754:12551":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10547:15729":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8504:2563":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:652:31739":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5900:13235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:2962:29238":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5863:13191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"20:2774:2228":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"17:10139:15660":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"20:3574:19888":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"16:7513:15477":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2787:2188":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"11:1012:2244":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:9492:20246":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4862:12565":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:40305:8063":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9867:15622":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"20:65:2037":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"25:23:14312":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"17:13055:19026":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4781:12554":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:7529:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:3679:2447":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11048:15815":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11609:25656":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"23:389:32255":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"2:42005:2229":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:3642:2229":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7722:15490":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:644:31739":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9959:15635":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:9426:7878":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:868:2230":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46198:2723":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13101:19029":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:3447:2374":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"20:3783:19938":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"14:187:14412":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:968:2242":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:9488:31611":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:4500:2504":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:638:2206":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"11:667:2235":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:7770:24910":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:39835:23303":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:10070:2377":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"15:0:1878":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:5384:2572":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"11:798:2237":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12123:18493":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8807:2580":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10962:15744":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11173:15831":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"28:72:20032":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"1:11541:2452":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:44080:7951":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9912:15625":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11872:15848":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:850:2228":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8883:2621":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:8794:15577":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"20:3097:19881":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"2:31150:8075":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:4557:15052":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:12698:19003":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:7894:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:45773:2680":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:11112:7911":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:14469:19815":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:6548:2610":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13148:19032":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8931:2620":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:12046:659":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:4047:2469":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5074:12587":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12086:18490":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:46105:2755":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:4176:2496":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5068:12586":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:20858:27360":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10023:15595":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:9701:15595":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"14:160:14404":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"20:3508:19890":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"2:4385:8035":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12513:18992":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5008:12580":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"9:237:2561":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:7871:2370":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:3330:2233":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:5995:15425":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"20:0:1752":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"17:13693:19746":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:43831:7958":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:5590:8238":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11124:15800":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10316:15677":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:403:30555":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:11687:15610":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:8813:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:595:9072":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:42156:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:2150:15711":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14308:19803":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"20:3113:19910":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"6:4304:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:9886:15623":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:12035:427":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4818:12559":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:2176:8318":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:6818:15458":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:7425:2328":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:9105:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44697:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:9037:25452":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"24:26:19995":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"1:10953:20768":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:48206:7837":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11306:15611":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11098:15802":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"22:5:2462":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:8195:15506":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:3993:26517":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5920:13236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7554:15481":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13202:19036":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:1068:14394":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:2363:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:1838:2248":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:6850:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6560:30960":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:9430:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:41633:2441":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:14514:19818":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11162:15795":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:6744:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5080:12588":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:22251:26076":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:12045:657":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:1638:9967":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:8050:15498":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8218:2402":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6015:13243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:6169:8240":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:10588:15731":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:7927:2414":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5818:13229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10410:15689":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4291:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:43671:7922":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:4003:2467":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:9032:25470":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:45949:2728":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:21182:2670":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:2131:2173":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:14296:19802":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:4393:2388":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"20:4046:19941":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"2:12604:27531":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11218:20175":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:1503:2236":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5890:13234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12473:15788":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6077:13248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:7544:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:7406:2075":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:5816:30694":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:2960:29399":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:7708:15489":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:10537:2424":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"23:405:2561":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"21:127:32208":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"2:40598:8247":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:40333:7950":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:14536:19820":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:3171:2227":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:3756:19921":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"5:6930:29361":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11151:15830":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"20:4154:31814":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"2:43867:7928":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:568:9068":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"20:3551:19902":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"16:5419:15405":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"20:3676:19932":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"5:7529:2233":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:7558:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"23:446:32266":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:46698:2718":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"20:4241:2030":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"18:515:19861":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:39662:8017":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6425:15443":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"27:0:2016":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"16:6600:15453":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"20:4148:31962":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"20:3219:32029":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"2:44570:8457":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:3348:2409":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"25:89:2035":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"17:12062:18488":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:1055:2243":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:32342:24910":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:22628:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4887:12567":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"14:31:14404":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6268:31035":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:21320:2664":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:11456:20242":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6598:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6361:15438":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13174:19034":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3513:20885":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:4074:2228":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:43763:2403":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4543:12532":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:4250:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:12970:19020":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:40885:8258":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7660:15487":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:7337:2225":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:43317:7906":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:7849:2258":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:9607:15593":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:47088:2702":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:2363:2352":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:22214:26114":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"28:32:20018":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"5:1776:2233":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:1442:2229":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:2530:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11062:15827":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:1500:9953":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4496:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:40538:2400":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5905:15421":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:40691:8254":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:1041:2242":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:7546:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:547:9065":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18:727:19856":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1523:2267":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:41801:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:2839:2653":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11358:20191":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"23:425:19972":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"17:13546:19750":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:22235:26273":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:8895:15580":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6696:14423":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11000:15751":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:40359:8058":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"20:3489:19900":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"17:13611:19754":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:21049:2669":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:7379:25456":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:619:2203":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6796:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:6792:15457":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10265:15672":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6915:15462":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:2776:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:3797:14532":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:5979:13239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:43885:7926":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"10:36:30533":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:8853:2583":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:6261:15432":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12267:18503":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:10432:7924":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:44263:7974":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"9:486:14272":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11788:15845":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:6079:2388":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:40607:26040":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"19:0:1053":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:22197:26229":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8573:2566":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13792:19762":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1921:2321":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3741:2451":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:8659:15554":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:7568:15482":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:22760:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:2209:15695":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:44732:2796":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3939:2463":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:4641:15064":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42821:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:7782:15493":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:946:2240":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:10801:2370":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:3263:26035":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13876:19769":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:3007:2071":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:4613:15060":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:7523:15478":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:14221:19799":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:2992:2264":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:46934:2684":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:39468:8304":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12934:19017":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:40325:2201":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:1520:9956":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:261:19915":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"2:48092:7829":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:7613:15484":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:3217:29388":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:9139:2381":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:14145:19795":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:3779:2203":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"1:8341:2533":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:5568:2579":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12778:19009":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8285:2444":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:7393:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10397:15723":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:6798:8005":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"20:3932:31991":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"5:2690:28072":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:6152:2798":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:47122:2751":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:48229:7838":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"20:3514:19893":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"16:6960:15464":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:8877:2229":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6467:15445":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:9564:15592":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:1011:29335":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:9762:31429":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:3264:2424":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:4363:29334":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"25:0:2014":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"6:6688:10080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8915:2622":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:7738:2246":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:9455:31617":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:12569:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:14068:19786":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6901:15461":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:910:2234":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12543:18994":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5849:13190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:9631:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:7523:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:5311:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:9852:15621":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:10821:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:11039:19919":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:7182:2265":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4848:12563":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:14522:19819":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"20:3816:19940":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"1:12041:1443":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:1138:28188":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"23:440:19968":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"26:0:2015":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"1:1892:2320":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:881:2231":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:1064:2244":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:22925:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:6130:13275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:41877:2229":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:13758:19745":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:10840:20073":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:7356:8234":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:9998:15632":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6226:15430":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:43739:7945":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:14499:19817":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:47808:2697":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:1102:28192":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:3615:19887":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"1:12052:1546":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:6044:30049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:6171:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"23:254:19978":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"17:11272:15834":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:4879:1022":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:9102:15559":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"20:3838:2231":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"2:42353:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1587:2251":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:21444:2671":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6671:10082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:46517:26182":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:2321:14480":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2744:14498":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:9175:25672":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:2607:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5987:13240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2765:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:9111:27399":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"3:0:452":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13024:19024":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12305:18506":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11389:15598":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5673:15412":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10420:15724":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:7511:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"10:0:1874":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13914:19773":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:9380:2322":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:1506:9954":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2487:2377":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11358:15839":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:2174:27944":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:46028:2688":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11547:15605":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13868:19768":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13422:19747":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9921:15650":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:8292:2500":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6279:15433":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:44362:7979":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:40416:26237":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4456:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12846:19013":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10788:15787":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:43058:8088":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:6168:25309":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4420:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:12057:808":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"20:3589:26905":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"1:5085:25666":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3735:2269":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:3032:14508":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:44352:7978":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:4059:2472":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"20:3266:2177":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"20:744:32111":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"2:40861:2401":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:1569:9961":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:62:8685":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:6415:15442":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"20:1097:19905":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"16:4344:14959":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:1818:2227":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:22174:26224":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:3185:22806":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:3357:2177":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"2:2327:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:6545:15450":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:11742:15613":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:8902:2619":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:1558:2229":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6721:15455":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13667:19756":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"18:590:27382":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:20830:27170":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:13071:19027":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:42858:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:4462:15029":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10084:15631":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:40621:8249":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:2635:2415":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:8520:2549":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:5362:7896":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:9674:8085":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:2696:14496":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4842:12562":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:2898:8294":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:61:2036":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"18:609:31769":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13228:19038":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:860:2229":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:6255:2615":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:22122:26943":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:2827:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12465:15790":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:9110:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"10:44:14383":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:11407:15599":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:12006:2212":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:8521:2548":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:39587:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:3224:2422":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12293:18505":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"23:371:19983":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"6:6028:13245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10603:15732":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10197:15688":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:7541:25152":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:3191:25609":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:574:31739":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:9985:15633":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:9752:15596":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:5435:30978":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:22189:26895":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9983:20461":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:5243:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"20:3829:19946":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"16:7736:15491":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:6456:15444":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:2141:29241":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:46050:2694":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:22892:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:0:507":{"crate_id":2,"path":["core"],"kind":"module"},"17:14042:19784":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:5759:2602":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:9207:24979":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:1852:2250":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8562:2565":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11281:15825":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"20:3941:19949":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"5:3581:2227":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:40489:2345":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:5403:15404":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:1611:30544":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:7488:2074":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:207:7868":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"15:327:14433":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:521:19858":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:4032:29335":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:7067:30775":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"20:4031:19942":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"1:11373:20183":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"23:190:2377":{"crate_id":23,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"11:97:30547":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3945:2462":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:43721:7949":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:32353:27402":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:554:9066":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:1426:2228":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:22859:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:48176:7835":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12645:18999":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:1822:2229":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:14355:19808":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:9158:2650":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:2844:8287":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:1048:30560":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9277:15588":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:39565:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:502:2173":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:636:31749":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11507:15603":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:4764:12552":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:5366:7897":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:7750:2308":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12043:18487":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:1839:2306":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:5634:15409":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1482:2234":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1576:2249":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:7360:8233":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"20:2933:2024":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"5:7211:2232":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:1983:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"25:53:2561":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"2:43967:7956":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11473:15601":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"26:21:2030":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"18:766:19850":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:12034:957":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13838:19766":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:7893:27400":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:1565:2233":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:40630:8250":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:44486:8439":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:42273:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:12582:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9172:15585":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4729:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:723:2230":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:43490:27796":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:256:31555":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:173:32210":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"1:8157:2431":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:10831:2372":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:14126:19793":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:1582:2250":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12452:18990":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:4160:2494":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:9434:7877":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:1928:7865":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:1757:26893":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:43579:7915":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:1733:9976":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:20860:27357":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:6363:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:14478:19816":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:8995:2177":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:42039:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:9432:7876":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:41752:2444":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:4743:2478":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:1557:9960":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:11293:25317":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:14269:19800":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:4189:2497":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:3923:32028":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"2:44017:2399":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6929:15463":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:4432:8036":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:7382:2329":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:6615:2614":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:41919:2547":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:41997:2228":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:43931:7955":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:12879:2257":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:8154:15503":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:21667:2676":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:5661:15411":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13973:19777":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:3929:2388":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:4040:7858":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:1561:2232":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:42833:26905":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:43541:7913":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:46442:2756":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11934:18481":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6569:15451":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12737:19006":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7503:15476":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:44558:2655":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:11071:7919":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:21149:2675":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"22:0:2011":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"2:46852:2736":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:20877:27355":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:43066:26988":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:8713:15575":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:10470:7925":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8180:2376":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:3565:15768":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:46618:26276":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:44498:8444":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4446:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11261:15824":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:6180:19972":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:5574:15406":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4380:12513":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12790:19010":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:9080:20156":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:9428:7879":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:21759:2657":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6648:10097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4984:12578":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:2186:30549":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:4109:8039":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:1814:2300":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"18:96:19834":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:113:32209":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"20:3790:19951":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"1:6601:2613":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"20:3768:19922":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"6:6868:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:42234:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4395:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8839:2582":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:0:1880":{"crate_id":17,"path":["object"],"kind":"module"},"1:12060:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:1118:28112":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:6769:8003":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4794:12556":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:5839:2232":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:4259:8027":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:2886:8296":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10738:15786":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:10974:20057":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:624:31760":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"23:0:2012":{"crate_id":23,"path":["anstream"],"kind":"module"},"6:4949:12574":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:1273:2244":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:6558:2229":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:12824:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11710:15611":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10494:15700":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:12776:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:14335:19806":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:3315:14512":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"20:3435:19896":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"5:895:2227":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:45797:2716":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:6909:27479":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:7564:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:285:30534":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:44198:7972":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8010:25455":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:42567:7878":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:4321:8032":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:9116:26966":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:2260:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:21:698":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:11728:8450":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"21:305:27400":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"6:4469:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:3764:14523":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"14:165:14405":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:481:25278":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:7651:15486":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10370:15669":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:41696:26892":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:2595:2405":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:7694:15488":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"23:158:2409":{"crate_id":23,"path":["anstream","is_terminal","IsTerminal"],"kind":"trait"},"1:10766:20756":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:41869:2228":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8464:2561":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"20:3848:19948":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"17:14134:19794":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10036:15638":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:749:2232":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:8765:15576":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:40551:8236":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14324:19805":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:1121:2245":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:952:2241":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:4164:2388":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:311:30537":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"24:290:19991":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"2:2903:8295":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6346:15436":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:30646:26260":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:7221:2256":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12007:18485":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4341:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:22106:26287":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:7552:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:8168:2372":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"20:3242:31868":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"1:5503:2576":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"18:690:19854":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13922:19774":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:4140:8040":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2873:8291":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:6618:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10714:15784":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10383:15668":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:11986:7939":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:7575:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:4572:2521":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"8:0:1872":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12876:19014":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:39499:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:22138:26291":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6017:15426":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:6893:31008":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:48153:7834":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10616:15733":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11661:15558":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:10553:7927":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"9:177:14378":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:878:2254":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:4745:2481":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"20:3237:31954":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"1:9120:2625":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"20:3984:19943":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"1:12058:1601":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:8943:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43074:8087":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:2049:2269":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8224:2403":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7041:30952":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:46228:2729":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:2178:15670":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12154:18495":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:12001:25461":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:40731:8241":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"20:52:2034":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"21:382:19920":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"2:1831:2272":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10661:15782":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:9422:7870":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:14056:19785":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10456:15696":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:8167:15504":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:923:2237":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:635:2205":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:11385:22564":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:5954:2599":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:13966:19776":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:3600:14514":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:12054:1544":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:9823:15620":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6513:15448":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"9:450:14273":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:536:30943":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:39421:7864":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:6844:15459":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:42553:7869":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"20:4001:31920":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"17:13802:19763":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13010:19023":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:40295:8062":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:12057:7963":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:12051:758":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:8181:15505":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"20:4207:2572":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"2:40569:8244":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:1103:14395":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:11691:8448":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:11767:8449":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4929:12571":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:22000:26885":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:1536:9958":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"20:3861:19947":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"2:2920:8299":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:11448:15600":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"22:98:19959":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"18:538:19863":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13685:19758":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8243:2448":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:42312:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:50074:2678":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10672:15783":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:6076:25311":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:11201:15796":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:2979:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:44169:7970":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}