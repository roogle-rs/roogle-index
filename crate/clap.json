{"root":"0:0:1717","crate_version":"4.3.10","includes_private":false,"index":{"2:12173:33764":{"id":"2:12173:33764","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11803:7870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5431:34423":{"id":"5:5431:34423","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:23818":{"id":"2:12093:23818","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:31023":{"id":"2:12104:31023","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12105:31039"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43778:7878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:33756":{"id":"2:12156:33756","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11778:7875","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::matches":"2:12153:1938"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43726:7893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:23856":{"id":"2:12132:23856","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11778:7875","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::split":"2:12126:23852"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43522:7860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:33761":{"id":"2:12169:33761","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:19646":{"id":"2:12122:19646","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41537:179","prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:23862":{"id":"2:12109:23862","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:33753":{"id":"2:12138:33753","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11778:7875","str::split":"2:12126:23852","prim@char":"1:11917:418","str::split_terminator":"2:12135:33752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43572:7894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:23468":{"id":"2:12198:23468","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:23467":{"id":"2:12196:23467","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076":{"id":"2:12076","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12077:815","2:12078:23460","2:12079:33745","2:12080:33746","2:12082:33747","2:12085:25034","2:12086:33748","2:12087:314","2:12088:23820","2:12089:23816","2:12091:23817","2:12093:23818","2:12095:23819","2:12097:33749","2:12098:33750","2:12099:23844","2:12100:23845","2:12101:31081","2:12102:31022","2:12103:22648","2:12104:31023","2:12105:31039","2:12106:25672","2:12107:33751","2:12108:31082","2:12109:23862","2:12112:23863","2:12115:23864","2:12118:19645","2:12122:19646","2:12126:23852","2:12129:23854","2:12132:23856","2:12135:33752","2:12138:33753","2:12141:23858","2:12144:23860","2:12147:33754","2:12150:33755","2:12153:1938","2:12156:33756","2:12159:33757","2:12162:33758","2:12165:33759","2:12167:33760","2:12169:33761","2:12171:33762","2:12172:33763","2:12173:33764","2:12176:33765","2:12179:22549","2:12182:23865","2:12185:33766","2:12188:33767","2:12191:33768","2:12194:33769","2:12196:23467","2:12197:23608","2:12198:23468","2:12199:23464","2:12200:23463","2:12201:33770","2:12203:2129","2:12204:33771"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12097:33749":{"id":"2:12097:33749","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1402","str::slice_mut_unchecked":"2:12098:33750","crate::ops::Index":"2:2980:2211"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:31039":{"id":"2:12105:31039","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12104:31023"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43787:7877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:23864":{"id":"2:12115:23864","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:23464":{"id":"2:12199:23464","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:2352":{"id":"5:5444:2352","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:22648":{"id":"2:12103:22648","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43490:2327","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:23852":{"id":"2:12126:23852","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11778:7875","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::split_whitespace":"2:12104:31023","str::rsplit":"2:12132:23856"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43504:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:33765":{"id":"2:12176:33765","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:33770":{"id":"2:12201:33770","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:33770"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43803:7886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:33751":{"id":"2:12107:33751","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43768:7889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:23820":{"id":"2:12088:23820","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1505"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5427:34422":{"id":"5:5427:34422","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2031","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:2192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2031","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:2192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:33757":{"id":"2:12159:33757","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11778:7875","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12162:33758"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43654:7890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1707":{"id":"0:3-20:0:1707","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1707","glob":true}}},"2:12185:33766":{"id":"2:12185:33766","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:33763":{"id":"2:12172:33763","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:314":{"id":"2:12087:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12088:23820","`u8`":"1:11934:1505"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:33746":{"id":"2:12080:33746","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:23863":{"id":"2:12112:23863","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:34426":{"id":"5:5443:34426","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2031","`String`":"5:7282:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2031","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:2192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426":{"id":"5:5426","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5427:34422","5:5428:8219","5:5431:34423","5:5434:34424","5:5442:34425","5:5443:34426","5:5444:2352","5:5445:23466","5:5446:23465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12078:23460":{"id":"2:12078:23460","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5434:34424":{"id":"5:5434:34424","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:33758":{"id":"2:12162:33758","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11778:7875","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::match_indices":"2:12159:33757"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43672:7891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:23854":{"id":"2:12129:23854","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11601:7866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12188:33767":{"id":"2:12188:33767","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:23816":{"id":"2:12089:23816","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41537:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5428:8219":{"id":"5:5428:8219","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:33745":{"id":"2:12079:33745","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:23844":{"id":"2:12099:23844","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12100:23845"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12144:23860":{"id":"2:12144:23860","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12141:23858","self::pattern":"2:11778:7875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43626:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:815":{"id":"2:12077:815","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:1938":{"id":"2:12153:1938","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11778:7875","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::matches":"2:12153:1938"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43708:7892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:23463":{"id":"2:12200:23463","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:31081":{"id":"2:12101:31081","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43474:7882","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:33759":{"id":"2:12165:33759","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:22549":{"id":"2:12179:22549","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12118:19645":{"id":"2:12118:19645","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41537:179","prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12191:33768":{"id":"2:12191:33768","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:33750":{"id":"2:12098:33750","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1402","crate::ops::IndexMut":"2:2984:2212","str::slice_unchecked":"2:12097:33749"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:23845":{"id":"2:12100:23845","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12099:23844"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:33752":{"id":"2:12135:33752","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11778:7875","str::split":"2:12126:23852","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12138:33753"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43554:7895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:33769":{"id":"2:12194:33769","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11739:127","`FromStr`":"2:11738:2496"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41679:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11738:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11738:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:23819":{"id":"2:12095:23819","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12147:33754":{"id":"2:12147:33754","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:33755":{"id":"2:12150:33755","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:2129":{"id":"2:12203:2129","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:2129"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43812:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:23858":{"id":"2:12141:23858","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875","str::rsplitn":"2:12144:23860"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43608:7864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:23465":{"id":"5:5446:23465","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12200:23463"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5442:34425":{"id":"5:5442:34425","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:23817":{"id":"2:12091:23817","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41537:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:33747":{"id":"2:12082:33747","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12080:33746"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:31022":{"id":"2:12102:31022","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43480:7881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:23865":{"id":"2:12182:23865","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:7875"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:7872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1717":{"id":"0:0:1717","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[120,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1707"],"is_stripped":false}}},"2:12197:23608":{"id":"2:12197:23608","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39574:23745","Self::is_ascii":"2:12196:23467"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39574:23745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:25034":{"id":"2:12085:25034","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11345:7879"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:25672":{"id":"2:12106:25672","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43758:2324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:31082":{"id":"2:12108:31082","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43796:7876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:33771":{"id":"2:12204:33771","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:33771"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43821:7887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:23466":{"id":"5:5445:23466","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12199:23464"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:33760":{"id":"2:12167:33760","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:33762":{"id":"2:12171:33762","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:33748":{"id":"2:12086:33748","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:5693:15339":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"29:0:1968":{"crate_id":29,"path":["linux_raw_sys"],"kind":"module"},"2:3373:7944":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:4495:12464":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9895:15601":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:3670:33415":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"21:0:1960":{"crate_id":21,"path":["clap_lex"],"kind":"module"},"2:11490:8387":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:2350:2278":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:2376:2288":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8899:2552":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10402:15712":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9478:15567":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:8316:2477":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:39992:8004":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"20:53:1989":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"2:21161:2597":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:8180:15432":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"24:23:14249":{"crate_id":24,"path":["utf8parse","types","Action"],"kind":"enum"},"16:5000:15104":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:474:8995":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"31:0:1970":{"crate_id":31,"path":["anstyle_query"],"kind":"module"},"16:2642:14424":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:8904:30382":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:2720:14427":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:1301:2172":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:2799:8235":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"29:4446:20864":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"2:10027:2154":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:11803:7870":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:8632:15480":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:361:2126":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6558:15377":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:681:19652":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:2162:8262":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:3083:2357":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:644:2155":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:9265:15520":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:554:2108":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:6076:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"11:1838:2175":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:43282:7849":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11372:18289":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:2558:30346":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2832:8241":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:2862:14433":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:45494:2652":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"28:2354:19823":{"crate_id":28,"path":["rustix","termios","types","LocalModes"],"kind":"struct"},"17:13678:19606":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:41535:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8132:2301":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:3569:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:2572:14421":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:11193:15744":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:43392:7859":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:41384:2367":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:32045:2513":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:3853:37251":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"6:4715:12483":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4894:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:7285:29895":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:4567:12472":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"20:3178:37276":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"16:6164:36345":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7635:15412":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:4871:12503":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:844:2154":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8835:2550":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:579:9009":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"28:2147:19821":{"crate_id":28,"path":["rustix","termios","types","ControlModes"],"kind":"struct"},"1:10751:26917":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:8936:27214":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:2826:8240":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12915:19550":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:5283:7833":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:8979:37089":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:6597:13591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:3899:14507":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:40020:8003":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2348:2277":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:9869:2302":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:40378:8202":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:5716:2531":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:42639:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:1732:9914":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:45584:2618":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"20:3618:19720":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"6:4427:12455":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:2448:14416":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:7588:15409":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:1708:9912":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:3813:37249":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"17:9545:15557":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10735:15737":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"18:0:1831":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:11936:1503":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4388:12451":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12483:18834":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"29:4267:13161":{"crate_id":29,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"1:5522:2506":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:6032:30338":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:10015:15679":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:1012:2171":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:4037:14621":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:1048:2169":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12178:18815":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"29:3997:20837":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"2:1746:31025":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10527:15728":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:2668:14425":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"29:3974:9004":{"crate_id":29,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"29:3691:20812":{"crate_id":29,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"16:6351:15364":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:911:2160":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:40105:8002":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12576:18841":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"29:4115:13976":{"crate_id":29,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"21:128:19743":{"crate_id":21,"path":["clap_lex","ParsedArg"],"kind":"struct"},"2:21860:31072":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:7608:14165":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:1373:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:3721:2132":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"5:3141:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:8255:2420":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:1919:15616":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:43522:7860":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"20:3569:19719":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"2:22025:2384":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:8156:15430":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13612:19600":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"0:0:1717":{"crate_id":0,"path":["clap"],"kind":"module"},"2:5531:8191":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:30491:30514":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:10516:15692":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13667:19605":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:917:2161":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:13041:19557":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"29:3613:20807":{"crate_id":29,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"17:9826:15575":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"29:3815:20820":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"6:7462:14136":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:9839:15574":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:22300:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:5774:13162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:39241:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:4380:7978":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:11239:22647":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:9415:26121":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:386:15496":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:10971:30199":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:9173:2251":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6243:36387":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:22018:31047":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4786:12492":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:8718:15485":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:12396:32346":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:22531:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:11928:644":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:9498:15564":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12563:18840":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"23:192:14249":{"crate_id":23,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"17:13024:19555":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13121:19561":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10080:15682":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:507:37095":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12419:18830":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6022:15352":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10660:15536":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:959:2168":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7669:15413":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:10026:15680":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:12923:19551":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4703:12482":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:9108:37074":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:1441:2156":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"29:3821:20821":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"2:41509:2370":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:7044:2159":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"10:36:35904":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:2594:14422":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13659:19604":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3595:2155":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:7600:2127":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:5418:36255":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6919:36245":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4615:12475":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:7722:2238":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:1502:2163":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:4045:7795":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:7585:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:3272:2346":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:4018:2400":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5966:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"29:4787:20882":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"16:5386:14378":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:986:2170":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9959:15631":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:11920:1053":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"29:4013:20839":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"29:4276:13099":{"crate_id":29,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"1:8854:2548":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"30:0:1969":{"crate_id":30,"path":["bitflags"],"kind":"module"},"6:6588:8880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6767:15382":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"20:3512:37369":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"26:313:19795":{"crate_id":26,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:20877:2609":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"29:4428:20862":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"6:1701:2417":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:20914:2610":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:45560:2658":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:46753:2627":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:5357:2502":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2690:2023":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:20841:32100":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:11266:27335":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:8598:15509":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:46115:2632":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:9227:7813":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:6740:8186":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"23:113:19775":{"crate_id":23,"path":["anstyle_parse","params","Params"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:7883:2339":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11813:15687":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6293:15359":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6442:15370":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:7563:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:44116:7896":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:2773:8232":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:11037:15535":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:39201:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:667:2162":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:2925:2026":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:6575:15378":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"29:3983:20835":{"crate_id":29,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"29:3843:20824":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"16:5655:15337":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"29:4324:14136":{"crate_id":29,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"9:502:14213":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:8189:2374":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:43939:7908":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:40228:2270":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:1589:9901":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:42544:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:43320:7851":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:30861:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"20:3168:37273":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"2:4263:7971":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:21952:30395":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:20802:2606":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:7522:12686":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:10837:7854":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:39387:31913":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:21989:30437":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:9696:15564":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"20:3423:19695":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"2:39186:8247":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12059:18807":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13763:19611":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:8909:31619":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6725:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:40811:8169":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:5393:2504":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:44082:7913":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:0:1830":{"crate_id":17,"path":["object"],"kind":"module"},"17:10270:15643":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:9038:37088":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:922:2162":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2298:14382":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:40079:7999":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:5724:15341":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"20:3482:19688":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"28:1076:19827":{"crate_id":28,"path":["rustix","termios","types","SpecialCodeIndex"],"kind":"struct"},"5:2959:34514":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:123:8679":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:7557:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:43058:7842":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:8931:15482":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:40614:8200":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:9879:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"11:1501:14331":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:7094:33546":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"11:760:2160":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:3237:2178":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"29:3674:20810":{"crate_id":29,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"16:7293:15395":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:6787:31933":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:6043:35093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:40446:8198":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"29:3767:9911":{"crate_id":29,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"2:46336:30821":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:119:8678":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:5402:14376":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"11:1845:2176":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:420:14384":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:32172:8210":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:6710:13595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:888:2158":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6307:15360":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:1117:34512":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10897:15530":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:6027:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:2748:8209":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:8456:2492":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:2319:14410":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"9:481:14209":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:3211:2175":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:258:33415":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1630:9904":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13744:19610":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:42052:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:10079:26025":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:4662:2458":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:2194:35915":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"20:3865:37257":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"5:6318:33415":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:562:15498":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:1755:8272":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:47879:7770":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:1463:2157":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9523:15559":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:11527:8389":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:154:14387":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"20:4149:2501":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"5:1472:2158":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:644:37095":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:11888:2140":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9772:15583":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"26:382:19799":{"crate_id":26,"path":["anstyle","style","Style"],"kind":"struct"},"1:9011:25573":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12113:18811":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:531:19661":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:49815:2615":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"20:4006:37266":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"1:618:2132":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"30:177:22376":{"crate_id":30,"path":["bitflags","parser","ParseErrorKind"],"kind":"enum"},"17:11319:18286":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11923:1402":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"29:4820:20886":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"1:947:2166":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:3582:2154":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:1568:9899":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:1895:2249":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:6014:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"29:4404:20859":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"28:1137:37754":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"16:6488:15373":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"11:749:2159":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:10167:2515":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:7711:15416":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9917:15627":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:21632:2302":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"20:3450:19697":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"16:8047:15424":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:6035:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:40299:8181":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:1543:2313":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"20:1660:128":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"1:1577:2175":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:8788:15511":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:4785:31110":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:41972:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2767:8229":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"28:1713:19822":{"crate_id":28,"path":["rustix","termios","types","InputModes"],"kind":"struct"},"1:2855:26128":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"29:3915:20830":{"crate_id":29,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5976:15350":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:5305:15313":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11717:25475":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"11:723:2157":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2816:8237":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:20667:31991":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:12374:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:9217:7805":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:9683:15579":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:5471:2313":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"4:0:1821":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:39380:15433":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"29:3886:20827":{"crate_id":29,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"15:219:14362":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:20833:2603":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5881:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:4459:2432":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"20:3499:19691":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"1:1821:2229":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:3203:2177":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45846:2692":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"28:1751:37754":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"1:7694:2173":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"20:2886:1979":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"16:3300:14442":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:3168:7965":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:6508:2538":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:7182:2153":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"22:366:37636":{"crate_id":22,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"16:6935:15389":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"20:3973:19730":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"2:44247:8382":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:5525:2508":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12388:18828":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:11933:742":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"19:0:1035":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:8651:14378":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:8176:2328":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:10269:7861":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:532:9002":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:573:9008":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7029:36357":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6849:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:3732:19739":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"17:10465:15698":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"20:3389:19698":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"1:11272:27278":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"30:132:22355":{"crate_id":30,"path":["bitflags","traits","BitFlags"],"kind":"trait"},"16:4445:14957":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:11522:14366":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13791:19613":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"20:1638:23644":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"11:1121:2172":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"29:4151:20842":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:7673:2138":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5050:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7557:15408":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:8170:2327":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:5686:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"20:3988:19729":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"17:12634:18844":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:22630:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:11924:18799":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:11937:1504":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2850:8245":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"9:0:1823":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:4409:2115":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:41653:2475":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:5742:2532":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:3872:14504":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:4926:2466":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10989:15534":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"22:319:19773":{"crate_id":22,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"17:8753:15510":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:9617:15556":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:43654:7890":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7529:15406":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"20:3926:19731":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"1:7726:22465":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"20:3649:2341":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"16:7317:36416":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:2242:34639":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:42854:31049":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:8129:15428":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:8989:27259":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:46593:2673":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:1846:2235":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"11:1027:14328":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"29:4021:20840":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"1:6392:2141":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:12616:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:12033:18805":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6719:13596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:564:19663":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12902:19549":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:41620:2474":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"29:4687:20877":{"crate_id":29,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"2:40171:8315":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2795:8233":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1519:9894":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:1572:2160":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:541:9003":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:41852:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:9436:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:4436:7980":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:7528:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13564:19599":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:43448:7888":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:8498:2493":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4523:12467":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:766:19649":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:7229:30440":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:515:19660":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:11174:30352":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:40064:2130":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"29:4491:20869":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"11:332:35910":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:39305:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9641:15568":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:2742:14428":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:3158:23283":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2357:14412":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5557:15331":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13219:19569":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:47917:7772":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:9986:15632":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"23:255:1990":{"crate_id":23,"path":["anstyle_parse","Parser"],"kind":"struct"},"2:42012:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"20:3027:1983":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"29:4397:20858":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:13135:19562":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:11422:2377":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:10076:2328":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:7574:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4907:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:42574:22353":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"20:2993:1982":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"2:47894:7771":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:9866:15595":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6819:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10452:15699":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:21405:2602":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:11331:8340":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5847:15345":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:1513:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:3181:32006":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:41486:2369":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"14:160:14339":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:45969:2666":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"26:182:19791":{"crate_id":26,"path":["anstyle","color","Color"],"kind":"enum"},"28:2664:37759":{"crate_id":28,"path":["rustix","pid","Pid"],"kind":"struct"},"5:821:2180":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:9670:15580":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:6108:2735":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:875:2157":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:41430:31097":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:7697:15415":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:47611:2668":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"25:21:1985":{"crate_id":25,"path":["colorchoice","ColorChoice"],"kind":"enum"},"2:42301:7806":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44235:8379":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:45708:2671":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:1080:2172":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:11120:2554":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9946:15603":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:7706:2237":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:5709:2530":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:2366:2283":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:3492:19692":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"2:7277:2030":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4663:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:4199:2426":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10569:15695":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:4113:7982":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:9534:15558":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4847:12500":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43412:7858":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:7891:2195":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:4596:14988":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:2180:35918":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:7086:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12372:18827":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"29:3788:20818":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"1:8829:2156":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:42308:7814":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:43803:7886":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11861:18795":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10334:15519":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:1947:15576":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:4665:2431":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:7699:2174":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"21:5:2390":{"crate_id":21,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"2:44239:8383":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:3182:34617":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:624:37117":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:9512:15560":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:2174:31927":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11502:18298":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:10338:7865":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11069:15537":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:3191:2347":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:11946:18800":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6793:15383":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:41473:2378":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"18:671:19651":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:43480:7881":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13812:19615":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12293:18821":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:7065:36339":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:21:683":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:5529:7939":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8271:2430":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10743:15523":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10855:26026":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:8416:2490":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:11497:26786":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:10451:2345":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"18:719:19647":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:40840:2355":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"29:4629:20874":{"crate_id":29,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"16:2404:14414":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12085:18809":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7467:15400":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"29:3775:20817":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"2:43504:2328":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:11471:18296":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:10255:26127":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:684:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10491:15696":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2928:2027":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:6561:2542":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:4597:26809":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:3934:2392":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:11197:2516":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:2931:14436":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:41747:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:2804:8239":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:7329:2029":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13265:19574":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5828:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11391:18290":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4878:1005":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:4435:12456":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5804:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:2481:2337":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12980:19553":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"14:165:14340":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7335:36356":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13488:19595":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:2034:2195":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:9032:22700":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:45606:2624":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"29:3877:20826":{"crate_id":29,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"29:4029:20841":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"2:30066:2381":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:8525:2495":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4983:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4684:12480":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4809:12495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:7971:2341":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12318:18823":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:44511:7788":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:32081:22465":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:2502:14418":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:11792:7873":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:5346:15330":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1499:9891":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13698:19608":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:41611:2156":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:40124:7998":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:43626:7862":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:42617:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12522:18837":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11866:25626":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4534:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2838:8242":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:488:8997":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10681:15733":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:526:9001":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3141:8248":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:44004:7910":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:41722:2154":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:8736:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11520:18299":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:9028:15515":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"28:2589:19824":{"crate_id":28,"path":["rustix","termios","types","OptionalActions"],"kind":"enum"},"17:13803:19614":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:5920:15347":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:7078:2156":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:6431:15369":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:1583:2176":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13211:19568":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13469:19593":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11930:744":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"28:0:1967":{"crate_id":28,"path":["rustix"],"kind":"module"},"2:8317:2476":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:9138:15517":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7596:15410":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:2791:8234":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:44420:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:21410:2612":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"20:3823:37252":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"1:11922:1372":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:45769:2625":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:2705:2116":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"30:51:22372":{"crate_id":30,"path":["bitflags","parser","AsDisplay"],"kind":"struct"},"17:11060:15536":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:21057:2598":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"20:3287:19678":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"17:11641:18308":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:4757:15053":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:4325:7976":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:4148:2425":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:45809:2637":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"15:198:14358":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"22:231:19759":{"crate_id":22,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"5:1137:34932":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4455:12458":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3406:2299":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:4587:2395":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:45828:2686":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4605:12474":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2160:8261":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"29:4638:20875":{"crate_id":29,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"20:1366:19701":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"17:8667:14376":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:1425:2155":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:1783:2218":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:28:2302":{"crate_id":21,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"29:4380:9003":{"crate_id":29,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"17:13651:19603":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10142:15684":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10354:15648":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"28:2393:37754":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"2:21791:30582":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:21912:30403":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4549:12470":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9424:15547":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:9690:30961":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:4853:12501":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"28:2183:37754":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"2:46305:30815":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:10051:2155":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:7043:2523":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12622:15536":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:8289:2459":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6327:15362":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:8422:7871":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:8183:2324":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"29:4191:20847":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:41450:30424":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"20:3196:184":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"2:40421:8196":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10864:2505":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12607:18843":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8947:2105":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:11778:7875":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:8548:15507":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"29:4159:20843":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"2:43462:7885":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:3996:2396":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:9223:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:5044:27250":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6021:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9973:15604":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:5013:27250":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:1594:2178":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:12361:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:7654:2185":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:3736:2196":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4625:12476":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:39366:7952":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:1505:9892":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:42294:7805":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7743:15417":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:5377:2503":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:2048:2196":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:3030:14438":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:40268:2209":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:45739:2619":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:20942:2604":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:11849:7899":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:5408:1980":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"28:1922:19825":{"crate_id":28,"path":["rustix","termios","types","OutputModes"],"kind":"struct"},"2:21180:2302":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:10231:7860":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:44311:8396":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:41772:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9557:15519":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:8109:15427":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:4144:7983":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:6575:2543":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"20:4156:37324":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"26:127:37750":{"crate_id":26,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"11:311:35919":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:836:2167":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:43039:8368":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"26:0:1965":{"crate_id":26,"path":["anstyle"],"kind":"module"},"6:5835:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:30889:8018":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:42799:8031":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:47013:2622":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:30291:7935":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"28:1308:19813":{"crate_id":28,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"1:6505:2537":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10580:15729":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"29:4077:9000":{"crate_id":29,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"29:4411:20860":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"17:11600:18305":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:1910:10077":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13376:19583":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12224:18817":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:7488:15498":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:10699:25618":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:7231:8177":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"20:3904:19738":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"2:40143:2256":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7498:15403":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:1565:2156":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6390:15367":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:8521:15506":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:10343:2509":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6376:15366":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:12236:18818":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:2846:8244":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:2460:34507":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:6795:13600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:42092:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:9796:15581":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:635:2134":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:10196:7867":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:47853:7768":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:628:33490":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11299:18285":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:10029:26126":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:9221:7815":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:4349:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13411:19586":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:4568:14984":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:10352:7863":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:41671:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"28:1113:19812":{"crate_id":28,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"6:4379:12450":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:653:9058":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6867:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12019:18804":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:46359:30818":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:538:19662":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:80:19632":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11532:18300":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2391:1838":{"crate_id":1,"path":["std","io"],"kind":"module"},"20:4066:19713":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"11:1858:2178":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:3378:2313":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"20:2727:2155":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"17:8683:15484":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:23110:2379":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:2879:14434":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"29:3940:20832":{"crate_id":29,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"18:574:37095":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:2984:2212":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"29:3682:20811":{"crate_id":29,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"9:388:14211":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:3513:2159":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:3463:2251":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2752:2587":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:1526:9895":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:3883:19737":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"26:173:37748":{"crate_id":26,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"5:675:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:494:8998":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:45991:2672":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7259:2474":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:9340:15522":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:6651:8179":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:7215:2255":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:40346:31061":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"29:4591:20872":{"crate_id":29,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"16:8214:15433":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:7378:7936":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:7810:2293":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:43910:7906":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3233:7799":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:30257:2190":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:568:9007":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:1544:9897":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4728:12485":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:8310:15500":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:3962:2395":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"20:4015:27231":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11191:27233":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:7966:27242":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"20:3841:37254":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"1:4706:2410":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"20:3469:19687":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"2:43357:7839":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"22:333:19763":{"crate_id":22,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"17:11628:18307":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:1062:2170":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"27:5:2334":{"crate_id":27,"path":["is_terminal","IsTerminal"],"kind":"trait"},"17:13249:19572":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11410:18291":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4763:12489":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12835:19547":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:39983:7968":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:5998:15351":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:21844:30431":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8777:2510":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"29:4167:20844":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"17:9721:15578":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"29:3957:20834":{"crate_id":29,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"1:11224:23117":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:5787:2540":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:365:35907":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13344:19580":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:2786:14430":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:7657:2188":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:11738:2496":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:5886:15346":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:5933:2544":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11932:746":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:48009:7776":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:7599:2302":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5079:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:6460:15371":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:41344:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:46085:2626":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:242:37083":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:11056:26829":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:9225:7812":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"20:3431:19696":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"1:3233:2350":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:39261:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:657:2156":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10257:15645":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:8256:15479":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:480:30358":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"29:4611:20873":{"crate_id":29,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"2:45791:2631":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:3741:1984":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"16:4932:15084":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"29:4259:20854":{"crate_id":29,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:13453:19591":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13066:19559":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:5860:2528":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"29:3709:20814":{"crate_id":29,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"2:40337:8190":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6671:14355":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:3749:14453":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:45668:2659":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:7619:2112":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"20:3790:19736":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"2:46799:2633":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:4279:2427":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43708:7892":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12282:18820":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:9886:15602":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:6272:2159":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:20652:31989":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6336:15363":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"14:202:7916":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:6211:2544":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"22:245:19760":{"crate_id":22,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:12331:18824":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4474:12461":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:3158:37333":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"17:11446:18294":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"29:3950:20833":{"crate_id":29,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"2:1915:2200":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:2783:2588":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:21876:30425":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:4195:2313":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7366:15396":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"29:4132:9046":{"crate_id":29,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"1:2215:2273":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"13:110:35979":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:43796:7876":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9596:15561":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"23:0:1962":{"crate_id":23,"path":["anstyle_parse"],"kind":"module"},"6:4327:12446":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:40867:8175":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10092:15683":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6179:15354":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12006:18803":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13169:19565":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10052:15660":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:5963:15349":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"26:210:19792":{"crate_id":26,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"17:13316:19577":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8195:2373":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:43956:7909":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"14:0:1827":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:43925:7907":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"18:652:37095":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:798:2164":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"11:805:2165":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:4783:2405":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2821:8238":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8104:2354":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:6893:25985":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:9658:30967":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4340:12447":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:12579:2735":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:5950:2313":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:3782:14462":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:3162:7966":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5057:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:6170:13214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:4531:2449":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:7698:30380":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:4135:2424":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:40369:8193":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"30:67:22375":{"crate_id":30,"path":["bitflags","parser","ParseHex"],"kind":"trait"},"6:6617:13593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"20:66:1992":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"16:7449:15399":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:491:37106":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:11993:18802":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:4823:12497":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:42599:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:2691:7797":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:1666:1091":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:7282:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"30:90:22353":{"crate_id":30,"path":["bitflags","traits","Flag"],"kind":"struct"},"1:3315:2334":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:1672:9908":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9409:15546":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"29:4202:20848":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"16:4510:14974":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11355:18288":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10686:2291":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"29:3989:20836":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"1:11529:14366":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:6236:15357":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:44251:8376":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40825:2141":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:39327:2146":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:6624:2461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:20843:8261":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"28:2563:19834":{"crate_id":28,"path":["rustix","termios","types","SpecialCodes"],"kind":"struct"},"5:7064:34602":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"29:4340:20855":{"crate_id":29,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"6:5014:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:2933:15642":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:4097:29210":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10626:15731":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:7032:2182":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:1602:9903":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13145:19563":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:5104:15136":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"29:4508:2461":{"crate_id":29,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"6:4747:12487":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"29:3656:19840":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"29:3728:20816":{"crate_id":29,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"2:21738:30590":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"29:3828:20822":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"1:930:2164":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:3155:23279":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"29:3747:13591":{"crate_id":29,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"16:6254:15358":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:901:2159":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8076:2296":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:4290:12443":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11918:1521":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:43672:7891":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13292:19575":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6833:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:482:8996":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6662:15379":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13082:19560":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:3348:2355":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:7249:8956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:3216:34612":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:40398:8183":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"26:305:30380":{"crate_id":26,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:10657:2460":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:4760:2411":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"20:62:1991":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"6:5043:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:43726:7893":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:2969:34515":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:5990:8203":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:3152:29499":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:21189:2601":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"29:4483:20868":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"6:5817:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4677:2389":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"29:4069:9058":{"crate_id":29,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"11:399:35926":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"30:25:22370":{"crate_id":30,"path":["bitflags","iter","IterNames"],"kind":"struct"},"16:6696:15380":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:2169:34637":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:8813:2154":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:39574:23745":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:7688:2139":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:8883:2549":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"29:4142:12368":{"crate_id":29,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"1:8805:2512":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:6819:15384":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"28:2637:14249":{"crate_id":28,"path":["rustix","termios","types","Action"],"kind":"enum"},"9:352:14226":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:43787:7877":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"30:64:22374":{"crate_id":30,"path":["bitflags","parser","WriteHex"],"kind":"trait"},"16:6876:15386":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:11550:8386":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:5779:15343":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"13:0:1820":{"crate_id":13,"path":["std_detect"],"kind":"module"},"20:4028:37372":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"5:7123:2156":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4841:12499":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:40600:2326":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:9091:2306":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:4335:7977":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:4258:7970":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:11360:2376":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:47361:2628":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:4427:33423":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"20:3252:19683":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"5:7258:2254":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:1522:2194":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:4235:2154":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6321:15361":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"29:4229:20851":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"2:10324:7862":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:41892:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:4389:7979":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:9577:15563":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:9469:15550":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:4818:15066":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10823:15526":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8153:2325":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"29:4005:20838":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"1:11083:2306":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:6156:27243":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:10936:15532":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:11798:7872":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"29:3647:20808":{"crate_id":29,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"2:21900:2382":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4488:12463":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:40460:8199":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:8244:2428":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"29:3897:20828":{"crate_id":29,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"16:8090:15426":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"29:3867:12501":{"crate_id":29,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"2:2762:8230":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"29:4770:9007":{"crate_id":29,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"2:22039:2383":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:21973:30401":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:40628:8201":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13477:19594":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:3047:14439":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:20982:2611":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:6788:33469":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:42846:31058":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"23:89:19768":{"crate_id":23,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"2:22597:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:8348:2470":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:40056:7887":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:11258:18283":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:43370:7840":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7572:36239":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:7516:12685":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13257:19573":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:21516:31786":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10416:15724":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:44278:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"26:334:19796":{"crate_id":26,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"17:13053:19558":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:2965:34513":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9488:15565":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1662:9907":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:755:19656":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:41662:8324":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"11:817:2166":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2364:2282":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6129:13212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"24:89:1990":{"crate_id":24,"path":["utf8parse","Parser"],"kind":"struct"},"2:46863:2688":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:40360:8192":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:781:2179":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13721:19609":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12496:18835":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"20:3535:19702":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"2:3647:2156":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5978:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6981:15391":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11969:18801":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"18:699:19654":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:7815:2294":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"21:112:19742":{"crate_id":21,"path":["clap_lex","ArgCursor"],"kind":"struct"},"26:347:19797":{"crate_id":26,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"20:3710:19710":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"17:10440:15726":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4793:12493":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:5032:15112":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9853:15628":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:7539:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:40834:8171":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3703:2375":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:4033:33415":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:7015:2192":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:42815:8030":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:4601:26813":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:7411:15397":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:1785:2219":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:2546:14420":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12449:18832":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:46207:2694":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:96:19633":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"20:3832:37256":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"6:4400:12452":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"22:348:19764":{"crate_id":22,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"2:42315:7815":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"20:3943:37381":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"5:7024:2156":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:9127:27231":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:22465:2117":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:7661:8176":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:13426:19588":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8821:2553":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:844:2168":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:590:31024":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4928:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4817:12496":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6506:15374":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:40308:8187":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:10977:30360":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:47719:2640":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:44481:2734":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:22564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:11941:1131":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"20:3191:37465":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"29:4776:20881":{"crate_id":29,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"6:4505:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"32:72:22404":{"crate_id":32,"path":["strsim","StrSimError"],"kind":"enum"},"17:11339:18287":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:46439:2655":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:45538:2653":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:47549:2634":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12592:18842":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:7757:15418":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:62:8624":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"14:187:14347":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"21:98:19741":{"crate_id":21,"path":["clap_lex","RawArgs"],"kind":"struct"},"6:4482:12462":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:40470:8184":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:40859:8173":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:47822:7765":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:562:9006":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2842:8243":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13101:19544":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:894:2154":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"22:153:19750":{"crate_id":22,"path":["anstream","lockable","Lockable"],"kind":"trait"},"1:8315:2408":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"29:4753:20879":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"1:8366:2489":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:9148:37080":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10478:15697":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:40318:8188":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11459:18295":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6535:36011":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:2470:14417":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6606:13592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11136:15742":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4937:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:9350:37086":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:5343:2501":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:4847:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"14:31:14339":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:5954:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6774:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:4868:2456":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:11615:18306":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:22498:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:40034:8005":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"28:1976:37754":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"29:3736:8880":{"crate_id":29,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"17:11234:18282":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"20:4102:8191":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"2:12671:2184":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:7054:2183":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:1594:9902":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8867:2551":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"20:3046:19679":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"28:1531:37754":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"18:521:19657":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:42132:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:1637:9905":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:547:9004":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"29:3701:20813":{"crate_id":29,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"5:3721:2195":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:47947:7774":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4303:12444":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:3528:19685":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"2:44473:2733":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"8:0:1822":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:40072:7886":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"20:1619:19721":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"2:40389:8194":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"29:4571:10020":{"crate_id":29,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"2:20995:2302":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:4010:2398":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:43490:2327":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:5235:33415":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:5766:13161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:857:2155":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:40411:8195":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13443:19590":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10840:15527":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"23:132:2490":{"crate_id":23,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"11:630:2154":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8237:2369":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:582:8018":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:44255:8377":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"11:1068:14329":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2694:14426":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12126:18812":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:10310:7864":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:45638:2654":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:10448:2349":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:41812:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:4165:2313":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:4003:2159":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10705:15735":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:2130:2101":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:3585:14444":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:2580:2330":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4419:12454":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"29:3857:20825":{"crate_id":29,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"15:180:14357":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:676:2137":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13689:19607":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:44243:8381":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:39283:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11478:7782":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:9228:37075":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:14:1941":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:6763:33447":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13461:19592":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:9219:7814":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10068:15681":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13332:19579":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11422:18292":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:8263:2374":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11931:745":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:12004:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:1494:9890":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13516:19598":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11090:15538":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"26:113:37749":{"crate_id":26,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"6:6066:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:9410:2294":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:6621:7940":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4412:12453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:47219:2656":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6544:15376":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13159:19564":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:8200:2365":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12072:18808":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:9933:15605":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:10104:15639":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:1689:9910":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:1034:15566":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4799:12494":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:11940:1559":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:45893:2595":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:22663:2385":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"20:3396:19693":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"17:10798:15525":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:1561:2154":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:2468:2302":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"32:0:1971":{"crate_id":32,"path":["strsim"],"kind":"module"},"1:2219:2274":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:6218:15356":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"29:3720:20815":{"crate_id":29,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"2:43331:7841":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:3329:2160":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:3078:2213":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13385:19584":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10615:15721":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:9213:1987":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:44438:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:8858:15513":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:5840:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:43383:7856":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:44536:31093":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:3472:29672":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7437:15398":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:5876:8598":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"22:286:19757":{"crate_id":22,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"20:58:1987":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"6:5736:13099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"29:4356:9005":{"crate_id":29,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"17:9628:15555":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:2222:34646":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"29:4437:20863":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"6:6804:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12046:18806":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:44299:2591":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"20:3402:19694":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"2:20622:31783":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:1636:8158":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"29:4463:20866":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"16:3446:14443":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13639:19602":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:9675:30346":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4314:12445":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:8389:15502":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9453:15549":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:636:37118":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:39359:8249":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13367:19582":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:9215:7806":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11832:15686":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:9428:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:3063:14440":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:4943:2313":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:25920:2380":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2337:14411":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:20669:31987":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:12423:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:11315:8338":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:12358:18826":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:2808:14431":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:20650:31992":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11544:18301":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"20:4043:37157":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:47813:7764":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:3231:2349":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:45514:2617":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10000:15678":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:43768:7889":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4886:12504":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"20:3475:19690":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"2:41679:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:9566:15520":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6990:15392":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:1256:2169":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:1787:15582":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13324:19578":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:42807:31007":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:7296:7917":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7016:36408":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"9:234:2490":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:4702:2406":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"20:2705:2154":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"20:4183:1985":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"5:7271:7827":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:8823:15512":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:10445:2347":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"9:174:14313":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:6840:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:21935:30444":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"10:0:1824":{"crate_id":10,"path":["adler"],"kind":"module"},"1:3638:2372":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:7170:2152":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:7556:30336":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:8984:27211":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:21077:2601":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9312:15521":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:1732:8273":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:6983:2354":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"20:2906:37386":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"5:4394:2313":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:10857:15528":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10721:15700":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:46137:2638":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:47932:7773":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:11337:26117":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:9072:2554":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"20:1185:19699":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"22:262:19761":{"crate_id":22,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:47868:7769":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4462:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44223:8375":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13419:19587":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:5876:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11573:18303":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10598:15533":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:9110:2586":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:2524:14419":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:22366:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11220:15745":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:44093:7914":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"20:3780:2158":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"16:5741:15342":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:40155:30440":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4:1018":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:11783:7871":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6135:12360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:8315:2478":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13015:19554":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11101:23426":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:11044:2511":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"22:434:19752":{"crate_id":22,"path":["anstream","strip","StripStream"],"kind":"struct"},"16:2967:14437":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"28:1097:19810":{"crate_id":28,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"17:10545:15534":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"29:4212:20849":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"17:12138:18813":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"28:1701:19828":{"crate_id":28,"path":["rustix","termios","types","Termios"],"kind":"struct"},"6:7277:13976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:32085:8295":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:41521:2371":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:10870:7855":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"22:170:2302":{"crate_id":22,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"17:10505:15727":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"29:4053:12448":{"crate_id":29,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"18:614:37113":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10712:15736":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:11934:1505":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:2743:7796":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:7519:15405":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:9208:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"20:3543:22353":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"2:21011:2596":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:9592:8351":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:10377:15646":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"29:4388:20857":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"2:43821:7887":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:11064:8395":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:3225:14441":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"20:3330:19708":{"crate_id":20,"path":["clap_builder","builder","styled_str","Styles"],"kind":"struct"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13777:19612":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"21:32:2328":{"crate_id":21,"path":["clap_lex","ext","Split"],"kind":"struct"},"18:690:19653":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40091:8000":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:40185:2257":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:8741:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9653:15594":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:5589:8182":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:41730:2155":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4954:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"23:96:19770":{"crate_id":23,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"28:1507:19811":{"crate_id":28,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"6:5007:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"22:402:19753":{"crate_id":22,"path":["anstream","buffer","Buffer"],"kind":"struct"},"6:6670:10020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:9907:15630":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:3488:2322":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"29:4648:20876":{"crate_id":29,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"6:6647:10035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:10876:25612":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:5797:36278":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"29:4243:20853":{"crate_id":29,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"14:215:14348":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:6865:30350":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:55:14377":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:3270:2345":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:6470:33415":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"20:0:1707":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"20:4090:37323":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"20:50:1988":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"29:4760:20880":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"17:10039:15638":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:9213:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11899:25569":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"20:4082:19712":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"11:736:2158":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:2469:8022":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:5792:13163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:6719:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5993:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"7:79:14188":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"22:63:19770":{"crate_id":22,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"16:2830:14432":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5643:15336":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:22333:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:8909:2327":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5848:13127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13309:19576":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:5383:2313":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:21063:2600":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6400:15368":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:10158:7853":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"29:4251:9914":{"crate_id":29,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"29:4037:8998":{"crate_id":29,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"1:4599:26811":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:595:9011":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:40328:8189":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:1517:14332":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:3062:19705":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"16:6943:15390":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:2811:8236":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"20:3874:37255":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"6:4916:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:11721:18790":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:5594:15333":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:30297:8222":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"29:4185:20846":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"17:10283:15644":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13399:19585":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:7245:2253":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12403:18829":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:6355:27190":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:30385:30552":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"11:1818:2154":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:7551:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:247:37085":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:1491:2162":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:10741:2297":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10635:15722":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:11345:7879":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:1048:35925":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"32:32:22390":{"crate_id":32,"path":["strsim","StringWrapper"],"kind":"struct"},"17:13506:19597":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"23:290:19772":{"crate_id":23,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"17:11891:18797":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:9380:15545":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11556:18302":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:4006:2397":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:42590:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:3481:2300":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"28:2613:19826":{"crate_id":28,"path":["rustix","termios","types","QueueSelector"],"kind":"enum"},"11:1611:35905":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:727:19655":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:0:820":{"crate_id":6,"path":["libc"],"kind":"module"},"5:273:2031":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:554:9005":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:44430:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"20:3078:19706":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"29:4803:20884":{"crate_id":29,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"20:1612:19717":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"6:4649:12478":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:10681:27326":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"11:793:2161":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:43778:7878":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:8922:2533":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"9:52:14229":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13821:19616":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:9361:31915":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"20:3803:19735":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"6:4991:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:530:2106":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"22:301:19758":{"crate_id":22,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"5:1010:33415":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:500:8999":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"20:1614:19718":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"20:3186:37373":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"1:11929:747":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"9:421:14212":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11785:18792":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:10119:7866":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:3934:2313":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12799:19546":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:3815:14471":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:46517:2661":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:44068:7912":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:8195:15481":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:12894:19548":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:7543:15407":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:45690:2665":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"30:141:37969":{"crate_id":30,"path":["bitflags","traits","ImplementedByBitFlagsMacro"],"kind":"trait"},"2:40430:8197":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:8142:15429":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:7307:7918":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"11:2201:2152":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"28:303:37769":{"crate_id":28,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"6:4948:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11163:15743":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:1272:2171":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:506:9000":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9098:15516":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:1535:9896":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:1287:2170":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"20:3725:19726":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"17:13865:19619":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12307:18822":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:39139:7801":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"11:1831:2160":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:5708:15340":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:11601:7866":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:2378:14413":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:10894:2512":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11821:15685":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8163:2326":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:12259:18819":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:8170:15431":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:5571:15332":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:1852:2177":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:39217:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"20:3215:2105":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"20:2922:37316":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"5:6631:7941":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:46829:2639":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"22:423:37655":{"crate_id":22,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:22432:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:7077:15393":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:6644:27190":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:39401:7961":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"29:4500:20870":{"crate_id":29,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"2:43554:7895":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:43054:31064":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11844:18794":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:285:35921":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40218:2271":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:7683:15414":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"20:3758:19728":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"20:3117:1980":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"17:11902:18798":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:12448:8026":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13233:19570":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"14:40:18284":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:43888:7905":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:3177:2176":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:660:19650":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6704:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:355:2125":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:4119:2422":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:3956:2394":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:3640:14445":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5798:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7859:15422":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:8420:15503":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"22:417:19749":{"crate_id":22,"path":["anstream","auto","AutoStream"],"kind":"struct"},"22:382:2490":{"crate_id":22,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"2:3196:7798":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4555:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"26:261:19793":{"crate_id":26,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"6:6155:13213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:9471:8028":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11653:18309":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:47842:7767":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:1103:14330":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:39100:7964":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:4845:15069":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11032:2510":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4769:12490":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:10491:2111":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:11282:18284":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"29:4099:8999":{"crate_id":29,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"17:9068:37090":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:43310:7850":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4861:12502":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:4186:7828":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10303:15640":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:20952:8261":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:40044:8006":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:5367:14380":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:8508:2154":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:867:2156":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:3998:30978":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:2905:14435":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10851:2238":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:5677:15338":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:11938:1501":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:599:37100":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"29:3758:14164":{"crate_id":29,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"13:226:35932":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:30327:30534":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:204:7804":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"20:4163:1986":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"16:4480:14968":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"29:4454:20865":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"1:6780:2592":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7103:15394":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:7767:15419":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:46563:2667":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:6935:22651":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:4586:12473":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5067:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:20815:2607":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:7827:2295":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:7820:2291":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:7198:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:7545:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:707:7873":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2212:2272":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:7227:8178":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:975:15562":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13033:19556":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"29:4735:20878":{"crate_id":29,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"17:10691:15734":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13240:19571":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:47673:2689":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"29:4796:20883":{"crate_id":29,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"17:11770:18791":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13194:19567":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6007:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:8072:15425":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"29:3926:20831":{"crate_id":29,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"2:43291:7848":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11883:29908":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:5944:15348":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:22051:2386":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6854:15385":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:8360:15501":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:41367:2366":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12550:18839":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:3170:2154":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:7043:29213":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:9322:37076":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7499:26022":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:41586:8252":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"10:44:14318":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:2616:14423":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"12:0:1826":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:5071:15127":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:8573:15508":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:4704:2409":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:46039:2620":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11434:18293":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5024:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:3385:7948":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:12194:18816":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:8283:15499":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:22399:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:8256:15434":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:1410:2154":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2855:8246":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:44031:7911":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:47970:7775":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:2921:2025":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"11:1538:14333":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:10676:26796":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:8759:2509":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:3898:2391":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"11:2060:2171":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:1101:34931":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:8293:2461":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:6834:8167":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40277:2325":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:44259:8395":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"29:3966:12486":{"crate_id":29,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"7:32:14181":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:35:2214":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:8954:22538":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"15:0:1828":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:4753:12488":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:43608:7864":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:42824:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:481:19658":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:12568:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"29:4061:9008":{"crate_id":29,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"1:6432:2541":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:10238:1980":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4373:12449":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:7837:2292":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:5073:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:1924:2250":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"29:4310:13168":{"crate_id":29,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"17:9734:15577":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:585:2128":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:1826:2159":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:43758:2324":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4832:12498":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:40098:8001":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:2426:14415":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"29:4174:20845":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"6:1716:9913":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:44494:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12433:18831":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:41738:2156":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"9:445:14210":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"29:4238:20852":{"crate_id":29,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"1:8514:2494":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:1775:2160":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"29:4551:9850":{"crate_id":29,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"16:5811:15344":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:40004:30519":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:2544:2338":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:1822:2156":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:926:2163":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"20:1114:19700":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"1:5593:2545":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4972:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4943:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6361:15365":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12770:19545":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12098:18810":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"20:3306:2105":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"6:6572:9850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:2620:2340":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:43231:31916":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6717:14354":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:46183:2693":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"29:3906:20829":{"crate_id":29,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"17:13879:19620":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9218:15519":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:10386:30341":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7478:15401":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6061:14381":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:4872:15072":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9876:15629":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4445:12457":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:487:15497":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:7837:15421":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11254:23385":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8977:27267":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"20:4130:37370":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"16:4702:15046":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:0:1963":{"crate_id":24,"path":["utf8parse"],"kind":"module"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:4728:15048":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"27:0:1966":{"crate_id":27,"path":["is_terminal"],"kind":"module"},"2:47833:7766":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12959:19552":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:6391:2156":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1574:9900":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13499:19596":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4542:12469":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:42836:2490":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:1071:2171":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10670:15723":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"20:3408:19689":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"6:4694:12481":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13356:19581":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13842:19617":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:2961:34517":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:119:35909":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:2931:2028":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6904:15388":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:953:2167":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:47471:2662":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:42172:2529":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6868:36157":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:4877:2457":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:4969:15097":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13181:19566":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:43402:7857":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:21634:2599":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4780:12491":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:40248:7839":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:20637:31783":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"11:97:35924":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:4789:15061":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:44103:7915":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:44227:8378":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6564:9046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2764:14429":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:968:2169":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5899:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"29:4107:12511":{"crate_id":29,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"22:163:19751":{"crate_id":22,"path":["anstream","raw","RawStream"],"kind":"trait"},"6:4637:12477":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:4437:2431":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"20:4096:37172":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"1:6396:2534":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:4351:2421":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:4400:14936":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"7:0:1549":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6520:15375":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:7645:2111":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:21927:31054":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:43812:2130":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9178:15518":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:11924:1486":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:9275:37081":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:736:19648":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"30:124:22352":{"crate_id":30,"path":["bitflags","traits","Bits"],"kind":"trait"},"1:3948:2393":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7042:36292":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"21:157:19744":{"crate_id":21,"path":["clap_lex","ShortFlags"],"kind":"struct"},"1:1589:2177":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"20:3698:19709":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"2:21187:2605":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"11:0:1825":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:9822:15588":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:7598:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7488:15402":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:4327:14887":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:8443:15504":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:7510:12684":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:44231:8380":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:5919:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:4811:798":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:0:1829":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:2740:2024":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:9476:8029":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:7961:27213":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4739:12486":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:2140:34618":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"25:0:1964":{"crate_id":25,"path":["colorchoice"],"kind":"module"},"1:5586:2544":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:8120:2297":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:3193:2348":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:2168:35917":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8249:2429":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:5986:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4468:12460":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"29:3799:20819":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"6:1680:9909":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:1695:9911":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:20609:8018":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:10711:2295":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:7362:2160":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:8490:15505":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"20:35:1990":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"1:10010:2229":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"22:0:1961":{"crate_id":22,"path":["anstream"],"kind":"module"},"16:7509:15404":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:4904:15080":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"11:403:35927":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:6728:15381":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:21055:2302":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4962:12513":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43474:7882":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:535:36018":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"23:304:19773":{"crate_id":23,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"29:4366:20856":{"crate_id":29,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"2:46675:2621":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"20:3893:19727":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"6:1648:9906":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:11935:1502":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"20:3342:1981":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"17:10125:15659":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:4010:30953":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:6139:2737":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:4605:7992":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:1568:2159":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11800:18793":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:10555:15693":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7626:15411":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5889:13171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"26:282:19794":{"crate_id":26,"path":["anstyle","color","RgbColor"],"kind":"struct"},"6:7271:13975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"22:208:19762":{"crate_id":22,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:0:1394":{"crate_id":1,"path":["std"],"kind":"module"},"1:643:2136":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:3424:2298":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13433:19589":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10923:15531":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:11939:792":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"20:3237:19681":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"26:360:19798":{"crate_id":26,"path":["anstyle","reset","Reset"],"kind":"struct"},"6:587:9010":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12158:18814":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"20:742:37464":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"5:877:2181":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:5064:2528":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"29:4420:20861":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"6:1512:9893":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:6124:30355":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:11109:15539":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11879:18796":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:9748:15519":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"25:41:19785":{"crate_id":25,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"1:4127:2423":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:9906:22758":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:5279:7832":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:1931:655":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:7244:36365":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:113:19634":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:7537:30356":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:39977:2130":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:1481:2161":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:2757:2589":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:2033:2169":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:3142:15647":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8111:2356":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"14:221:14349":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:8953:15514":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:40849:8172":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:4367:12448":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2980:2211":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:2779:8231":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:42562:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:4075:2155":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"20:1367:1990":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"5:6602:7939":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12646:18845":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10589:15730":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:501:2101":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"20:3311:19684":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"29:4534:20871":{"crate_id":29,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"18:609:37127":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12510:18836":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"20:3771:19734":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"30:11:2154":{"crate_id":30,"path":["bitflags","iter","Iter"],"kind":"struct"},"5:7115:2156":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10649:15732":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:43572:7894":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:5756:2159":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6132:15353":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"29:3665:20809":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"5:2958:7790":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:41401:2368":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:1820:2199":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:7875:23275":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:2787:2590":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:3904:2390":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"28:1336:37754":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"2:40138:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7803:15420":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"9:325:14265":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:2910:2191":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11585:18304":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"29:4474:20867":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"6:4722:12484":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:47757:2674":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:39394:7977":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:13857:19618":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"30:99:22354":{"crate_id":30,"path":["bitflags","traits","Flags"],"kind":"trait"},"17:12536:18838":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:21504:2593":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:41603:2155":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"29:4811:20885":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"30:172:7916":{"crate_id":30,"path":["bitflags","parser","ParseError"],"kind":"struct"},"29:4221:20850":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"6:7294:13977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:30313:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:1978:15600":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:46161:2687":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:2962:7800":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4394:12295":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:47795:2695":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:10316:15641":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10428:15725":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:5616:15334":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:5630:15335":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:11484:18297":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"14:7:14339":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"23:26:19776":{"crate_id":23,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"2:42534:31006":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:11490:27255":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:4364:33423":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11011:15483":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:43300:7852":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:3266:15665":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"29:3834:20823":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"1:7624:2114":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:4540:14980":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:12345:18825":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:40290:8180":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:4624:14992":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:44523:7786":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:6890:15387":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"24:53:2490":{"crate_id":24,"path":["utf8parse","types","State"],"kind":"enum"},"2:40818:31043":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:1844:1987":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10761:15524":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:1556:9898":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:21156:2302":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:8997:15394":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6201:15355":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:44136:7897":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13625:19601":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:2049:2170":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:11401:2375":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"20:923:19682":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"2:45939:2660":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"29:4045:8997":{"crate_id":29,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"16:8025:15423":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"20:3220:19680":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"1:10960:19798":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:9149:26776":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:1671:33415":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:11566:8388":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9443:15548":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5862:13128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:936:2165":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:6743:13598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6474:15372":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:8791:2511":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:695:2163":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:3801:2160":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:12461:18833":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10885:15529":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4517:12466":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:11916:940":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:5462:2505":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:3700:2376":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10967:15533":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3805:2377":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:41595:2154":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:2689:34532":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:2186:35914":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11927:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8439:2491":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:41932:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:7504:12683":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:46258:30816":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:638:2135":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:9188:37087":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:9183:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6687:10018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"}},"external_crates":{"31":{"name":"anstyle_query","html_root_url":null},"28":{"name":"rustix","html_root_url":null},"25":{"name":"colorchoice","html_root_url":null},"22":{"name":"anstream","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"strsim","html_root_url":null},"29":{"name":"linux_raw_sys","html_root_url":null},"26":{"name":"anstyle","html_root_url":null},"23":{"name":"anstyle_parse","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/2.3.3/"},"27":{"name":"is_terminal","html_root_url":null},"24":{"name":"utf8parse","html_root_url":null},"21":{"name":"clap_lex","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}