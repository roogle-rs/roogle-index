{"root":"0:0:1721","crate_version":"4.3.12","includes_private":false,"index":{"2:12087:26636":{"id":"2:12087:26636","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:30967":{"id":"2:12099:30967","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43526:7885","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:34022":{"id":"2:12105:34022","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43820:7892","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:26076":{"id":"2:12196:26076","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:26677":{"id":"2:12142:26677","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11978:418","str::splitn":"2:12139:26675","self::pattern":"2:11776:7878"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43678:7865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12170:34034":{"id":"2:12170:34034","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:26637":{"id":"2:12089:26637","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:34039":{"id":"2:12189:34039","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5447:26075":{"id":"5:5447:26075","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12198:26078"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:34694":{"id":"5:5432:34694","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:34027":{"id":"2:12154:34027","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11776:7878","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:1942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43778:7896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12124:22571":{"id":"2:12124:22571","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11776:7878","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split_whitespace":"2:12102:30976","str::rsplit":"2:12130:26673"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43556:2332","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12130:26673":{"id":"2:12130:26673","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11776:7878","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split":"2:12124:22571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43574:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:34038":{"id":"2:12186:34038","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:30975":{"id":"2:12103:30975","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12102:30976"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43839:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:34019":{"id":"2:12084:34019","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:34018":{"id":"2:12080:34018","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12078:34017"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:19776":{"id":"2:12116:19776","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:26639":{"id":"2:12093:26639","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:816":{"id":"2:12075:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11978:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:30997":{"id":"2:12100:30997","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43532:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:34024":{"id":"2:12136:34024","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11776:7878","str::split":"2:12124:22571","prim@char":"1:11978:418","str::split_terminator":"2:12133:34023"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43624:7897","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:34035":{"id":"2:12171:34035","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11801:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:34037":{"id":"2:12183:34037","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12157:34028":{"id":"2:12157:34028","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11776:7878","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::rmatch_indices":"2:12160:34029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43706:7893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:34017":{"id":"2:12078:34017","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5435:34695":{"id":"5:5435:34695","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:34031":{"id":"2:12165:34031","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:34040":{"id":"2:12192:34040","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11737:127","`FromStr`":"2:11736:2500"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11736:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11736:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:34696":{"id":"5:5443:34696","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:1942":{"id":"2:12151:1942","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11776:7878","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:1942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43760:7895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:23009":{"id":"2:12177:23009","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:26681":{"id":"2:12113:26681","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12145:34025":{"id":"2:12145:34025","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:34030":{"id":"2:12163:34030","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:34016":{"id":"2:12077:34016","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:314":{"id":"2:12085:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12086:26640","`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:26621":{"id":"2:12076:26621","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:22572":{"id":"2:12104:22572","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43810:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:34021":{"id":"2:12096:34021","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11984:1406","crate::ops::IndexMut":"2:2982:2216","str::slice_unchecked":"2:12095:34020"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:34041":{"id":"2:12199:34041","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:34041"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43855:7889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12202:34042":{"id":"2:12202:34042","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:34042"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43873:7890","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:34029":{"id":"2:12160:34029","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11776:7878","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::match_indices":"2:12157:34028"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43724:7894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:26662":{"id":"2:12097:26662","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12098:26663"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:30976":{"id":"2:12102:30976","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12103:30975"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43830:7881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12195:27929":{"id":"2:12195:27929","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39626:27925","Self::is_ascii":"2:12194:26072"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39626:27925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:2356":{"id":"5:5445:2356","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1711":{"id":"0:3-20:0:1711","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1711","glob":true}}},"2:12101:22820":{"id":"2:12101:22820","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43542:2331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:19777":{"id":"2:12120:19777","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:34032":{"id":"2:12167:34032","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12148:34026":{"id":"2:12148:34026","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:26675":{"id":"2:12139:26675","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878","str::rsplitn":"2:12142:26677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43660:7867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12083:23759":{"id":"2:12083:23759","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11343:7882"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12127:26671":{"id":"2:12127:26671","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11599:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:26638":{"id":"2:12091:26638","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:26078":{"id":"2:12198:26078","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:26074":{"id":"5:5446:26074","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12197:26077"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:34036":{"id":"2:12174:34036","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:34020":{"id":"2:12095:34020","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11984:1406","str::slice_mut_unchecked":"2:12096:34021","crate::ops::Index":"2:2978:2215"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:34697":{"id":"5:5444:34697","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2035","`String`":"5:7283:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2035","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12180:26682":{"id":"2:12180:26682","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:26663":{"id":"2:12098:26663","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12097:26662"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:26072":{"id":"2:12194:26072","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12074":{"id":"2:12074","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12075:816","2:12076:26621","2:12077:34016","2:12078:34017","2:12080:34018","2:12083:23759","2:12084:34019","2:12085:314","2:12086:26640","2:12087:26636","2:12089:26637","2:12091:26638","2:12093:26639","2:12095:34020","2:12096:34021","2:12097:26662","2:12098:26663","2:12099:30967","2:12100:30997","2:12101:22820","2:12102:30976","2:12103:30975","2:12104:22572","2:12105:34022","2:12106:30968","2:12107:26679","2:12110:26680","2:12113:26681","2:12116:19776","2:12120:19777","2:12124:22571","2:12127:26671","2:12130:26673","2:12133:34023","2:12136:34024","2:12139:26675","2:12142:26677","2:12145:34025","2:12148:34026","2:12151:1942","2:12154:34027","2:12157:34028","2:12160:34029","2:12163:34030","2:12165:34031","2:12167:34032","2:12169:34033","2:12170:34034","2:12171:34035","2:12174:34036","2:12177:23009","2:12180:26682","2:12183:34037","2:12186:34038","2:12189:34039","2:12192:34040","2:12194:26072","2:12195:27929","2:12196:26076","2:12197:26077","2:12198:26078","2:12199:34041","2:12201:2133","2:12202:34042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5428:34693":{"id":"5:5428:34693","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2035","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2035","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:34033":{"id":"2:12169:34033","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5427":{"id":"5:5427","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5428:34693","5:5429:8222","5:5432:34694","5:5435:34695","5:5443:34696","5:5444:34697","5:5445:2356","5:5446:26074","5:5447:26075"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12086:26640":{"id":"2:12086:26640","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1721":{"id":"0:0:1721","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[120,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1711"],"is_stripped":false}}},"2:12201:2133":{"id":"2:12201:2133","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:2133"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43864:2134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:26077":{"id":"2:12197:26077","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:26680":{"id":"2:12110:26680","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:26679":{"id":"2:12107:26679","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:7878"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:34023":{"id":"2:12133:34023","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11776:7878","str::split":"2:12124:22571","prim@char":"1:11978:418","`DoubleEndedIterator`":"2:7304:121","str::rsplit_terminator":"2:12136:34024"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43606:7898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:30968":{"id":"2:12106:30968","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43848:7879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:8222":{"id":"5:5429:8222","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:5890:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:2399:14425":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13719:19696":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:14315:19742":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:690:19784":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:311:36072":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:562:9009":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:8980:2109":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12994:18964":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:41672:2478":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:39439:31285":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:46615:2670":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:40300:7842":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6323:15377":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"13:0:1825":{"crate_id":13,"path":["std_detect"],"kind":"module"},"20:3719:19840":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"2:2738:2028":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:2693:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"29:3966:12491":{"crate_id":29,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"26:305:33257":{"crate_id":26,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"30:67:22506":{"crate_id":30,"path":["bitflags","parser","ParseHex"],"kind":"trait"},"17:12161:18438":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:494:9001":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:9442:37165":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:11488:8390":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:43830:7881":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2923:2030":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:20972:2610":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:4413:12458":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10199:15613":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11498:15548":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"20:1633:19848":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"5:5841:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"18:681:19783":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"28:1976:37920":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"20:3199:37620":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"1:6894:28891":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:8974:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6077:13190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"29:4776:21012":{"crate_id":29,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"6:6598:13596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:5065:2532":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:8233:2369":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:5615:2548":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:6841:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:9344:37046":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:3991:2399":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:5015:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"29:4276:13104":{"crate_id":29,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"22:245:19891":{"crate_id":22,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"2:44311:8398":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:7558:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:7652:2116":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12671:18944":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"20:3014:1986":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"16:2589:14433":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"29:4380:9006":{"crate_id":29,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"28:2664:37923":{"crate_id":28,"path":["rustix","pid","Pid"],"kind":"struct"},"16:6502:15389":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"29:3821:20952":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"17:13427:19680":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:5651:15352":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:14301:19741":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:4177:2429":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:40911:8176":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:4148:2426":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:41419:2370":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"29:4238:20983":{"crate_id":29,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"2:40320:2213":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"29:4267:13166":{"crate_id":29,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"29:3957:20965":{"crate_id":29,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"17:11220:15773":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5920:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:3777:14473":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"20:1114:19831":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"16:5028:15124":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4380:12455":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:8252:15449":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:2688:2027":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:8659:15515":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4723:12489":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4955:2470":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:7665:15428":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:11252:23018":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"20:3423:19825":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"1:3510:2304":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4304:12449":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:4236:2158":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"29:3720:20946":{"crate_id":29,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"5:878:2185":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13140:18974":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:1672:34790":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"20:3241:19811":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"17:14359:19746":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:11548:8389":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13303:19677":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:3178:2180":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:42346:7808":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"29:4411:20991":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1:4560:2453":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:1591:2182":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:42360:7817":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:7128:25571":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"20:4103:19843":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"1:8304:2434":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10249:15618":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:10716:2464":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:3933:2394":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6470:15387":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4854:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:8313:2482":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4944:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:5775:15358":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:10471:15667":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:4664:12484":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10266:15604":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10280:15659":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:1636:8161":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:40150:8004":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11981:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11241:15775":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"29:4132:9049":{"crate_id":29,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"6:4291:12448":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5673:15353":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9665:37045":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"20:3964:37507":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"1:7020:25648":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:44575:7789":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:40892:2359":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:10633:15678":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"20:3513:19823":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"1:1782:2223":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:1911:10081":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:4928:15096":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12479:18931":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:2519:14430":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:44472:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"30:64:22505":{"crate_id":30,"path":["bitflags","parser","WriteHex"],"kind":"trait"},"2:2765:8232":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:488:9000":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13043:18967":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"20:3490:19818":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"17:12346:15726":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"27:5:2338":{"crate_id":27,"path":["is_terminal","IsTerminal"],"kind":"trait"},"16:4396:14948":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:5025:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:6603:7942":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5704:15355":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:276:2035":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11483:2381":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"20:3179:37509":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"1:10910:2242":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:526:9004":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:579:9012":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"18:590:30984":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:8605:15494":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"29:4107:12516":{"crate_id":29,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"11:0:1830":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:9590:8354":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:45880:2689":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:40441:8197":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"11:1831:2164":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:4848:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"20:3327:2109":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"2:6981:2358":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11983:1376":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:40096:8009":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:640:2140":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"23:132:2494":{"crate_id":23,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"1:872:2161":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10906:15685":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13937:19715":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:2131:2105":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:1558:2158":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11520:15549":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:9223:7815":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:42859:30963":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:2929:2032":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:4196:2317":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:11421:2380":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11178:15771":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:6537:2542":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4496:12469":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:22451:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:6622:7943":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:12421:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:6832:8170":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12566:18936":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12840:18953":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:3204:2181":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"29:4151:20973":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"18:727:19786":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"29:4159:20974":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"23:192:14254":{"crate_id":23,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"2:42184:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:45636:2621":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11290:15539":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:1473:2162":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:5530:7942":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:21025:2606":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:7474:15416":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:5861:2532":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:7055:2187":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:7124:2160":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:3667:2376":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:1464:2161":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:4814:15078":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:1702:2421":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:5962:2548":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:6061:28882":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"29:4069:9061":{"crate_id":29,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"1:7633:2131":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"29:4811:21016":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"6:7272:13980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11333:25578":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8810:2514":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10745:2295":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:46310:30737":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:40351:8184":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:20803:2607":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5987:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:12669:2188":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:2164:15631":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"22:417:19880":{"crate_id":22,"path":["anstream","auto","AutoStream"],"kind":"struct"},"11:1027:14335":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:3194:7801":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:8798:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:10313:15661":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:9966:15534":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40412:8195":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:4733:2413":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"20:3862:37301":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"1:10800:2301":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:41638:8255":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:10226:2519":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:21058:2600":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:3722:2199":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5959:15364":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4895:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:5587:8185":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:4762:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:39269:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"30:25:22501":{"crate_id":30,"path":["bitflags","iter","IterNames"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:1184:15585":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:43343:7851":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10403:15664":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"29:4251:9918":{"crate_id":29,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"2:46915:2691":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:14395:19748":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"9:450:14215":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:44307:8380":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"20:66:1996":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"29:4454:20996":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"17:12631:18941":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:635:2139":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:45658:2627":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12592:18938":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:6764:34803":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"28:1076:19958":{"crate_id":28,"path":["rustix","termios","types","SpecialCodeIndex"],"kind":"struct"},"1:1843:2239":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7631:15427":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"28:2393:37920":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"29:3915:20961":{"crate_id":29,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"29:4142:12373":{"crate_id":29,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"2:42651:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"29:3758:14169":{"crate_id":29,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"6:4328:12451":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:42104:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4556:12476":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12457:18930":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:8846:2158":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:43110:7845":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:2314:14421":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:47523:2665":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4842:12504":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:44490:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12605:18939":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:12982:18963":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:6604:2547":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:9215:7808":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:43352:7855":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"23:26:19907":{"crate_id":23,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"2:2692:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"20:3067:19810":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"16:8043:15439":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7592:15425":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:47874:7768":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8165:2305":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14044:19727":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10957:15764":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8296:2378":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:8166:15446":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:933:2169":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"29:4648:21007":{"crate_id":29,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"2:41561:2374":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"29:4191:20978":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:4374:12454":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"11:2060:2175":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4456:12463":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5979:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:44056:7913":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:11991:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:47984:7776":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:22418:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"30:51:22503":{"crate_id":30,"path":["bitflags","parser","AsDisplay"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:5073:22949":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:32224:8213":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:8711:15516":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8887:2552":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:1845:2180":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6057:14392":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:3802:2164":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:885:2162":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8326:2465":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:1928:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:46235:2696":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"20:62:1995":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"6:4764:12494":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"29:4474:20998":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"17:13999:19722":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"29:3799:20950":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"9:330:14271":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8288:2424":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6028:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:541:9006":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"20:3048:1987":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"1:8228:2377":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"0:0:1721":{"crate_id":0,"path":["clap"],"kind":"module"},"17:12186:18440":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"15:306:14371":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13513:19685":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11726:15783":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5967:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:1820:2203":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:7553:15423":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:5437:1984":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10883:15687":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"7:0:1553":{"crate_id":7,"path":["unwind"],"kind":"module"},"10:0:1829":{"crate_id":10,"path":["adler"],"kind":"module"},"1:11327:25574":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:9604:15534":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1603:9907":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:58:1991":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"16:6516:15390":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"26:261:19924":{"crate_id":26,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"2:39432:15448":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:12727:18947":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:7994:23022":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:527:2110":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:1663:9911":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:547:9007":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9153:15526":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12757:18948":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5994:15366":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:2461:33708":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"30:177:22507":{"crate_id":30,"path":["bitflags","parser","ParseErrorKind"],"kind":"enum"},"29:3843:20955":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"9:486:14214":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:4698:15058":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:9875:15590":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5342:15342":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:0:1826":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10253:15605":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:4407:2119":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:21561:31202":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6540:15391":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:2689:14437":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:7589:28885":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:956:2172":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10293:15625":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8472:2495":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7494:15418":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12579:18937":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:1506:9896":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:42888:2494":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"28:1113:19943":{"crate_id":28,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"5:2966:34777":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"9:237:2494":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:582:2132":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:2793:8236":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2213:2277":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:40463:8198":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:506:9003":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:4156:2427":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:4365:34799":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:10361:15658":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:9143:2590":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:5042:22949":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2848:8248":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10323:15662":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:46091:2623":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:14197:19734":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8222:2378":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:20620:31198":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4420:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:43532:7884":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"29:3867:12506":{"crate_id":29,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"2:44303:8379":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"29:3857:20956":{"crate_id":29,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"18:644:37265":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:21234:2611":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6347:15379":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3139:8251":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:822:2184":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"15:327:14375":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:2541:14431":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"9:0:1828":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:3435:2303":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:47894:7770":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:2570:28893":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12659:18943":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:12614:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:11847:7902":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:1690:9914":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:1733:9918":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9614:36804":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:12566:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6872:15401":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7445:15414":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6554:15392":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:9160:23164":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"13:226:36088":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:62:8627":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:5877:8601":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:6156:13218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8824:2515":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:5639:15351":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:2600:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:43526:7885":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"28:2637:14254":{"crate_id":28,"path":["rustix","termios","types","Action"],"kind":"enum"},"1:5406:2507":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:1818:2233":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11084:15732":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:45690:2657":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"20:3824:19866":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"17:11354:15541":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10223:15611":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10786:15684":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"29:3788:20949":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"2:10025:2158":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:42906:30495":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:6137:2738":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"29:4045:9000":{"crate_id":29,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"17:10799:15682":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6438:15385":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:6232:15372":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:45861:2640":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"20:4117:37510":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"1:4025:2400":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:9434:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12952:18961":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:10322:7865":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"29:3674:20941":{"crate_id":29,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"17:9485:36937":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:7116:2160":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:8902:33256":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:30309:2194":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:7283:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"21:157:19875":{"crate_id":21,"path":["clap_lex","ShortFlags"],"kind":"struct"},"6:4368:12453":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"20:3308:19809":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"5:1776:2164":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:4809:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:21227:2306":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:11796:7875":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12412:18927":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:42024:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"29:4770:9010":{"crate_id":29,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"1:10770:2299":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"20:0:1711":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"29:0:1972":{"crate_id":29,"path":["linux_raw_sys"],"kind":"module"},"16:5553:15346":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11949:2144":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:9225:7816":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"29:4753:21010":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"20:1635:19849":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"6:1709:9916":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:7362:15411":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:43991:7911":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9409:36742":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:45760:2674":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4469:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:2785:2594":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:793:2165":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:9211:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:4630:24138":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:43514:7888":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6044:35799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:2874:14445":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:5626:15350":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:32133:22940":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:6673:22910":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:45590:2656":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9655:15535":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:11976:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:7038:36184":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:6153:28907":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:515:19791":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:39411:8252":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:9090:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6886:15402":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13604:19690":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"21:32:2332":{"crate_id":21,"path":["clap_lex","ext","Split"],"kind":"struct"},"1:12002:1134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"20:35:1994":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"2:3371:7947":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"29:4174:20976":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"6:4446:12462":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:7552:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:7229:8180":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10790:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:3217:33656":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:44287:8382":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9083:15500":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:40380:8192":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:3181:26556":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:8547:2498":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:5080:12530":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:5940:15363":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:11056:15767":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:7246:2257":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:7382:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:9022:23084":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:39238:8250":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"26:282:19925":{"crate_id":26,"path":["anstyle","color","RgbColor"],"kind":"struct"},"1:8558:2499":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11924:18421":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:3315:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:7275:2034":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11815:18415":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:10417:15635":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:6820:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"26:360:19929":{"crate_id":26,"path":["anstyle","reset","Reset"],"kind":"struct"},"30:11:2158":{"crate_id":30,"path":["bitflags","iter","Iter"],"kind":"struct"},"29:3997:20968":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"17:10845:15680":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"10:36:36060":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5818:13171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:7575:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"29:4420:20992":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"20:3410:19829":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"1:7883:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"13:110:36135":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:41790:2160":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"22:262:19892":{"crate_id":22,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"6:5863:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11992:18426":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"20:3590:19850":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"16:6900:15403":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:44291:8386":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:42064:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:5119:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:41436:2371":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"29:4687:21008":{"crate_id":29,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"2:8739:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:1586:2181":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:2978:2215":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:45612:2661":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:7463:14141":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13659:15579":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:1746:30953":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10051:15570":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:20650:31316":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:8348:2412":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:3867:14515":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:4034:34790":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11109:15768":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:40056:30748":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:507:37265":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:45546:2655":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:7568:36261":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:8315:2480":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:1500:9895":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:474:8998":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:11988:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"29:3886:20958":{"crate_id":29,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"6:7564:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:7041:2527":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:10507:2353":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:9561:15533":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:46167:2635":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:22583:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:2737:14439":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:9952:15572":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:39191:7804":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"18:636:37268":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:403:36082":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:44120:7915":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9913:15575":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"29:3815:20951":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"6:4489:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:5372:2505":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:4039:2402":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14102:19729":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:3453:2302":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:6618:13598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:0:1834":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7313:36538":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:41799:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2567:14432":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"32:72:22535":{"crate_id":32,"path":["strsim","StrSimError"],"kind":"enum"},"1:11019:19929":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:5067:15139":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:21671:2306":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"14:202:7919":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:2360:2281":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:9100:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12711:18946":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"29:4061:9011":{"crate_id":29,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"17:14236:19738":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43283:31286":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:10923:2509":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:7363:2164":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12435:18929":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:1858:2182":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4341:12452":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:43334:7852":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6986:15407":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:8314:2481":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:657:2160":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:7655:2192":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:2186:36065":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:21790:30590":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10597:15720":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:6649:8182":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"30:0:1973":{"crate_id":30,"path":["bitflags"],"kind":"module"},"17:10123:15580":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:9124:2310":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:4785:15073":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:1059:2174":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:47885:7769":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"20:3670:2345":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"11:1103:14337":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:3580:14455":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"22:319:19904":{"crate_id":22,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"30:90:22484":{"crate_id":30,"path":["bitflags","traits","Flag"],"kind":"struct"},"14:160:14346":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"29:4796:21014":{"crate_id":29,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"2:20801:2306":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:1915:2204":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:261:36658":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:11999:1505":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:5008:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:944:2170":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7519:15513":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6317:15376":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:6240:2548":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:10175:15534":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4794:12498":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:1536:9900":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:44008:7912":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12691:18945":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:2632:2344":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:2223:33814":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:5687:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:1892:2253":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:40124:7889":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:39152:7967":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:21843:30591":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:5382:15344":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:3810:14482":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7525:15421":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9518:15532":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:8210:15448":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12318:18923":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:0:1398":{"crate_id":1,"path":["std"],"kind":"module"},"11:1068:14336":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:45991:2663":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3834:2381":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"29:4221:20981":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"2:3231:7802":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:9469:8031":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"20:3444:19826":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"6:4938:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:9192:26181":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:1638:9909":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:45742:2668":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:7860:2299":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12333:18924":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:11564:8391":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:7659:8179":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:41587:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12966:18962":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:3645:2160":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"11:399:36078":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:39293:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:12372:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8916:2553":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1513:9897":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6713:14364":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"28:1751:37920":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"6:6744:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1557:9902":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:11736:2500":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:6384:22910":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"22:153:19881":{"crate_id":22,"path":["anstream","lockable","Lockable"],"kind":"trait"},"16:3894:14518":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:40029:2134":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"26:173:37913":{"crate_id":26,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"6:4833:12503":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"28:1308:19944":{"crate_id":28,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"17:9990:15578":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:8734:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10671:15723":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:23162:2383":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:477:28896":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:43500:7891":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"20:3236:2109":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"5:6632:7944":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4550:12475":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"20:3549:19816":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"28:1097:19941":{"crate_id":28,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:11264:15776":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:8949:15524":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"29:4820:21017":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"1:8449:2494":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:11599:7869":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"20:1681:128":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"6:6022:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:4043:7798":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:42353:7809":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:3295:14453":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:30365:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11642:15554":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:6357:15380":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:400:15511":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:2033:2173":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:46805:2630":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"20:4087:19844":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"16:7855:15437":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10097:15610":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5074:12529":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:11761:28543":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:6850:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7739:15432":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"20:3351:19839":{"crate_id":20,"path":["clap_builder","builder","styled_str","Styles"],"kind":"struct"},"2:3179:31318":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"22:208:19893":{"crate_id":22,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"6:5068:12528":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10832:15679":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:609:37293":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11074:15549":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:587:9013":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:40421:8196":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11388:15543":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:43855:7889":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4929:12513":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:3441:14454":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:498:2105":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:1538:14340":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12936:18960":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7833:15436":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8270:2373":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:40329:2329":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:3801:2162":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"1:8792:2513":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:43435:7859":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:14380:19747":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:5301:15325":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:1574:2179":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:41723:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:40280:2274":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:3183:33628":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:500:9002":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11669:15781":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:1012:2175":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:45898:2695":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:40157:8005":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:39379:2150":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5829:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2840:8246":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:40870:30952":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:7433:15413":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:629:33661":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:43706:7893":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:5805:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"29:4021:20971":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"1:3220:2351":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"29:4029:20972":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"29:4446:20995":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"2:3166:7968":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5767:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:3363:1985":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"2:22517:2121":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:3996:31288":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"20:4123:8194":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"1:10758:23008":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:22550:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:599:37284":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"20:3886:37297":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"17:12539:18934":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:55:14390":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"20:923:19813":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"29:4243:20984":{"crate_id":29,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"1:352:2129":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11127:15548":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:10161:15607":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12065:18431":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:21042:2306":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:25972:2384":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:32097:2517":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:1185:19830":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"2:22484:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:7308:7921":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:7763:15434":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:44283:8383":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:4111:7985":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:41396:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"29:4611:21004":{"crate_id":29,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"2:42224:2533":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11994:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:6796:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13964:19718":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:9274:2331":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"26:127:37914":{"crate_id":26,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"2:45566:2620":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7073:15408":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:30379:30772":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:6638:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4032:14632":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6724:15396":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:538:19793":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12424:18928":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"29:3828:20953":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"2:8907:31912":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"14:7:14346":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:10868:7858":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:12106:18434":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10351:15663":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:4483:12467":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"20:3417:19824":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"20:4184:1990":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"14:40:18415":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13109:18972":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:48061:7779":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12905:18958":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13069:18969":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13854:19707":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:2824:8243":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11832:18416":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"20:3496:19821":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"17:14350:19745":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:256:36738":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:10069:2233":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:14282:19740":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:6421:2145":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"29:4571:10024":{"crate_id":29,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"2:40131:8002":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:11985:1490":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:3184:30420":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:8068:15440":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:20839:2609":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:6185:22960":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:11979:1525":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11155:15770":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:673:2141":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"22:0:1965":{"crate_id":22,"path":["anstream"],"kind":"module"},"17:3186:15681":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13332:19678":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:1717:9917":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1649:9910":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"29:3647:20939":{"crate_id":29,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"20:1640:19852":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"29:3656:19971":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"17:12769:18949":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:9105:2558":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:11315:23149":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4535:12473":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:47969:7775":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:21987:30749":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2362:2282":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11568:15550":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11888:18419":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:7183:2157":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:2201:2156":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:6289:15374":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:2918:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"8:0:1827":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:3076:2217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10148:15608":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4716:12488":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4818:12501":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:4906:2461":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:8838:2516":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:7759:22940":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"29:4366:20987":{"crate_id":29,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"1:5422:2508":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:47920:7772":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4872:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:7025:36499":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:1696:9915":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:10229:7863":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:11776:7878":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:20851:32059":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:40863:8172":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7099:15409":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:3792:19865":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"26:313:19926":{"crate_id":26,"path":["anstyle","effect","Effects"],"kind":"struct"},"23:89:19899":{"crate_id":23,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"1:4691:2462":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:1565:2163":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9821:15562":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6197:15370":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:14007:19723":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:4731:2410":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"20:3779:19859":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"2:10835:7857":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:6688:10022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:41647:2158":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"11:1517:14339":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2703:2120":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:1595:9906":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:14189:19733":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:7016:2196":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:41663:2160":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:2819:8241":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:2814:8240":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:14150:19730":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:2759:14440":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5849:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:10314:23718":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:7609:14170":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:42626:22484":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:7523:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:1611:36076":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:841:2158":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:41774:2158":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:47413:2631":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13620:19691":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7799:15435":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:14163:19731":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:9219:7818":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6067:13189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"26:210:19923":{"crate_id":26,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"1:11992:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:6789:34788":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:9030:15409":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:46645:2676":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:2900:14446":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:1852:2181":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:6130:13217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4949:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:40680:8204":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11905:18420":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:21673:2603":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:41538:2373":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6171:13219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"23:255:1994":{"crate_id":23,"path":["anstyle_parse","Parser"],"kind":"struct"},"5:2959:7793":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:21457:2616":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"20:3874:37302":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"2:40666:8203":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12878:18956":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"27:0:1970":{"crate_id":27,"path":["is_terminal"],"kind":"module"},"6:7586:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:10914:22959":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:2844:8247":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"29:3613:20938":{"crate_id":29,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"1:7999:23031":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:21549:2597":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:7297:7920":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:10138:23021":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4524:12472":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6671:10024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:11558:14379":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:46213:2690":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:30118:2385":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:30941:8021":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:2443:14427":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"20:3742:2136":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"17:11591:15551":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12618:18940":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6815:15399":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:44588:30974":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40086:8008":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:2857:14444":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:10935:23065":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:4333:7980":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12303:18922":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"29:3767:9915":{"crate_id":29,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"1:5745:2535":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7061:36488":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:7843:2297":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:3737:2200":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9899:15580":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:630:2158":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:4261:7974":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:47725:2692":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4800:12499":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:20853:8264":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:5771:2536":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:39418:7955":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:14403:19749":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:9716:37215":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:2960:34775":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:844:2172":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:35:2218":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:2105:15647":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7707:15431":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"22:402:19884":{"crate_id":22,"path":["anstream","buffer","Buffer"],"kind":"struct"},"2:40398:30971":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:6534:2541":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:9181:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:3160:7969":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:14054:19728":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"29:4185:20977":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"11:760:2164":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:21110:2604":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:7327:2033":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"20:3556:19833":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"16:5882:15361":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:39335:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:7657:2118":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:0:1835":{"crate_id":17,"path":["object"],"kind":"module"},"16:6484:15388":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"2:40498:8201":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:4536:14992":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13125:18973":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4395:12299":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:6425:2538":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"23:290:19903":{"crate_id":23,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"1:9017:22941":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:9656:33510":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:14227:19737":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:14:1945":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11542:15498":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"11:736:2162":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:2403:1843":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:2760:8233":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:44533:2737":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:530:36406":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"29:3691:20943":{"crate_id":29,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"1:8862:2160":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:4308:2431":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:5608:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13179:18976":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:782:2183":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:1818:2158":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:4142:7986":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6386:15382":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"20:3471:19828":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"16:4323:14899":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:582:15513":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:41731:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"29:4340:20986":{"crate_id":29,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"22:348:19895":{"crate_id":22,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"17:13749:19698":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4824:12502":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:4008:31284":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:1426:2159":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7753:15433":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"24:23:14254":{"crate_id":24,"path":["utf8parse","types","Action"],"kind":"enum"},"5:1288:2174":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"28:2354:19954":{"crate_id":28,"path":["rustix","termios","types","LocalModes"],"kind":"struct"},"17:9296:15497":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:4387:7982":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11142:2310":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:11313:8341":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11979:18425":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:624:37276":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"29:3665:20940":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"28:1922:19956":{"crate_id":28,"path":["rustix","termios","types","OutputModes"],"kind":"struct"},"2:46388:30731":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"20:3273:19814":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"2:40482:8200":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"28:2589:19955":{"crate_id":28,"path":["rustix","termios","types","OptionalActions"],"kind":"enum"},"2:41944:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:1780:2222":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:923:2167":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:2611:14434":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:43940:7908":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:20667:31315":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"20:1366:19832":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"18:652:37265":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:0:1964":{"crate_id":21,"path":["clap_lex"],"kind":"module"},"20:3947:19862":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"11:285:36079":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:40195:2260":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:43778:7896":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:8420:7874":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"14:187:14354":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:6607:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13830:19705":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"22:170:2306":{"crate_id":22,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"16:6864:36441":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:10810:25887":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11753:15784":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12394:18926":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:45791:2622":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:9032:15345":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:42596:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"14:0:1832":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:2690:33760":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4685:12485":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:481:19789":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11030:28887":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:22025:30864":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:10544:15718":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:7240:36531":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:4620:15004":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12815:18951":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"29:4551:9854":{"crate_id":29,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"28:1531:37920":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"20:3762:1988":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"18:582:8021":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:5737:15357":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13683:19693":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:5529:8194":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"20:3258:19812":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"29:3940:20963":{"crate_id":29,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"5:3671:34790":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:2141:33663":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4164:2428":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:3635:14456":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5843:15360":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"29:4760:21011":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"17:10529:15717":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:695:2167":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:491:37261":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"15:0:1833":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:21964:30735":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:22041:30869":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:1302:2176":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:43542:2331":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:21104:2602":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13803:19704":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:2926:14447":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"29:3834:20954":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"17:12118:18435":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:41984:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:5381:2317":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"20:4111:37619":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"17:13957:19717":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"28:2147:19952":{"crate_id":28,"path":["rustix","termios","types","ControlModes"],"kind":"struct"},"11:2194:36066":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:7727:2177":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"11:1822:2160":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9977:15535":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:3260:2353":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9016:15344":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:9939:15573":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:43606:7898":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:43977:7910":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:9734:15537":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:531:19792":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:3042:14450":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:9118:15525":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:7652:2189":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11045:15731":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13778:19701":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:4126:25570":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:123:8682":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:14177:19732":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:5491:2509":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:10049:2159":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"20:3217:184":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"20:3904:19868":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"1:3501:30073":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8399:2493":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:7199:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"25:41:19916":{"crate_id":25,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"1:3222:2352":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:10336:7868":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:755:19787":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:564:19794":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:7540:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:1523:2198":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:7259:2258":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:4401:12457":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:2174:32757":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:30349:8225":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40223:8318":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7171:2156":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6160:36364":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7622:15426":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:41573:2375":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12377:18925":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:7739:2241":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:4035:2401":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:699:19785":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:44275:8378":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:1673:9912":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:0:1836":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:48022:7778":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:41525:2382":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:5994:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:4965:15109":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"20:3503:19819":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"17:11467:15547":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:42642:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:7065:33669":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:47771:2643":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:1495:9894":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9850:15564":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12365:15725":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"20:53:1993":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"6:4963:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:11329:8343":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"22:286:19888":{"crate_id":22,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:11285:22822":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"30:141:38134":{"crate_id":30,"path":["bitflags","traits","ImplementedByBitFlagsMacro"],"kind":"trait"},"29:3906:20960":{"crate_id":29,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"17:13096:18971":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8137:2358":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:2781:14441":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:43760:7895":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:2825:14443":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:898:2163":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4787:12497":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:7721:2143":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:46259:2697":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6303:15375":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:9206:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:6931:15404":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:119:8681":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:1102:33736":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:5775:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:44188:7900":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:46021:2669":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3344:2338":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:40901:8175":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:7908:23167":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:10735:25651":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:42367:7818":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11020:15735":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:6785:31301":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:3238:2182":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"10:44:14325":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:8138:15444":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:2388:2292":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:1575:9904":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:7924:2199":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:0:1967":{"crate_id":24,"path":["utf8parse"],"kind":"module"},"2:46569:2664":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"29:4202:20979":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"1:2592:2334":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6648:10039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"29:3974:9007":{"crate_id":29,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"2:21912:30924":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6372:15381":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:4004:2163":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:10267:7864":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:5978:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:5567:15347":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:986:2174":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13639:19675":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:4753:15065":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8186:2329":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"26:182:19922":{"crate_id":26,"path":["anstyle","color","Color"],"kind":"enum"},"17:12077:18432":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6789:15398":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12891:18957":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:4380:2425":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:9744:37219":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10994:15737":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:44279:8381":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6711:13600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10520:15671":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:4908:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:44083:7914":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:47809:2677":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:482:8999":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5877:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"32:32:22521":{"crate_id":32,"path":["strsim","StringWrapper"],"kind":"struct"},"2:12359:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"30:124:22483":{"crate_id":30,"path":["bitflags","traits","Bits"],"kind":"trait"},"17:10981:15738":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:21952:2386":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:43864:2134":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11210:15772":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:6273:2163":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"15:394:14382":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"11:1826:2163":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:573:9011":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:44145:7917":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13368:19679":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:574:37265":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:41714:8327":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44134:7916":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:14015:19724":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:8489:2496":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:44363:8399":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:358:2130":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11943:18422":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:4434:7983":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"21:5:2394":{"crate_id":21,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"11:2180:36069":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"29:4356:9008":{"crate_id":29,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"17:13905:19712":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:11160:23331":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:12002:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:4812:2409":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11398:23719":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"29:3897:20959":{"crate_id":29,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"2:43372:7854":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1273:2175":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:41453:2372":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:46137:2629":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:96:19764":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11258:2520":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:6868:13611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6692:15395":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:3744:14464":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:113:19765":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:4592:15000":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:43873:7890":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:40370:8191":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:207:7807":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6128:15368":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"11:667:2166":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:805:2169":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:7696:33257":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12148:18437":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:908:2164":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:43383:7844":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:7379:7939":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:5554:2512":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:8987:23090":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:46851:2636":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"20:1659:27824":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"17:13456:19683":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:2836:8245":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12826:18952":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:1045:2173":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6250:15373":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"14:165:14347":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"22:434:19883":{"crate_id":22,"path":["anstream","strip","StripStream"],"kind":"struct"},"1:9272:1991":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:13971:19719":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10390:15634":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4466:2435":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:11036:28898":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11164:15761":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:9926:15574":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:9426:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:3377:2359":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:1569:9903":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:8086:15441":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"9:393:14216":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2789:8237":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:20648:31311":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:30343:7938":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:11989:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"11:749:2163":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:504:15512":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4729:12490":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4973:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1765:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2691:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:40919:8178":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"20:3746:19857":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"17:11118:15769":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:1841:1991":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11098:15734":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6658:15394":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:10445:28899":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:4378:7981":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:2962:33807":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:43362:7853":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13448:19682":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:39313:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:10013:15576":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:40143:8003":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"29:3682:20942":{"crate_id":29,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"17:11007:15736":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13771:19700":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:2049:2174":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10303:15660":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:5414:36512":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"18:671:19782":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:9010:23041":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:11272:15538":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11103:2515":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"20:3564:22484":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:914:2165":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11329:15540":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7407:15412":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12921:18959":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12174:18439":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8322:2463":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:4166:2317":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12526:18933":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"29:4259:20985":{"crate_id":29,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:1367:1994":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"2:47065:2625":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:44351:2595":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:4678:2393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:43678:7865":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:10038:15571":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11852:18417":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:1631:9908":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"29:4437:20994":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"1:11995:1509":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"24:53:2494":{"crate_id":24,"path":["utf8parse","types","State"],"kind":"enum"},"17:10430:15665":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4315:12450":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:614:37281":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:595:9014":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4789:2415":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4638:12482":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:2853:8249":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4650:12483":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:20986:8264":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10486:15668":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:9095:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10621:15722":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"22:63:19901":{"crate_id":22,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"17:14205:19735":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:14329:19743":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"29:3709:20945":{"crate_id":29,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"23:0:1966":{"crate_id":23,"path":["anstyle_parse"],"kind":"module"},"23:304:19904":{"crate_id":23,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"16:5590:15348":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:7087:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9806:15561":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:3220:14452":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:40072:8006":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"26:113:37912":{"crate_id":26,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"1:11978:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:1580:2180":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:2373:14424":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:6461:2545":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"22:382:2494":{"crate_id":22,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"2:9213:7809":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10511:15670":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"20:3639:19851":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"2:1732:8276":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:39253:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"22:231:19890":{"crate_id":22,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"22:163:19882":{"crate_id":22,"path":["anstream","raw","RawStream"],"kind":"trait"},"5:6392:2160":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"20:3834:37304":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"17:10654:15698":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:43848:7879":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:39626:27925":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"20:3994:19861":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"5:4076:2159":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"11:836:2171":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:9877:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:3171:2158":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:7079:2160":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:14026:19725":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:2160:8264":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:5951:2317":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:6175:15369":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4626:12481":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:14259:19739":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:4626:24134":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:1755:8275":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:6136:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44299:8385":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:4783:33558":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:8997:15495":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:2755:2593":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:43556:2332":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:3407:2317":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:21102:2306":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:554:9008":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:42898:30496":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:43574:7863":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8216:2328":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:22616:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1562:2160":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:9706:15536":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"28:1713:19953":{"crate_id":28,"path":["rustix","termios","types","InputModes"],"kind":"struct"},"6:4984:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:22070:30933":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"26:382:19930":{"crate_id":26,"path":["anstyle","style","Style"],"kind":"struct"},"1:2883:23035":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11600:15552":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:7505:15419":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:9221:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:4256:7973":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:45821:2628":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"20:3138:1984":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"29:3701:20944":{"crate_id":29,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:149:14398":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"29:4013:20970":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"22:301:19889":{"crate_id":22,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2:46189:2641":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:3330:2164":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11696:15782":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12133:18436":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:6834:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21896:30685":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:42867:8033":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"20:2927:37405":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"16:6214:15371":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:47905:7771":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:21236:2605":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:5100:15148":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4735:2414":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:434:14395":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"28:303:37922":{"crate_id":28,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"5:1138:33734":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:22103:2390":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:3111:2361":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:4748:12492":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:4900:15092":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:21979:30932":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:11179:2558":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:10194:7870":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13732:19697":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:2982:2216":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13492:19684":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:10780:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:6018:15367":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"20:3332:19815":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"31:0:1974":{"crate_id":31,"path":["anstyle_query"],"kind":"module"},"29:4229:20982":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"5:2243:33806":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5882:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"12:0:1831":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:2376:2286":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"29:4167:20975":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"29:4037:9001":{"crate_id":29,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"16:5612:15349":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11454:15546":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:10740:26176":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:9048:15499":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"29:4388:20988":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"16:7289:15410":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"20:3429:19820":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"1:919:2166":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:1543:2317":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:6978:23971":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:4488:2436":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13574:19676":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10499:15669":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:5363:15343":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:10550:2115":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:11565:14379":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:2715:14438":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8004:2345":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:3395:15686":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8277:2432":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10581:15699":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:30913:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7755:2242":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"20:3212:37622":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"16:2421:14426":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:11944:30122":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:5955:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:10377:15636":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:4603:7995":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10330:15633":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:43810:2328":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10080:15624":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"9:52:14234":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:7095:33636":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:21208:2601":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:30437:30718":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:7045:2163":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"11:365:36074":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:4897:2460":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:950:2171":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:12003:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:42669:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:46043:2675":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11034:15766":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:2378:2287":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:11790:7876":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:14417:19750":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:45843:2634":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:3977:2397":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5793:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:9065:23756":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:3383:7951":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:3985:2398":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5737:13104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:41824:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:6036:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"20:3914:19858":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"17:12552:18935":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:7870:2296":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:4428:34799":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13155:15551":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2962:14448":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:42876:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"28:2613:19957":{"crate_id":28,"path":["rustix","termios","types","QueueSelector"],"kind":"enum"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11791:18414":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"20:3844:37299":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"29:4077:9003":{"crate_id":29,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"1:3729:2380":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:11927:22917":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:7693:15430":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:10510:2349":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:6348:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11123:8398":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12646:18942":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8969:23151":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:6565:9049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10812:15683":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:7230:30758":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:42144:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8153:2301":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:22091:2387":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"29:4629:21005":{"crate_id":29,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"1:12001:1563":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:2208:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:11462:2379":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:128:19874":{"crate_id":21,"path":["clap_lex","ParsedArg"],"kind":"struct"},"2:21452:2608":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:10945:15763":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"29:3989:20967":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"1:11998:1508":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11115:25884":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:10953:2516":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"20:3753:19870":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"16:5793:36342":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13673:19692":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:6720:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:4047:2404":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:1442:2160":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7012:36404":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2809:8239":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:3187:30431":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:21124:2605":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:9462:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:40342:8183":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:41655:2159":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11416:15544":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:5284:7836":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"7:32:14186":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:895:2158":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:864:2160":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:10074:2332":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"20:3099:19837":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"5:6140:2740":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8381:2474":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:39453:7964":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:8740:15517":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13795:19703":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:11977:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:43091:8371":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:8868:2554":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:1011:34790":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4587:12478":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:12000:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:43724:7894":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:9475:15531":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47663:2671":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13591:19689":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8144:2360":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11235:28901":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:7732:2178":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:41782:2159":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:3596:2159":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:1482:2165":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11967:18424":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2926:2031":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:4944:2317":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:47931:7773":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6775:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13787:19702":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:30543:30805":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:8125:15443":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:6319:34790":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11993:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:9474:8032":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:10088:23615":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:2170:33811":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4695:12486":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2468:2306":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:3963:2396":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"32:0:1975":{"crate_id":32,"path":["strsim"],"kind":"module"},"17:13914:19713":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:2746:8212":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:11982:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8900:2555":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13862:19708":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:21928:30719":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"29:3926:20962":{"crate_id":29,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"2:40035:7971":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:43820:7892":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4992:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:11781:7874":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4770:12495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:22004:30871":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"14:215:14355":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:653:9061":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:22385:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:7678:2115":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7515:15420":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13882:19710":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11872:18418":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:723:2161":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:46491:2658":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7679:15429":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:22352:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11189:15551":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:11551:23087":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"29:4638:21006":{"crate_id":29,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"20:2943:37492":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"2:2750:2591":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:3511:2163":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:9469:2298":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:32137:8298":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:9217:7817":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7331:36568":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:4616:2399":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:43839:7880":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:46411:30738":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:1068:2175":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"29:4508:2465":{"crate_id":29,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"20:3520:19822":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"16:2465:14428":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:1569:2164":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:10609:15721":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:660:19781":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4606:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:13991:19721":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:9887:15584":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:968:2173":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8209:2332":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4463:12464":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:1077:2176":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:1545:9901":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:6915:36357":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:40450:8186":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:12577:2738":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2802:8242":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"29:4404:20990":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"22:423:37812":{"crate_id":22,"path":["anstream","auto","StreamInner"],"kind":"enum"},"23:96:19901":{"crate_id":23,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"11:798:2168":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:6571:15393":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:11343:7882":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13923:19714":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:3519:15704":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:10297:1984":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:43444:7862":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:1973:15612":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:5836:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11997:1507":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:40512:8202":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12851:18954":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:42586:30937":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:532:9005":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:47946:7774":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13707:19695":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:8531:2497":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2960:7803":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:5816:2544":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"9:357:14231":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:3932:2317":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:46881:2642":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:2332:14422":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:261:34790":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:40270:2275":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:14341:19744":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:5469:2317":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:46727:2624":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:6809:2596":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:4724:15060":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11199:15762":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:9188:15527":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6239:36581":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:40207:30758":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12354:15724":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:44563:7791":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13029:18966":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:22077:2388":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:4323:7979":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:10402:2513":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:10350:7866":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:9571:37044":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:47847:2698":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4436:12461":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"14:221:14356":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:2681:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"28:2183:37920":{"crate_id":28,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"5:4395:2317":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12254:18921":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:44155:7918":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11250:15739":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:6008:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:2556:2342":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:44168:7899":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:5398:15345":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"28:0:1971":{"crate_id":28,"path":["rustix"],"kind":"module"},"1:9474:23723":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:44330:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:4506:14986":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2830:8244":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11990:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"20:4064:37388":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"11:1048:36063":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:12394:32036":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:2497:14429":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:10308:7867":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:43962:7909":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"26:347:19928":{"crate_id":26,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"29:4212:20980":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"16:2803:14442":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:8794:15519":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"20:3452:19827":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"16:6977:15406":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:13870:19709":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:707:7876":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"28:1137:37920":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"28:1701:19959":{"crate_id":28,"path":["rustix","termios","types","Termios"],"kind":"struct"},"6:4475:12466":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:40430:8205":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6625:2465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:5299:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:42851:8034":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:2049:2200":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:9867:2306":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:9965:23368":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:43660:7867":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6396:15383":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6805:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:11525:8392":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:2162:8265":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"29:3983:20966":{"crate_id":29,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"5:2035:2199":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:13847:19706":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:6471:34790":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:568:9010":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"29:3950:20964":{"crate_id":29,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"16:6939:15405":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:3212:2179":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:4564:14996":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8955:2537":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13566:19688":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:7505:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11960:23758":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:8932:2556":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:1501:14338":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"29:4483:20999":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"2:44482:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:10117:7869":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:45720:2662":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:4868:15084":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:551:2112":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"29:4463:20997":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"6:4568:12477":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:40044:8007":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:8899:15522":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:2168:36068":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:10504:2351":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:4841:15081":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:9399:15530":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:7225:8181":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:21203:2306":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:9673:28893":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4518:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:5386:2506":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:5757:2163":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:3927:2395":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:44546:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6531:36569":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"11:1121:2176":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:2698:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:854:2159":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:8924:15523":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:9359:31287":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:7900:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8203:2331":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:11996:1506":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:9318:15529":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:1411:2158":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:47999:7777":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"26:334:19927":{"crate_id":26,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"20:2907:1983":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"2:2771:8235":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"9:426:14217":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13548:19686":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:45945:2599":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:80:19763":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3517:2326":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:89:1994":{"crate_id":24,"path":["utf8parse","Parser"],"kind":"struct"},"1:3299:2349":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"20:4049:37335":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"6:6573:9854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:1681:9913":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:7853:2295":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:3492:2255":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:8872:15521":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7463:15415":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:3583:2158":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:7033:2186":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:9688:31685":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:43106:30573":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2777:8234":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:8771:15518":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"21:112:19873":{"crate_id":21,"path":["clap_lex","ArgCursor"],"kind":"struct"},"6:7250:8959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:3895:37303":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"16:6332:15378":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"29:3728:20947":{"crate_id":29,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"17:12053:18430":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:47601:2637":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:8542:15496":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:20665:31313":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:5280:7835":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:8105:15442":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:7530:22927":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"20:50:1992":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"6:4428:12460":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:2726:2158":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"2:2908:2195":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:6738:8189":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:40886:8174":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:40190:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"29:3877:20957":{"crate_id":29,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"17:11623:15553":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13697:19694":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10458:15666":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:4476:14980":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:2970:34774":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:1590:9905":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8196:2330":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11955:18423":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"20:742:37625":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"2:2741:7799":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6720:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"30:132:22486":{"crate_id":30,"path":["bitflags","traits","BitFlags"],"kind":"trait"},"6:7278:13981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12004:18427":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"20:4204:1989":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"1:7916:2343":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:736:19779":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13757:19699":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:4628:24136":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:1503:2167":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2469:8025":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:14037:19726":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6667:14365":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"29:4324:14141":{"crate_id":29,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"6:4740:12491":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:521:19788":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:7295:13982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10931:15751":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13016:18965":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4955:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4704:12487":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:119:36062":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:40237:2261":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:20607:8021":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:3058:14451":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:40108:7890":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:2689:7800":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:8632:15514":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:40116:2134":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:20895:2614":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:13167:18975":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:49867:2618":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:13894:19711":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:20939:2615":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:7632:2306":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:40389:8193":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:47271:2659":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"29:4735:21009":{"crate_id":29,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"17:13981:19720":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:927:2168":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:39446:7980":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:5720:15356":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:8152:15445":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:7517:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:6288:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:7599:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:5551:2510":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:22715:2389":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:9171:2255":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:5916:15362":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"29:4803:21015":{"crate_id":29,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"20:3533:37564":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"29:4787:21013":{"crate_id":29,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"1:3301:2350":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:1257:2173":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10066:15598":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:41705:2479":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:11234:15774":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4389:12456":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:4228:2430":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:43624:7897":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"29:4005:20969":{"crate_id":29,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"17:12035:18429":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:5231:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10110:15609":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:719:19778":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"25:0:1968":{"crate_id":25,"path":["colorchoice"],"kind":"module"},"11:332:36070":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:2743:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5799:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"29:4115:13981":{"crate_id":29,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"18:766:19780":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:7216:2259":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"11:97:36087":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5900:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:7370:30116":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:5236:34790":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"25:21:1989":{"crate_id":25,"path":["colorchoice","ColorChoice"],"kind":"enum"},"20:3853:37300":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"6:7511:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7570:28905":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"29:3775:20948":{"crate_id":29,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"1:3262:2354":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"22:366:37797":{"crate_id":22,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"17:13083:18970":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4616:12480":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4887:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"29:4397:20989":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"15:288:14370":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:43464:7861":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:1838:2179":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:41904:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:42691:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:1527:9899":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11984:1406":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4754:12493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:22682:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"20:3189:37508":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"17:12089:18433":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:20635:31198":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:2210:2276":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"20:4170:2505":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"17:9223:15528":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"20:4036:23164":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"29:3736:8883":{"crate_id":29,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"17:10444:15630":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:4917:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"29:4428:20993":{"crate_id":29,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"17:10339:15632":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:2637:14435":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:44295:8384":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"20:4151:37336":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"1:2217:2278":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:8841:15520":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12792:18950":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"29:4099:9002":{"crate_id":29,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"16:8176:15447":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4781:12496":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4506:12470":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1921:2254":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:7529:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12502:18932":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:10863:15534":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:11091:2514":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"20:2748:2159":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"6:6705:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10555:15719":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:9866:15565":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:8109:2300":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:7304:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:11300:22819":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:615:2136":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"29:4491:21000":{"crate_id":29,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"20:3811:19867":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"16:4441:14969":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:5689:15354":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"28:2563:19965":{"crate_id":28,"path":["rustix","termios","types","SpecialCodes"],"kind":"struct"},"16:8021:15438":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:41864:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"28:1336:37920":{"crate_id":28,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"5:1492:2166":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"21:98:19872":{"crate_id":21,"path":["clap_lex","RawArgs"],"kind":"struct"},"1:5738:2534":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4862:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:40473:8199":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:3207:37615":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"6:5044:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"29:4310:13173":{"crate_id":29,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"2:2919:2029":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:11801:7873":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:43454:7860":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"20:4177:37637":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"16:6427:15384":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6456:15386":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5058:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:2663:14436":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:40652:2330":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:43422:7843":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:39357:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"30:99:22485":{"crate_id":30,"path":["bitflags","traits","Flags"],"kind":"trait"},"5:1118:33706":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:41502:30764":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:4996:15116":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"29:4053:12453":{"crate_id":29,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"5:7272:7830":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:7848:2298":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6726:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:7706:2142":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:3025:14449":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:44525:2736":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:8854:2557":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:7262:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:2133:15606":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:5988:8206":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:9182:26175":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:2293:14393":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:42614:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:2781:2592":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"20:4027:37623":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"6:1520:9898":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:4810:12500":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:9044:23013":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:10156:7856":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:5622:2549":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:40522:8187":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"29:4591:21003":{"crate_id":29,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"2:40360:8190":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:5972:15365":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:6589:8883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:632:2138":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:43409:7842":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"20:3925:19869":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"2:40176:8001":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:14216:19736":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"11:817:2170":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8282:2433":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6850:15400":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:22649:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:2352:14423":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"20:3731:19841":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"30:172:7919":{"crate_id":30,"path":["bitflags","parser","ParseError"],"kind":"struct"},"17:1075:15577":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"29:4534:21002":{"crate_id":29,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"2:47865:7767":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:6763:15397":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:46357:30853":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11428:15545":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5051:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"11:644:2159":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13949:19716":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"29:3747:13596":{"crate_id":29,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"29:4500:21001":{"crate_id":29,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"17:11144:15760":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:2797:8238":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:4694:2435":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12864:18955":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:4184:7831":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7539:15422":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8541:2158":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:11539:7785":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:40877:2145":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:2493:2341":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13055:18968":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"22:333:19894":{"crate_id":22,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"16:7584:15424":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7484:15417":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:9840:15563":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4543:12474":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"26:0:1969":{"crate_id":26,"path":["anstyle"],"kind":"module"},"2:41482:31000":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:5807:15359":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:3732:2379":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"20:3083:19836":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:6015:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:7025:2160":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"7:79:14193":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"9:507:14218":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:10568:15677":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"28:1507:19942":{"crate_id":28,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"16:7255:2478":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"23:113:19906":{"crate_id":23,"path":["anstyle_parse","params","Params"],"kind":"struct"},"21:28:2306":{"crate_id":21,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"17:12017:18428":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:9777:15560":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13557:19687":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11371:15542":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:7266:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:9528:37034":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"9:177:14320":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:11767:18413":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:12446:8029":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"14:31:14346":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10969:15765":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13435:19681":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:7546:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:4009:19860":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"1:6590:2546":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"}},"external_crates":{"31":{"name":"anstyle_query","html_root_url":null},"28":{"name":"rustix","html_root_url":null},"25":{"name":"colorchoice","html_root_url":null},"22":{"name":"anstream","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"strsim","html_root_url":null},"29":{"name":"linux_raw_sys","html_root_url":null},"26":{"name":"anstyle","html_root_url":null},"23":{"name":"anstyle_parse","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/2.3.3/"},"27":{"name":"is_terminal","html_root_url":null},"24":{"name":"utf8parse","html_root_url":null},"21":{"name":"clap_lex","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}