{"root":"0:0:2437","crate_version":"4.5.8","includes_private":false,"index":{"2:13766:25085":{"id":"2:13766:25085","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37583"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13730:30923":{"id":"2:13730:30923","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13713:25176":{"id":"2:13713:25176","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:30933":{"id":"2:13767:30933","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5149:30933"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44704:8742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13735:30926":{"id":"2:13735:30926","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:30934":{"id":"2:13770:30934","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5147:30934"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44722:8743","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:31632":{"id":"5:5738:31632","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5742:23120":{"id":"5:5742:23120","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13763:23123"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13646:30913":{"id":"2:13646:30913","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13719:30919":{"id":"2:13719:30919","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13326:8731","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::matches":"2:13716:2730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44627:8749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13658:30915":{"id":"2:13658:30915","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12457:1765","crate::ops::IndexMut":"2:3605:3042","str::slice_unchecked":"2:13657:30914"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13704:25171":{"id":"2:13704:25171","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731","str::rsplitn":"2:13707:25173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44509:8720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13685:21522":{"id":"2:13685:21522","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42537:202","prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13707:25173":{"id":"2:13707:25173","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12451:490","str::splitn":"2:13704:25171","self::pattern":"2:13326:8731"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44527:8718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742:22075":{"id":"2:13742:22075","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13664:28370":{"id":"2:13664:28370","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44375:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:30931":{"id":"2:13754:30931","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722":{"id":"5:5722","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5723:31629","5:5724:9081","5:5727:31630","5:5730:31631","5:5738:31632","5:5739:31633","5:5740:3197","5:5741:23119","5:5742:23120"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13728:30922":{"id":"2:13728:30922","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:31631":{"id":"5:5730:31631","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:3197":{"id":"5:5740:3197","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13667:28136":{"id":"2:13667:28136","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13668:28393"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44679:8734","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13670:30916":{"id":"2:13670:30916","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44669:8745","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13661:25163":{"id":"2:13661:25163","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13662:25164"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13666:21898":{"id":"2:13666:21898","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44391:3171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:31630":{"id":"5:5727:31630","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13760:25080":{"id":"2:13760:25080","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40436:8877","Self::is_ascii":"2:13759:23117"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40436:8877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13671:28371":{"id":"2:13671:28371","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44697:8732","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13660:25160":{"id":"2:13660:25160","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13659:25159","str::split_at_mut_checked":"2:13662:25164"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13681:21521":{"id":"2:13681:21521","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42537:202","prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13655:25136":{"id":"2:13655:25136","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5723:31629":{"id":"5:5723:31629","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2819","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2819","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13647:350":{"id":"2:13647:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13648:25137","`u8`":"1:12470:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13734:30925":{"id":"2:13734:30925","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13645:25030":{"id":"2:13645:25030","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12873:8735"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13636":{"id":"2:13636","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13637:1024","2:13638:22534","2:13639:30910","2:13640:30911","2:13642:30912","2:13645:25030","2:13646:30913","2:13647:350","2:13648:25137","2:13649:25133","2:13651:25134","2:13653:25135","2:13655:25136","2:13657:30914","2:13658:30915","2:13659:25159","2:13660:25160","2:13661:25163","2:13662:25164","2:13664:28370","2:13665:28354","2:13666:21898","2:13667:28136","2:13668:28393","2:13669:27463","2:13670:30916","2:13671:28371","2:13672:25177","2:13675:25178","2:13678:25179","2:13681:21521","2:13685:21522","2:13689:25165","2:13692:25167","2:13695:25169","2:13698:30917","2:13701:30918","2:13704:25171","2:13707:25173","2:13710:25175","2:13713:25176","2:13716:2730","2:13719:30919","2:13722:30920","2:13725:30921","2:13728:30922","2:13730:30923","2:13732:30924","2:13734:30925","2:13735:30926","2:13736:30927","2:13739:30928","2:13742:22075","2:13745:25180","2:13748:30929","2:13751:30930","2:13754:30931","2:13757:30932","2:13759:23117","2:13760:25080","2:13761:23121","2:13762:23122","2:13763:23123","2:13764:25083","2:13765:25084","2:13766:25085","2:13767:30933","2:13769:2956","2:13770:30934"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13637:1024":{"id":"2:13637:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12451:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13639:30910":{"id":"2:13639:30910","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13649:25133":{"id":"2:13649:25133","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42537:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13725:30921":{"id":"2:13725:30921","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13326:8731","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::match_indices":"2:13722:30920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44573:8747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13759:23117":{"id":"2:13759:23117","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13757:30932":{"id":"2:13757:30932","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13287:148","`FromStr`":"2:13286:3104"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13286:3104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13286:3104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13701:30918":{"id":"2:13701:30918","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13326:8731","str::split":"2:13689:25165","prim@char":"1:12451:490","str::split_terminator":"2:13698:30917"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44473:8750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:25084":{"id":"2:13765:25084","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37583"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13669:27463":{"id":"2:13669:27463","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44659:3168","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:2430":{"id":"0:3-20:0:2430","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:2430","glob":true}}},"2:13648:25137":{"id":"2:13648:25137","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12470:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13642:30912":{"id":"2:13642:30912","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13640:30911"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13659:25159":{"id":"2:13659:25159","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13661:25163","str::split_at_mut":"2:13660:25160"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13672:25177":{"id":"2:13672:25177","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13638:22534":{"id":"2:13638:22534","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:25180":{"id":"2:13745:25180","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13689:25165":{"id":"2:13689:25165","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13326:8731","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::split_whitespace":"2:13667:28136","str::rsplit":"2:13695:25169"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44405:3172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2437":{"id":"0:0:2437","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[102,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.8/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.74)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name);\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![forbid(unsafe_code)]","#![warn(missing_docs)]","#![warn(clippy::print_stderr)]","#![warn(clippy::print_stdout)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:2430"],"is_stripped":false}}},"2:13698:30917":{"id":"2:13698:30917","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13326:8731","str::split":"2:13689:25165","prim@char":"1:12451:490","`DoubleEndedIterator`":"2:8476:133","str::rsplit_terminator":"2:13701:30918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44455:8751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13716:2730":{"id":"2:13716:2730","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13326:8731","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::rmatches":"2:13719:30919"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44609:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13722:30920":{"id":"2:13722:30920","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13326:8731","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::rmatch_indices":"2:13725:30921"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44555:8746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13732:30924":{"id":"2:13732:30924","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:23123":{"id":"2:13763:23123","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:31633":{"id":"5:5739:31633","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2819","`String`":"5:7802:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2819","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:23119":{"id":"5:5741:23119","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13762:23122"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13736:30927":{"id":"2:13736:30927","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13352:8726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13678:25179":{"id":"2:13678:25179","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13748:30929":{"id":"2:13748:30929","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:23121":{"id":"2:13761:23121","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13657:30914":{"id":"2:13657:30914","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12457:1765","str::slice_mut_unchecked":"2:13658:30915","crate::ops::Index":"2:40083:3041"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13651:25134":{"id":"2:13651:25134","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42537:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13675:25178":{"id":"2:13675:25178","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13692:25167":{"id":"2:13692:25167","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13141:8722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13710:25175":{"id":"2:13710:25175","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13668:28393":{"id":"2:13668:28393","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13667:28136"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44688:8733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13640:30911":{"id":"2:13640:30911","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13662:25164":{"id":"2:13662:25164","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13661:25163"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13665:28354":{"id":"2:13665:28354","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44381:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13695:25169":{"id":"2:13695:25169","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13326:8731","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::split":"2:13689:25165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44423:8716","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:8728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13653:25135":{"id":"2:13653:25135","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13751:30930":{"id":"2:13751:30930","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762:23122":{"id":"2:13762:23122","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13769:2956":{"id":"2:13769:2956","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5150:2956"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44713:2957","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5724:9081":{"id":"5:5724:9081","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13739:30928":{"id":"2:13739:30928","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:8731"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:8727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:25083":{"id":"2:13764:25083","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37583"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:6440:16824":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8668:3310":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:42535:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"22:30:3172":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"2:32857:8647":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:47416:3496":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:42588:3329":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:3378:3434":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"20:1104:21579":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"1:8498:3201":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:4931:8826":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:3605:3042":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:8938:30063":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13719:17311":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:4778:8682":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:9292:3383":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:2950:15899":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"15:306:15825":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:4852:8817":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:44527:8718":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:5379:16582":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:44688:8733":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:42579:2989":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:6706:3385":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11407:3106":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:12583:17166":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:16822:19993":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:6180:9461":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:8438:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13554:17031":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:46649:3506":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:45401:28873":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:5872:3397":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:6748:14629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:2227:17097":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12191:17152":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:12452:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:47101:3522":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:523:9870":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"8:0:2615":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6144:16811":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:3677:3136":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:473:9864":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:3248:34152":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"1:10280:21823":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:13933:19993":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:11655:3172":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:31117:3021":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:45208:9262":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:12475:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:9198:3406":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:2772:15891":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8223:3128":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4929:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:5449:16606":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10793:16997":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:6389:16821":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1539:10771":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:15418:21258":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:6411:14599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:15939:21294":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12550:17169":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:40895:28053":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:2400:2988":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:8267:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:12458:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"11:698:2989":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13361:17015":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12787:17219":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8801:3343":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:7424:16868":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:8330:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:11457:17041":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"6:6917:14664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:15586:21267":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:46325:3486":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:11298:3141":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:13064:9251":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:14997:20537":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:36804:9103":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:881:2987":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:4633:8814":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:13757:19983":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:7332:9745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:3271:2930":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"2:3341:9073":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:9397:22121":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:8894:3019":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5057:13856":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6731:14627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:15836:21284":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"14:202:8772":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:3759:9110":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6421:16823":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"20:3623:21605":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"2:11449:3138":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:2530:15880":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11232:17043":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:6824:3389":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:32827:2818":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"23:373:21648":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"17:15864:21287":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11678:17052":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:15050:20541":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:5285:27162":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"15:327:15829":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:8273:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:22867:3574":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3448:3191":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:41084:9178":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11787:3367":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:5241:13871":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:43226:8659":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:41055:8846":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:1625:10778":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:1099:3003":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:11280:9261":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:14072:20003":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:1871:3048":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11617:17005":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11886:23332":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:842:2998":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:2086:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13890:19990":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11579:17054":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:14269:20493":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:7341:15038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:7563:15049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"10:44:15775":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"12:0:2619":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13222:17009":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:13592:17026":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:5973:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:10572:8665":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:2486:15878":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:42297:3211":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:47627:8615":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"14:7:15800":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6111:16809":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12122:17119":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11147:23315":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12056:17147":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:8308:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:6765:14631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:46693:3460":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:6790:32267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:22955:28701":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:11000:22566":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:8268:23019":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7495:32869":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:2796:15892":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:16684:21488":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:15036:20540":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"21:353:21593":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"16:6188:16814":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"7:79:15644":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:43505:28171":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:22101:30069":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"20:3439:21571":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"20:3087:2773":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"17:14140:20008":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:23590:28349":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:11971:17089":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5113:16523":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11527:17065":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:15549:21265":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:7906:23195":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:31555:8872":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:1158:3005":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:41176:8693":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:12237:23309":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"28:112:21707":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"16:5318:16567":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:4053:2992":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:6691:14622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:5179:3271":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"28:69:21700":{"crate_id":28,"path":["strsim","GrowingHashmapChar"],"kind":"struct"},"6:4869:13833":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:41099:3085":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5649:16783":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"9:53:15684":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:43796:28348":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:12465:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:44391:3171":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11124:33722":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10977:33755":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11851:17093":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5249:13872":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"20:3587:28171":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"2:43981:28216":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"20:4086:34386":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:2403:8653":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:5348:16574":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:4829:23373":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"16:5060:16516":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:6713:2992":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"23:416:21654":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"2:41256:9054":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:3799:28509":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:23579:28237":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:3293:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:14460:20503":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:881:3001":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:5736:3357":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:3338:3006":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:42830:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:13921:19992":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:41359:9062":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:2496:3118":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:2335:3110":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46731:3472":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:11832:24861":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"20:4199:2776":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"5:1605:2995":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:41068:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:6876:16843":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:1884:2989":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:7521:32925":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"20:3914:34271":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"20:3872:34275":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"17:14859:20528":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:45143:9244":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:13951:28885":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:11222:17005":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:8000:16884":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:47371:3462":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:15931:21293":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:44966:8768":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:6285:3152":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10928:17000":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:9344:27195":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"20:34:2780":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"6:1690:10785":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:45173:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:42904:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6659:14618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:45147:9238":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:586:9879":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:4495:3284":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12699:17252":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:9323:22064":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:15689:21272":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:1214:31713":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:40252:8799":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"24:26:21668":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:45123:9240":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"15:288:15824":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:1085:3002":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"20:3852:21621":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"2:3573:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"20:1697:149":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"18:680:21528":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:4330:3152":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:6527:9469":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"17:11630:17059":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:12873:8735":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:30887:3224":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:46472:3505":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:14312:20496":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:44722:8743":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4816:13830":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14438:20502":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:44929:8767":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:8319:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:47673:8619":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:6952:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:2640:15885":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:11112:28896":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:12976:17262":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:41205:3169":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:33996:3433":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:11889:8720":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:6625:33254":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3335:9071":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:2162:3027":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"20:3839:21622":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"2:10012:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7192:16858":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:15905:21291":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:3075:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:12449:8705":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:12570:17165":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:23301:28262":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4875:13834":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:80:21509":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12687:17251":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:46524:3465":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:5128:3308":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:12028:17146":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12260:17205":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:16283:21318":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46763:3527":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:8137:16891":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:12457:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:5682:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:41757:9037":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7075:16856":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"20:1367:21580":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"5:4133:2992":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41741:9035":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:5482:13900":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:15064:20542":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:8261:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:1577:2990":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6564:14611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:3820:21620":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"17:12906:17249":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:9536:9184":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:6287:9056":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6337:16819":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:380:2952":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:22119:3138":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"21:0:2756":{"crate_id":21,"path":["anstyle"],"kind":"module"},"2:44704:8742":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:23084:3568":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:6882:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:8249:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:3772:2959":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"1:8097:3066":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:8727:3324":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"20:3460:21572":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"2:40083:3041":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:11315:22154":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:3814:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:7743:22291":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:10778:16996":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"16:4929:16454":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:15665:21270":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:7431:10892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4221:3251":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4780:3305":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:7920:28558":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:912:2990":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:5282:16554":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:32769:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:4902:3287":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:16311:21320":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:1370:3002":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:6239:16816":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4792:13828":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:23373:28418":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5196:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:34582:9099":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:3126:15905":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:3441:15908":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:613:34071":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5139:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:131:3343":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"18:735:21524":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"15:0:2621":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:10566:8667":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10246:16980":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:123:32791":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:2966:15900":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:7030:16853":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"9:390:15666":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:6402:23321":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:3602:3135":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:47607:8613":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:1907:3058":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:7337:16863":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:15531:21263":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5311:13880":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:1085:32790":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12044:17117":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:2570:15882":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:16036:21305":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:14055:20002":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:534:2925":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:8077:2965":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:996:3001":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:3774:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6749:16834":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:16520:21482":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:16786:21496":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:7649:2989":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:32692:3364":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"9:236:3343":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10394:16985":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4896:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:4267:15976":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:2148:3026":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:6837:16839":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:11737:8711":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:1580:15791":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:4177:3249":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7288:30696":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7542:33249":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:32745:28520":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"20:4143:9056":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"2:22033:8872":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4990:13848":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11539:17061":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:3620:3134":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:14708:20519":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:5689:16800":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"20:3487:21574":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"18:507:34060":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:0:2622":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:47034:3461":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:11717:3343":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"2:43091:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:6534:14609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:6489:3397":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"20:3701:3186":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"1:6211:3397":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:6710:3386":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14114:20006":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:12052:15833":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:44509:8720":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"23:114:3177":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"17:12108:17148":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:41047:8850":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"20:4060:34385":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"1:6537:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:6028:16804":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:31181:28133":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:570:9877":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:14335:17212":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:10568:8668":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4119:3244":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"18:635:34072":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:6507:14566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11864:17092":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10418:16986":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"28:34:21690":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"1:9478:3141":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:44902:8766":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:41548:9066":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:44220:8710":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"20:754:34473":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"2:23079:3570":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:5172:16536":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:16555:21483":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"11:708:2995":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:4730:2941":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:2941:2770":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13733:19982":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"16:5144:16531":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:2566:2983":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:46795:28334":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:16159:21309":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:4591:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:14346:17213":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11949:3220":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:12462:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:8105:16890":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:643:34060":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3458:9101":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:1623:2989":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:24097:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:7825:8774":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13610:17027":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:46340:3451":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:7401:33133":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:3446:3190":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:1898:8989":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"20:3829:2991":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"16:5417:16597":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:5493:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:14692:20518":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15997:21301":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:6827:3390":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:2112:9020":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:23557:28153":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:41040:8849":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11085:3363":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8617:3214":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:23051:3569":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:3769:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:41236:9053":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8672:3314":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2328:3108":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:3364:3009":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:5576:8687":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:14507:20505":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:984:2999":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"20:3243:34401":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"6:7548:15048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:46746:3521":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:5527:30657":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:47167:28419":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:8196:3129":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"11:1049:3004":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10534:16802":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:9442:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"20:3225:34412":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"11:854:2999":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"20:3942:21613":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"6:4890:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:10974:21816":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:9212:3403":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:7802:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5520:13904":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:2406:17091":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:2620:15884":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:42357:28388":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:889:3010":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12204:17153":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:10843:16999":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:3357:2930":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"21:309:21591":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:44473:8750":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:12487:8701":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:41218:9047":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:209:21588":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"2:47196:28144":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:12648:17171":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8889:2987":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:22192:3442":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:41340:9060":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:2368:30264":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:42629:3331":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:6895:3396":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:7386:16866":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:43788:28397":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:12456:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:670:21527":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:12470:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:43994:28147":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:16701:21489":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:8284:3026":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"11:785:2991":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:663:2959":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:1117:3005":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:5362:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"9:422:15667":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"23:486:34585":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:13027:9249":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:9305:22321":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:40923:8853":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:5543:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11272:22160":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11029:22148":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7212:15818":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:44251:8695":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:12478:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:14239:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:8223:16896":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:6652:14617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:4208:2988":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:6823:14635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:41297:9058":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13070:17004":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:42619:3316":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:2820:15893":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:6449:14603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8049:2936":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:7986:9823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"11:396:32797":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"23:61:21662":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"6:4964:13844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:3339:21554":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"2:45001:8771":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9271:3405":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15953:21296":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8260:2985":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:10938:33920":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12869:17019":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:6881:3395":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:5387:13890":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6302:16818":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:10338:8657":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:6731:16833":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:2137:3003":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:45151:9239":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:7813:23197":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"2:47063:3467":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:2349:3004":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:9496:3431":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:9182:3363":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12347:17209":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:46989:3455":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:3343:31814":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:47294:3490":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:31149:8691":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"28:0:2763":{"crate_id":28,"path":["strsim"],"kind":"module"},"9:176:15770":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:545:9873":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:43581:8658":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"24:96:21662":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:41389:9064":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:7454:15042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:15160:20548":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:3403:3194":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6658:16829":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:3297:2987":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:9686:8727":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:3570:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:6381:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10368:16984":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12992:17227":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:23164:28383":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8112:3067":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11319:33622":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:8900:9042":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:14405:20500":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:3373:3432":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:43054:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:0:2614":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6696:16831":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5622:13913":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:1675:10783":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:2559:32816":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:7815:8773":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8824:3344":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:45412:3580":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:2748:15890":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:6159:3379":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:46387:3452":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"20:2980:34366":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"17:3854:17190":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:7110:21643":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:14573:20510":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:14099:20005":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:15010:20538":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:1703:10786":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5635:13915":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"20:3881:34270":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"17:15973:21298":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:12464:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"16:4810:16427":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:42313:3212":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:33300:9092":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:3388:9093":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:2784:2988":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5420:13893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:14872:20529":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"20:4051:34413":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"1:10993:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:2880:15896":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:3659:3079":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12371:17164":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:1626:2992":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:578:9878":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:3720:2988":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8566:3168":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:16132:21307":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:22055:30078":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:15989:21300":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:8529:2816":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:46355:3487":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:15496:21262":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:8143:3199":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:14796:20523":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"20:3120:21584":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"2:44332:8714":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:13332:8727":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5127:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"9:328:15721":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:4899:3309":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:10574:8666":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:46611:3494":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:6998:16851":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15777:21280":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5541:13906":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:23324:3225":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:386:2953":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"26:0:2761":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:45155:9261":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:12463:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:7099:9051":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:299:32794":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:14627:20514":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11566:17055":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:5572:8686":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:16377:21325":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:1930:2777":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12897:17258":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"11:430:32810":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12149:17115":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:16728:21491":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:3300:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11358:17035":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:8895:3347":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:32752:8826":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:1597:10777":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:8572:3219":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6269:16817":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:11810:8716":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:47217:3456":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43233:8660":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:43521:28401":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:15981:21299":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:40933:8854":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:44991:8770":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:7577:15050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:5807:3360":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:7316:10720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:42978:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:40960:8742":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:40884:8852":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:15963:21297":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11465:17042":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:10821:3145":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:11698:8722":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:5198:16539":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:5586:13910":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"24:190:15704":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"17:16026:21304":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:22610:30075":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:16171:21310":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4829:13831":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:8290:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43766:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:7448:15041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6123:16810":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:14375:20498":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:4562:3152":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:13103:9250":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:40003:8810":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12082:17120":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:41790:9041":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:8284:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:23455:3226":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"11:830:2994":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:15679:21271":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:14358:20497":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:8296:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:15896:21290":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:47548:3474":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:7518:15046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:44290:8694":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:297:2819":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:5993:3382":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:7335:23190":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10663:16993":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:16656:21486":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:11105:28899":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:12069:23306":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:7801:23188":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"6:6631:14615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:8565:16905":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:798:2992":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:990:3000":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:10474:3366":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"11:102:32815":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:908:33256":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:44375:8738":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:10501:3079":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10516:16989":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7016:16852":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:4575:30684":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:6401:9049":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"20:1656:21607":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"17:10564:16990":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"27:0:2762":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"20:3671:21606":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"1:12451:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:12477:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:4341:3280":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:301:30063":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"17:13451:17019":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:5295:13878":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"20:4020:21616":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"6:7308:9916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6942:16847":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:4815:3249":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:12472:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:44697:8732":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:38790:9106":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:12423:2967":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:6502:15845":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:44455:8751":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11114:17003":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:13968:8883":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:6042:16805":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:8008:15421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11261:3362":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:2860:15895":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2480:3113":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:973:2998":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:22174:3441":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:5836:8794":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:47803:8625":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13570:17025":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:41006:8848":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:45317:28220":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:768:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:5676:13920":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:11970:3222":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:7896:16973":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:40967:8847":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"0:0:2437":{"crate_id":0,"path":["clap"],"kind":"module"},"17:10274:16981":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"28:120:21708":{"crate_id":28,"path":["strsim","RowId"],"kind":"struct"},"17:10332:16983":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:4902:16450":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:12234:17203":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:46632:3500":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"20:3174:116":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"1:938:2992":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:967:2997":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:4699:8831":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11068:22095":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:1647:3008":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:46553:3520":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:14520:20506":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3696:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"20:3215:34398":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"2:43247:8668":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:45388:3583":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:896:33272":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:7969:16881":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:322:33256":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:8031:15423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"28:130:21709":{"crate_id":28,"path":["strsim","GrowingHashmapMapElemChar"],"kind":"struct"},"17:15919:21292":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:1250:31707":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:16198:21313":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:7428:23160":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:38845:9107":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:8598:16907":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:2323:3003":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:13341:8729":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:23645:28343":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"11:2420:2989":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"11:2551:32820":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:4311:24859":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"20:3362:21560":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"6:4881:13835":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11065:17002":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:1514:10768":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:5650:3355":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:42441:28164":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:7738:3086":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"11:1601:15792":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1657:10781":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:8626:16909":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:12467:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12163:17150":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:42732:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:364:32806":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:11691:17051":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:8179:16894":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:1555:2989":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:3866:3027":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:45119:9237":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:22180:3445":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6902:14663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:11931:8719":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:5428:13894":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12952:17260":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:985:3012":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11037:3310":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:11807:22116":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:8636:16910":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:10562:8660":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"24:113:21667":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"17:11720:17080":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:8694:3262":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:23612:28392":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:46877:3489":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:46951:3501":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"11:2545:32793":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:3024:3138":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:14547:20508":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:43998:8696":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:34409:9098":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8629:3286":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"20:3519:21565":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"16:5757:33239":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:43128:3380":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3307:27847":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:10193:30059":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5441:13895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"23:181:3138":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"16:7416:16867":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:8585:16906":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:1630:2993":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:4873:16444":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:8503:16902":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:2648:3182":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:8528:16903":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11421:17038":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13854:19988":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"20:49:2778":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"6:6666:14619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:1880:2987":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:7883:16875":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:485:9866":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:46845:28342":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:667:16973":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:12476:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:14127:20007":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46862:28184":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:4529:3152":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:45347:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:34928:9102":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6866:16842":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:546:33197":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7350:33224":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6256:33136":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:4072:34300":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"17:11386:17036":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12135:17149":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:1524:2987":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"10:0:2617":{"crate_id":10,"path":["adler"],"kind":"module"},"6:5562:13908":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:583:16972":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:16179:21311":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:4489:3152":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:5305:17280":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:10597:16991":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:44787:8761":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:685:2988":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:46440:3493":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:1108:3004":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:10500:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:13781:19984":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:10167:16978":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:15540:21264":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:42756:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:10198:28614":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:14056:29960":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:14917:20532":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:1900:3006":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"20:3974:21617":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"2:5413:29058":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:9460:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"21:259:21589":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"11:2533:32818":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:16332:21322":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:1494:10765":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11515:17071":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:4941:3263":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:7839:23186":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:10115:16976":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:3668:27099":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5603:13912":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11733:17081":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:1727:10788":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:13087:9248":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:23217:28189":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:9425:3384":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:5151:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:47519:3523":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:15641:17060":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:47647:8617":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7471:16870":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:7105:28415":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:5040:8829":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:3587:15909":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"20:3235:34399":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"2:44808:8762":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"20:3426:21575":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"5:3456:2993":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:40195:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:14832:20526":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:2083:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:8031:2939":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:1064:15787":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"22:110:21635":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"18:718:21523":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:43757:3146":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:42275:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:1616:2996":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:7581:3029":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:22121:3446":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"20:2965:34367":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"2:23524:28187":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:282:30657":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:3548:3022":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:40944:8743":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"20:4034:21615":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"2:42329:3213":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:42497:3215":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:4921:8825":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:1401:3003":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12306:17207":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"6:5301:13879":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:13347:8728":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:23435:28389":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2029:3152":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"5:3851:3026":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:43466:28060":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:2668:9124":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:15852:21286":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8091:2966":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:4943:3264":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:15621:21252":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:42793:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:15760:21278":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:4233:3254":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"23:497:21642":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"6:5217:13868":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:4137:34186":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"6:5265:13874":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5648:13917":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:34755:9100":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:41121:3089":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:3014:15902":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:32828:9074":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:16145:21308":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:4579:28769":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:34130:9096":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"23:480:21641":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"5:7561:2992":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11075:33623":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:328:32804":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11163:17004":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13958:19995":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:925:2991":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13181:17272":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:8201:3130":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:16668:21487":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:5392:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:15701:21273":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:10934:3312":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:32859:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:32759:9168":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:2467:15877":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4914:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2508:3124":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:3096:31744":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:689:21529":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:2020:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:2840:15894":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:3783:21625":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"1:8516:3137":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:40100:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:726:21531":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:9739:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:43015:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:4184:15939":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:22576:3448":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:8649:3278":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:15439:21260":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12035:15783":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:8358:27190":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:22298:3443":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"11:1674:32811":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:3042:23313":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:7263:30688":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5658:13918":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:4844:16438":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12409:17211":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:2378:17131":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"20:4168:34246":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"6:5088:13858":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6493:14565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13145:17268":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:15148:20547":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:47490:3502":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:3330:3008":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8879:3346":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:14886:20530":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:7571:3014":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3310:23021":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:41399:9052":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"23:359:21647":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"2:22089:30074":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"20:3445:21566":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"5:726:30182":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:12471:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:5282:13876":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:42571:2988":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:11129:21593":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"20:3433:21570":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"17:14284:20494":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13662:17309":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"20:3549:21576":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"1:4569:3276":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"23:244:27099":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"2:23487:3138":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:7951:23322":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:46568:3526":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:15739:21276":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:16323:21321":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:11821:22133":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"15:394:15836":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:5475:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:2121:3002":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:6759:30657":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12711:17253":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5165:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:22070:30083":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"20:3536:21568":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"1:8010:3138":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6098:16808":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:14393:20499":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14599:20512":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:1339:17066":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"23:322:21650":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"6:1632:10779":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:16714:21490":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:8026:2937":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:42867:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5019:13851":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:2816:30617":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:44364:8741":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:16084:21306":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:8343:15620":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:45380:3582":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5507:13903":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:8206:3127":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:4987:8828":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:23285:28336":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"7:32:15637":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:1539:2988":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:4211:3250":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"14:31:15800":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:8165:16893":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:46922:3495":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11902:17098":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"23:432:34574":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"6:6480:14606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6813:14634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15887:21289":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12249:17204":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:687:2963":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13205:17008":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2498:3119":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"18:589:28140":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:45131:9241":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:12293:17163":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:698:21530":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"20:3468:21573":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"17:14220:20492":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:1920:3009":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:4997:3265":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:10771:3192":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"20:0:2430":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"1:6020:3325":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:12673:17239":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:1589:10776":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:7368:3314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:40039:8652":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:3780:8812":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6611:14613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6573:16826":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:6910:9068":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:538:21538":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5051:13855":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12524:17170":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7807:33280":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:3092:31743":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5025:13852":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:4702:3288":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:517:9869":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:8559:3172":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:1869:3047":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:7168:15819":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12886:17248":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:9364:16872":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:13427:17018":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"5:7090:8794":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"14:220:15810":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10296:16982":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:44322:8713":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:41327:9050":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:6970:16849":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:11248:3311":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:7532:3023":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:14738:20520":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:3564:2815":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:22905:3575":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:465:9863":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:10031:16974":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:8669:16911":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:1230:31830":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:13547:17024":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:8753:3342":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:12474:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"25:53:3343":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"1:8011:2954":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10729:16995":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11838:24855":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:7361:15040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5319:13881":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"20:3380:2771":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"2:13991:9057":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:3295:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:15829:21283":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:43778:3343":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13635:17308":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6680:16830":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:40215:2977":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:4349:3281":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8736:3323":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:4999:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:23634:28048":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"16:7508:33236":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11281:17006":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12225:17155":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:7751:9178":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:14043:20001":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:903:33218":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:47616:8614":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4984:13847":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:22043:30078":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:8213:3131":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:3086:31879":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:33512:9091":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:6419:14600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:1586:2991":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"14:0:2620":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:7554:16871":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:7215:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:4152:15930":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:6473:14605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:1491:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"13:229:32821":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:8584:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"11:1564:15790":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:45139:9243":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:8028:16886":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:2326:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:5224:13869":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:45449:8635":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:23442:3227":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:4186:2989":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:12468:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:7159:16857":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5488:13901":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:479:9865":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:15714:21274":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:6890:16844":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:96:21510":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3851:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6205:16815":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6672:14620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:1489:10764":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:41350:9061":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:43741:3144":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:6064:16806":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:538:9872":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5288:13877":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:8235:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"20:1368:2780":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"assoc_type"},"17:15475:21261":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:3313:23008":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:23037:3138":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:45339:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13082:17005":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"26:40:21676":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"6:5069:13857":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:506:15848":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:7414:10894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:47741:8623":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"25:0:2760":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"16:155:15851":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:507:23325":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:1643:10780":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:553:9874":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2802:8646":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:47711:8621":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"20:3253:208":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"16:2590:15883":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:39424:9108":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13692:17310":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11016:17001":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:4108:21600":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:40263:8807":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:8394:9043":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:8363:22290":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:14327:17214":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13970:19996":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:12466:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:532:9871":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:16385:21326":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:8249:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:4149:3246":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6843:16840":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10141:16977":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:34264:9097":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11926:17096":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"20:1649:21603":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"2:3517:8651":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"11:1914:3008":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42650:9192":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:9241:3404":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:10007:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:10570:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12798:17255":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:7463:15043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13014:17279":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:44312:8715":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:2704:15888":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11653:17057":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5107:13859":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:5426:8680":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:4805:13829":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:4218:2775":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"1:8368:3186":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:44211:8706":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:41375:9063":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12860:17257":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:12455:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:5349:13885":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:41149:3102":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:44669:8745":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:11903:8718":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:3535:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15410:21257":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"23:0:2758":{"crate_id":23,"path":["anstream"],"kind":"module"},"21:127:34508":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"17:16507:19983":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:8427:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:14282:3581":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"20:3506:21564":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"6:1530:10770":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:32770:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:7716:33220":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:7591:31822":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:10958:27319":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:47764:8624":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:31170:8656":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:31155:9010":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:2206:9134":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2732:9223":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:6084:16807":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"20:3749:21596":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"17:14672:20517":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:42667:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:38735:9105":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:46507:3459":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:22288:3138":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:9581:2777":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:3569:3152":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13055:17061":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:5630:3354":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:4848:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:10565:27304":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"20:933:21558":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"2:47662:8618":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14902:20531":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:7495:24864":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:4842:13832":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6713:16832":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:34197:9095":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:3025:8876":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:8476:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:10406:24854":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:5395:13891":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"9:480:15664":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:4484:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:42659:2945":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13306:17012":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:7789:33234":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:1005:3002":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:8302:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5205:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:11775:8723":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:14319:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5570:13909":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:8546:16904":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:44202:8707":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:3987:15913":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:4978:8827":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:7613:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:8447:2817":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:7884:2993":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:682:2962":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11998:17110":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6716:14625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:3181:3082":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:23008:9123":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:1652:3009":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:563:21539":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:7124:8796":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13818:19986":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:6386:3584":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11757:17082":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:9751:23279":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:7907:16876":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:23393:28232":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:2539:29054":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:7778:3088":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:47636:8616":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:44151:28557":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"11:2380:2987":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"9:355:15681":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:10773:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:3834:15911":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:3309:31819":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:11021:22105":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:8546:3170":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:497:9868":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13041:17269":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:2256:2925":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11475:17043":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:10630:16992":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:182:21587":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"6:491:9867":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:10564:8659":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"20:3292:21557":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"23:466:21643":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"2:22823:3573":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:8583:3210":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:3800:30657":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:8320:16900":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"20:3902:34273":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"6:8353:15621":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5450:13896":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2816:8861":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"16:5727:16802":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"18:651:34060":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5117:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:9433:3152":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:14933:20533":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8489:3199":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:9145:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:2209:3113":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"2:43476:8656":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:45438:8637":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:7749:9046":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:14640:20515":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:2415:15846":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:2724:15889":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2920:15898":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12749:17224":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:5143:3152":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:5641:13916":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:5366:13887":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"20:3953:21624":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"17:12983:17263":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11448:17040":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:23623:28239":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"16:7980:16882":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:42463:3223":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:14586:20511":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"23:402:21653":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"6:1569:10774":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:16798:21497":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:1595:2994":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:8298:16899":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:13326:8731":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:7900:8791":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:47122:28268":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:10097:16975":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:564:9876":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:3403:8649":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"11:772:2990":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:9156:3311":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10983:3131":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:23357:28269":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:11630:2988":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:2554:2631":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:47084:3473":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8536:3169":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:16750:21493":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:11788:17109":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:16494:19982":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:8578:3218":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:46972:3507":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5551:13907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:41196:3039":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"20:3923:34272":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"5:1785:30657":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12941:17250":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:22943:3578":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:10560:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:1123:30657":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:4225:3252":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:15573:21266":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:7180:3437":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11503:17044":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"18:481:21534":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:44713:2957":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"14:187:15808":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11432:17039":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13838:19987":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7765:16873":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:41073:3084":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:14084:20004":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:13141:8722":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:45325:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5462:13897":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:45032:8753":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12359:17210":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:4567:28770":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:6876:14662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:10387:3058":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:12454:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:41246:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40155:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:6638:14616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:9139:3361":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8255:2986":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"22:0:2757":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"5:2173:3028":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:11012:3133":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:6600:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:14845:20527":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:42628:2968":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:754:21532":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:16739:21492":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:47590:3529":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:8267:16898":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:8199:15584":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4362:3282":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:41274:28404":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11592:17053":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12625:17173":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5682:13921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:11473:3105":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"28:87:21701":{"crate_id":28,"path":["strsim","HybridGrowingHashmapChar"],"kind":"struct"},"18:765:21525":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:45197:3436":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7044:16854":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:38680:9104":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:11363:22574":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:3304:3007":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:9190:2987":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:4694:16357":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6708:14624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"20:3306:21559":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"2:46404:3458":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:4171:3248":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"23:389:21665":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"6:8255:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:15431:21259":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:3707:2987":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13095:17275":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:491:34089":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"23:99:21655":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"11:351:32808":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:3496:3177":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:10975:28900":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"6:7487:15045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13290:17011":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:3308:15907":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"20:3862:34274":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"2:5009:2942":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"23:144:21656":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"5:4163:30657":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7790:8681":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:7919:16877":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:6599:14612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:5020:3259":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:40175:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:45329:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4947:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6521:14607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:44555:8746":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:948:2993":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:14019:19999":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13537:17023":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13491:17021":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10803:3171":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:44854:8765":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6770:14632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:5255:13873":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"20:3135:21585":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"1:9452:3393":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:10408:27157":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:12931:17023":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:11909:3221":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:3141:15906":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:16241:21316":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:15812:21282":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:3931:2993":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:835:2997":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:15090:20544":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"21:113:34507":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"11:671:2987":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:16632:21484":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:7350:15039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6623:14614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:22731:3444":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11805:17095":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14560:20509":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:13400:8755":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:4018:3222":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:14975:20536":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:521:21533":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:285:21664":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"6:6437:14601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:4825:23369":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:9206:2989":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:10817:2936":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:3503:17167":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:15077:20543":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:10963:3127":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:963:2996":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:1696:3272":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:12038:27177":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:7854:8858":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:13169:17303":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:2228:15783":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:13157:17267":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:7959:16880":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12723:17226":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:7696:2983":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:44303:8712":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1984:3077":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:8643:3219":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:15655:21269":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:598:34064":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:3048:15903":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:6777:14633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6700:14623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"20:3572:21562":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"2:32734:22016":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:1220:17058":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3350:3192":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:46582:3440":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:40137:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8906:3348":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:40115:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:3687:3163":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:42707:2987":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:43493:28217":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:5405:13892":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11878:17004":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:12473:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:16761:21494":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:599:2933":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:3889:15912":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12392:17184":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"21:173:34506":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"17:12605:17004":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11958:17090":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"20:3776:21612":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"17:15121:20546":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4937:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:46824:28135":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:472:16971":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:16341:21323":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:14001:19998":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:623:34068":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:9447:3392":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"20:3792:2774":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"26:21:2775":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"1:12045:15833":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:2666:9123":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:41288:9057":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:10657:3361":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:46486:3453":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:9573:3330":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:31528:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:12008:17144":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:7114:8795":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:5220:8840":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:11781:22294":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:10519:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:44573:8747":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:4766:16406":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:12461:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:10777:3190":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:12840:17222":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:8711:16912":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:14299:20495":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"5:3088:30621":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:13562:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7838:16874":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"23:309:21649":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"6:5471:13898":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:7058:16855":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:317:33218":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:5593:13911":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12066:17142":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:8043:33047":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"18:706:8729":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"20:1675:24929":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"2:41772:9038":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:10555:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:16775:21495":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:8635:3275":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11173:33877":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:8233:16897":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"23:447:3343":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"6:4957:13843":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:809:2993":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:40910:8851":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:46664:3454":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:6738:33223":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:4333:3279":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:41782:9039":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:22300:3442":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:41169:3132":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:8390:9044":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:23535:28252":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:10700:23316":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"11:740:2996":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6544:14610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:7604:15052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:2521:3126":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1:1635:3006":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:7641:2989":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10784:33577":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"17:14750:20521":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:4680:3287":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:44609:8748":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:3720:17172":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:44659:3168":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:12416:8704":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"9:445:15665":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:15136:17023":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"24:0:2759":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"6:4970:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:4185:3353":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"1:3405:3195":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:5666:3356":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"25:23:15704":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"6:5007:13850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:33724:9094":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5381:13889":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10953:21832":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"2:26497:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:8507:3133":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:6210:3152":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:23546:28152":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"14:160:15800":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"20:3611:21561":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"6:4976:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15024:20539":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:14533:20507":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:16595:19985":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:7391:10909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:4956:16458":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:5709:16801":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:47726:8622":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5044:13854":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:41524:3170":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:6723:14626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:954:2994":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:6931:30657":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:11045:3067":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:3085:8640":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:40087:9109":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:22994:3579":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:10781:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14947:20534":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:44980:8769":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:23466:3241":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:575:2931":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:8014:15422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"13:0:2613":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:9437:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:14963:20535":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:16008:21302":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6159:16812":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:6526:14608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:1105:15788":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:608:34088":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:7397:23280":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"11:2366:15793":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:15844:21285":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:5451:3202":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:8891:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"20:4192:34407":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"1:12450:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"11:2148:3004":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:39:3043":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:1415:3005":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"9:0:2616":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:581:8872":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13193:17271":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:6443:14602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:3916:3220":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:10816:3143":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:41318:9059":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6808:16837":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5334:13883":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:2660:15886":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:8096:16889":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"24:252:2780":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"17:16812:21498":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"18:659:21526":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:14807:20524":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:42715:2988":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:9746:3130":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"23:288:21652":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"2:46714:3466":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:1521:10769":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5494:13902":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:8014:16885":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6822:16838":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:1551:10772":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:65:2782":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"2:22957:9123":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:44423:8716":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"20:4123:21599":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"2:41265:9055":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:43240:8667":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"20:3761:21597":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"21:374:21594":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"17:12095:17118":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:6127:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13798:19985":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12762:17223":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:42723:2989":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:10696:16994":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:40245:9111":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"20:3932:21623":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"1:5616:3353":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:23568:28173":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:46457:3499":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:44679:8734":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6588:16827":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:14612:20513":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:7825:23200":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"6:4921:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:7469:15044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:904:2989":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:4241:15973":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:42475:3214":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:2754:3174":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6953:16848":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:15946:21295":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:4414:3283":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:1711:10787":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10549:16803":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"23:337:21651":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"5:4370:2987":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:12402:22134":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6462:16825":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:0:2624":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:7707:2984":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:11606:2987":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:15602:21268":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"11:434:32799":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:6227:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:13322:17013":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:5865:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"22:152:21637":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"20:2762:2987":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"17:15351:21256":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:15286:21254":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:2348:31863":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:679:2961":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:6310:23310":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:16613:19986":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:7855:8859":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"20:4131:34406":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"21:341:21631":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"2:41534:9065":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"10:36:32788":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:4120:15921":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11777:17083":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:7990:16883":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:2718:3183":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:16264:21317":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13266:17010":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:5195:3319":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:45422:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:5533:13905":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:22571:3138":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"18:515:21536":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:47569:3508":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5186:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:1175:21577":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"20:3053:2772":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"1:2331:3109":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:14031:20000":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:22087:30072":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:7549:3013":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:41763:3200":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"20:3276:21556":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"17:16362:21324":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"24:298:21665":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"17:16832:19995":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:15769:21279":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:15557:21253":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11563:23328":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:13352:8726":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:8624:3285":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12826:17220":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:9169:3362":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:8483:16901":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:5131:17274":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:3400:8648":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:9377:22109":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:5085:16518":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:0:2618":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12816:17020":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:23601:28174":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:2013:3078":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:45135:9245":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:11606:17004":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:2684:15887":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"14:40:19984":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:44837:8764":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:42941:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:279:21590":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"16:4404:16090":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44277:8693":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:41227:9048":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10487:16988":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"6:6462:14604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11793:22128":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:1500:10766":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:3408:8650":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:5325:13882":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:5114:3307":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:8612:16908":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:7949:16879":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:9351:22311":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"11:1893:2993":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:11848:8717":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"11:1023:3003":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:4163:3247":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:11141:23308":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:1584:10775":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:5742:16803":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:11917:8721":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:7621:30153":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:4827:23371":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:4614:8645":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2482:3114":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:1636:3025":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:5255:16550":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:14416:20501":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:23349:28156":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:45461:28344":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:47688:8620":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13871:19989":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:7358:16864":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7372:16865":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10442:16987":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:22929:3138":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:8203:3374":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:1907:3007":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6640:16828":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:44230:8708":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:7305:16862":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:22172:3138":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5341:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:11818:17094":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:7605:2989":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:4939:3260":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:15:2733":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13398:17017":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:531:21537":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:4983:16462":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:14108:8881":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:1619:2987":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:43560:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:34063:3435":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12537:17168":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:44627:8749":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:8058:16887":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:16187:21312":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11952:17103":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:5986:3381":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:6740:14628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:12962:17261":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:46372:3492":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:6758:14630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:6434:22292":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:4857:8818":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:43535:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13909:19991":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:12851:17256":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:44381:8737":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:6065:2969":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:6852:16841":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:41111:3171":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:14483:20504":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:9310:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"20:61:2781":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"2:44823:8763":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:10548:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:5357:13886":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"11:1888:2992":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:43543:8656":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:2301:3002":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:44405:3172":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:6984:16850":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:881:3228":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:8276:3184":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:14152:20009":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:929:3011":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:42554:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:15315:21255":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:5036:13853":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:16019:21303":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"20:3890:34277":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"20:52:2779":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"16:2990:15901":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:8553:3171":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:2900:15897":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:5879:3398":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:13286:3104":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"22:28:3138":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"16:3695:15910":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:42563:2987":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:3941:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:11309:17007":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:8066:16888":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13945:19994":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1386:3004":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:573:34060":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:41139:3103":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:16209:21314":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:559:9875":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:3305:2944":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:41306:9067":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:1140:15789":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:3077:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:2266:31826":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"13:110:32829":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:5670:13919":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:12026:8631":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:12418:22306":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12335:17208":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:2295:30240":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7282:16861":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8839:3345":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:0:2623":{"crate_id":17,"path":["object"],"kind":"module"},"2:45014:8752":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:12434:22150":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:3352:3193":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:4499:30684":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:15106:20545":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"20:3990:34339":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"5:5302:3379":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4997:13849":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:4113:3245":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"14:214:15809":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3913:3221":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:8151:16892":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12920:17259":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:6746:3394":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"20:1651:21604":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"20:3579:21581":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"2:43749:28054":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:7539:15047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:89:21660":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"2:12841:9206":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11026:33858":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"14:165:15801":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:41748:3385":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:12857:9208":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"20:3512:21567":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"5:4298:3152":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13983:19997":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:1667:10782":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:2585:30619":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:1932:3064":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:11249:28892":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"16:7731:3329":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"11:2440:2992":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:7462:16869":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6368:16820":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:14773:20522":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13385:17016":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"22:5:3244":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:40436:8877":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:2550:15881":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:23408:28313":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:47461:3468":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3539:3200":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:5316:27162":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12736:17225":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:45127:9242":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:15876:21288":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46778:3528":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6680:14621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"17:14821:20525":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"20:3529:21569":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"1:9229:3401":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:1641:3007":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:22072:30081":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13006:17264":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:2215:9133":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13349:17014":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13119:17273":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5477:13899":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6173:16813":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:2437:17116":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11553:17056":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:40848:2957":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10823:16998":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12319:17185":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:5804:3358":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"18:113:21511":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:9256:3402":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:1854:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5230:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5375:13888":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:32768:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:212:8655":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:3576:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15731:21275":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12776:17254":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:8209:16895":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:1889:2993":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:5271:13875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5629:13914":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:22729:3138":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:3786:8811":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:7722:2943":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:16297:21319":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:11291:33862":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:14374:3015":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:14262:3584":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:6580:3587":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"11:2466:2993":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:2208:9135":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:12018:17145":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13515:17022":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12216:17154":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:6840:2989":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:9420:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:9316:2930":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:3851:3217":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:7766:3087":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"20:3565:21578":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6794:16836":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:6408:16822":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13471:17020":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12469:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:894:2988":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:15753:21277":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5224:16542":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:46539:3471":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:873:3000":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:11333:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:5105:3306":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12176:17151":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:16218:21315":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"25:88:2780":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"5:6043:2992":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"21:329:21592":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"17:12280:17206":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6904:16845":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13028:17270":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:16642:21485":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:9356:22298":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4902:13837":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:12449:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:2793:3185":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"20:3105:21555":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"6:1563:10773":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:3553:8638":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:6561:3586":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:7541:2989":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7578:16872":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:6914:16846":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:7938:16878":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:42515:3216":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:14652:20516":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:10774:3194":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:15785:21281":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:45322:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:46419:3488":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10218:16979":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:41734:28407":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:11706:17079":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:16399:21327":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:11053:3357":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:1002:2987":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:23335:28149":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:23270:28059":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"20:3808:21614":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"20:57:2777":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"16:3110:15904":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:44240:8709":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6781:16835":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11401:17037":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:7259:16860":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:32738:16911":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:2450:15876":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:22598:3438":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7223:16859":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:2506:15879":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"22:125:21636":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"2:40952:2957":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:1507:10767":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:959:2995":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2435:15875":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:7586:15051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:1684:10784":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:7971:9033":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40854:8815":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11985:17143":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"9:500:15668":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11831:17061":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:11459:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:14083:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:44351:8744":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:630:2955":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"22:97:21634":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}