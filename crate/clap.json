{"root":"0:0:2405","crate_version":"4.5.4","includes_private":false,"index":{"2:13300:30103":{"id":"2:13300:30103","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44298:8647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5699:30818":{"id":"5:5699:30818","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:30098":{"id":"2:13266:30098","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13343:23264":{"id":"2:13343:23264","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5692:30816":{"id":"5:5692:30816","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:2724","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:303:2724","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13331:30105":{"id":"2:13331:30105","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12952:8633","str::split":"2:13319:22191","prim@char":"1:12355:475","str::split_terminator":"2:13328:30104"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44102:8652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13369:30115":{"id":"2:13369:30115","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:2398":{"id":"0:3-20:0:2398","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,0],"end":[101,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:2398","glob":true}}},"2:13384:30118":{"id":"2:13384:30118","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13308:22635":{"id":"2:13308:22635","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:21628":{"id":"2:13292:21628","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44020:3074","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:22116":{"id":"2:13392:22116","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5693:8983":{"id":"5:5693:8983","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13355:30108":{"id":"2:13355:30108","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12952:8633","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::match_indices":"2:13352:30107"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44202:8649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13397:30120":{"id":"2:13397:30120","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5014:30120"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44333:8644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13264:21909":{"id":"2:13264:21909","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:28329":{"id":"2:13291:28329","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44010:8639","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13387:30119":{"id":"2:13387:30119","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12913:136","`FromStr`":"2:12912:3007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12912:3007","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12912:3007","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:23249":{"id":"2:13286:23249","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13285:23248","str::split_at_mut_checked":"2:13288:23253"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265:30097":{"id":"2:13265:30097","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5696:30817":{"id":"5:5696:30817","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13334:23259":{"id":"2:13334:23259","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633","str::rsplitn":"2:13337:23261"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44138:8622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:22974":{"id":"2:13390:22974","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40054:8779","Self::is_ascii":"2:13389:22111"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40054:8779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13337:23261":{"id":"2:13337:23261","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12355:475","str::splitn":"2:13334:23259","self::pattern":"2:12952:8633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44156:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13372:21895":{"id":"2:13372:21895","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:28432":{"id":"2:13293:28432","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13295:28426"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44308:8636","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13328:30104":{"id":"2:13328:30104","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12952:8633","str::split":"2:13319:22191","prim@char":"1:12355:475","`DoubleEndedIterator`":"2:8320:129","str::rsplit_terminator":"2:13331:30105"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44084:8653","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13360:30110":{"id":"2:13360:30110","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:23222":{"id":"2:13279:23222","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5707:30819":{"id":"5:5707:30819","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13263:1005":{"id":"2:13263:1005","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12355:475"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13358:30109":{"id":"2:13358:30109","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:3100":{"id":"5:5709:3100","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13340:23263":{"id":"2:13340:23263","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:22977":{"id":"2:13394:22977","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:37394"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13362:30111":{"id":"2:13362:30111","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:30121":{"id":"2:13401:30121","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5012:30121"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44351:8645","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5708:30820":{"id":"5:5708:30820","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:303:2724","`String`":"5:7747:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:2724","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:23252":{"id":"2:13287:23252","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13288:23253"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:22191":{"id":"2:13319:22191","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12952:8633","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split_whitespace":"2:13293:28432","str::rsplit":"2:13325:23257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44034:3075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13352:30107":{"id":"2:13352:30107","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12952:8633","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatch_indices":"2:13355:30108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44184:8648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13262":{"id":"2:13262","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13263:1005","2:13264:21909","2:13265:30097","2:13266:30098","2:13268:30099","2:13271:22090","2:13272:30100","2:13273:335","2:13274:23224","2:13275:23220","2:13277:23221","2:13279:23222","2:13281:23223","2:13283:30101","2:13284:30102","2:13285:23248","2:13286:23249","2:13287:23252","2:13288:23253","2:13290:28429","2:13291:28329","2:13292:21628","2:13293:28432","2:13295:28426","2:13298:22192","2:13300:30103","2:13301:28430","2:13302:23265","2:13305:22633","2:13308:22635","2:13311:21405","2:13315:21406","2:13319:22191","2:13322:23255","2:13325:23257","2:13328:30104","2:13331:30105","2:13334:23259","2:13337:23261","2:13340:23263","2:13343:23264","2:13346:2636","2:13349:30106","2:13352:30107","2:13355:30108","2:13358:30109","2:13360:30110","2:13362:30111","2:13364:30112","2:13365:30113","2:13366:30114","2:13369:30115","2:13372:21895","2:13375:23266","2:13378:30116","2:13381:30117","2:13384:30118","2:13387:30119","2:13389:22111","2:13390:22974","2:13391:22115","2:13392:22116","2:13393:22117","2:13394:22977","2:13395:22978","2:13396:22979","2:13397:30120","2:13400:2860","2:13401:30121"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13325:23257":{"id":"2:13325:23257","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12952:8633","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split":"2:13319:22191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44052:8618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13349:30106":{"id":"2:13349:30106","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12952:8633","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::matches":"2:13346:2636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44256:8651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13400:2860":{"id":"2:13400:2860","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5015:2860"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44342:2861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5710:22113":{"id":"5:5710:22113","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13392:22116"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13315:21406":{"id":"2:13315:21406","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13381:30117":{"id":"2:13381:30117","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:30102":{"id":"2:13284:30102","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12361:1734","crate::ops::IndexMut":"2:3484:2945","str::slice_unchecked":"2:13283:30101"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13378:30116":{"id":"2:13378:30116","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:30100":{"id":"2:13272:30100","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:22115":{"id":"2:13391:22115","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13305:22633":{"id":"2:13305:22633","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:22192":{"id":"2:13298:22192","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44288:3071","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:23255":{"id":"2:13322:23255","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12767:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:23248":{"id":"2:13285:23248","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13287:23252","str::split_at_mut":"2:13286:23249"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:22090":{"id":"2:13271:22090","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12499:8637"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:21405":{"id":"2:13311:21405","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13375:23266":{"id":"2:13375:23266","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13277:23221":{"id":"2:13277:23221","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:23220":{"id":"2:13275:23220","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:23223":{"id":"2:13281:23223","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:30101":{"id":"2:13283:30101","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12361:1734","str::slice_mut_unchecked":"2:13284:30102","crate::ops::Index":"2:39699:2944"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:22111":{"id":"2:13389:22111","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13268:30099":{"id":"2:13268:30099","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13266:30098"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:30112":{"id":"2:13364:30112","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:23253":{"id":"2:13288:23253","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13287:23252"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13365:30113":{"id":"2:13365:30113","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:335":{"id":"2:13273:335","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13274:23224","`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:30114":{"id":"2:13366:30114","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12978:8628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2405":{"id":"0:0:2405","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[115,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.4/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.74)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy::single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy::single_component_path_imports)]","#![allow(clippy::branches_sharing_code)]","#![allow(clippy::if_same_then_else)]","#![allow(clippy::collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:2398"],"is_stripped":false}}},"2:13290:28429":{"id":"2:13290:28429","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44004:8640","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13346:2636":{"id":"2:13346:2636","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12952:8633","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatches":"2:13349:30106"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44238:8650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:22117":{"id":"2:13393:22117","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13396:22979":{"id":"2:13396:22979","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:37394"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:23224":{"id":"2:13274:23224","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:28426":{"id":"2:13295:28426","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13293:28432"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44317:8635","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:23265":{"id":"2:13302:23265","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:28430":{"id":"2:13301:28430","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44326:8634","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711:22114":{"id":"5:5711:22114","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13393:22117"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5691":{"id":"5:5691","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5692:30816","5:5693:8983","5:5696:30817","5:5699:30818","5:5707:30819","5:5708:30820","5:5709:3100","5:5710:22113","5:5711:22114"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13395:22978":{"id":"2:13395:22978","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:37394"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:40562:8645":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:34198:9001":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:23201:28128":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:11293:16973":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"20:1670:21493":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"17:11467:16987":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"21:113:34345":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"1:10984:21881":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"20:3544:21454":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"16:7462:16776":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6748:14535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:4406:3186":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:46051:3372":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:4577:31626":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:40915:8959":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:40466:2861":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:40528:8754":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:40823:3072":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:4207:34256":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"17:11788:17093":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:1023:2906":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:6143:8957":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:15734:21201":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12030:17059":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:4486:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:11223:9167":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:5622:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:3678:29206":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5779:3260":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"20:1107:21464":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"1:12370:899":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"23:389:21551":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"2:40717:2988":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7305:16769":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7508:33073":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:7469:14950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:2539:28210":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10995:2970":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"15:288:15731":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6638:14522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5586:13816":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:2485:3022":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:3804:31597":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1583:2893":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:706:8631":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:3279:8549":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:8608:3178":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:10622:33883":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11764:17046":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:5562:13814":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:8261:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13526:19888":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"18:80:21393":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"14:202:8674":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:1592:2894":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13581:19892":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:6406:26797":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:396:32644":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:8319:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11973:26868":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:12359:334":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:5638:3256":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"8:0:2520":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:559:9781":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:8565:16812":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:8626:16816":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44900:3484":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"20:1665:21490":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"6:1514:10674":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6731:14533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:22717:3469":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:5379:16489":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:22586:9025":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"20:2995:34144":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"2:44973:29134":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:986:2904":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:12381:1429":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13015:16882":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:485:9772":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7075:16763":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:935:2914":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:915:2894":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14356:20414":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:6521:14513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:8669:16818":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:14212:20404":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:32476:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:15400:21179":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5682:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:23212:28123":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:4496:8717":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:46144:3401":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:9781:16895":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12353:17143":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:6437:14507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:44892:3483":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:1008:2890":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:7478:2926":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13877:20384":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:21701:27910":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:12361:1734":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"18:507:33899":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:328:32637":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5676:13826":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:14402:20417":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:3301:2890":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:15463:21186":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13024:16926":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:6588:16734":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:13785:17100":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1914:2911":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:15616:21193":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9671:16869":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"15:0:2526":{"crate_id":15,"path":["addr2line"],"kind":"module"},"11:1884:2892":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:15456:21185":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:40945:8951":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:46546:3362":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:3486:3080":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5570:13815":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:4796:8729":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:7548:14954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:6700:14529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:40054:8779":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:3090:30026":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2930:3041":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"21:374:21479":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"2:4722:8721":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:22200:3041":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:43173:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:3267:8995":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:14463:20421":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:7747:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5241:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:3575:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:131:3243":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"17:12530:17157":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:991:2915":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"15:394:15743":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:44851:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:3300:27351":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6822:16745":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:4152:15837":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:7604:14958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14386:20416":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:1140:15696":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"20:1689:23007":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"2:32362:28993":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:7463:14949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9737:16867":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:7030:16760":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"20:3502:21459":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"1:9315:26790":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:15473:21187":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:4564:3055":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:5146:3055":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4947:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:40691:2987":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:10171:8561":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:1961:3055":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:10905:16915":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10534:33873":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12328:17107":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:16050:19871":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:11567:17037":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:46275:3428":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2495:3027":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:42059:28538":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:4874:2846":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"21:0:2662":{"crate_id":21,"path":["anstyle"],"kind":"module"},"6:1727:10694":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:7712:2990":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"9:390:15573":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:9235:3306":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:3443:2719":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9269:26786":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:44609:8671":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:46205:3361":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:14575:16882":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:1844:700":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:7354:27675":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"22:97:21520":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"1:5098:3210":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:12379:974":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:12952:8633":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:7539:14953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:42237:3229":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6790:31850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:33340:8996":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:718:21407":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:3321:21444":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"1:7397:24531":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:7060:8698":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:43980:8646":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9397:3055":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:11557:17036":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:44298:8647":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13046:16879":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:6544:14516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"15:306:15732":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:11725:26415":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6408:16729":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8526:3074":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:15383:21177":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:14489:20423":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"20:3291:21441":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"20:3905:34236":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"2:22452:3474":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:13814:20380":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4970:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:8014:15328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"21:279:21475":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"1:9361:21847":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:7736:8584":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6573:16733":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:8462:3102":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:5417:16504":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11075:16952":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:4184:15846":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6640:16735":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"5:5497:31597":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12238:17112":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"20:3230:34250":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"6:6659:14524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:3870:2930":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:7391:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:45899:3353":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:43619:9136":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:44558:8669":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:5844:3298":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:2620:15791":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13738:20377":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4875:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"21:173:34346":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"1:8186:3034":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5533:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"20:3268:196":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"20:3787:2863":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"16:5348:16481":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:43387:28862":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:14599:20430":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:5972:3055":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:9162:3307":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12189:17138":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11949:15740":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:23223:28141":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:6509:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11018:21823":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"20:3791:21498":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"17:12851:16919":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:21749:3041":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:10638:26864":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:6443:14508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:12373:892":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:41352:28645":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:8784:29172":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:15992:21366":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:39040:9010":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:2483:3021":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6493:14471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:11392:8618":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:14587:20429":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:659:21410":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8489:3040":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13211:19868":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:41381:3103":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:21718:27915":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:10929:21703":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12768:16874":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"23:359:21533":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:2467:3016":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11493:16994":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11189:16948":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:0:308":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:6526:14514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13844:20382":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:9844:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:42133:3119":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:32474:8547":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"15:327:15736":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11790:21641":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:3587:15816":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:4997:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:10918:3030":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:42286:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:10852:27898":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"20:3580:21463":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"17:597:16894":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:43379:3047":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:2840:15801":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:1711:10693":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:7152:3338":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15356:21174":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11242:16970":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:3610:3037":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"11:2533:32653":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:473:9770":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:680:21412":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"24:26:21554":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"2:0:567":{"crate_id":2,"path":["core"],"kind":"module"},"6:7586:14957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:1632:10685":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:8373:2720":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:46036:3366":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:14016:2918":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:10218:21660":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:15376:21176":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:39771:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:5689:16707":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:5335:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:44034:3075":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:8740:2922":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5249:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5341:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:6282:26861":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2957:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:44333:8644":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:42767:3281":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2967:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"18:735:21408":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:21804:3342":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:818:3131":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:6680:16737":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:4404:15997":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13325:19874":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:43426:28769":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:42531:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:6461:3298":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:14189:20403":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:23088:3129":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:9220:3303":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"0:0:2405":{"crate_id":0,"path":["clap"],"kind":"module"},"2:47238:8523":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5603:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:3035:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:3248:8974":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:8519:3073":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:3452:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10284:16904":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:1589:10682":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:515:21420":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:14994:21135":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:39861:9013":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:7518:14952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:12360:1700":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:651:33899":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"25:0:2666":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"1:8616:3122":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:45952:3394":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14341:20413":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:6718:3295":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:9146:3264":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:12958:8629":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:3252:3333":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10218:16872":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:14325:20412":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13972:20389":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4981:3168":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:8000:16791":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:10396:8570":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:2003:2981":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"11:835:2900":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:12353:419":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"21:301:29172":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"1:3667:3039":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:3308:15814":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:3089:8541":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:15301:21169":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7223:16766":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5311:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8331:27510":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:1620:2896":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:11715:17042":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:8539:3071":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:21810:3346":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"7:32:15543":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"20:57:2683":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"16:6984:16757":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"9:236:3243":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:5282:16461":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:46357:28142":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"20:3968:21510":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"1:4927:3167":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:16249:21381":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:12322:26791":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:3432:8539":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:15023:21149":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:765:21409":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:12362:1824":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:13881:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:3693:8552":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:40892:28642":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:15289:21168":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:13750:8783":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:8282:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7350:33068":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:685:2891":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:10325:2961":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:2640:15792":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:44720:9168":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"20:3521:21449":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"2:32387:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:0:2523":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12543:17156":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:373:2856":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6904:16752":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:8641:3213":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6794:16743":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:11647:17039":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11026:16936":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:22584:28909":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:9103:3261":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:5004:3162":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"23:244:26547":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"16:6173:16720":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11166:16950":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:4267:15883":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:3436:3093":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"22:152:21523":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"17:4986:17167":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:23245:28135":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:7767:28646":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13399:19879":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:4772:3208":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11003:3257":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:4905:8732":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:531:21421":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:13146:17197":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:15655:21197":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:15426:21182":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:44202:8649":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:15778:21205":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:32386:2722":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:2203:16982":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"20:1374:21465":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"2:46613:3423":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:40472:8718":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:40993:8964":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:11998:8606":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:8590:3117":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12494:17114":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11773:17092":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:6337:16726":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:1974:2980":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:40814:2942":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:1625:2909":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:1489:10670":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:4008:3125":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:3438:3094":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:6758:14536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"11:1158:2908":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:30772:8913":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11702:17041":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5301:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:903:33091":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"23:322:21536":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:12929:16923":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:43880:8597":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"21:127:34347":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"2:46243:3373":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12342:17109":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:2272:31662":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4890:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:1667:10688":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:6711:31597":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4792:13734":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:949:2898":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5217:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:3906:3123":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"20:3686:21492":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"17:11051:16962":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5375:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:7454:14948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:12306:21898":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:2551:32656":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:10439:16907":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6998:16758":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"14:214:15716":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:1564:15697":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:33880:8999":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"3:233:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:10137:16866":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:42492:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:7325:26858":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:8137:16798":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:10755:2840":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:21667:8774":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:670:21411":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14503:20424":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11877:17053":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:96:21394":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:3677:3066":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:6796:3290":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5471:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"20:3716:3089":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"20:3372:2834":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"16:5085:16425":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:5708:3257":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:2704:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:9328:16779":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:5305:3280":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:1675:10689":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:3414:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:2590:15790":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:500:26856":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11865:17097":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11128:16944":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:10955:21838":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"20:0:2398":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"2:3653:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6269:16724":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:11080:21478":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12150:17060":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:42865:8563":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:11350:3009":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:12278:17141":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14038:20394":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:6449:14509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:52:2685":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"6:5488:13807":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:8255:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:45916:3359":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:1613:2892":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:1220:31172":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:5088:13764":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12887:16921":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12201:17139":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13437:19882":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:40665:8753":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:11708:21891":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:3141:15813":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:2820:15800":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12213:17140":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10068:16880":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:3287:8551":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:15266:21165":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13235:19869":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:40513:28172":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:2037:675":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:6502:15752":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:43115:8560":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:46065:3421":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6652:14523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:22639:9025":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:9839:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8870:3248":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4896:13574":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:30508:3127":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:5541:8589":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:8585:16813":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:10720:33872":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:5165:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:10913:27786":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:1563:10679":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:3844:2894":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"2:44950:8538":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:22957:3128":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5641:13822":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"20:3938:34232":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"18:635:33910":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:8050:2870":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"22:30:3075":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"17:11853:17096":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:5085:8743":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:40836:8948":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:39881:8710":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:1236:30019":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8480:3036":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:491:9773":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22850:28549":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10044:16901":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:5450:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"26:21:2681":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"20:1663:21489":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"5:3724:2891":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:1880:2890":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12584:16913":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:11674:17040":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:41400:8941":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:14752:21137":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:9176:3304":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:589:29131":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:4167:31597":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12043:17057":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:6799:3291":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:4925:3166":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:513:16893":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:11280:8624":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:22670:3041":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:2684:15794":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:6881:31597":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:15635:21195":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13899:20385":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:12653:9155":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:9411:3293":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:11413:3008":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:14284:20409":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:44934:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:10837:26847":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"10:44:15682":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:12597:17162":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:2748:15797":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3935:2896":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:15582:21190":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:1888:2895":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5051:13761":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:1005:2905":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13455:19883":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:2301:2905":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:40936:8960":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5551:13813":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:9109:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:22572:3479":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:14560:20428":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:4303:26414":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3665:8714":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5295:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:15769:21204":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:7161:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:13064:16878":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:9154:2890":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:4807:3152":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:46176:3355":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"20:4214:2682":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"2:38406:9008":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:11719:26411":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:5942:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:44913:29239":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:10326:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:11092:26860":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8803:3245":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:15206:21161":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7259:16767":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11634:17009":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8645:3215":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:5230:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4325:3182":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:11035:3264":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:9274:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:44351:8645":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:10948:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:3342:2909":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:726:21415":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:13344:19875":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:15678:21198":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"25:88:2686":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"1:12376:1852":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:15957:21365":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:8199:15490":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4805:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:3841:3120":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:7969:16788":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:3957:21499":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"2:23730:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7542:33053":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"23:447:3243":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"2:10327:2982":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:23075:3130":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13412:19880":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:3698:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:42326:2890":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"20:3441:21460":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"1:9416:3294":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:4842:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:2704:15795":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:42342:2892":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10976:21896":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:11241:3044":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:16151:21373":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:12863:16920":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:16235:21380":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:15176:21158":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:9710:3033":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:7472:26419":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"20:4146:34245":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"2:11471:8622":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:44924:3481":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"20:3947:21509":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"2:23179:28155":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"5:1421:2908":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6302:16725":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:938:2896":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:1569:10680":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12362:17144":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"11:830:2897":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12422:17146":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:4137:2895":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:871:2890":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13424:19881":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14449:20420":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5127:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:4212:2891":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"22:0:2663":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"11:2420:2892":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"20:3189:113":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"2:22684:3470":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:4332:3055":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"7:0:1914":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:4786:8728":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8765:3243":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:5069:13763":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:14529:20426":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13986:20390":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:2400:2891":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12264:17110":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11324:17000":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"20:4035:21502":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"2:47174:8519":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12557:16952":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"23:497:21528":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"5:7487:2892":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:46226:3367":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:15:2639":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:8031:15329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:8320:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:0:1726":{"crate_id":1,"path":["std"],"kind":"module"},"17:15521:21188":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:23006:28033":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:8105:16797":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"9:500:15575":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"20:3448:21455":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"11:488:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:22227:3339":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6631:14521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:15249:21164":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12478:17149":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:5179:3174":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13774:17099":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:102:32650":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12433:16882":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"20:3475:21457":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"17:10350:16906":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:38351:9007":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"20:4005:34158":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"17:10997:16934":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:4852:8731":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:47119:8514":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:7070:8699":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:8022:2840":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:12372:911":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:3046:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:23026:28167":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"20:1182:21462":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"16:6368:16727":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:42334:2891":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:41975:28163":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:2366:15700":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:974:2902":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2660:15793":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:798:2895":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:12365:741":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"5:3347:31660":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:7653:2887":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:9407:3230":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:1900:2909":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2550:15788":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"22:125:21522":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"2:44156:8620":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:40845:8949":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"9:328:15628":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5420:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"20:4138:21484":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"1:9715:21747":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"20:3929:34230":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"1:7717:26804":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:42728:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4881:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"23:466:21529":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"16:7192:16765":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:623:33906":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:7789:33095":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:3264:17056":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:6419:14506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:2880:15803":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10818:16913":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12107:16912":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14246:20406":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:5602:3254":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:13924:3482":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"23:144:21542":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"1:8622:3181":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12969:16870":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:219:8559":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6411:14505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6781:16742":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:1539:10677":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:40585:8750":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:12327:2872":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:40702:9079":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1584:10681":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:4844:16345":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:41915:3114":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11621:17011":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:23157:28162":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:7527:2932":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:6959:29140":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:2140:9036":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:10715:3093":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:8008:15327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:41390:8940":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:3241:8972":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:7337:16770":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:6917:14570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:1561:2892":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:7770:8676":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:47315:8526":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:2559:32651":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11595:17038":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6625:33060":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:8228:2889":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:8273:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:1920:2683":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:39703:9011":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:1657:10687":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11605:17033":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:772:2893":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:16198:21377":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:13904:3485":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:10967:3036":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"22:5:3147":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"20:3887:34231":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"16:8483:16808":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:21751:3347":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6914:16753":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:944:2897":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12408:17136":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:379:2857":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:43993:8643":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:10382:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12454:17147":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"24:113:21553":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"6:5139:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:40968:8962":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:1530:2890":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:7036:8697":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:1622:2899":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13292:19872":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7578:16779":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:4643:8585":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:42093:3117":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"23:99:21541":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"1:4215:3155":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:12368:739":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"5:7559:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:592:2837":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:8556:3113":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:8302:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:3340:3095":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:12072:8603":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:6765:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:11915:17098":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:15058:21134":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:3313:31667":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:351:32646":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:6159:16719":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:6808:16744":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12300:17142":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:43919:8596":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:553:9780":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:403:16892":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13173:17198":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:3592:3038":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:11942:27518":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"18:643:33899":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:7487:14951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"20:3135:21469":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"16:5172:16443":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"23:181:3041":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"16:7168:15726":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5629:13820":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:14968:21145":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:4886:3190":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:3308:2910":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"24:89:21546":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"5:1895:2896":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:11694:21627":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:6037:2874":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:9308:27502":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:546:32975":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:7308:9822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3337:9003":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:16105:21370":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:6513:3487":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6953:16755":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11256:16971":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:15814:21207":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:44630:8673":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"20:4183:33978":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"17:13606:19894":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:9133:3263":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7990:16790":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:6691:14528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:7919:16784":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"20:3594:21466":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"5:3096:30017":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4937:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4990:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:16165:21374":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:22:823":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:672:2865":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8859:3247":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:2318:3012":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:5282:13782":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:3334:2911":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:21732:27921":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"24:96:21548":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:22712:3471":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:8528:16810":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10486:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:12516:17166":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:40673:8749":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:26130:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"7:79:15550":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:2262:2829":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:42081:3126":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:2900:15804":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:2931:8778":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"23:309:21535":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"6:7431:10798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"20:2980:34159":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"11:2228:15690":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:14147:20401":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"20:3068:2678":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"2:2044:8923":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:40787:3035":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:44837:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:8291:2721":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:15197:21160":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11497:16981":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:41366:3286":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:1690:10691":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:3917:34235":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"5:1642:2928":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:21676:27918":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:10638:3046":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:38296:9006":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:22797:28548":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:8028:16793":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:40757:3006":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:3597:17079":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:41947:3116":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"20:3307:21442":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"17:11574:15690":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"20:3989:21503":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"16:3987:15820":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"16:4902:16357":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6389:16728":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5649:16690":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12076:17054":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:10344:21748":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:44437:8664":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:40874:8955":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:41375:8939":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11367:16952":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:8169:3032":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:6953:8952":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:6183:3298":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:44326:8634":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:9442:3044":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:3559:3055":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:40958:8961":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2802:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:538:9778":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:4595:2845":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"21:341:21517":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"16:6064:16713":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:22239:27923":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:6867:3297":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:4923:3163":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11276:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:40977:8963":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12572:16912":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"28:69:21586":{"crate_id":28,"path":["strsim","GrowingHashmapChar"],"kind":"struct"},"6:517:9775":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"28:112:21593":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"6:545:9779":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"20:3638:21491":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"16:5742:16710":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:3834:15818":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11547:17035":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:9287:21842":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"20:3798:21511":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"17:13553:19890":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:44685:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:32369:8729":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:8546:16811":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:0:2665":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"6:4869:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:8043:32978":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11115:16945":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:8284:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6890:16751":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:957:2900":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:842:2901":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5593:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:11319:8613":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:7642:2886":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:8233:16804":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:6097:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:3110:15811":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:2175:17022":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:40729:3074":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:46883:3363":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:7703:8762":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:30766:8693":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:3092:30025":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:39699:2944":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"11:1064:15694":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11583:17008":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:43941:8617":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"22:110:21521":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"17:14025:20393":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:5851:3299":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"20:2775:2890":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"16:2772:15798":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:11188:2890":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:12380:1924":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:32309:3265":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:3927:2895":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:1089:2906":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11354:16985":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:3454:21456":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"1:8843:3246":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:1129:31597":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:3368:2912":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:7537:31653":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:42570:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10661:16910":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:40794:8595":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:5198:16446":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:1521:10675":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:44317:8635":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4333:3183":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:1616:2895":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:46973:3369":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:2349:2907":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:4957:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"13:229:32659":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:21928:3344":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13797:20379":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:4501:31626":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:7507:2895":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13509:19887":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:656:2863":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:2216:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:7554:16778":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11537:17001":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:7332:9651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:40686:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"20:3564:21461":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"6:5151:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:14436:20419":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:12767:8624":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:7577:14956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:15836:21209":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:2821:30039":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:11657:3243":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"2:11212:2891":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:5288:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"20:1375:2686":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"assoc_type"},"2:23278:28143":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:10954:16932":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:7595:2892":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:740:2899":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:11674:3268":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:1861:2951":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:43932:8614":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"20:3764:21481":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"2:44102:8652":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:2149:9035":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:8788:3244":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46679:27947":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:43627:8598":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:6480:14512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:16079:21368":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:6813:14540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:7316:10626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:698:21414":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:30734:2924":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7386:16773":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:21802:3041":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:15410:21180":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:9384:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44841:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11680:21630":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:2374:31467":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:47185:8520":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"9:480:15571":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"21:353:21478":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"1:3303:27346":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:3211:2848":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:32916:8994":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10399:3074":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5019:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2606:9026":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:11341:16986":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:0:2527":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5428:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:11853:3123":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:11357:8625":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:7990:3102":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:963:2901":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:4223:3157":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:14876:21142":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:298:21551":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"16:8267:16805":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:4442:29062":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"20:3150:21470":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"1:9389:3285":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:11841:17095":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"23:480:21527":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"17:12659:17154":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:3396:8553":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:12443:17137":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:43951:8615":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:46596:3374":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41359:8937":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"14:165:15708":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"14:0:2525":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4984:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11812:17052":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:4564:8734":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11510:16980":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:3201:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:10612:16909":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:4914:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5670:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6534:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"28:87:21587":{"crate_id":28,"path":["strsim","HybridGrowingHashmapChar"],"kind":"struct"},"5:4372:2890":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:8612:16815":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:4956:16365":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"20:3240:34248":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"17:3473:17061":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:1500:10672":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:15078:16951":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:1601:15699":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:5727:16709":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:10889:3214":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"11:2148:2907":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:44084:8653":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12388:17135":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:11898:17073":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:953:2899":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:7234:31647":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:12967:8631":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:45884:3393":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"23:432:34410":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"1:4354:3185":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:22918:28843":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:6672:14526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"20:3120:21440":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"5:2591:30014":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11142:16912":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"23:288:21538":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"17:10759:16912":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:2530:15787":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9886:16897":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"20:3263:34171":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"1:8179:3030":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:46374:28121":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12371:16923":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:16093:21369":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13674:20375":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:40570:2861":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:39753:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:5319:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:10754:9119":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:5205:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:44709:3337":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:6256:32780":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:9341:21845":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:4161:3151":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11405:16983":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:5289:27498":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:7350:14945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:5144:16438":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8471:3104":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4921:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"20:4158:8957":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"2:43160:28138":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:15931:19867":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:8014:16792":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"20:4101:33933":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:46708:28181":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:14868:21141":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:41152:8966":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:675:2866":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"23:337:21537":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:47139:8516":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:7879:27532":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13568:19891":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:2415:15753":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:15092:21151":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:15190:21159":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"20:4152:33976":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"16:8121:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7807:33124":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"23:486:34417":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:2765:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:1633:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:8151:16799":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:8179:16801":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:15760:21203":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"14:40:19869":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:41007:8965":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:6532:3488":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:5381:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:2719:26847":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:15333:21172":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:9858:16896":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14912:21143":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:12690:9157":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11419:16912":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"20:3527:21452":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"6:5044:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:3649:2982":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"20:4123:21485":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:39716:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2074:1367":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11153:16913":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"25:23:15611":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:13610:8785":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:6440:16731":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11042:16937":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:47200:8521":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:46928:3397":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5477:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"20:4066:34237":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"2:47102:3430":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:708:2898":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:10595:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:5255:16457":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:758:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12621:17160":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:8330:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:7731:3228":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:6964:21529":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:7361:14946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:3282:8550":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:6150:9368":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6843:16747":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5025:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:44961:8536":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:4561:3179":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:46463:3402":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6738:33111":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:46434:3396":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8241:27347":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:3087:2985":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"5:7209:31630":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:44256:8651":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4964:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:3048:15810":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:44829:28174":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:47223:8522":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:43395:3049":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:6358:3485":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:3638:9012":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:15281:21167":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:10712:3097":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:2951:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:6837:16746":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:41142:3073":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:1098:16949":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:5113:16430":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:13633:8958":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:5366:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:1530:10676":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9916:16898":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:8551:3121":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:14414:20418":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:15701:21199":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:15624:21194":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"10:36:32626":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:532:9777":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:2168:2930":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:15368:21175":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3342:3096":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:42197:2892":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:2570:15789":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:15418:21181":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:30787:8560":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:3711:2890":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6823:14541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:8209:16802":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:46575:3368":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:44466:8666":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:33746:8998":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:42172:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"14:220:15717":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:42189:2891":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"11:785:2894":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6381:14443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:4060:2892":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"11:671:2890":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:14012:20392":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:9320:26779":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:7044:16761":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:698:2892":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14298:20410":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:42414:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:6028:16711":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:564:9782":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:11513:8621":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:43840:8608":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:573:33899":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1551:10678":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:12338:21818":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:23190:28122":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:5258:27498":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7159:16764":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:4302:3055":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:9280:2834":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:21720:27913":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:42375:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:5837:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:44483:8667":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8208:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:11930:8532":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:45984:3406":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:15646:21196":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13766:17101":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:1085:32630":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:16121:21371":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:2990:15808":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:7999:2841":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:6374:26854":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:32376:9069":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:2010:791":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:13723:20376":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5412:1252":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:6764:8969":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6123:16717":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"20:3896:34234":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"1:2315:3011":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:43198:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:4341:3184":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:5060:16423":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10828:33865":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"24:252:2686":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"17:14235:20405":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:680:2867":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"9:445:15572":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:16259:19878":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"18:113:21395":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:5395:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:44834:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:5588:3253":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:6111:16716":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:46501:3356":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:7702:8761":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"19:0:1300":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:14177:20402":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:10643:3048":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:2604:9025":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"6:7368:3215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:891:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:2076:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:7724:2991":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:14131:20400":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"13:0:2518":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:9732:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:13116:17196":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:40624:8751":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:5992:3224":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:2796:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"22:28:3041":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"2:21822:3343":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:43831:8609":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:12483:9109":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:1107:2908":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12251:17111":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:12467:9107":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:908:33088":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:9460:3332":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11214:16943":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:9518:8629":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:434:32631":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:44238:8650":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:9401:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:34025:9000":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:22558:3041":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:39831:2880":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:4211:3154":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11443:16989":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:4:1265":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:10185:16871":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12089:17055":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:15138:21155":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:4531:3055":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:3199:8548":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:7983:3041":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:39731:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:12485:17150":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:894:2892":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:1597:10683":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1507:10673":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:563:21423":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:259:21474":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"1:10709:3095":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:9807:16881":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:1684:10690":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:43132:28137":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:39868:8702":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:2440:2895":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:41408:8943":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4829:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7838:16781":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:5112:3211":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:8165:16800":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5224:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:4766:16313":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:1831:8891":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:5117:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:4139:3149":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:4103:3148":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"20:3835:21506":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"2:8746:8944":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:2337:8556":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"11:854:2902":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:1637:2911":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:613:33897":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:2234:17007":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:2467:15784":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:2469:3017":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:15102:21152":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:42153:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:8058:16794":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:2860:15802":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:33612:3334":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:6876:14568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5357:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:10573:33885":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:2380:2890":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:581:8774":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:8353:15527":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:5089:3209":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:5805:8697":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:40502:8755":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:44416:8663":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:15010:21148":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14051:20395":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12225:17113":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:6682:3287":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:481:21418":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:36420:9005":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8064:2871":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12464:17148":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:14079:20397":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:40767:3005":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:6876:16750":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:10317:16905":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"14:187:15715":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:12912:3007":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2954:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:46080:3427":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:1609:2890":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:31145:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:7986:9729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6713:16739":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:41166:8967":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:11485:8620":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12683:17159":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"23:61:21548":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"1:11204:3263":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:14271:20408":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4929:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5441:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13946:20387":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:4153:3150":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:754:21416":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7907:16783":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6599:14518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:42689:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:4487:3187":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:1580:15698":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:16176:21375":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"9:53:15591":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:5757:33077":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8667:3165":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"20:3877:34233":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"17:10155:16709":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5107:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8222:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:8343:15526":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:2450:15783":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:3449:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:42609:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:2707:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:6507:14472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7567:30079":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:1256:31160":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5349:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:8267:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:42886:8572":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10877:16914":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"21:182:21472":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"17:13855:20383":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6708:14530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:6770:14538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:45867:3388":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:2963:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:8004:2843":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:14260:20407":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:0:2528":{"crate_id":17,"path":["object"],"kind":"module"},"17:16269:19880":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:3393:3097":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:13698:29443":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:22625:3480":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:3032:21749":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:10346:27515":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:44138:8622":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:16032:19870":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:11392:16984":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:46123:3395":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"9:422:15574":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:896:33094":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"23:373:21534":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"20:3602:28044":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"2:47081:3409":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6902:14569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:4477:8546":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:43780:28650":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:42206:3228":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7938:16785":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:46729:3357":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:8853:2890":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11063:16956":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:12371:905":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12949:16924":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"20:3823:21500":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"5:7495:2916":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:9120:3262":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:5776:3258":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"11:873:2903":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:22358:3041":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:3206:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:2506:15786":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:8598:16814":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:34544:9004":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:3855:2929":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:14855:21140":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13387:19878":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:40854:8954":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"20:61:2687":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"1:8249:3087":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:1625:10684":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:3258:34241":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"5:6129:3280":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13485:19885":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:2724:15796":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:40578:8644":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:32445:8975":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:303:2724":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:12374:1864":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:47128:8515":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5494:13808":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:13272:19871":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12707:16916":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"23:402:21539":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"12:0:2524":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5271:13781":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:9256:3284":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:43144:28044":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:4821:24932":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:11237:3075":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:6777:14539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6623:14520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:21930:3343":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"20:3867:21507":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"5:2154:2929":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:7684:2989":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:2142:9037":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"5:7668:2847":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:623:2859":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:23099:3144":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5265:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:3460:2896":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:521:21417":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"23:0:2664":{"crate_id":23,"path":["anstream"],"kind":"module"},"24:285:21550":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"6:465:9769":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5709:16708":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:11874:3125":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:23120:3041":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:12824:16918":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:4430:29063":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:42648:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:47159:8518":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4694:3191":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:2435:15782":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"26:40:21562":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"16:7980:16789":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:32351:24965":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:16223:21379":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"11:364:32648":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7471:16777":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:23168:28147":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"20:3551:21453":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"16:6608:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14933:21144":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:4120:15828":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:22205:3349":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:46484:3408":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6666:14525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:44020:3074":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6942:16754":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"20:3854:21508":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"1:11956:15740":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:1545:2891":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:980:2903":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:21687:27918":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:12973:8630":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:1407:2906":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12900:16922":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:2301:31498":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"10:0:2522":{"crate_id":10,"path":["adler"],"kind":"module"},"17:15390:21178":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:10603:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:3427:2925":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:47060:3375":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8085:2970":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12671:17190":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:32385:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:22496:3475":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:5449:16513":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8597:3188":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:12382:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:8717:3242":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:12375:1846":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:12318:16924":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:6678:3286":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10251:16903":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:821:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:0:1010":{"crate_id":6,"path":["libc"],"kind":"module"},"2:38461:9009":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:8070:2969":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:10390:8572":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:42351:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"23:416:21540":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"2:42879:8571":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:3395:3098":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:902:2893":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:5541:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11102:16946":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:14066:20396":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"11:1907:2910":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:7760:8675":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:46019:3360":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:9406:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:809:2896":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:15822:21208":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13959:20388":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4167:3152":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:45969:3400":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:2726:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:5278:28196":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:928:2895":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4976:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:8271:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"20:2956:2676":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"1:7984:2858":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:3820:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:44620:8672":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"9:176:15677":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:11668:26760":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:5318:16474":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5387:13796":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:41017:8953":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:4717:8720":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:40739:2992":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:5168:3219":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:46161:3407":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:44643:8654":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:6042:16712":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:23267:28047":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:3257:3335":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4817:24928":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:13832:20381":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:7358:16771":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:4816:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:6853:3296":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:7845:8694":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10671:33864":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:44010:8639":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6852:16748":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12399:17145":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:40864:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10769:33884":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:22903:28136":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:34371:9002":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:43961:8616":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"26:0:2667":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:43434:28770":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:309:21476":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"20:3377:21445":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"17:12127:17062":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4201:3153":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6882:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:9170:2892":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"28:34:21576":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"2:4454:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:12356:1886":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:46258:3422":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:13089:17195":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:2950:15806":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6723:14532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:14091:20398":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13187:19867":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:578:9784":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:8298:16806":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"20:3250:34239":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:6199:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:33128:8993":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:8711:16819":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13753:20378":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:46094:3341":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:6421:16730":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:15168:21157":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"9:355:15588":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:8290:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:5447:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:43859:8610":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:12378:1840":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:5007:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1075:2905":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:8296:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:42247:2873":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12792:16876":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:47276:8525":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"20:34:2686":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"2:46389:3390":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:3455:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:7416:16774":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13252:19870":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:42248:3231":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:2354:31719":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7212:15725":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:732:31158":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:8503:16809":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:10388:8571":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:0:2529":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:40906:8958":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:5405:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:43869:8611":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:15445:21184":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:44052:8618":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:3126:15812":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12695:17158":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:3658:26547":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5057:13762":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8196:3031":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:7883:16782":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12724:16917":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:44531:8668":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"20:4049:21501":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"16:6866:16749":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:9424:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:13999:20391":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:5257:437":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:7818:8935":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"20:755:34242":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"2:2760:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:10384:8564":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:15434:21183":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:40883:8956":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:8428:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:3889:15819":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11688:17006":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:288:31597":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:11743:17044":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:47031:3424":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7521:32740":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:14111:20399":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:47002:3403":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:43849:8612":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:8066:16795":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:7401:32775":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:2920:15805":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10710:16911":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6731:16740":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:14311:20411":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:22360:3345":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"23:114:3080":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"9:0:2521":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:46634:28160":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:6067:3055":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13538:19889":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:42278:2849":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:13188:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"20:3776:21482":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"1:5622:3255":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:3441:15815":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:11016:16935":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:46290:3429":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:6256:8950":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:44342:2861":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6611:14519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:45852:3352":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:5482:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7959:16787":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:12366:744":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"28:130:21595":{"crate_id":28,"path":["strsim","GrowingHashmapMapElemChar"],"kind":"struct"},"2:33813:8997":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:689:21413":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:570:9783":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:3014:15809":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:12369:917":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:10503:21738":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:10031:28864":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:4819:24930":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:43219:8562":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12175:17126":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:523:9776":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:21918:3041":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:256:33091":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11089:16947":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"20:3626:21446":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"1:12377:1858":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2590:676":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:22982:28183":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13594:19893":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:21703:27916":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:1601:2897":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:10392:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:8238:8945":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:8096:16796":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"20:3102:2679":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"6:5520:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:12141:24533":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11227:16942":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:12713:9154":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:39619:8713":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:7517:2917":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6098:16715":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:5545:8590":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:2705:3086":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:123:32654":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:14545:20427":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:881:2904":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:4821:17161":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:2780:3088":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:7058:16762":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:14372:20415":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:5224:16449":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:3903:3124":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4883:3212":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:11524:17034":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:45837:3387":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11799:17094":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:479:9771":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"20:4075:34093":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"14:31:15707":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:22934:28175":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:23256:28124":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:43404:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6239:16723":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:14475:20422":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:10820:29859":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:8257:2929":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:4810:16334":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:1611:2898":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12647:17155":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:6462:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:49:2684":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"16:2796:15799":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:12355:475":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:9703:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:7551:2892":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:3065:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:15799:21206":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"14:160:15707":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10170:16710":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:2966:15807":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5334:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:5965:3283":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:7448:14947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44859:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"21:329:21477":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"17:11313:16974":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"11:2121:2905":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:8320:16807":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:7697:9079":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15214:21162":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:11258:21770":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:11661:17010":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:39791:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:46336:28113":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:44288:3071":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:3484:2945":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:538:21422":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:4694:16264":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:13593:29230":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:8249:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:6473:14511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13375:19877":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:10026:29168":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:6665:2895":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:432:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:47253:8524":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:30798:28112":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:2037:16988":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:608:33916":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"28:0:2669":{"crate_id":28,"path":["strsim"],"kind":"module"},"6:7341:14944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:3286:2834":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"17:15039:21150":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:7563:14955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:795:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6749:16741":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:45998:3354":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6740:14534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"20:3460:21451":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"16:7765:16780":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7495:33032":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:15944:19868":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:8700:3223":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:39655:8554":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:16187:21376":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:9755:16865":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:39811:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10982:16933":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:2323:2906":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:11503:26851":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5507:13809":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"20:3395:2677":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"1:8532:3075":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:23041:28037":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:2566:2886":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:1631:2910":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:7414:10800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5648:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:11031:3041":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:15596:21191":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11191:3262":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:1643:10686":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:1893:2896":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15273:21166":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:9545:2683":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:4713:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:11499:8623":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:32444:2723":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:44661:8655":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:11306:21854":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:5635:13821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:44452:8665":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:6012:2895":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:15116:21153":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:14516:20425":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:1897:2961":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:8234:8946":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:16069:21367":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:8509:3072":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:42115:3118":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6462:16732":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:13026:8657":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:11041:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:568:2835":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"11:1920:2912":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12808:16877":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:8174:3033":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:1922:2967":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:3695:15817":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:6792:2892":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:4929:16361":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:6205:16722":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7716:33090":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:497:9774":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"20:4200:3253":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"11:430:32643":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:40:2946":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:23234:28169":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"11:1674:32627":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:3529:3103":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5658:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:1494:10671":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:2179:2931":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:13308:19873":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15720:21200":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6680:14527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:8737:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7424:16775":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:895:2913":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46806:3391":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:0:2519":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:1791:31597":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:3297:22589":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:4354:3055":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:2073:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:884:2891":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:7587:2892":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:4241:15880":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:6970:16756":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:11813:3124":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:43181:8560":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:11215:21907":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:4109:3147":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:14723:21136":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:527:2829":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:15324:21171":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:7924:26870":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5196:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:42269:9092":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:42181:2890":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:7829:2896":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"20:3587:21447":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"1:5958:3282":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:1098:2907":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5325:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:3272:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:12354:1183":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:23068:29145":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:586:9785":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8341:3089":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:1392:2907":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:13961:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"20:3483:21458":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"1:12367:760":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:8636:16817":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11269:16972":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:15342:21173":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11730:17043":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:40924:8968":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"20:65:2688":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"3:0:509":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8602:3189":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:8723:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10887:33878":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:14977:21146":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:14788:21138":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:8223:16803":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:40658:8752":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:10377:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:22534:3476":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:5255:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12289:17106":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:43906:8595":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:1207:16957":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:1642:2912":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:261:33088":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:3100:30038":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:6924:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10092:16902":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:299:32639":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:8545:3122":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8336:26803":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:7949:16786":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13363:19876":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:437:15755":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:12358:1323":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:10412:3267":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:31172:8774":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"21:209:21473":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"2:43105:28045":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:11098:26850":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"11:2545:32642":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:1376:2905":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10915:33880":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:15151:21156":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:1703:10692":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:6255:3055":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:3730:8555":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"11:1725:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:491:33913":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4902:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:43416:3243":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:9938:16899":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6716:14531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:786:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:1859:2950":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:6572:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:1049:2907":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"20:936:21443":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"20:3534:21450":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"16:7016:16759":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:14986:21147":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:22968:28527":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:4087:34160":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"1:10595:3261":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:5186:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:14847:21139":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:7282:16768":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:2137:2906":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:6564:14517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7372:16772":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:44595:8670":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8233:2888":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:4983:16369":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:2486:15785":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:190:15611":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"17:11825:17074":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12993:16925":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:2322:3013":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:5316:3105":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:15222:21163":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:10938:3034":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:5036:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2741:3077":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:16138:21372":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:13497:19886":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6144:16718":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:12499:8637":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:5002:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"27:0:2668":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"2:3648:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:4873:16351":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:1493:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6188:16721":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:2635:3085":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:12729:9156":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:13725:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:5462:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:11430:8619":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:44667:9167":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"13:110:32667":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:9984:16900":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:45931:3389":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6084:16714":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:4843:8730":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:1481:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:16212:21378":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:8308:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10345:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:3659:8715":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:7869:16894":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10524:16908":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:32355:16818":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:12056:17058":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:44184:8648":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"14:7:15707":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:10908:21705":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:46307:28161":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:33679:3336":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:2466:2896":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:4672:3190":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:12031:8607":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:15569:21189":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:15748:21202":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:9193:3302":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:41931:3115":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:598:33909":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:1696:3175":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"28:120:21594":{"crate_id":28,"path":["strsim","RowId"],"kind":"struct"},"20:4233:2681":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"2:5358:985":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11755:17045":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:44004:8640":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:47148:8517":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"20:3807:2680":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"17:10018:16873":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6658:16736":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:9205:3305":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:155:15758":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:42453:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"20:2797:2891":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"20:3354:21439":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"17:15608:21192":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:40541:8756":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:10386:8563":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6696:16738":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"25:53:3243":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"2:12978:8628":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:10419:16868":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2960:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:40551:8757":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:1105:15695":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"20:1711:137":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"2:7597:8947":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:2541:2536":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:15313:21170":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:15126:21154":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:10394:8569":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:41893:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13473:19884":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:22990:28116":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:8050:3275":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13922:20386":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12508:17151":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:44308:8636":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:42872:8564":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}